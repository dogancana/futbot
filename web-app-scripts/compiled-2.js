function UTConfigurationDAO(e) {
  UTObject.call(this),
    utils.Debug.Assert(
      utils.JS.isValid(e) && e.conforms(interfaces.AuthDelegate),
      'Expected an object conforming to the AuthDelegate interface.'
    ),
    (this._authDelegate = e),
    Object.defineProperty(this, '_authDelegate', {
      writable: !1,
      enumerable: !1
    });
}

function UTCampaignEntryUpdateDTO(e, t, i, s, n, o) {
  UTObject.call(this),
    (this.categoryId = e),
    Object.defineProperty(this, 'categoryId', {
      writable: !1,
      enumerable: !0
    }),
    (this.groupId = t),
    Object.defineProperty(this, 'groupId', {
      writable: !1,
      enumerable: !0
    }),
    (this.objectiveId = i),
    Object.defineProperty(this, 'objectiveId', {
      writable: !1,
      enumerable: !0
    }),
    (this.groupState = s),
    Object.defineProperty(this, 'groupState', {
      writable: !1,
      enumerable: !0
    }),
    (this.objectiveState = n),
    Object.defineProperty(this, 'objectiveState', {
      writable: !1,
      enumerable: !0
    }),
    (this.objectiveProgress = o),
    Object.defineProperty(this, 'objectiveProgress', {
      writable: !1,
      enumerable: !0
    });
}

function UTMessagesDAO(e) {
  UTObject.call(this),
    utils.Debug.Assert(
      utils.JS.isValid(e) && e.conforms(interfaces.AuthDelegate),
      'Expected an object conforming to the AuthDelegate interface.'
    ),
    (this._authDelegate = e),
    Object.defineProperty(this, '_authDelegate', {
      writable: !1,
      enumerable: !1
    });
}

function UTCampaignEntity(e) {
  UTObject.call(this),
    (this.title = e.title || ''),
    Object.defineProperty(this, 'title', {
      writable: !1,
      enumerable: !0
    }),
    (this.startTime = e.startTime || 0),
    Object.defineProperty(this, 'startTime', {
      writable: !1,
      enumerable: !0
    }),
    (this.endTime = e.endTime || 0),
    Object.defineProperty(this, 'endTime', {
      writable: !1,
      enumerable: !0
    }),
    (this.serverCrtTime = e.serverCrtTime || 0),
    Object.defineProperty(this, 'serverCrtTime', {
      writable: !1,
      enumerable: !0
    }),
    (this.nextCampaignStartTime = e.nextCampaignStartTime || 0),
    Object.defineProperty(this, 'nextCampaignStartTime', {
      writable: !1,
      enumerable: !0
    }),
    (this.hasPreviousCampaign = e.hasPreviousCampaign || !1),
    Object.defineProperty(this, 'hasPreviousCampaign', {
      writable: !1,
      enumerable: !0
    }),
    (this.needsAutoClaim = e.needsAutoClaim || !1),
    Object.defineProperty(this, 'needsAutoClaim', {
      writable: !1,
      enumerable: !0
    }),
    (this.remainingRewards = e.remainingRewards || 0),
    Object.defineProperty(this, 'remainingRewards', {
      writable: !0,
      enumerable: !0
    }),
    (this.campaignBg = e.campaignBg || ''),
    Object.defineProperty(this, 'campaignBg', {
      writable: !1,
      enumerable: !0
    }),
    (this.campaignSquadBg = e.campaignSquadBg || ''),
    Object.defineProperty(this, 'campaignSquadBg', {
      writable: !1,
      enumerable: !0
    }),
    (this.campaignWidgetBg = e.campaignWidgetBg || ''),
    Object.defineProperty(this, 'campaignWidgetBg', {
      writable: !1,
      enumerable: !0
    }),
    (this.campaignWidgetIcon = e.campaignWidgetIcon || ''),
    Object.defineProperty(this, 'campaignWidgetIcon', {
      writable: !1,
      enumerable: !0
    }),
    (this.categoryIds = Array.isArray(e.categoriesList)
      ? e.categoriesList.map(function(e) {
          return e.categoryId;
        })
      : []),
    Object.defineProperty(this, 'categoryIds', {
      writable: !1,
      enumerable: !0
    }),
    (this.levels = new UTHashTable()),
    Object.defineProperty(this, 'levels', {
      writable: !1,
      enumerable: !0
    }),
    (this.xp = e.userXp),
    Object.defineProperty(this, 'xp', {
      writable: !0,
      enumerable: !0
    });
}

function UTCampaignCategoryEntity(e, t) {
  UTObject.call(this),
    (this.id = e.categoryId),
    Object.defineProperty(this, 'id', {
      writable: !1,
      enumerable: !0
    }),
    (this.priority = e.priority),
    Object.defineProperty(this, 'priority', {
      writable: !1,
      enumerable: !0
    }),
    (this.name = e.name),
    Object.defineProperty(this, 'name', {
      writable: !1,
      enumerable: !0
    }),
    (this.groups = new UTHashTable()),
    Object.defineProperty(this, 'groups', {
      writable: !1,
      enumerable: !0
    }),
    t.forEach(function(e) {
      this.groups.set(e.id, e);
    }, this);
}

function UTCampaignGroupEntity(e) {
  var i;
  UTObject.call(this),
    (this.id = e.groupId),
    Object.defineProperty(this, 'id', {
      writable: !1,
      enumerable: !0
    }),
    (this.priority = e.priority),
    Object.defineProperty(this, 'priority', {
      writable: !1,
      enumerable: !0
    }),
    (this.title = e.title),
    Object.defineProperty(this, 'title', {
      writable: !1,
      enumerable: !0
    }),
    (this.subtitle = e.subTitle),
    Object.defineProperty(this, 'subtitle', {
      writable: !1,
      enumerable: !0
    }),
    (this.state = e.groupState || enums.Objectives.GroupState.UNDEFINED_STATE),
    Object.defineProperty(this, 'state', {
      writable: !0,
      enumerable: !0
    }),
    Object.defineProperty(this, 'type', {
      get: function() {
        return i;
      },
      set: function(e) {
        var t;
        for (t in enums.Objectives.GroupType)
          if (
            enums.Objectives.GroupType.hasOwnProperty(t) &&
            enums.Objectives.GroupType[t] === e
          )
            return void (i = e);
        utils.Debug.Assert(
          !1,
          'UTCampaignGroupEntity::Unsupported Group Type.'
        );
      },
      enumerable: !0
    }),
    (this.type = e.groupType),
    (this.startTime = e.startTime),
    Object.defineProperty(this, 'startTime', {
      writable: !1,
      enumerable: !0
    }),
    (this.endTime = e.endTime),
    Object.defineProperty(this, 'endTime', {
      writable: !1,
      enumerable: !0
    }),
    (this.visibilityTime = e.visibilityTime),
    Object.defineProperty(this, 'visibilityTime', {
      writable: !1,
      enumerable: !0
    }),
    (this.objectivesNumber = e.objectivesNumber || 0),
    Object.defineProperty(this, 'objectivesNumber', {
      writable: !1,
      enumerable: !0
    }),
    (this.objectivesCompleted = e.objectivesCompleted),
    Object.defineProperty(this, 'objectivesCompleted', {
      writable: !1,
      enumerable: !0
    }),
    (this.groupIdsToUnlock = e.groupIdsToUnlock || []),
    Object.defineProperty(this, 'groupIdsToUnlock', {
      writable: !1,
      enumerable: !0
    }),
    (this.awards = utils.JS.valToArray(e.awardsList).map(function(e) {
      return new transferobjects.Reward(e);
    })),
    Object.defineProperty(this, 'awards', {
      writable: !1,
      enumerable: !0
    }),
    (this.objectives = new UTHashTable()),
    Object.defineProperty(this, 'objectives', {
      writable: !1,
      enumerable: !0
    }),
    (this._isLockedByGroups = !1),
    Object.defineProperty(this, '_isLockedByGroups', {
      writable: !0,
      enumerable: !0
    });
}

function UTCampaignObjectiveEntity(e, t, i) {
  var s;
  UTObject.call(this),
    (this.id = e.objectiveId),
    Object.defineProperty(this, 'id', {
      writable: !1,
      enumerable: !0
    }),
    (this.title = e.name),
    Object.defineProperty(this, 'title', {
      writable: !1,
      enumerable: !0
    }),
    (this.description = e.description),
    Object.defineProperty(this, 'description', {
      writable: !1,
      enumerable: !0
    }),
    (this.shortDescription = e.shortDescription),
    Object.defineProperty(this, 'shortDescription', {
      writable: !1,
      enumerable: !0
    }),
    (this.imageBase = e.imageBase),
    Object.defineProperty(this, 'imageBase', {
      writable: !1,
      enumerable: !0
    }),
    (this.gameArea = e.gameArea),
    Object.defineProperty(this, 'gameArea', {
      writable: !1,
      enumerable: !0
    }),
    Object.defineProperty(this, 'link', {
      get: function() {
        return s;
      },
      set: function(e) {
        var t;
        for (t in ((e = e.toLowerCase()), enums.GoToLink))
          if (enums.GoToLink.hasOwnProperty(t) && enums.GoToLink[t] === e)
            return void (s = e);
      }
    }),
    (this.link = e.takeMeThereLink.toLowerCase()),
    (this.isWeb = e.isWeb),
    Object.defineProperty(this, 'isWeb', {
      writable: !1,
      enumerable: !0
    }),
    (this.state = t),
    Object.defineProperty(this, 'state', {
      writable: !0,
      enumerable: !0
    }),
    (this.currentProgress = e.currentProgress || 0),
    Object.defineProperty(this, 'currentProgress', {
      writable: !0,
      enumerable: !0
    }),
    (this.multiplier = e.multiplier || 1),
    Object.defineProperty(this, 'multiplier', {
      writable: !1,
      enumerable: !0
    }),
    (this.awards = i),
    Object.defineProperty(this, 'awards', {
      writable: !1,
      enumerable: !0
    });
}

function UTCampaignLevelEntity(e, t) {
  UTObject.call(this),
    (this.id = e.levelId),
    Object.defineProperty(this, 'id', {
      writable: !1,
      enumerable: !0
    }),
    (this.xp = e.xpThreshold),
    Object.defineProperty(this, 'xp', {
      writable: !1,
      enumerable: !0
    }),
    (this.title = services.Localization.localize('scmp.campaign.level.title', [
      this.id
    ])),
    Object.defineProperty(this, 'title', {
      writable: !1,
      enumerable: !0
    }),
    (this.state = e.state || enums.Objectives.LevelState.UNDEFINED_STATE),
    Object.defineProperty(this, 'state', {
      writable: !0,
      enumerable: !0
    }),
    (this.chosenOption = utils.JS.isNumber(e.chosenOption)
      ? e.chosenOption
      : -1),
    Object.defineProperty(this, 'chosenOption', {
      writable: !1,
      enumerable: !0
    }),
    (this.rewardOptions = t),
    Object.defineProperty(this, 'rewardOptions', {
      writable: !1,
      enumerable: !0
    });
}

function UTCampaignLevelRewardsDTO(e) {
  UTObject.call(this),
    (this.id = e.optionId),
    Object.defineProperty(this, 'id', {
      writable: !1,
      enumerable: !0
    }),
    (this.awards = utils.JS.valToArray(e.awards).map(function(e) {
      return new transferobjects.Reward(e);
    })),
    Object.defineProperty(this, 'awards', {
      writable: !1,
      enumerable: !0
    }),
    (this.defaultOption = e.defaultOption || !1),
    Object.defineProperty(this, 'defaultOption', {
      writable: !1,
      enumerable: !0
    }),
    (this.hiddenReward = e.hiddenReward || !1),
    Object.defineProperty(this, 'hiddenReward', {
      writable: !1,
      enumerable: !0
    });
}

function UTCampaignObjectiveRewardDTO(e) {
  transferobjects.Reward.call(this, e),
    (this.setId = e.setId),
    Object.defineProperty(this, 'setId', {
      writable: !1,
      enumerable: !0
    }),
    (this.assetId = e.assetId),
    Object.defineProperty(this, 'assetId', {
      writable: !1,
      enumerable: !0
    });
}

function UTObjectivesFactory() {
  UTObject.call(this);
}

function UTObjectivesDAO(e) {
  UTObject.call(this),
    utils.Debug.Assert(
      utils.JS.isValid(e) && e.conforms(interfaces.AuthDelegate),
      'Expected an object conforming to the AuthDelegate interface.'
    ),
    (this._authDelegate = e),
    Object.defineProperty(this, '_authDelegate', {
      writable: !1,
      enumerable: !1
    }),
    (this._factory = new UTObjectivesFactory()),
    Object.defineProperty(this, '_factory', {
      enumerable: !1,
      writable: !1
    });
}

function UTSBCFactory() {
  UTObject.call(this);
}

function UTSBCDAO(e) {
  UTObject.call(this),
    utils.Debug.Assert(
      utils.JS.isValid(e) && e.conforms(interfaces.AuthDelegate),
      'Expected an object conforming to the AuthDelegate interface.'
    ),
    (this._authDelegate = e),
    Object.defineProperty(this, '_authDelegate', {
      writable: !1,
      enumerable: !1
    }),
    (this._factory = new UTSBCFactory()),
    Object.defineProperty(this, '_factory', {
      enumerable: !1,
      writable: !1
    });
}

function UTChampionsEventEntity(e) {
  UTObject.call(this),
    (this.onDataUpdated = new UTObservable()),
    (this._id = e),
    Object.defineProperty(this, '_id', {
      writable: !1,
      enumerable: !1
    }),
    (this._startTime = 0),
    Object.defineProperty(this, '_startTime', {
      writable: !0,
      enumerable: !1
    }),
    (this._endTime = 0),
    Object.defineProperty(this, '_endTime', {
      writable: !0,
      enumerable: !1
    }),
    (this._state = 0),
    Object.defineProperty(this, '_state', {
      writable: !0,
      enumerable: !1
    }),
    (this._type = 0),
    Object.defineProperty(this, '_type', {
      writable: !0,
      enumerable: !1
    });
}

function UTChampionsEntityFactory() {
  UTObject.call(this);
}

function UTChampionsUnclaimedEventDTO(e) {
  UTObject.call(this),
    (this.id = e.championEventId),
    Object.defineProperty(this, 'id', {
      writable: !1,
      enumerable: !0
    }),
    (this.type = e.championEventType),
    Object.defineProperty(this, 'type', {
      writable: !1,
      enumerable: !0
    });
}

function UTConsolidatedRewardsDTO(e) {
  UTObject.call(this),
    (this.id = utils.JS.isNumber(e.id) ? e.id : e.categoryId || 0),
    Object.defineProperty(this, 'id', {
      writable: !1,
      enumerable: !0
    }),
    (this.awards = e.awards
      ? e.awards.map(function(e) {
          return new transferobjects.Reward(e);
        })
      : []);
}

function UTLeaderboardOptionDTO(e) {
  UTObject.call(this),
    (this.id = e.id),
    Object.defineProperty(this, 'id', {
      writable: !1
    }),
    (this.groupId = ''),
    (this.display = e.display),
    Object.defineProperty(this, 'display', {
      writable: !1
    });
}

function UTLeaderboardEntryDTO(e) {
  UTObject.call(this),
    (this.badge = e.badge),
    Object.defineProperty(this, 'badge', {
      writable: !1
    }),
    (this.category = e.category || ''),
    (this.clubName = e.clubName),
    Object.defineProperty(this, 'clubName', {
      writable: !1
    }),
    (this.est = e.est),
    Object.defineProperty(this, 'est', {
      writable: !1
    }),
    (this.persona = e.persona),
    Object.defineProperty(this, 'persona', {
      writable: !1
    }),
    (this.rank = e.rank),
    Object.defineProperty(this, 'rank', {
      writable: !1
    }),
    (this.score = e.score.value),
    Object.defineProperty(this, 'score', {
      writable: !1
    }),
    (this.teamId = e.teamId),
    Object.defineProperty(this, 'teamId', {
      writable: !1
    });
}

function UTLeaderboardPermutationDTO() {
  UTObject.call(this),
    (this.category = 'competitor'),
    (this.period = 'alltime'),
    (this.view = 'top100');
}

function UTLeaderboardEntryRepository() {
  UTHashTable.call(this, {}), (this._expiryTimestamps = new UTHashTable());
}

function UTLocaleVO(e, t, i, s, n) {
  (this.language = t.toLowerCase() || enums.Language.UNKNOWN),
    Object.defineProperty(this, 'language', {
      writable: !1,
      enumerable: !0
    }),
    (this.region = e.toUpperCase() || enums.Region.UNKNOWN),
    Object.defineProperty(this, 'region', {
      writable: !1,
      enumerable: !0
    }),
    (this.variant = i || enums.LanguageVariant.NONE),
    Object.defineProperty(this, 'variant', {
      writable: !1,
      enumerable: !0
    }),
    (this.name = s || ''),
    Object.defineProperty(this, 'name', {
      writable: !1,
      enumerable: !0
    }),
    (this.direction = n || 'ltr'),
    Object.defineProperty(this, 'direction', {
      writable: !1,
      enumerable: !0
    });
}

function UTLocaleFactory() {
  UTObject.call(this);
}

function UTLocalizationRepository() {
  UTHashTable.call(this, {});
}

function UTCareerEntryDTO(e) {
  UTObject.call(this),
    (this.startYear = e.s),
    Object.defineProperty(this, 'startYear', {
      writable: !1
    }),
    (this.endYear = e.e),
    Object.defineProperty(this, 'endYear', {
      writable: !1
    }),
    (this.teamId = e.t),
    Object.defineProperty(this, 'teamId', {
      writable: !1
    }),
    (this.matches = e.m),
    Object.defineProperty(this, 'matches', {
      writable: !1
    }),
    (this.goals = e.g),
    Object.defineProperty(this, 'goals', {
      writable: !1
    });
}

function UTLegendsBioDTO(e) {
  function extractCareer(e) {
    var i = [];
    return (
      e.forEach(function(e) {
        var t = new UTCareerEntryDTO(e);
        i.push(t);
      }),
      i
    );
  }
  UTObject.call(this),
    (this.clubCareer = utils.JS.isValid(e) ? extractCareer(e.c) : []),
    Object.defineProperty(this, 'clubCareer', {
      writable: !1
    }),
    (this.nationalCareer = utils.JS.isValid(e) ? extractCareer(e.n) : []),
    Object.defineProperty(this, 'nationalCareer', {
      writable: !1
    });
}

function UTConfigurationService(e) {
  UTObject.call(this),
    (this._serverSettings = repositories.ServerSettings),
    Object.defineProperty(this, '_serverSettings', {
      writable: !1,
      enumerable: !1
    }),
    (this._killswitchFeatures = [
      enums.ServerFeature.CHAMPIONS_ENABLED,
      enums.ServerFeature.CURRENCY_COINS_ENABLED,
      enums.ServerFeature.CURRENCY_POINTS_ENABLED,
      enums.ServerFeature.LEADERBOARDS_ENABLED,
      enums.ServerFeature.LIVE_MESSAGING_ENABLED,
      enums.ServerFeature.MTX_ENABLED,
      enums.ServerFeature.OBJECTIVES_ENABLED,
      enums.ServerFeature.PACK_ODDS_ENABLED,
      enums.ServerFeature.SBC_ENABLED,
      enums.ServerFeature.SQUAD_CONCEPT_LOYALTY_BONUS_ENABLED,
      enums.ServerFeature.STORE_ENABLED,
      enums.ServerFeature.TOTW_HISTORY_ENABLED,
      enums.ServerFeature.TRADING_ENABLED
    ]),
    Object.defineProperty(this, '_killswitchFeatures', {
      writable: !1,
      enumerable: !1
    }),
    (this._configurationDAO = e),
    Object.defineProperty(this, '_configurationDAO', {
      writable: !1,
      enumerable: !1
    });
}

function UTMessagesRepository() {
  UTObject.call(this),
    (this._dailyGift = null),
    Object.defineProperty(this, '_dailyGift', {
      writable: !0,
      enumerable: !0
    }),
    (this._cacheExpiration = {
      dailyGift: 0,
      liveMessages: 0
    }),
    Object.defineProperty(this, '_cacheExpiration', {
      writable: !1,
      enumerable: !0
    });
}

function UTMessagesService(e) {
  (this._repository = new UTMessagesRepository()),
    (this._messagesDAO = e),
    Object.defineProperty(this, '_messagesDAO', {
      writable: !1,
      enumerable: !1
    });
}

function UTObjectivesRepository() {
  UTObject.call(this),
    (this._categories = new UTHashTable()),
    Object.defineProperty(this, '_categories', {
      writable: !1,
      enumerable: !0
    }),
    (this._activeCampaign = null),
    Object.defineProperty(this, '_activeCampaign', {
      writable: !0,
      enumerable: !0
    }),
    (this._campaignCacheExpiration = 0),
    Object.defineProperty(this, '_campaignCacheExpiration', {
      writable: !0,
      enumerable: !0
    }),
    (this._objectivesCacheExpiration = 0),
    Object.defineProperty(this, '_objectivesCacheExpiration', {
      writable: !0,
      enumerable: !0
    });
}

function UTObjectivesService(e) {
  UTObject.call(this),
    (this._repository = new UTObjectivesRepository()),
    (this._updateGroupIds = []),
    (this._objectivesDAO = e),
    Object.defineProperty(this, '_objectivesDAO', {
      writable: !1,
      enumerable: !1
    });
}

function UTSBCRepository() {
  UTObject.call(this),
    (this.categories = new UTHashTable()),
    Object.defineProperty(this, 'categories', {
      writable: !1
    }),
    (this.sets = new UTHashTable()),
    Object.defineProperty(this, 'sets', {
      writable: !1
    }),
    (this._cacheExpiration = 0),
    Object.defineProperty(this, '_cacheExpiration', {
      writable: !0,
      enumerable: !0
    });
}

function UTSBCService(e) {
  UTObject.call(this),
    (this._repository = new UTSBCRepository()),
    (this._sbcDAO = e),
    Object.defineProperty(this, '_sbcDAO', {
      writable: !1,
      enumerable: !1
    });
}

function UTTOTWSquadRepository() {
  UTObject.call(this),
    (this._squadCollection = new UTIterator()),
    Object.defineProperty(this, '_squadCollection', {
      writable: !1,
      enumerable: !1
    }),
    (this._cacheTimestamp = 0),
    Object.defineProperty(this, '_cacheTimestamp', {
      writable: !0,
      enumerable: !1
    });
}

function UTSquadService(e) {
  UTObject.call(this),
    (this.unauthenticatedShowOffId = ''),
    (this._activeSquad = 0),
    (this._maxSquads = 15),
    (this._squadDAO = e),
    Object.defineProperty(this, '_squadDAO', {
      enumerable: !1,
      writable: !1
    }),
    (this._totwRepository = new UTTOTWSquadRepository()),
    Object.defineProperty(this, '_totwRepository', {
      enumerable: !1,
      writable: !1
    });
}

function UTStoreService(e) {
  (this._storeDAO = e),
    Object.defineProperty(this, '_storeDAO', {
      writable: !1,
      enumerable: !1
    });
}
NamespaceManager.Register('utils'),
  (utils.Debug = {}),
  (utils.Debug.Assert = function Assert(e, t) {}),
  (utils.Debug.StackTrace = function StackTrace() {}),
  (utils.Debug.Watch = function Watch(e, t) {}),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.ClubStat = function ClubStatDTO(e) {
    (this.type = e.type || enums.ClubItemType.BALLS),
      Object.defineProperty(this, 'type', {
        writable: !1
      }),
      (this.count = e.typeValue || 0),
      Object.defineProperty(this, 'count', {
        writable: !0
      });
  }),
  utils.JS.inherits(UTConfigurationDAO, UTObject),
  (UTConfigurationDAO.prototype.getLocalConfig = function getLocalConfig() {
    var i = new UTObservable(),
      e = new UTHttpRequest();
    return (
      e.setUrl('config/config.json'),
      e.observe(this, function _onGetLocalConfigComplete(e, t) {
        e.unobserve(this), i.notify(t);
      }),
      e.send(),
      i
    );
  }),
  (UTConfigurationDAO.prototype.getRemoteConfig = function getRemoteConfig() {
    var i = new UTObservable(),
      e = new UTHttpRequest();
    e.setUrl(
      gConfigurationModel.getConfigString(
        models.ConfigurationModel.KEY_RESOURCE_ROOT
      ) + utils.AssetLocator.getRemoteConfigFileURI()
    ),
      e.setCache(!1),
      e.observe(this, function _onGetRemoteConfigComplete(e, t) {
        e.unobserve(this), i.notify(t);
      }),
      e.send();
    var t = utils.JS.getStringEvent(1);
    return (
      Array.isArray(t) && 0 < t.length && NamesWin[t[0]][t[1]][t[2]](67108864),
      i
    );
  }),
  (UTConfigurationDAO.prototype.getLocalization = function getLocalization(e) {
    var i = new UTObservable(),
      t = new UTHttpRequest();
    if (e.isValid()) {
      var s = 'loc/' + e.toString() + '.json';
      (s +=
        '?_=' +
        gConfigurationModel.getConfigNumber(
          models.ConfigurationModel.KEY_ASSETS_VERSION
        )),
        t.setUrl(s),
        t.observe(this, function _onGetLocalizationComplete(e, t) {
          e.unobserve(this), i.notify(t);
        }),
        t.send();
    } else {
      var n = new transferobjects.FUTHttpResponse();
      (n.success = !1),
        (n.status = enums.HTTPStatusCode.NOT_FOUND),
        i.notify(n);
    }
    return i;
  }),
  (UTConfigurationDAO.prototype.getDynamicLocalization = function getDynamicLocalization() {
    var i = new UTObservable(),
      e = new UTHttpRequest();
    return (
      e.setUrl(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_RESOURCE_ROOT
        ) + utils.AssetLocator.getExtendedLocFileURI()
      ),
      e.setCache(!1),
      e.observe(this, function _onGetDynamicLocalizationComplete(e, t) {
        e.unobserve(this), i.notify(t);
      }),
      e.send(),
      i
    );
  }),
  (UTConfigurationDAO.prototype.getRarity = function getRarity(n) {
    var o = new UTObservable(),
      e = new UTHttpRequest();
    n = enums.Year.ASSET;
    var t =
      gConfigurationModel.getConfigString(
        models.ConfigurationModel.KEY_RESOURCE_ROOT
      ) + utils.AssetLocator.getRarityURI();
    return (
      e.setUrl(t),
      e.setCache(!1),
      e.observe(this, function _onGetRemoteRarityComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s =
            t.success &&
            utils.JS.isValid(t.response) &&
            Array.isArray(t.response.rarities);
        utils.JS.assignPropertyValues(t, i),
          (i.response = {
            year: n,
            rarities: s
              ? t.response.rarities.map(function(e) {
                  return new UTItemRarityDTO(e);
                })
              : []
          }),
          o.notify(i);
      }),
      e.send(),
      o
    );
  }),
  (UTConfigurationDAO.prototype.getStoreLocalization = function getStoreLocalization() {
    var i = new UTObservable(),
      e = new UTHttpRequest(),
      t = utils.AssetLocator.getStoreLocFileURI();
    return (
      e.setUrl(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_RESOURCE_ROOT
        ) + t
      ),
      e.observe(this, function _onGetStoreLocalizationComplete(e, t) {
        e.unobserve(this), i.notify(t);
      }),
      e.send(),
      i
    );
  }),
  (UTConfigurationDAO.prototype.getSettingsData = function getSettingsData() {
    var n = new UTObservable(),
      e = new UTUtasHttpRequest(this._authDelegate);
    return (
      e.setPath('/ut/game/' + GAME_NAME + '/settings'),
      e.observe(this, function _onGetSettingsComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s = [];
        utils.JS.assignPropertyValues(t, i),
          t.success &&
            t.response.configs &&
            Array.isArray(t.response.configs) &&
            (s = t.response.configs.slice()),
          (i.response = {
            settings: s
          }),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(e),
      n
    );
  }),
  (UTConfigurationDAO.prototype.getStaffStats = function getStaffStats() {
    var s = new UTObservable(),
      e = new UTUtasHttpRequest(this._authDelegate);
    return (
      e.setPath('/ut/game/' + GAME_NAME + '/club/stats/staff'),
      e.observe(this, function _onGetStaffStatsComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse();
        utils.JS.assignPropertyValues(t, i);
        var n = [0, 0, 0, 0, 0, 0],
          o = [0, 0, 0, 0, 0, 0],
          a = [0, 0, 0, 0, 0, 0, 0, 0, 0],
          r = 0;
        if (t.success) {
          var l = [
              'pace',
              'shooting',
              'passing',
              'dribbling',
              'defending',
              'heading'
            ],
            c = [
              'gkDiving',
              'gkHandling',
              'gkKicking',
              'gkReflexes',
              'gkOneOnOne',
              'gkPositioning'
            ],
            u = [
              'physioArm',
              'physioBack',
              'physioFoot',
              'physioHead',
              'physioHip',
              'physioLeg',
              'physioShoudler',
              'fitness',
              'managerTalk',
              'physioAll'
            ];
          t.response.bonus.forEach(function(e) {
            var t = l.indexOf(e.type),
              i = c.indexOf(e.type),
              s = u.indexOf(e.type);
            -1 !== t
              ? (n[t] = parseFloat(e.value) / 100)
              : -1 !== i
              ? (o[i] = parseFloat(e.value) / 100)
              : -1 !== s
              ? (a[s] = parseFloat(e.value) / 100)
              : 'contract' === e.type && (r = parseFloat(e.value) / 100);
          }, this);
        }
        (i.response = {
          contractBoost: r,
          gkAttribBoosts: o,
          healthAttribBoosts: a,
          playerAttribBoosts: n
        }),
          s.notify(i);
      }),
      services.UTUtasRequestQueue.send(e),
      s
    );
  }),
  (UTConfigurationDAO.prototype.getSquadData = function getSquadData() {
    var i = new UTObservable(),
      e = new UTHttpRequest();
    return (
      e.setUrl(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_RESOURCE_ROOT
        ) + utils.AssetLocator.getSquadDataURI()
      ),
      e.observe(this, function _onGetSquadDataComplete(e, t) {
        e.unobserve(this), i.notify(t);
      }),
      e.send(),
      i
    );
  }),
  (UTConfigurationDAO.prototype.getTeamConfig = function getTeamConfig() {
    var i = new UTObservable(),
      e = new UTHttpRequest();
    return (
      e.setUrl(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_RESOURCE_ROOT
        ) + utils.AssetLocator.getStaticTeamConfigURI()
      ),
      e.observe(this, function _onGetTeamConfigComplete(e, t) {
        e.unobserve(this), i.notify(t);
      }),
      e.send(),
      i
    );
  }),
  (UTConfigurationDAO.prototype.getStaticPlayerData = function getStaticPlayerData() {
    var i = new UTObservable(),
      e = new UTHttpRequest();
    return (
      e.setUrl(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_RESOURCE_ROOT
        ) + utils.AssetLocator.getPlayerSearchFileURI()
      ),
      e.observe(this, function _onGetStaticPlayerDataComplete(e, t) {
        e.unobserve(this), i.notify(t);
      }),
      e.send(),
      i
    );
  }),
  (UTConfigurationDAO.prototype.getPlayerMetaData = function getPlayerMetaData() {
    var i = new UTObservable(),
      e = new UTHttpRequest();
    return (
      e.setUrl(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_RESOURCE_ROOT
        ) + utils.AssetLocator.getPlayerMetaFileURI()
      ),
      e.observe(this, function _onGetPlayerMetaDataComplete(e, t) {
        e.unobserve(this), i.notify(t);
      }),
      e.send(),
      i
    );
  }),
  (UTConfigurationDAO.prototype.getPlayerIconData = function getPlayerIconData() {
    var i = new UTObservable(),
      e = new UTHttpRequest();
    return (
      e.setUrl(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_RESOURCE_ROOT
        ) + utils.AssetLocator.getPlayerIconFileURI()
      ),
      e.observe(this, function _onGetPlayerIconDataComplete(e, t) {
        e.unobserve(this), i.notify(t);
      }),
      e.send(),
      i
    );
  }),
  (UTConfigurationDAO.prototype.getMissingImagesData = function getMissingImagesData() {
    var i = new UTObservable(),
      e = new UTHttpRequest();
    return (
      e.setUrl(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_RESOURCE_ROOT
        ) + utils.AssetLocator.getStaticPlaceholderAssetConfigURI()
      ),
      e.observe(this, function _onGetMissingImagesDataComplete(e, t) {
        e.unobserve(this), i.notify(t);
      }),
      e.send(),
      i
    );
  }),
  utils.JS.inherits(UTCampaignEntryUpdateDTO, UTObject),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.ArubaTextField = function UTArubaTextFieldDTO(e, t) {
    (this.text = e || ''),
      Object.defineProperty(this, 'text', {
        writable: !1
      }),
      (this.colour = t || ''),
      Object.defineProperty(this, 'colour', {
        writable: !1
      });
  }),
  NamespaceManager.Register('entities'),
  (entities.ArubaMessage = function UTArubaMessage(e) {
    (this.id = e.messageId || -1),
      Object.defineProperty(this, 'id', {
        writable: !1
      }),
      (this.screen = e.screen || ''),
      Object.defineProperty(this, 'screen', {
        writable: !1
      }),
      (this.trackingTag = e.trackingTag || ''),
      Object.defineProperty(this, 'trackingTag', {
        writable: !1
      }),
      (this.priority = e.priority || -1),
      Object.defineProperty(this, 'priority', {
        writable: !1
      }),
      (this.goToLink = e.tmtLink ? e.tmtLink.toLowerCase() : ''),
      Object.defineProperty(this, 'goToLink', {
        writable: !1
      }),
      (this.durationInSec = e.displayTime || 5),
      Object.defineProperty(this, 'durationInSec', {
        writable: !1
      }),
      (this.countdowns = new UTHashTable()),
      Object.defineProperty(this, 'countdowns', {
        writable: !1
      });
    var t = '',
      i = '',
      s = '',
      n = '',
      o = '',
      a = '',
      r = '',
      l = '',
      c = '',
      u = '';
    utils.JS.valToArray(e.renders).forEach(function(e) {
      'TEXT' !== e.type || utils.JS.isEmpty(e.value)
        ? 'IMAGE' === e.type &&
          (e.name === enums.ArubaImageType.BODY
            ? (c = e.value || '')
            : e.name === enums.ArubaImageType.BACKGROUND && (u = e.value || ''))
        : (e.name === enums.ArubaTextFieldType.TITLE
            ? ((t = this._replaceKeys(e.value)),
              e.attributes &&
                e.attributes.colour &&
                (o = this._convertToHex(e.attributes.colour)))
            : e.name === enums.ArubaTextFieldType.BODY
            ? ((s = utils.TextUtils.nltobr(this._replaceKeys(e.value))),
              e.attributes &&
                e.attributes.colour &&
                (r = this._convertToHex(e.attributes.colour)))
            : e.name === enums.ArubaTextFieldType.SUBTITLE
            ? ((i = utils.TextUtils.nltobr(this._replaceKeys(e.value))),
              e.attributes &&
                e.attributes.colour &&
                (a = this._convertToHex(e.attributes.colour)))
            : e.name === enums.ArubaTextFieldType.INFO &&
              ((n = utils.TextUtils.nltobr(this._replaceKeys(e.value))),
              e.attributes &&
                e.attributes.colour &&
                (l = this._convertToHex(e.attributes.colour))),
          utils.JS.isValid(e.attributes) &&
            !utils.JS.isEmpty(e.attributes.countdownTime) &&
            -1 < e.value.indexOf(enums.ArubaStringKeys.COUNTDOWN) &&
            this.countdowns.set(
              e.name,
              this._retrieveCountdownTimestamp(e.attributes.countdownTime)
            ));
    }, this),
      (this.textFields = new UTHashTable()),
      Object.defineProperty(this, 'textFields', {
        writable: !1
      }),
      this.textFields.set(
        enums.ArubaTextFieldType.TITLE,
        new transferobjects.ArubaTextField(t, o)
      ),
      this.textFields.set(
        enums.ArubaTextFieldType.BODY,
        new transferobjects.ArubaTextField(s, r)
      ),
      utils.JS.isEmpty(i) ||
        this.textFields.set(
          enums.ArubaTextFieldType.SUBTITLE,
          new transferobjects.ArubaTextField(i, a)
        ),
      utils.JS.isEmpty(n) ||
        this.textFields.set(
          enums.ArubaTextFieldType.INFO,
          new transferobjects.ArubaTextField(n, l)
        ),
      (this.images = new UTHashTable()),
      Object.defineProperty(this, 'images', {
        writable: !1
      }),
      utils.JS.isEmpty(c) || this.images.set(enums.ArubaImageType.BODY, c),
      utils.JS.isEmpty(u) ||
        this.images.set(enums.ArubaImageType.BACKGROUND, u);
  }),
  (entities.ArubaMessage.prototype.hasCountdowns = function hasCountdowns(e) {
    return utils.JS.isEmpty(e)
      ? 0 < this.countdowns.length
      : this.countdowns.has(e);
  }),
  (entities.ArubaMessage.prototype._convertToHex = function _convertToHex(e) {
    return 0 === e.indexOf('#') && /^[0-9a-fA-F]+$/.test(e.slice(1, 7))
      ? e
      : '#' + utils.JS.baseToBase(10, 16, e);
  }),
  (entities.ArubaMessage.prototype._replaceKeys = function _replaceKeys(e) {
    var t = services.User.getUser(),
      i = t ? t.getSelectedPersona() : null,
      s = i ? i.getCurrentClub() : null,
      n = i ? i.name : '',
      o = s ? s.name : '';
    return e
      .split(enums.ArubaStringKeys.FUT_CLUB_NAME)
      .join(o)
      .split(enums.ArubaStringKeys.GAMERTAG)
      .join(n);
  }),
  (entities.ArubaMessage.prototype._retrieveCountdownTimestamp = function _retrieveCountdownTimestamp(
    e
  ) {
    if (!utils.JS.isEmpty(e)) {
      var t = e.substr(0, 4),
        i = parseInt(e.substr(4, 2), 10) - 1,
        s = e.substr(6, 2),
        n = e.substr(9, 2),
        o = e.substr(11, 2),
        a = e.substr(13, 2);
      return Math.round(new Date(t, i, s, n, o, a).getTime() / 1e3);
    }
  }),
  NamespaceManager.Register('entities'),
  (entities.DailyGift = function UTDailyGiftEntity(e) {
    (this.id = e.id),
      Object.defineProperty(this, 'id', {
        writable: !1
      }),
      (this.rewardType = e.rewardType),
      Object.defineProperty(this, 'rewardType', {
        writable: !1
      }),
      (this.rewardValue = e.rewardValue),
      Object.defineProperty(this, 'rewardValue', {
        writable: !1
      }),
      (this.isValid =
        !utils.JS.isEmpty(this.rewardType) && 0 < this.rewardValue),
      Object.defineProperty(this, 'isValid', {
        writable: !1
      });
  }),
  utils.JS.inherits(UTMessagesDAO, UTObject),
  (UTMessagesDAO.prototype._getLiveMessageScreenName = function _getLiveMessageScreenName() {
    return isAndroid()
      ? enums.ArubaScreenId.ANDROID_LIVE
      : isIOS()
      ? enums.ArubaScreenId.IOS_LIVE
      : isWeb()
      ? enums.ArubaScreenId.WEB_LIVE
      : enums.ArubaScreenId.COMPANION_LIVE;
  }),
  (UTMessagesDAO.prototype.getLiveMessages = function getLiveMessages() {
    var n = new UTObservable(),
      e = new UTUtasHttpRequest(this._authDelegate);
    return (
      e.setPath('/ut/game/' + GAME_NAME + '/livemessage/template'),
      e.setUrlVariables({
        screen: this._getLiveMessageScreenName()
      }),
      e.observe(this, function _onGetLiveMessagesComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s = utils.JS.isObject(t.response);
        (i.response = {
          messages: s
            ? utils.JS.valToArray(t.response.messageList).map(function(e) {
                return new entities.ArubaMessage(e);
              }, this)
            : [],
          promos: s ? utils.JS.valToArray(t.response.promoUpdate) : []
        }),
          (i.status = t.status),
          (i.success = t.success),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(e),
      n
    );
  }),
  (UTMessagesDAO.prototype.readLiveMessage = function readLiveMessage(e) {
    var s = new UTObservable(),
      t = new UTUtasHttpRequest(this._authDelegate);
    return (
      t.setPath('/ut/game/' + GAME_NAME + '/livemessage'),
      t.setRequestType(enums.HTTPRequestMethod.PUT),
      t.setUrlVariables({
        screen: this._getLiveMessageScreenName()
      }),
      t.setRequestBody({
        idList: [e]
      }),
      t.observe(this, function _onReadLiveMessageComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse();
        utils.JS.assignPropertyValues(t, i), s.notify(i);
      }),
      services.UTUtasRequestQueue.send(t),
      s
    );
  }),
  (UTMessagesDAO.prototype.getHubMessages = function getHubMessages(e, n) {
    var o = new UTObservable(),
      t = new UTUtasHttpRequest(this._authDelegate);
    var i = {
      nucPersId: e,
      screen: isWeb()
        ? enums.ArubaScreenId.WEB_HUB
        : enums.ArubaScreenId.COMPANION_HUB
    };
    return (
      t.setPath('/ut/game/' + GAME_NAME + '/message/list/template'),
      t.setUrlVariables(i),
      t.observe(this, function _onGetHubMessagesComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s = utils.JS.isObject(t.response);
        (i.response = {
          messages: s
            ? utils.JS.valToArray(t.response.messageList)
                .slice(0, n)
                .map(function(e) {
                  return new entities.ArubaMessage(e);
                }, this)
            : []
        }),
          (i.status = t.status),
          (i.success = t.success),
          o.notify(i);
      }),
      services.UTUtasRequestQueue.send(t),
      o
    );
  }),
  (UTMessagesDAO.prototype.getDailyGift = function getDailyGift() {
    var n = new UTObservable(),
      e = new UTUtasHttpRequest(this._authDelegate);
    return (
      e.setPath('/ut/game/' + GAME_NAME + '/activeMessage'),
      e.observe(this, function _onGetDailyGiftComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s =
            utils.JS.isObject(t.response) &&
            Array.isArray(t.response.activeMessage) &&
            utils.JS.isValid(t.response.activeMessage[0]);
        (i.response = {
          dailyGift: s
            ? new entities.DailyGift(t.response.activeMessage[0])
            : null
        }),
          (i.status = t.status),
          (i.success = t.success),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(e),
      n
    );
  }),
  (UTMessagesDAO.prototype.claimDailyGift = function claimDailyGift(e) {
    var s = new UTObservable(),
      t = new UTUtasHttpRequest(this._authDelegate);
    return (
      t.setPath('/ut/game/' + GAME_NAME + '/activeMessage/' + e),
      t.setRequestType(enums.HTTPRequestMethod.DELETE),
      t.observe(this, function _onClaimDailyGiftComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse();
        utils.JS.assignPropertyValues(t, i), s.notify(i);
      }),
      services.UTUtasRequestQueue.send(t),
      s
    );
  }),
  utils.JS.inherits(UTCampaignEntity, UTObject),
  (UTCampaignEntity.prototype.setLevels = function setLevels(e) {
    e.forEach(function(e) {
      this.levels.set(e.id, e);
    }, this);
  }),
  (UTCampaignEntity.prototype.getLevels = function getLevels() {
    return this.levels.values();
  }),
  (UTCampaignEntity.prototype.hasLevels = function hasLevels() {
    return 0 < this.levels.length;
  }),
  (UTCampaignEntity.prototype.hasUnclaimedLevelRewards = function hasUnclaimedLevelRewards() {
    return utils.JS.isValid(
      utils.JS.find(
        this.getLevels(),
        function(e) {
          return e.isClaimable(this.xp);
        }.bind(this)
      )
    );
  }),
  utils.JS.inherits(UTCampaignCategoryEntity, UTObject),
  (UTCampaignCategoryEntity.THIS_SEASON_ID = -1),
  (UTCampaignCategoryEntity.prototype.getGroups = function getGroups() {
    return this.groups.values();
  }),
  (UTCampaignCategoryEntity.prototype.isFoundations = function isFoundations() {
    return utils.JS.isValid(
      utils.JS.find(this.getGroups(), function(e) {
        return e.isFoundations();
      })
    );
  }),
  (UTCampaignCategoryEntity.prototype.isMilestones = function isMilestones() {
    return utils.JS.isValid(
      utils.JS.find(this.getGroups(), function(e) {
        return e.isMilestones();
      })
    );
  }),
  (UTCampaignCategoryEntity.prototype.isSeason = function isSeason() {
    return this.id === UTCampaignCategoryEntity.THIS_SEASON_ID;
  }),
  (UTCampaignCategoryEntity.prototype.hasUnclaimedGroupReward = function hasUnclaimedGroupReward() {
    return utils.JS.isValid(
      utils.JS.find(this.getGroups(), function(e) {
        return e.isClaimable();
      })
    );
  }),
  (UTCampaignCategoryEntity.prototype.hasUnclaimedExpiredGroup = function hasUnclaimedExpiredGroup() {
    return utils.JS.isValid(
      utils.JS.find(this.getGroups(), function(e) {
        return e.hasExpired() && e.isClaimable();
      })
    );
  }),
  NamespaceManager.Register('interfaces'),
  (interfaces.SeasonalCampaignsEntry = function() {}),
  (interfaces.SeasonalCampaignsEntry.prototype.isClaimable = function() {}),
  utils.JS.inherits(UTCampaignGroupEntity, UTObject),
  (UTCampaignGroupEntity.prototype.hasObjectives = function hasObjectives() {
    return 0 < this.objectives.length;
  }),
  (UTCampaignGroupEntity.prototype.getObjectives = function getObjectives() {
    return this.objectives.values();
  }),
  (UTCampaignGroupEntity.prototype.getProgress = function getProgress() {
    var e = Math.round(
      (this.getNumberOfCompletedObjectives() / this.objectivesNumber) * 100
    );
    return utils.JS.isNumber(e) || (e = 0), e;
  }),
  (UTCampaignGroupEntity.prototype.hasExpired = function hasExpired() {
    return this.getTimeRemainingExpires() <= 0;
  }),
  (UTCampaignGroupEntity.prototype.getTimeRemainingExpires = function getTimeRemainingExpires() {
    return Math.max(0, this.endTime - Math.round(Date.now() / 1e3));
  }),
  (UTCampaignGroupEntity.prototype.getTimeRemainingOpens = function getTimeRemainingOpens() {
    return Math.max(0, this.startTime - Math.round(Date.now() / 1e3));
  }),
  (UTCampaignGroupEntity.prototype.getNumberOfCompletedObjectives = function getNumberOfCompletedObjectives() {
    if (0 < this.objectives.length) {
      var t = 0;
      return (
        this.objectives.forEach(function(e) {
          (e.isClaimable() || e.isRedeemed()) && t++;
        }),
        t
      );
    }
    return this.objectivesCompleted;
  }),
  (UTCampaignGroupEntity.prototype.areObjectivesRedeemed = function areObjectivesRedeemed() {
    return (
      this.isRedeemed() ||
      (this.isClaimable() &&
        !utils.JS.isValid(
          utils.JS.find(this.getObjectives(), function(e) {
            return !e.isRedeemed();
          })
        ))
    );
  }),
  (UTCampaignGroupEntity.prototype.setLockedByGroups = function setLockedByGroups(
    e
  ) {
    this._isLockedByGroups = e;
  }),
  (UTCampaignGroupEntity.prototype.isLockedByGroups = function isLockedByGroups() {
    return this._isLockedByGroups;
  }),
  (UTCampaignGroupEntity.prototype.isLocked = function isLocked() {
    return (
      this._isLockedByGroups ||
      (!utils.JS.isValid(this.visibilityTime) &&
        this.startTime > Math.round(Date.now() / MS_PER_SECOND))
    );
  }),
  (UTCampaignGroupEntity.prototype.isComingSoon = function isComingSoon() {
    var e = Math.round(Date.now() / MS_PER_SECOND);
    return (
      utils.JS.isValid(this.visibilityTime) &&
      e > this.visibilityTime &&
      e < this.startTime
    );
  }),
  (UTCampaignGroupEntity.prototype.isFoundations = function isFoundations() {
    return this.type === enums.Objectives.GroupType.LEARNING;
  }),
  (UTCampaignGroupEntity.prototype.isMilestones = function isMilestones() {
    return this.type === enums.Objectives.GroupType.MILESTONES;
  }),
  (UTCampaignGroupEntity.prototype.setState = function setState(e) {
    this.state = e;
  }),
  (UTCampaignGroupEntity.prototype.isNotStarted = function isNotStarted() {
    return this.state === enums.Objectives.GroupState.UNDEFINED_STATE;
  }),
  (UTCampaignGroupEntity.prototype.isInProgress = function isInProgress() {
    return this.state === enums.Objectives.GroupState.IN_PROGRESS;
  }),
  (UTCampaignGroupEntity.prototype.isCompleted = function isCompleted() {
    return this.state === enums.Objectives.GroupState.COMPLETED;
  }),
  (UTCampaignGroupEntity.prototype.isRedeemed = function isRedeemed() {
    return this.state === enums.Objectives.GroupState.REWARDED;
  }),
  (UTCampaignGroupEntity.prototype.isRedeemFailure = function isRedeemFailure() {
    return this.state === enums.Objectives.GroupState.REDEEM_FAILURE;
  }),
  (UTCampaignGroupEntity.prototype.isClaimable = function isClaimable() {
    return this.isCompleted() || this.isRedeemFailure();
  }),
  utils.JS.inherits(UTCampaignObjectiveEntity, UTObject),
  (UTCampaignObjectiveEntity.prototype.setCurrentProgress = function setCurrentProgress(
    e
  ) {
    this.currentProgress = e;
  }),
  (UTCampaignObjectiveEntity.prototype.setState = function setState(e) {
    this.state = e;
  }),
  (UTCampaignObjectiveEntity.prototype.getProgressPercentage = function getProgressPercentage() {
    var e = Math.round((this.currentProgress / this.multiplier) * 100);
    return utils.JS.isNumber(e) || (e = 0), e;
  }),
  (UTCampaignObjectiveEntity.prototype.isNotStarted = function isNotStarted() {
    return this.state === enums.Objectives.State.INVALID;
  }),
  (UTCampaignObjectiveEntity.prototype.isInProgress = function isInProgress() {
    return this.state === enums.Objectives.State.IN_PROGRESS;
  }),
  (UTCampaignObjectiveEntity.prototype.isXpRedeemed = function isXpRedeemed() {
    return this.state === enums.Objectives.State.XP_REDEEMED;
  }),
  (UTCampaignObjectiveEntity.prototype.isCompleted = function isCompleted() {
    return this.state === enums.Objectives.State.COMPLETED;
  }),
  (UTCampaignObjectiveEntity.prototype.isRedeemed = function isRedeemed() {
    return this.state === enums.Objectives.State.REDEEMED;
  }),
  (UTCampaignObjectiveEntity.prototype.isRedeemFailure = function isRedeemFailure() {
    return this.state === enums.Objectives.State.REDEEM_FAILURE;
  }),
  (UTCampaignObjectiveEntity.prototype.isClaimable = function isClaimable() {
    return this.isXpRedeemed() || this.isCompleted() || this.isRedeemFailure();
  }),
  (UTCampaignObjectiveEntity.prototype.hasTakeMeThereLink = function hasTakeMeThereLink() {
    return (
      this.isWeb &&
      (this.link === enums.GoToLink.AUCTION_SEARCH ||
        this.link === enums.GoToLink.SBC ||
        this.link === enums.GoToLink.SBC_SQUAD ||
        this.link === enums.GoToLink.SQUAD ||
        this.link === enums.GoToLink.TRADE_PILE)
    );
  }),
  (UTCampaignObjectiveEntity.prototype.getImageIdentifier = function getImageIdentifier() {
    return utils.JS.isEmpty(this.imageBase) ? this.gameArea : this.imageBase;
  }),
  utils.JS.inherits(UTCampaignLevelEntity, UTObject),
  (UTCampaignLevelEntity.prototype.setState = function setState(e) {
    this.state = e;
  }),
  (UTCampaignLevelEntity.prototype.areRewardsVisible = function areRewardsVisible() {
    return !utils.JS.isValid(
      utils.JS.find(this.rewardOptions, function(e) {
        return e.hiddenReward;
      })
    );
  }),
  (UTCampaignLevelEntity.prototype.getDefaultRewardIndex = function getDefaultRewardIndex() {
    var e = this.rewardOptions.indexOf(function(e) {
      return e.defaultOption;
    });
    return 0 <= e ? e : 0;
  }),
  (UTCampaignLevelEntity.prototype.isClaimable = function isClaimable(e) {
    return e >= this.xp && this.state !== enums.Objectives.LevelState.REWARDED;
  }),
  utils.JS.inherits(UTCampaignLevelRewardsDTO, UTObject),
  utils.JS.inherits(UTCampaignObjectiveRewardDTO, transferobjects.Reward),
  utils.JS.inherits(UTObjectivesFactory, UTObject),
  (UTObjectivesFactory.prototype.createCampaign = function createCampaign(e) {
    return new UTCampaignEntity(e);
  }),
  (UTObjectivesFactory.prototype.createLevel = function createLevel(e) {
    return new UTCampaignLevelEntity(
      e,
      utils.JS.valToArray(e.rewardOptionList).map(function(e) {
        return this._createLevelRewardOptions(e);
      }, this)
    );
  }),
  (UTObjectivesFactory.prototype._createLevelRewardOptions = function _createLevelRewardOptions(
    e
  ) {
    return new UTCampaignLevelRewardsDTO(e);
  }),
  (UTObjectivesFactory.prototype.createCategory = function createCategory(e) {
    return new UTCampaignCategoryEntity(
      e,
      utils.JS.valToArray(e.groupsList).map(function(e) {
        return this._createGroup(e);
      }, this)
    );
  }),
  (UTObjectivesFactory.prototype._createGroup = function _createGroup(e) {
    return new UTCampaignGroupEntity(e);
  }),
  (UTObjectivesFactory.prototype.createObjective = function createObjective(e) {
    var t = utils.JS.valToArray(e.awards).map(function(e) {
        return this.createObjectiveReward(e);
      }, this),
      i = enums.Objectives.State.INVALID;
    switch (e.state) {
      case enums.Objectives.ObjectiveState.IN_PROGRESS:
        i = enums.Objectives.State.IN_PROGRESS;
        break;
      case enums.Objectives.ObjectiveState.XP_REDEEMED:
        i = enums.Objectives.State.XP_REDEEMED;
        break;
      case enums.Objectives.ObjectiveState.COMPLETED:
        i = enums.Objectives.State.COMPLETED;
        break;
      case enums.Objectives.ObjectiveState.REDEEMED:
        i = enums.Objectives.State.REDEEMED;
    }
    return new UTCampaignObjectiveEntity(e, i, t);
  }),
  (UTObjectivesFactory.prototype.createObjectiveReward = function createObjectiveReward(
    e
  ) {
    return new UTCampaignObjectiveRewardDTO(e);
  }),
  utils.JS.inherits(UTObjectivesDAO, UTObject),
  (UTObjectivesDAO.prototype.getActiveCampaign = function getActiveCampaign() {
    var n = new UTObservable(),
      e = new UTUtasHttpRequest(this._authDelegate);
    return (
      e.setPath('/ut/game/' + GAME_NAME + '/scmp/campaign/active'),
      e.observe(this, function _onGetActiveCampaignComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s = utils.JS.isObject(t.response);
        (i.response = {
          campaign: s ? this._factory.createCampaign(t.response) : null
        }),
          (i.status = t.status),
          (i.success = t.success),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(e),
      n
    );
  }),
  (UTObjectivesDAO.prototype.getCampaignDetails = function getCampaignDetails(
    e
  ) {
    var n = new UTObservable(),
      t = new UTUtasHttpRequest(this._authDelegate);
    return (
      t.setPath('/ut/game/' + GAME_NAME + '/scmp/campaign'),
      t.setUrlVariables({
        type: e
      }),
      t.observe(this, function _onGetCampaignDetailsComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s = utils.JS.isObject(t.response);
        (i.response = {
          levels: s
            ? utils.JS.valToArray(t.response.scmpChosenRewardDtos).map(function(
                e
              ) {
                return this._factory.createLevel(e);
              },
              this)
            : []
        }),
          (i.status = t.status),
          (i.success = t.success),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(t),
      n
    );
  }),
  (UTObjectivesDAO.prototype.getCategories = function getCategories() {
    var n = new UTObservable(),
      e = new UTUtasHttpRequest(this._authDelegate);
    return (
      e.setPath('/ut/game/' + GAME_NAME + '/scmp/campaign/categories'),
      e.observe(this, function _onGetCategoriesComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s = Array.isArray(t.response);
        (i.response = {
          categories: s
            ? t.response.map(function(e) {
                return this._factory.createCategory(e);
              }, this)
            : []
        }),
          (i.status = t.status),
          (i.success = t.success),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(e),
      n
    );
  }),
  (UTObjectivesDAO.prototype.getGroupObjectives = function getGroupObjectives(
    e,
    t
  ) {
    var n = new UTObservable(),
      i = new UTUtasHttpRequest(this._authDelegate);
    return (
      i.setPath(
        '/ut/game/' + GAME_NAME + '/scmp/campaign/category/' + e + '/group/' + t
      ),
      i.observe(this, function _onGetGroupComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s =
            utils.JS.isObject(t.response) &&
            Array.isArray(t.response.objectives);
        (i.status = t.status),
          (i.success = t.success),
          (i.response = {
            objectives: s
              ? t.response.objectives.map(function(e) {
                  return this._factory.createObjective(e);
                }, this)
              : []
          }),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(i),
      n
    );
  }),
  (UTObjectivesDAO.prototype.getLearningGroupObjectives = function getLearningGroupObjectives(
    e,
    t
  ) {
    var n = new UTObservable(),
      i = new UTUtasHttpRequest(this._authDelegate);
    return (
      i.setPath(
        '/ut/game/' + GAME_NAME + '/scmp/learning/category/' + e + '/group/' + t
      ),
      i.observe(this, function _onGetLearningCategoryDetailsComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s =
            utils.JS.isObject(t.response) &&
            Array.isArray(t.response.objectives);
        (i.status = t.status),
          (i.success = t.success),
          (i.response = {
            objectives: s
              ? t.response.objectives.map(function(e) {
                  return this._factory.createObjective(e);
                }, this)
              : []
          }),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(i),
      n
    );
  }),
  (UTObjectivesDAO.prototype.redeemCampaignLevelReward = function redeemCampaignLevelReward(
    e,
    t
  ) {
    var n = new UTObservable(),
      i = new UTUtasHttpRequest(this._authDelegate);
    return (
      i.setPath(
        '/ut/game/' + GAME_NAME + '/scmp/campaign/level/' + e + '/reward/' + t
      ),
      i.setRequestType(enums.HTTPRequestMethod.PUT),
      i.observe(this, function _onRedeemLevelReward(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s =
            utils.JS.isObject(t.response) &&
            Array.isArray(t.response.awardsList);
        (i.status = t.status),
          (i.success = t.success),
          (i.response = {
            rewards: s
              ? t.response.awardsList.map(function(e) {
                  return new transferobjects.Reward(e);
                }, this)
              : []
          }),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(i),
      n
    );
  }),
  (UTObjectivesDAO.prototype.redeemGroupReward = function redeemGroupReward(e) {
    var n = new UTObservable(),
      t = new UTUtasHttpRequest(this._authDelegate);
    return (
      t.setPath(
        '/ut/game/' + GAME_NAME + '/scmp/campaign/group/' + e + '/rewards'
      ),
      t.setRequestType(enums.HTTPRequestMethod.PUT),
      t.observe(this, function _onRedeemGroupReward(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s =
            utils.JS.isObject(t.response) &&
            Array.isArray(t.response.groupRewards);
        (i.status = t.status),
          (i.success = t.success),
          (i.response = {
            rewards: s
              ? t.response.groupRewards.map(function(e) {
                  return new transferobjects.Reward(e);
                }, this)
              : []
          }),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(t),
      n
    );
  }),
  (UTObjectivesDAO.prototype.redeemLearningGroupReward = function redeemLearningGroupReward(
    e
  ) {
    var n = new UTObservable(),
      t = new UTUtasHttpRequest(this._authDelegate);
    return (
      t.setPath(
        '/ut/game/' + GAME_NAME + '/scmp/learning/group/' + e + '/rewards'
      ),
      t.setRequestType(enums.HTTPRequestMethod.PUT),
      t.observe(this, function _onRedeemLearningGroupReward(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s =
            utils.JS.isObject(t.response) &&
            Array.isArray(t.response.groupRewards);
        (i.status = t.status),
          (i.success = t.success),
          (i.response = {
            rewards: s
              ? t.response.groupRewards.map(function(e) {
                  return new transferobjects.Reward(e);
                }, this)
              : []
          }),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(t),
      n
    );
  }),
  (UTObjectivesDAO.prototype.redeemObjectiveReward = function redeemObjectiveReward(
    e,
    t
  ) {
    var n = new UTObservable(),
      i = new UTUtasHttpRequest(this._authDelegate);
    return (
      i.setPath(
        '/ut/game/' +
          GAME_NAME +
          '/scmp/campaign/group/' +
          e +
          '/objective/' +
          t +
          '/rewards'
      ),
      i.setRequestType(enums.HTTPRequestMethod.PUT),
      i.observe(this, function _onRedeemObjectiveReward(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s = utils.JS.isObject(t.response) && Array.isArray(t.response.awards);
        (i.status = t.status),
          (i.success = t.success),
          (i.response = {
            rewards: s
              ? t.response.awards.map(function(e) {
                  return this._factory.createObjectiveReward(e);
                }, this)
              : []
          }),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(i),
      n
    );
  }),
  (UTObjectivesDAO.prototype.redeemLearningObjectiveReward = function redeemLearningObjectiveReward(
    e,
    t
  ) {
    var n = new UTObservable(),
      i = new UTUtasHttpRequest(this._authDelegate);
    return (
      i.setPath(
        '/ut/game/' +
          GAME_NAME +
          '/scmp/learning/group/' +
          e +
          '/objective/' +
          t +
          '/rewards'
      ),
      i.setRequestType(enums.HTTPRequestMethod.PUT),
      i.observe(this, function _onRedeemLearningObjectiveReward(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s = utils.JS.isObject(t.response) && Array.isArray(t.response.awards);
        (i.status = t.status),
          (i.success = t.success),
          (i.response = {
            rewards: s
              ? t.response.awards.map(function(e) {
                  return this._factory.createObjectiveReward(e);
                }, this)
              : []
          }),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(i),
      n
    );
  }),
  (UTObjectivesDAO.prototype.redeemExpiredRewards = function redeemExpiredRewards() {
    var n = new UTObservable(),
      e = new UTUtasHttpRequest(this._authDelegate);
    return (
      e.setPath('/ut/game/' + GAME_NAME + '/scmp/campaign/rewards/all'),
      e.setRequestType(enums.HTTPRequestMethod.PUT),
      e.observe(this, function _onRedeemRewards(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s =
            utils.JS.isObject(t.response) &&
            Array.isArray(t.response.awardsList);
        (i.status = t.status),
          (i.success = t.success),
          (i.response = {
            rewards: s
              ? t.response.awardsList.map(function(e) {
                  return this._factory.createObjectiveReward(e);
                }, this)
              : []
          }),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(e),
      n
    );
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.SBCEligibility = function UTSBCEligibilityDTO(e) {
    (this.kvPairs = new UTHashTable()),
      (this.count = -1),
      (this.scope = -1),
      (this.isCombinedRequirement = !1),
      Object.defineProperty(this, 'isCombinedRequirement', {
        get: function() {
          return 1 < this.kvPairs.length;
        },
        enumerable: !0
      }),
      e.forEach(function(e) {
        switch (e.eligibilityKey) {
          case enums.SBC.ELG_KEY.FUT_ELGRULE_SCOPE:
            this.scope = e.eligibilityValue;
            break;
          case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_COUNT:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_COUNT_COMBINED:
            this.count = e.eligibilityValue;
            break;
          case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_STAR_RATING:
            this.kvPairs.set(e.eligibilityKey, [e.eligibilityValue / 2]);
            break;
          case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_CHEMISTRY:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_RATING:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_LEVEL:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_RARITY:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_RARITY_GROUP:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_QUALITY:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_NATION_COUNT:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_LEAGUE_COUNT:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_CLUB_COUNT:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_COUNT:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_COUNT:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_COUNT:
          case enums.SBC.ELG_KEY.FUT_ELGRULE_LEGEND_COUNT:
            var t = e.eligibilityValue;
            this.kvPairs.set(e.eligibilityKey, utils.JS.valToArray(t));
            break;
          default:
            utils.Debug.Assert(!1, 'Reached default case: ' + e.eligibilityKey);
        }
      }, this),
      Object.defineProperty(this, 'kvPairs', {
        writable: !1,
        enumerable: !0
      }),
      Object.defineProperty(this, 'count', {
        writable: !1,
        enumerable: !0
      }),
      Object.defineProperty(this, 'scope', {
        writable: !1,
        enumerable: !0
      });
  }),
  (transferobjects.SBCEligibility.prototype.getValue = function getValue(e) {
    return this.kvPairs.has(e) ? this.kvPairs.get(e) : [-1];
  }),
  (transferobjects.SBCEligibility.prototype.getFirstKey = function getFirstKey() {
    return 0 < this.kvPairs.length
      ? parseInt(this.kvPairs.keys()[0], 10)
      : (utils.Debug.Assert(
          !1,
          'transferobjects.SBCEligibility::getFirstKey. Requirement is empty or invalid.'
        ),
        -1);
  }),
  (transferobjects.SBCEligibility.prototype.getFirstValue = function getFirstValue(
    e
  ) {
    return this.kvPairs.has(e) ? this.kvPairs.get(e)[0] : -1;
  }),
  (transferobjects.SBCEligibility.prototype.buildString = function buildString() {
    var e = '',
      t = 'sbc.requirements.',
      i = 'scope' + this.scope,
      s = this.getFirstKey(),
      o = this.getValue(s),
      n = this.count,
      a = 1 === n ? t + 'player.' + i : t + 'players.' + i;

    function createStringFromValues(i, s) {
      if (1 < o.length) {
        var n = '';
        return (
          o.forEach(function(e, t) {
            (n += utils.JS.isValid(s) ? i.call(this, s + e) : i.call(this, e)),
              (n +=
                t < o.length - 1
                  ? ' ' +
                    services.Localization.localize(
                      'label.general.or'
                    ).toUpperCase() +
                    ' '
                  : '');
          }, this),
          n
        );
      }
      var e = o[0];
      return utils.JS.isValid(s) ? i.call(this, s + e) : i.call(this, e);
    }
    if (this.isCombinedRequirement) {
      var r = [];
      this.kvPairs.keys().forEach(function(e) {
        switch (((e = parseInt(e, 10)), (o = this.getValue(e)), e)) {
          case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
            r.push(
              createStringFromValues.call(
                this,
                utils.FUTLocalization.getNationNameById
              )
            );
            break;
          case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
            r.push(
              createStringFromValues.call(
                this,
                utils.FUTLocalization.getLeagueNameByID
              )
            );
            break;
          case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
            r.push(
              createStringFromValues.call(
                this,
                utils.FUTLocalization.getTeamAbb15ByID
              )
            );
            break;
          default:
            utils.Debug.Assert(
              !1,
              '[transferobjects.SBCEligibility::buildString] | Reached invalid combined case: ' +
                e
            );
        }
      }, this),
        (e =
          services.Localization.localize(a + '.val', [n]) +
          ' ' +
          r.join(' + '));
    } else
      switch (s) {
        case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_STAR_RATING:
          e = services.Localization.localize(t + 'team.rating.' + i, o);
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_RATING:
          e = services.Localization.localize(t + 'team.rating1to100.' + i, o);
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_CHEMISTRY:
          e = services.Localization.localize(t + 'team.chemistry.' + i, o);
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_QUALITY:
          e = services.Localization.localize(t + i);
          var l = o[0];
          l === enums.SBC.ELG_QUALITY_TYPES.BRONZE
            ? (e +=
                ' ' + services.Localization.localize('packtype.bronzePlayers'))
            : l === enums.SBC.ELG_QUALITY_TYPES.SILVER
            ? (e +=
                ' ' + services.Localization.localize('packtype.silverPlayers'))
            : (e +=
                ' ' + services.Localization.localize('packtype.goldPlayers'));
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_LEVEL:
          e =
            services.Localization.localize(t + 'rare.' + i, [n]) +
            ' ' +
            createStringFromValues.call(
              services.Localization,
              services.Localization.localize,
              'search.cardLevels.cardLevel'
            );
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_NATION_COUNT:
          e = services.Localization.localize(a, [
            o,
            services.Localization.localize(t + 'subType.nation')
          ]);
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_LEAGUE_COUNT:
          e = services.Localization.localize(a, [
            o,
            services.Localization.localize(t + 'subType.league')
          ]);
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_CLUB_COUNT:
          e = services.Localization.localize(a, [
            o,
            services.Localization.localize(t + 'subType.club')
          ]);
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_COUNT:
          e = services.Localization.localize(t + 'nations.' + i, [o]);
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_COUNT:
          e = services.Localization.localize(t + 'leagues.' + i, [o]);
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_COUNT:
          e = services.Localization.localize(t + 'clubs.' + i, [o]);
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
          e =
            services.Localization.localize(a + '.val', [n]) +
            ' ' +
            createStringFromValues.call(
              this,
              utils.FUTLocalization.getNationNameById
            );
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
          e =
            services.Localization.localize(a + '.val', [n]) +
            ' ' +
            createStringFromValues.call(
              this,
              utils.FUTLocalization.getLeagueNameByID
            );
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
          e =
            services.Localization.localize(a + '.val', [n]) +
            ' ' +
            createStringFromValues.call(
              this,
              utils.FUTLocalization.getTeamAbb15ByID
            );
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEGEND_COUNT:
          (a = 1 === o ? t + 'legend.' + i : t + 'legends.' + i),
            (e = services.Localization.localize(a, [o]));
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_RARITY:
          e =
            services.Localization.localize(t + 'rare.' + i, [n]) +
            ' ' +
            createStringFromValues.call(
              services.Localization,
              services.Localization.localize,
              'item.raretype'
            );
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_RARITY_GROUP:
          e =
            services.Localization.localize(t + 'rare.' + i, [n]) +
            ' ' +
            createStringFromValues.call(
              services.Localization,
              services.Localization.localize,
              'Player_Group_'
            );
          break;
        default:
          utils.Debug.Assert(
            !1,
            '[transferobjects.SBCEligibility::buildString] | Reached default case: ' +
              s
          );
      }
    return e;
  }),
  utils.JS.inherits(UTSBCFactory, UTObject),
  (UTSBCFactory.prototype.createCategory = function createCategory(e) {
    return new transferobjects.SBCCategory(
      e.categoryId,
      e.priority,
      e.name,
      enums.SBC.CATEGORY_TYPE.SERVER
    );
  }),
  (UTSBCFactory.prototype.createSet = function createSet(e) {
    return new entities.SBCSet(e);
  }),
  (UTSBCFactory.prototype.createChallenge = function createSet(e) {
    return new entities.SBCChallenge(e, this.createRequirements(e.elgReq));
  }),
  (UTSBCFactory.prototype.createSetsFromCategories = function createSetsFromCategories(
    e
  ) {
    var t = [],
      s = [];
    return (
      e.forEach(function(e) {
        var i = this.createCategory(e);
        t.push(i),
          e.sets.forEach(function(e) {
            var t = this.createSet(e);
            i.setIds.push(t.id), s.push(t);
          }, this);
      }, this),
      {
        categories: t,
        sets: s
      }
    );
  }),
  (UTSBCFactory.prototype.createSetChallenges = function createSetChallenges(
    e
  ) {
    return e.map(function(e) {
      return this.createChallenge(e);
    }, this);
  }),
  (UTSBCFactory.prototype.createRequirements = function(e) {
    var i,
      s,
      n = [];
    return (
      e.forEach(function(e) {
        if (s !== e.eligibilitySlot)
          (s = e.eligibilitySlot),
            (i = new UTHashTable()).set(e.type, e),
            (n[s] = i);
        else {
          var t = (i = n[s]).get(e.type);
          utils.JS.isValid(t)
            ? (t.eligibilityValue = [].concat(
                t.eligibilityValue,
                e.eligibilityValue
              ))
            : i.set(e.type, e);
        }
      }, this),
      n.reduce(
        function(e, t) {
          return (
            utils.JS.isValid(t) &&
              e.push(this._createEligibilityRequirement(t)),
            e
          );
        }.bind(this),
        []
      )
    );
  }),
  (UTSBCFactory.prototype._createEligibilityRequirement = function _createEligibilityRequirement(
    e
  ) {
    return new transferobjects.SBCEligibility(e.values());
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.SBCCategory = function UTSBCCategoryDTO(e, t, i, s) {
    (this.id = e),
      Object.defineProperty(this, 'id', {
        writable: !1
      }),
      (this.priority = t),
      Object.defineProperty(this, 'priority', {
        writable: !1
      }),
      (this.name = i),
      Object.defineProperty(this, 'name', {
        writable: !1
      }),
      (this.setIds = []),
      Object.defineProperty(this, 'setIds', {
        writable: !0
      }),
      (this.displayable = !1),
      Object.defineProperty(this, 'displayable', {
        writable: !0
      }),
      (this.isAll = s === enums.SBC.CATEGORY_TYPE.CUSTOM_ALL),
      Object.defineProperty(this, 'isAll', {
        writable: !1
      }),
      (this.isFavourite = s === enums.SBC.CATEGORY_TYPE.CUSTOM_FAVOURITE),
      Object.defineProperty(this, 'isFavourite', {
        writable: !1
      }),
      (this.type = s),
      Object.defineProperty(this, 'type', {
        writable: !1
      });
  }),
  NamespaceManager.Register('interfaces'),
  (interfaces.SquadSaveDelegate = function ISquadSaveDelegate() {}),
  (interfaces.SquadSaveDelegate.prototype.save = function save(e) {}),
  NamespaceManager.Register('entities'),
  (entities.SBCChallenge = function(e, t) {
    var i;
    (this.id = e.challengeId),
      Object.defineProperty(this, 'id', {
        writable: !1,
        enumerable: !0
      }),
      (this.name = e.name),
      Object.defineProperty(this, 'name', {
        writable: !1,
        enumerable: !0
      }),
      (this.description = e.description),
      Object.defineProperty(this, 'description', {
        writable: !1,
        enumerable: !0
      }),
      (this.endTime =
        utils.JS.isNumber(e.endTime) && 0 < e.endTime
          ? e.endTime + Math.round(new Date().getTime() / 1e3)
          : 0),
      Object.defineProperty(this, 'endTime', {
        writable: !1,
        enumerable: !0
      }),
      (this.notExpirable = 0 === this.endTime),
      Object.defineProperty(this, 'notExpirable', {
        writable: !1,
        enumerable: !0
      }),
      (this.priority = e.priority),
      Object.defineProperty(this, 'priority', {
        writable: !1,
        enumerable: !0
      }),
      (this.repeatable = e.repeatable),
      Object.defineProperty(this, 'repeatable', {
        writable: !1,
        enumerable: !0
      }),
      (this.setId = e.setId),
      Object.defineProperty(this, 'setId', {
        writable: !1,
        enumerable: !0
      }),
      (this.assetId = utils.JS.isEmpty(e.challengeImageId)
        ? e.trophyId
        : e.challengeImageId),
      (this.formation = e.formation),
      Object.defineProperty(this, 'formation', {
        writable: !1,
        enumerable: !0
      }),
      (this.type = e.type),
      Object.defineProperty(this, 'type', {
        writable: !1,
        enumerable: !0
      }),
      Object.defineProperty(this, 'status', {
        get: function() {
          return i;
        },
        set: function(e) {
          var t;
          for (t in enums.SBC.CHALLENGE_STATUS)
            if (
              enums.SBC.CHALLENGE_STATUS.hasOwnProperty(t) &&
              enums.SBC.CHALLENGE_STATUS[t] === e
            )
              return void (i = e);
          utils.Debug.Assert(
            !1,
            'Invalid assignment to entity: SBCChallenge.status'
          );
        }
      }),
      (this.status = e.status),
      (this.timesCompleted = e.timesCompleted),
      Object.defineProperty(this, 'timesCompleted', {
        writable: !0
      }),
      (this.awards = utils.JS.isValid(e.awards)
        ? e.awards.map(function(e) {
            return new transferobjects.SBCReward(e);
          }, this)
        : []),
      this.awards.sort(function awardSort(e, t) {
        return e.getPriority() < t.getPriority()
          ? -1
          : e.getPriority() > t.getPriority()
          ? 1
          : 0;
      }),
      Object.defineProperty(this, 'awards', {
        writable: !1,
        enumerable: !0
      }),
      (this._eligibilityOperation =
        e.elgOperation === enums.SBC.ELG_OPERATION.AND ||
        e.elgOperation === enums.SBC.ELG_OPERATION.OR
          ? e.elgOperation
          : enums.SBC.ELG_OPERATION.AND),
      Object.defineProperty(this, '_eligibilityOperation', {
        writable: !1,
        enumerable: !1
      }),
      (this.eligibilityRequirements = t),
      Object.defineProperty(this, 'eligibilityRequirements', {
        writable: !1,
        enumerable: !0
      }),
      (this.squad = null),
      Object.defineProperty(this, 'squad', {
        writable: !0
      }),
      (this.onDataChange = new UTObservable()),
      Object.defineProperty(this, 'onDataChange', {
        writable: !1,
        enumerable: !0
      }),
      (this.onSave = new UTObservable()),
      Object.defineProperty(this, 'onSave', {
        writable: !1,
        enumerable: !0
      });
  }),
  (entities.SBCChallenge.prototype.reset = function reset() {
    (this.status = enums.SBC.CHALLENGE_STATUS.NOT_STARTED),
      (this.squad = null),
      this.onDataChange.notify({
        status: this.status,
        squad: this.squad
      });
  }),
  (entities.SBCChallenge.prototype.hasNotStarted = function hasNotStarted() {
    return this.status === enums.SBC.CHALLENGE_STATUS.NOT_STARTED;
  }),
  (entities.SBCChallenge.prototype.isInProgress = function isInProgress() {
    return this.status === enums.SBC.CHALLENGE_STATUS.IN_PROGRESS;
  }),
  (entities.SBCChallenge.prototype.isCompleted = function isCompleted() {
    return this.status === enums.SBC.CHALLENGE_STATUS.COMPLETED;
  }),
  (entities.SBCChallenge.prototype.isBrickChallenge = function isBrickChallenge() {
    return (
      this.type === enums.SBC.CHALLENGE_TYPE.BRICK ||
      this.type === enums.SBC.CHALLENGE_TYPE.CUSTOM_BRICK
    );
  }),
  (entities.SBCChallenge.prototype.hasExpired = function hasExpired(e) {
    if (this.notExpirable) return !1;
    var t = this.endTime - Math.round(new Date().getTime() / 1e3);
    return (
      e &&
        (t +=
          60 *
          services.Configuration.getFeatureSetting(
            enums.ServerFeature.SBC_GRACE_PERIOD_MINUTES
          )),
      t < 0
    );
  }),
  (entities.SBCChallenge.prototype._getApplicableSlotsForCombinedReq = function _getApplicableSlotsForCombinedReq(
    i
  ) {
    var s = [];
    return (
      i.kvPairs.keys().forEach(function(e) {
        e = parseInt(e, 10);
        var t = i.getFirstValue(e);
        switch (e) {
          case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
            s = s.concat(this.squad.getSlotIndicesByNation(t));
            break;
          case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
            s = s.concat(this.squad.getSlotIndicesByLeague(t));
            break;
          case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
            s = s.concat(this.squad.getSlotIndicesByClub(t));
            break;
          default:
            utils.Debug.Assert(!1, 'Reached invalid combined case: ' + e);
        }
      }, this),
      s
    );
  }),
  (entities.SBCChallenge.prototype._hasMultipleValues = function _hasMultipleValues(
    e,
    t
  ) {
    return !!e.kvPairs.has(t) && 1 < e.kvPairs.get(t).length;
  }),
  (entities.SBCChallenge.prototype.isRequirementMet = function isRequirementMet(
    e
  ) {
    var t,
      i = e.kvPairs.keys().length,
      s = 0,
      n = 0;
    if (!this.squad || this.eligibilityRequirements.indexOf(e) < 0) return !1;
    if (e.isCombinedRequirement) {
      n = e.count;
      var o = {};
      this._getApplicableSlotsForCombinedReq(e).forEach(function(e) {
        o[e] ? ((o[e] += 1), o[e] === i && s++) : (o[e] = 1);
      }, e);
    } else {
      if (1 !== i)
        return utils.Debug.Assert(!1, 'Requirement is empty or invalid.'), !1;
      var a = e.getFirstKey(),
        r = this._hasMultipleValues(e, a) ? e.getValue(a) : e.getFirstValue(a);
      switch (((n = r), a)) {
        case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_STAR_RATING:
          s = this.squad.getStarRating();
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_RATING:
          s = this.squad.getRating();
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_CHEMISTRY:
          s = this.squad.getChemistry();
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_QUALITY:
          s = -1;
          var l = this.squad.getPlayersPerQualityTier().keys();
          if (0 === l.length) break;
          e.scope === enums.SBC.ELG_SCOPE.FUT_ELGRULE_SCOPE_GREATER
            ? (s = Math.min.apply(Math, l))
            : e.scope === enums.SBC.ELG_SCOPE.FUT_ELGRULE_SCOPE_LOWER
            ? (s = Math.max.apply(Math, l))
            : 1 === l.length && (s = parseInt(l[0], 10));
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_LEVEL:
          (n = e.count), (s = this.squad.getNumberOfPlayersByQualityTier(r));
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_NATION_COUNT:
          t = this.squad.getPlayersPerNation();
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_LEAGUE_COUNT:
          t = this.squad.getPlayersPerLeague();
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_CLUB_COUNT:
          t = this.squad.getPlayersPerClub();
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_COUNT:
          s = this.squad.getPopularNationalities().length;
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_COUNT:
          s = this.squad.getPopularLeagues().length;
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_COUNT:
          s = this.squad.getPopularClubs().length;
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
          (n = e.count), (s = this.squad.getNumberOfPlayersByNation(r));
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
          (n = e.count), (s = this.squad.getNumberOfPlayersByLeague(r));
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
          (n = e.count), (s = this.squad.getNumberOfPlayersByClub(r));
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEGEND_COUNT:
          s = this.squad.getNumberOfLegends();
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_RARITY:
          (n = e.count), (s = this.squad.getNumberOfPlayersByRarity(r));
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_RARITY_GROUP:
          (n = e.count), (s = this.squad.getNumberOfPlayersByGroup(r));
          break;
        default:
          utils.Debug.Assert(!1, 'Reached default case: ' + a);
      }
    }
    return e.scope === enums.SBC.ELG_SCOPE.FUT_ELGRULE_SCOPE_GREATER
      ? (utils.JS.isValid(t) && (s = Math.max.apply(Math, t.values())), n <= s)
      : e.scope === enums.SBC.ELG_SCOPE.FUT_ELGRULE_SCOPE_LOWER
      ? (utils.JS.isValid(t) && (s = Math.max.apply(Math, t.values())), s <= n)
      : (utils.JS.isValid(t) && (s = Math.max.apply(Math, t.values())),
        s === n);
  }),
  (entities.SBCChallenge.prototype.meetsRequirements = function meetsRequirements() {
    if (this.squad && !this.squad.isSquadFull()) return !1;
    for (var e = this.eligibilityRequirements.length; 0 < e--; ) {
      var t = this.isRequirementMet(this.eligibilityRequirements[e]);
      if (!t && this._eligibilityOperation === enums.SBC.ELG_OPERATION.AND)
        return !1;
      if (t && this._eligibilityOperation === enums.SBC.ELG_OPERATION.OR)
        return !0;
    }
    return !0;
  }),
  (entities.SBCChallenge.prototype.canSubmit = function canSubmit() {
    return (
      !this.hasExpired(!0) &&
      this.meetsRequirements() &&
      this.squad.isSBCSquadEligible()
    );
  }),
  (entities.SBCChallenge.prototype.hasUntradeableItems = function hasUntradeableItems() {
    return utils.JS.isValid(
      utils.JS.find(this.squad.getNonBrickSlots(), function(e) {
        return e.getItem().untradeable;
      })
    );
  }),
  (entities.SBCChallenge.prototype.getRequirementCounter = function getRequirementCounter(
    e
  ) {
    var t = 0;
    if (
      !this.isInProgress() ||
      !this.squad ||
      this.eligibilityRequirements.indexOf(e) < 0
    )
      return -1;
    if (e.isCombinedRequirement) return -1;
    var i = e.getFirstKey(),
      s = this._hasMultipleValues(e, i) ? e.getValue(i) : e.getFirstValue(i);
    switch (i) {
      case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_COUNT:
        t += this.squad.getPopularNationalities().length;
        break;
      case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_COUNT:
        t += this.squad.getPopularLeagues().length;
        break;
      case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_COUNT:
        t += this.squad.getPopularClubs().length;
        break;
      case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
        t += this.squad.getNumberOfPlayersByNation(s);
        break;
      case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
        t += this.squad.getNumberOfPlayersByLeague(s);
        break;
      case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
        t += this.squad.getNumberOfPlayersByClub(s);
        break;
      case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_LEVEL:
        t += this.squad.getNumberOfPlayersByQualityTier(s);
        break;
      case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_RARITY:
        t += this.squad.getNumberOfPlayersByRarity(s);
        break;
      case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_RARITY_GROUP:
        t += this.squad.getNumberOfPlayersByGroup(s);
        break;
      default:
        return -1;
    }
    return t;
  }),
  (entities.SBCChallenge.prototype.getNumberOfRequirementsMet = function getNumberOfRequirementsMet() {
    var t = 0;
    return (
      this.squad.isSquadFull() && t++,
      this.eligibilityRequirements.forEach(function(e) {
        this.isRequirementMet(e) && t++;
      }, this),
      t
    );
  }),
  (transferobjects.SBCReward = function(e) {
    transferobjects.Reward.call(this, e),
      (this.loan = e.loan),
      Object.defineProperty(this, 'loan', {
        writable: !1
      });
  }),
  utils.JS.inherits(transferobjects.SBCReward, transferobjects.Reward),
  NamespaceManager.Register('entities'),
  (entities.SBCSet = function UTSBCSetEntity(e) {
    (this.id = e.setId),
      Object.defineProperty(this, 'id', {
        writable: !1
      }),
      (this.name = e.name),
      Object.defineProperty(this, 'name', {
        writable: !1
      }),
      (this.description = e.description),
      Object.defineProperty(this, 'description', {
        writable: !1
      }),
      (this.endTime =
        utils.JS.isNumber(e.endTime) && 0 < e.endTime
          ? e.endTime + Math.round(new Date().getTime() / 1e3)
          : 0),
      Object.defineProperty(this, 'endTime', {
        writable: !1
      }),
      (this.notExpirable = 0 === this.endTime),
      Object.defineProperty(this, 'notExpirable', {
        writable: !1
      }),
      (this.priority = e.priority),
      Object.defineProperty(this, 'priority', {
        writable: !1
      }),
      (this.repeatable = e.repeatable),
      Object.defineProperty(this, 'repeatable', {
        writable: !1
      }),
      (this.assetId = utils.JS.isEmpty(e.setImageId)
        ? e.trophyId
        : e.setImageId),
      (this.challengesCount = e.challengesCount),
      Object.defineProperty(this, 'challengesCount', {
        writable: !1
      }),
      (this.challengesCompletedCount = e.challengesCompletedCount),
      Object.defineProperty(this, 'challengesCompletedCount', {
        writable: !0
      }),
      (this.timesCompleted = e.timesCompleted),
      Object.defineProperty(this, 'timesCompleted', {
        writable: !0
      }),
      (this.isFeatured = e.taggedByProduction),
      Object.defineProperty(this, 'isFeatured', {
        writable: !1
      }),
      (this.isFavourite = e.taggedByUser),
      Object.defineProperty(this, 'isFavourite', {
        writable: !0
      }),
      (this.awards = e.awards.map(function(e) {
        return new transferobjects.SBCReward(e);
      }, this)),
      this.awards.sort(function awardSort(e, t) {
        return e.getPriority() < t.getPriority()
          ? -1
          : e.getPriority() > t.getPriority()
          ? 1
          : 0;
      }),
      Object.defineProperty(this, 'awards', {
        writable: !1
      }),
      (this.hidden = e.hidden),
      Object.defineProperty(this, 'hidden', {
        writable: !1
      }),
      (this._previewImageId = e.rewardPreviewImageId),
      Object.defineProperty(this, '_previewImageId', {
        writable: !1
      }),
      (this.tutorial = e.tutorial),
      Object.defineProperty(this, 'tutorial', {
        writable: !1
      }),
      (this.challenges = new UTHashTable()),
      Object.defineProperty(this, 'challenges', {
        writable: !1
      });
  }),
  (entities.SBCSet.prototype.isComplete = function isComplete() {
    return this.challengesCount === this.challengesCompletedCount;
  }),
  (entities.SBCSet.prototype.isDisplayable = function isDisplayable() {
    return !this.hasExpired();
  }),
  (entities.SBCSet.prototype.hasExpired = function hasExpired(e) {
    if (this.notExpirable) return !1;
    var t = this.endTime - Math.round(new Date().getTime() / 1e3);
    return (
      e &&
        (t +=
          60 *
          services.Configuration.getFeatureSetting(
            enums.ServerFeature.SBC_GRACE_PERIOD_MINUTES
          )),
      t < 0
    );
  }),
  (entities.SBCSet.prototype.addChallenge = function addChallenge(e) {
    this.challenges.set(e.id, e);
  }),
  (entities.SBCSet.prototype.getChallenge = function getChallenge(e) {
    return this.challenges.get(e);
  }),
  (entities.SBCSet.prototype.getPreviewImageId = function getPreviewImageId() {
    return this._previewImageId;
  }),
  utils.JS.inherits(UTSBCDAO, UTObject),
  (UTSBCDAO.prototype.getSets = function getSets() {
    var n = new UTObservable(),
      e = new UTUtasHttpRequest(this._authDelegate);
    return (
      e.setPath('/ut/game/' + GAME_NAME + '/sbs/sets'),
      e.observe(this, function _onGetSetsComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s = t.success && utils.JS.isObject(t.response);
        utils.JS.assignPropertyValues(t, i),
          (i.response = s
            ? this._factory.createSetsFromCategories(t.response.categories)
            : {
                sets: [],
                categories: []
              }),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(e),
      n
    );
  }),
  (UTSBCDAO.prototype.getChallengesForSet = function getChallengesForSet(e) {
    var n = new UTObservable(),
      t = new UTUtasHttpRequest(this._authDelegate);
    return (
      t.setPath('/ut/game/' + GAME_NAME + '/sbs/setId/' + e.id + '/challenges'),
      t.observe(this, function _onGetChallengesComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s = t.success && utils.JS.isObject(t.response);
        utils.JS.assignPropertyValues(t, i),
          (i.response = {
            challenges: s
              ? this._factory.createSetChallenges(t.response.challenges)
              : []
          }),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(t),
      n
    );
  }),
  (UTSBCDAO.prototype.loadChallenge = function loadChallenge(e, t) {
    var n = new UTObservable(),
      i = new UTUtasHttpRequest(this._authDelegate);
    var s = '';
    return (
      t ? (s = '/squad') : i.setRequestType(enums.HTTPRequestMethod.POST),
      i.setPath('/ut/game/' + GAME_NAME + '/sbs/challenge/' + e + s),
      i.observe(this, function _onLoadChallengeComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse(),
          s = t.success && utils.JS.isObject(t.response);
        utils.JS.assignPropertyValues(t, i),
          (i.response = {
            squad: s
              ? factories.Squad.createSBCSquad(
                  t.response.squad,
                  this._factory,
                  t.response.playerRequirements
                )
              : null
          }),
          n.notify(i);
      }),
      services.UTUtasRequestQueue.send(i),
      n
    );
  }),
  (UTSBCDAO.prototype.saveChallenge = function saveChallenge(e, t) {
    var i = new UTObservable(),
      s = new UTUtasHttpRequest(this._authDelegate);
    var n = {};
    return (
      (n.players = t.getPlayers().map(function(e) {
        var t = e.getItem();
        return {
          index: e.getIndex(),
          itemData: {
            id: t.id,
            dream: t.concept
          }
        };
      })),
      s.setPath('/ut/game/' + GAME_NAME + '/sbs/challenge/' + e + '/squad'),
      s.setRequestType(enums.HTTPRequestMethod.PUT),
      s.setRequestBody(n),
      s.observe(this, function _onSaveChallengeComplete(e, t) {
        e.unobserve(this), i.notify(t);
      }),
      services.UTUtasRequestQueue.send(s),
      i
    );
  }),
  (UTSBCDAO.prototype.submitChallenge = function submitChallenge(e, t) {
    var s = new UTObservable(),
      i = new UTUtasHttpRequest(this._authDelegate);
    return (
      i.setPath('/ut/game/' + GAME_NAME + '/sbs/challenge/' + e),
      i.setRequestType(enums.HTTPRequestMethod.PUT),
      i.setUrlVariables({
        skipUserSquadValidation: t
      }),
      i.observe(this, function _onSubmitChallengeComplete(e, t) {
        e.unobserve(this);
        var i = new transferobjects.FUTHttpResponse();
        (i.success = t.success),
          (i.status = t.status),
          (i.response = {}),
          t.success &&
            (t.response.squads
              ? ((i.status = enums.HTTPStatusCode.CONFLICT),
                (i.success = !1),
                (i.response.itemViolations = []),
                t.response.squads.forEach(function(e) {
                  var t = e.playerList.filter(function(e) {
                    return 0 < e;
                  });
                  t.length < 1 ||
                    i.response.itemViolations.push({
                      name: e.squad,
                      itemIds: t
                    });
                }))
              : ((i.response.objectiveUpdates = new UTCampaignUpdatesDTO(
                  t.response ? t.response.dynamicObjectivesUpdates : null
                )),
                (i.response.credits = t.response.credits || 0),
                (i.response.preOrderPacks = t.response.preOrderPacks || 0),
                (i.response.recoveredPacks = t.response.recoveredPacks || 0),
                (i.response.challengeId = t.response.challengeId || 0),
                (i.response.grantedChallengeAwards =
                  t.response.grantedChallengeAwards || []),
                (i.response.setId = t.response.setId || 0))),
          s.notify(i);
      }),
      services.UTUtasRequestQueue.send(i),
      s
    );
  }),
  (UTSBCDAO.prototype.setFavouriteTag = function setFavouriteTag(e, t) {
    var i = new UTObservable(),
      s = new UTUtasHttpRequest(this._authDelegate);
    return (
      s.setPath('/ut/game/' + GAME_NAME + '/sbs/sets/tag'),
      s.setRequestType(enums.HTTPRequestMethod.PUT),
      s.setRequestBody({
        sets: [
          {
            setId: e.id,
            tagged: t
          }
        ]
      }),
      s.observe(this, function _onSetFavouriteTagComplete(e, t) {
        e.unobserve(this), i.notify(t);
      }),
      services.UTUtasRequestQueue.send(s),
      i
    );
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.ShowOffSquad = function UTShowOffSquadDTO(e, t) {
    (this.squad = e),
      (this.id = t.showoffid),
      (this.url =
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_SHOW_OFF_URL
        ) + t.url),
      (this.timestamp = t.timestamp),
      (this.viewcount = t.viewcount),
      (this.persona = t.persona),
      (this.platform = t.platform),
      (this.clubName = utils.JS.isValid(this.squad)
        ? t.data.squad[0].clubName
        : ''),
      (this.clubAbbr = utils.JS.isValid(this.squad)
        ? t.data.squad[0].clubAbbr
        : ''),
      (this.estDate = utils.JS.isValid(this.squad)
        ? t.data.squad[0].estDate
        : '');
  }),
  utils.JS.inherits(UTChampionsEventEntity, UTObject),
  (UTChampionsEventEntity.prototype.isValid = function isValid() {
    return 0 <= this._id;
  }),
  (UTChampionsEventEntity.prototype.getId = function getId() {
    return this._id;
  }),
  (UTChampionsEventEntity.prototype.getStartTime = function getStartTime() {
    return this._startTime;
  }),
  (UTChampionsEventEntity.prototype.setStartTime = function setStartTime(e) {
    (this._startTime = e),
      this.onDataUpdated.notify({
        startTime: this._startTime
      });
  }),
  (UTChampionsEventEntity.prototype.getEndTime = function getEndTime() {
    return this._endTime;
  }),
  (UTChampionsEventEntity.prototype.setEndTime = function setEndTime(e) {
    (this._endTime = e),
      this.onDataUpdated.notify({
        endTime: this._endTime
      });
  }),
  (UTChampionsEventEntity.prototype.getState = function getState() {
    return this._state;
  }),
  (UTChampionsEventEntity.prototype.setState = function setState(e) {
    (this._state = e),
      this.onDataUpdated.notify({
        state: this._state
      });
  }),
  (UTChampionsEventEntity.prototype.getType = function getType() {
    return this._type;
  }),
  (UTChampionsEventEntity.prototype.setType = function setType(e) {
    (this._type = e),
      this.onDataUpdated.notify({
        type: this._type
      });
  }),
  (UTChampionsEventEntity.prototype.isInGracePeriod = function isInGracePeriod() {
    var e = Math.round(Date.now() / 1e3),
      t =
        services.Configuration.getFeatureSetting(
          enums.ServerFeature.WEEKEND_LEAGUE_GRACE_PERIOD_HOURS
        ) || 0;
    return this._startTime <= e && (e - this._startTime) / 3600 < t;
  }),
  utils.JS.inherits(UTChampionsEntityFactory, UTObject),
  (UTChampionsEntityFactory.prototype.createChampionsEvent = function createChampionsEvent(
    e
  ) {
    var t = new UTChampionsEventEntity(e.id || -1);
    return (
      (t._startTime = e.startTime),
      (t._endTime = e.endTime),
      (t._state = e.state),
      (t._type = e.type),
      t
    );
  }),
  NamespaceManager.Register('factories'),
  (factories.ChampionsEntity = new UTChampionsEntityFactory()),
  utils.JS.inherits(UTChampionsUnclaimedEventDTO, UTObject),
  NamespaceManager.Register('accessobjects'),
  (accessobjects.Champions = (function() {
    function UTChampionsDAO() {
      UTObject.call(this),
        (this._authDelegate = null),
        Object.defineProperty(this, '_authDelegate', {
          writable: !0,
          enumerable: !1
        });
    }
    return (
      utils.JS.inherits(UTChampionsDAO, UTObject),
      (UTChampionsDAO.prototype.setAuthDelegate = function setAuthDelegate(e) {
        e && e.conforms(interfaces.AuthDelegate) && (this._authDelegate = e);
      }),
      (UTChampionsDAO.prototype._triggerUnauthorizedResponse = function _triggerUnauthorizedResponse(
        e
      ) {
        console.log(
          'Missing composite authentication delegate in UTChampionsDAO'
        );
        var t = new transferobjects.FUTHttpResponse();
        (t.status = enums.HTTPStatusCode.UNAUTHORIZED), e.notify(t);
      }),
      (UTChampionsDAO.prototype.getUpcomingEvents = function getUpcomingEvents() {
        var n = new UTObservable();
        if (!this._authDelegate) return this._triggerUnauthorizedResponse(n), n;
        var e = new UTUtasHttpRequest(this._authDelegate);
        return (
          e.setPath('/ut/game/' + GAME_NAME + '/champion/events/upcoming'),
          e.observe(this, function _onGetUpcomingEventsComplete(e, t) {
            e.unobserve(this);
            var i,
              s = new transferobjects.FUTHttpResponse();
            utils.JS.assignPropertyValues(t, s),
              (i = t.success
                ? t.response.championEvents.map(function(e) {
                    return factories.ChampionsEntity.createChampionsEvent(e);
                  })
                : []),
              (s.response = {
                events: i
              }),
              n.notify(s);
          }),
          services.UTUtasRequestQueue.send(e),
          n
        );
      }),
      (UTChampionsDAO.prototype.getUnclaimedEvents = function getUnclaimedEvents() {
        var n = new UTObservable();
        if (!this._authDelegate) return this._triggerUnauthorizedResponse(n), n;
        var e = new UTUtasHttpRequest(this._authDelegate);
        return (
          e.setPath('/ut/game/' + GAME_NAME + '/champion/user/hub'),
          e.setUrlVariables({
            scope: 'nano'
          }),
          e.observe(this, function _onGetUnclaimedEventsComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse(),
              s =
                utils.JS.isObject(t.response) &&
                Array.isArray(t.response.unclaimedPrizesChampionEvents);
            (i.response = {
              unclaimedPrizesChampionEvents: s
                ? t.response.unclaimedPrizesChampionEvents.map(function(e) {
                    return new UTChampionsUnclaimedEventDTO(e);
                  })
                : []
            }),
              (i.status = t.status),
              (i.success = t.success),
              n.notify(i);
          }),
          services.UTUtasRequestQueue.send(e),
          n
        );
      }),
      (UTChampionsDAO.prototype.claimById = function claimById(o) {
        var a = new UTObservable();
        if (!this._authDelegate) return this._triggerUnauthorizedResponse(a), a;
        var e = new UTUtasHttpRequest(this._authDelegate);
        return (
          e.setPath('/ut/game/' + GAME_NAME + '/champion/user/prize'),
          e.setRequestBody({
            idList: o
          }),
          e.setRequestType(enums.HTTPRequestMethod.POST),
          e.observe(this, function _onClaimByIdComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            if (
              ((i.response = {
                awards: [],
                eventsFullyClaimed: []
              }),
              (i.status = t.status),
              (i.success = t.success),
              t.success &&
                t.response &&
                utils.JS.isObject(t.response) &&
                0 < Object.keys(t.response).length &&
                t.response.awardedPrizes)
            ) {
              t.response.awardedPrizes.forEach(function(e) {
                e.awards.forEach(function(e) {
                  i.response.awards.push(new transferobjects.Reward(e));
                }, this);
              }, this);
              var s = o;
              if (0 < t.response.prizesInError.length) {
                var n = t.response.prizesInError.map(function(e) {
                  return e.eventId;
                }, this);
                s = utils.JS.removeElementsFromArray(o, n);
              }
              i.response.eventsFullyClaimed = s;
            }
            a.notify(i);
          }),
          services.UTUtasRequestQueue.send(e),
          a
        );
      }),
      new UTChampionsDAO()
    );
  })()),
  utils.JS.inherits(UTConsolidatedRewardsDTO, UTObject),
  (UTConsolidatedRewardsDTO.prototype.organize = function organize() {
    this.awards.sort(function(e, t) {
      return utils.JS.sortCompare(
        e.isChampionQualificationPoints,
        t.isChampionQualificationPoints
      );
    });
  }),
  NamespaceManager.Register('services'),
  (services.Champions = (function() {
    function ChampionsService() {
      this._events = new UTHashTable();
    }
    return (
      (ChampionsService.prototype.reset = function reset() {
        this._events.clear();
      }),
      (ChampionsService.prototype.requestUpcomingEvents = function requestUpcomingEvents() {
        var i = new UTObservable(),
          s = new transferobjects.ServiceResponse();
        if (
          !services.Configuration.checkFeatureEnabled(
            enums.ServerFeature.CHAMPIONS_ENABLED
          )
        )
          return (
            (s.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED),
            i.notify(s),
            i
          );
        return (
          accessobjects.Champions.getUpcomingEvents().observe(
            this,
            function _onGetUpcomingEventsComplete(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                (s.data = {
                  events: t.response.events
                }),
                s.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                  services.Configuration.setFeatureEnabled(
                    enums.ServerFeature.CHAMPIONS_ENABLED,
                    !1
                  ),
                i.notify(s);
            }
          ),
          i
        );
      }),
      (ChampionsService.prototype.requestUnclaimedEvents = function requestUnclaimedEvents() {
        var i = new UTObservable(),
          s = new transferobjects.ServiceResponse();
        if (
          ((s.data = {
            unclaimedEvents: []
          }),
          !services.Configuration.checkFeatureEnabled(
            enums.ServerFeature.CHAMPIONS_ENABLED
          ))
        )
          return (
            (s.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED),
            i.notify(s),
            i
          );
        if (0 < this._events.length)
          return (
            (s.success = !0),
            (s.status = enums.HTTPStatusCode.OK),
            (s.data.unclaimedEvents = this._events.values()),
            i.notify(s),
            i
          );
        return (
          accessobjects.Champions.getUnclaimedEvents().observe(
            this,
            function _onUnclaimedEventsRetrieved(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                s.success
                  ? (t.response.unclaimedPrizesChampionEvents.forEach(function(
                      e
                    ) {
                      this._events.set(e.id, e);
                    },
                    this),
                    (s.data.unclaimedEvents = this._events.values()))
                  : s.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                    services.Configuration.setFeatureEnabled(
                      enums.ServerFeature.CHAMPIONS_ENABLED,
                      !1
                    ),
                i.notify(s);
            }
          ),
          i
        );
      }),
      (ChampionsService.prototype.claimById = function claimById(e) {
        var n = new UTObservable(),
          o = new transferobjects.ServiceResponse();
        return (
          accessobjects.Champions.claimById(utils.JS.valToArray(e)).observe(
            this,
            function _onClaimByIdComplete(e, t) {
              e.unobserve(this);
              var i = {};
              if (
                (((i = {
                  id: 1
                }).awards = t.response.awards),
                (o.success = t.success),
                (o.status = t.status),
                (o.data = {
                  awards: [new UTConsolidatedRewardsDTO(i)],
                  allClaimed: !1
                }),
                t.success && 0 < o.data.awards.length)
              ) {
                t.response.eventsFullyClaimed.forEach(function(e) {
                  this._events.remove(e);
                }, this);
                var s = 0 === this._events.length;
                s ||
                  services.Notification.queue([
                    services.Localization.localize(
                      'notification.champions.claimAllFailed'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]),
                  (o.data.allClaimed = s);
              } else
                o.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                  services.Configuration.setFeatureEnabled(
                    enums.ServerFeature.CHAMPIONS_ENABLED,
                    !1
                  ),
                  services.Notification.queue([
                    services.Localization.localize(
                      'notification.champions.claimFailed'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]);
              n.notify(o);
            }
          ),
          n
        );
      }),
      (ChampionsService.prototype.claimRewards = function claimRewards() {
        var i = new UTObservable(),
          s = new transferobjects.ServiceResponse();

        function _onClaimComplete(e, t) {
          e.unobserve(this), (s = t), i.notify(t);
        }
        return (
          this.requestUnclaimedEvents().observe(this, function(e) {
            if ((e.unobserve(this), 0 < this._events.length)) {
              var t = this._events.map(function(e) {
                return e.id;
              });
              this.claimById(t).observe(this, _onClaimComplete);
            } else services.Notification.queue([services.Localization.localize('notification.champions.claimFailed'), enums.UINotificationType.NEGATIVE]), i.notify(s);
          }),
          i
        );
      }),
      new ChampionsService()
    );
  })()),
  utils.JS.inherits(UTLeaderboardOptionDTO, UTObject),
  utils.JS.inherits(UTLeaderboardEntryDTO, UTObject),
  utils.JS.inherits(UTLeaderboardPermutationDTO, UTObject),
  NamespaceManager.Register('accessobjects'),
  (accessobjects.Leaderboards = (function() {
    function UTLeaderboardsDAO() {
      UTObject.call(this),
        (this._authDelegate = null),
        Object.defineProperty(this, '_authDelegate', {
          writable: !0,
          enumerable: !1
        });
    }
    return (
      utils.JS.inherits(UTLeaderboardsDAO, UTObject),
      (UTLeaderboardsDAO.prototype.setAuthDelegate = function setAuthDelegate(
        e
      ) {
        e && e.conforms(interfaces.AuthDelegate) && (this._authDelegate = e);
      }),
      (UTLeaderboardsDAO.prototype._triggerUnauthorizedResponse = function _triggerUnauthorizedResponse(
        e
      ) {
        console.log(
          'Missing composite authentication delegate in UTLeaderboardsDAO'
        );
        var t = new transferobjects.FUTHttpResponse();
        (t.status = enums.HTTPStatusCode.UNAUTHORIZED), e.notify(t);
      }),
      (UTLeaderboardsDAO.prototype.getOptions = function getOptions() {
        var o = new UTObservable();
        if (!this._authDelegate) return this._triggerUnauthorizedResponse(o), o;
        var e = new UTUtasHttpRequest(this._authDelegate);
        return (
          e.setPath('/ut/game/' + GAME_NAME + '/leaderboards/options'),
          e.observe(this, function _onGetOptionsComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse(),
              s = utils.JS.isObject(t.response),
              n = new UTLeaderboardPermutationDTO();
            utils.JS.assignPropertyValues(t, i),
              t.success &&
                s &&
                utils.JS.isObject(t.response.selection) &&
                ((n.category = t.response.selection.category),
                (n.period = t.response.selection.period),
                (n.view = t.response.selection.view)),
              (i.response = {
                options:
                  s && 0 < t.response.options.length
                    ? utils.JS.flattenArray(
                        t.response.options.map(function(i) {
                          var s = [];
                          return (
                            i[i.id].forEach(function(e) {
                              var t = new UTLeaderboardOptionDTO(e);
                              (t.groupId = i.id), s.push(t);
                            }, this),
                            s
                          );
                        })
                      )
                    : [],
                selection: n
              }),
              o.notify(i);
          }),
          services.UTUtasRequestQueue.send(e),
          o
        );
      }),
      (UTLeaderboardsDAO.prototype.getLeaderboardByPermutation = function getLeaderboardByPermutation(
        n
      ) {
        var o = new UTObservable();
        if (!this._authDelegate) return this._triggerUnauthorizedResponse(o), o;
        var e = new UTUtasHttpRequest(this._authDelegate);
        return (
          e.setPath(
            '/ut/game/' +
              GAME_NAME +
              '/leaderboards/period/' +
              n.period +
              '/category/' +
              n.category +
              '/view/' +
              n.view
          ),
          e.observe(this, function _onGetLeaderboardComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse(),
              s = utils.JS.isObject(t.response);
            utils.JS.assignPropertyValues(t, i),
              (i.response = {
                entries:
                  s &&
                  Array.isArray(t.response.entries) &&
                  0 < t.response.entries.length
                    ? t.response.entries.map(function(e) {
                        var t = new UTLeaderboardEntryDTO(e);
                        return (t.category = n.category), t;
                      })
                    : []
              }),
              o.notify(i);
          }),
          services.UTUtasRequestQueue.send(e),
          o
        );
      }),
      (UTLeaderboardsDAO.prototype.getUserStatsByPeriod = function getUserStatsByPeriod(
        e
      ) {
        var n = new UTObservable();
        if (!this._authDelegate) return this._triggerUnauthorizedResponse(n), n;
        var t = new UTUtasHttpRequest(this._authDelegate),
          o = this._authDelegate.getCurrentUser().getSelectedPersona(),
          i = o.id;
        return (
          t.setPath(
            '/ut/game/' + GAME_NAME + '/leaderboards/period/' + e + '/user/' + i
          ),
          t.observe(this, function _onGetUserStatsComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            if (
              ((i.success = t.success),
              (i.status = t.status),
              (i.response = {
                entries: []
              }),
              i.success && Array.isArray(t.response.category))
            ) {
              var s = o.getCurrentClub();
              i.response.entries = t.response.category.map(function(e) {
                return new UTLeaderboardEntryDTO({
                  badge: s.assetId,
                  category: e.id,
                  clubName: s.name,
                  est: s.established,
                  persona: o.name,
                  rank: 0,
                  score: {
                    value: e.score.value
                  },
                  teamId: 0
                });
              });
            }
            n.notify(i);
          }),
          services.UTUtasRequestQueue.send(t),
          n
        );
      }),
      new UTLeaderboardsDAO()
    );
  })()),
  utils.JS.inherits(UTLeaderboardEntryRepository, UTHashTable),
  (UTLeaderboardEntryRepository.prototype.reset = function reset() {
    this.clear(), this._expiryTimestamps.clear();
  }),
  (UTLeaderboardEntryRepository.prototype.setEntriesByPermutation = function setEntriesByPermutation(
    e,
    t
  ) {
    var i = this._generateUniqueIdFromPermutation(e);
    this.remove(i), this.set(i, t);
  }),
  (UTLeaderboardEntryRepository.prototype.getEntriesByPermutation = function getEntriesByPermutation(
    e
  ) {
    var t = this._generateUniqueIdFromPermutation(e),
      i = this.get(t);
    return Array.isArray(i) ? i : [];
  }),
  (UTLeaderboardEntryRepository.prototype.isEmpty = function isEmpty(e) {
    if (utils.JS.isValid(e)) {
      var t = this._generateUniqueIdFromPermutation(e),
        i = this.get(t);
      return !Array.isArray(i) || i.length < 1;
    }
    return this.values().length < 1;
  }),
  (UTLeaderboardEntryRepository.prototype.isCacheExpired = function isCacheExpired(
    e
  ) {
    var t = this._generateUniqueIdFromPermutation(e);
    return (this._expiryTimestamps.get(t) || 0) < Date.now();
  }),
  (UTLeaderboardEntryRepository.prototype.setCacheTimestamp = function setCacheTimestamp(
    e,
    t,
    i
  ) {
    var s = this._generateUniqueIdFromPermutation(e);
    this._expiryTimestamps.set(
      s,
      t + (utils.JS.isNumber(i) ? i * MS_PER_SECOND : 3e5)
    );
  }),
  (UTLeaderboardEntryRepository.prototype._generateUniqueIdFromPermutation = function _generateUniqueIdFromPermutation(
    e
  ) {
    return e.category + ':' + e.view + ':' + e.period;
  }),
  NamespaceManager.Register('services'),
  (services.Leaderboards = (function() {
    function UTLeaderboardsService() {
      UTObject.call(this),
        (this._leaderboardEntries = new UTLeaderboardEntryRepository()),
        Object.defineProperty(this, '_leaderboardEntries', {
          writable: !1,
          enumerable: !1
        }),
        (this._userEntries = new UTLeaderboardEntryRepository()),
        Object.defineProperty(this, '_userEntries', {
          writable: !1,
          enumerable: !1
        });
    }
    return (
      utils.JS.inherits(UTLeaderboardsService, UTObject),
      (UTLeaderboardsService.prototype.requestOptions = function requestOptions() {
        var i = new UTObservable(),
          s = new transferobjects.ServiceResponse();
        return (
          accessobjects.Leaderboards.getOptions().observe(
            this,
            function _onGetOptionsComplete(e, t) {
              e.unobserve(this),
                (s.status = t.status),
                (s.success = t.success),
                (s.data = {
                  options: t.response.options,
                  selection: t.response.selection
                }),
                i.notify(s);
            }
          ),
          i
        );
      }),
      (UTLeaderboardsService.prototype.requestLeaderboardByPermutation = function requestLeaderboardByPermutation(
        i
      ) {
        var s = new UTObservable(),
          n = new transferobjects.ServiceResponse();
        if (
          !this._leaderboardEntries.isEmpty(i) &&
          !this._leaderboardEntries.isCacheExpired(i)
        )
          return (
            (n.success = !0),
            (n.status = enums.HTTPStatusCode.NOT_MODIFIED),
            (n.data = {
              entries: this._leaderboardEntries.getEntriesByPermutation(i)
            }),
            s.notify(n),
            s
          );
        return (
          accessobjects.Leaderboards.getLeaderboardByPermutation(i).observe(
            this,
            function _onGetLeaderboardComplete(e, t) {
              e.unobserve(this),
                (n.status = t.status),
                (n.success = t.success),
                (n.data = {
                  entries: []
                }),
                t.success &&
                  Array.isArray(t.response.entries) &&
                  ((n.data.entries = t.response.entries.sort(function(e, t) {
                    return utils.JS.sortCompare(e.rank, t.rank);
                  })),
                  this._leaderboardEntries.setEntriesByPermutation(
                    i,
                    n.data.entries
                  ),
                  this._leaderboardEntries.setCacheTimestamp(i, Date.now())),
                s.notify(n);
            }
          ),
          s
        );
      }),
      (UTLeaderboardsService.prototype.requestUserStatsByPermutation = function requestUserStatsByPermutation(
        i
      ) {
        var s = new UTObservable(),
          n = new transferobjects.ServiceResponse();
        if (
          !this._userEntries.isEmpty(i) &&
          !this._userEntries.isCacheExpired(i)
        ) {
          var e = this._userEntries.getEntriesByPermutation(i);
          return (
            (n.success = !0),
            (n.status = enums.HTTPStatusCode.NOT_MODIFIED),
            (n.data = {
              entries: e,
              current: utils.JS.find(e, function(e) {
                return e.category === i.category;
              })
            }),
            s.notify(n),
            s
          );
        }
        return (
          accessobjects.Leaderboards.getUserStatsByPeriod(i.period).observe(
            this,
            function _onGetUserStatsComplete(e, t) {
              e.unobserve(this),
                (n.status = t.status),
                (n.success = t.success),
                (n.data = {
                  entries: [],
                  current: null
                }),
                t.success &&
                  Array.isArray(t.response.entries) &&
                  ((n.data.entries = t.response.entries),
                  (n.data.current = utils.JS.find(t.response.entries, function(
                    e
                  ) {
                    return e.category === i.category;
                  })),
                  this._userEntries.setEntriesByPermutation(
                    i,
                    t.response.entries
                  ),
                  this._userEntries.setCacheTimestamp(
                    i,
                    Date.now(),
                    0 < t.maxAge ? t.maxAge : null
                  )),
                s.notify(n);
            }
          ),
          s
        );
      }),
      new UTLeaderboardsService()
    );
  })()),
  (UTLocaleVO.prototype.equals = function equals(e) {
    return (
      this.language === e.language &&
      this.region === e.region &&
      this.variant === e.variant
    );
  }),
  (UTLocaleVO.prototype.toString = function toString() {
    return (
      this.language +
      (this.variant !== enums.LanguageVariant.NONE ? '_' + this.variant : '') +
      '_' +
      this.region
    );
  }),
  (UTLocaleVO.prototype.toBCPString = function toBCPString() {
    return (
      this.language +
      (this.variant !== enums.LanguageVariant.NONE ? '-' + this.variant : '') +
      '-' +
      this.region
    );
  }),
  (UTLocaleVO.prototype.toEAFIFAString = function toEAFIFAString() {
    var e = this.language,
      t = this.region;
    return (
      e === enums.Language.JAPANESE && (e = 'jp'),
      t === enums.Region.TAIWAN && (t = enums.Region.HONGKONG),
      e + '-' + t
    );
  }),
  (UTLocaleVO.prototype.toEANetworkString = function toEANetworkString() {
    return this.language + '_' + this.region;
  }),
  (UTLocaleVO.prototype.isValid = function isValid() {
    return (
      this.language !== enums.Language.UNKNOWN &&
      this.region !== enums.Region.UNKNOWN
    );
  }),
  utils.JS.inherits(UTLocaleFactory, UTObject),
  (UTLocaleFactory.prototype._convertLanguageToSupportedLanguage = function _convertLanguageToSupportedLanguage(
    e
  ) {
    switch (e) {
      case enums.Language.FRENCH:
        return enums.Language.FRENCH;
      case enums.Language.ITALIAN:
        return enums.Language.ITALIAN;
      case enums.Language.GERMAN:
        return enums.Language.GERMAN;
      case enums.Language.SPANISH:
        return enums.Language.SPANISH;
      case enums.Language.DUTCH:
        return enums.Language.DUTCH;
      case enums.Language.PORTUGUESE:
        return enums.Language.PORTUGUESE;
      case enums.Language.POLISH:
        return enums.Language.POLISH;
      case enums.Language.ARABIC:
        return enums.Language.ARABIC;
      case enums.Language.RUSSIAN:
        return enums.Language.RUSSIAN;
      case enums.Language.TURKISH:
        return enums.Language.TURKISH;
      case enums.Language.JAPANESE:
        return enums.Language.JAPANESE;
      case enums.Language.KOREAN:
        return enums.Language.KOREAN;
      case enums.Language.CHINESE:
        return enums.Language.CHINESE;
      default:
        return enums.Language.ENGLISH;
    }
  }),
  (UTLocaleFactory.prototype._convertLanguageVariantToSupportedVariant = function _convertLanguageVariantToSupportedVariant(
    e
  ) {
    switch (e) {
      case enums.LanguageVariant.CHINESE_SIMPLIFIED:
        return enums.LanguageVariant.CHINESE_SIMPLIFIED;
      case enums.LanguageVariant.CHINESE_TRADITIONAL:
        return enums.LanguageVariant.CHINESE_TRADITIONAL;
      default:
        return enums.LanguageVariant.NONE;
    }
  }),
  (UTLocaleFactory.prototype._convertRegionToSupportedRegion = function _convertRegionToSupportedRegion(
    e
  ) {
    switch (e) {
      case enums.Region.FRANCE:
        return enums.Region.FRANCE;
      case enums.Region.ITALY:
        return enums.Region.ITALY;
      case enums.Region.GERMANY:
        return enums.Region.GERMANY;
      case enums.Region.SPAIN:
        return enums.Region.SPAIN;
      case enums.Region.MEXICO:
        return enums.Region.MEXICO;
      case enums.Region.NETHERLANDS:
        return enums.Region.NETHERLANDS;
      case enums.Region.BRAZIL:
        return enums.Region.BRAZIL;
      case enums.Region.POLAND:
        return enums.Region.POLAND;
      case enums.Region.SAUDI_ARABIA:
        return enums.Region.SAUDI_ARABIA;
      case enums.Region.RUSSIA:
        return enums.Region.RUSSIA;
      case enums.Region.TURKEY:
        return enums.Region.TURKEY;
      case enums.Region.JAPAN:
        return enums.Region.JAPAN;
      case enums.Region.KOREA:
        return enums.Region.KOREA;
      case enums.Region.TAIWAN:
        return enums.Region.TAIWAN;
      case enums.Region.CHINA:
        return enums.Region.CHINA;
      default:
        return enums.Region.USA;
    }
  }),
  (UTLocaleFactory.prototype._getLanguageFromRegion = function _getLanguageFromRegion(
    e
  ) {
    switch (e) {
      case enums.Region.USA:
        return enums.Language.ENGLISH;
      case enums.Region.FRANCE:
        return enums.Language.FRENCH;
      case enums.Region.ITALY:
        return enums.Language.ITALIAN;
      case enums.Region.GERMANY:
        return enums.Language.GERMAN;
      case enums.Region.SPAIN:
      case enums.Region.MEXICO:
        return enums.Language.SPANISH;
      case enums.Region.NETHERLANDS:
        return enums.Language.DUTCH;
      case enums.Region.BRAZIL:
        return enums.Language.PORTUGUESE;
      case enums.Region.POLAND:
        return enums.Language.POLISH;
      case enums.Region.SAUDI_ARABIA:
        return enums.Language.ARABIC;
      case enums.Region.RUSSIA:
        return enums.Language.RUSSIAN;
      case enums.Region.TURKEY:
        return enums.Language.TURKISH;
      case enums.Region.JAPAN:
        return enums.Language.JAPANESE;
      case enums.Region.KOREA:
        return enums.Language.KOREAN;
      case enums.Region.CHINA:
      case enums.Region.TAIWAN:
        return enums.Language.CHINESE;
      default:
        return enums.Language.ENGLISH;
    }
  }),
  (UTLocaleFactory.prototype._getLanguageVariantFromRegion = function _getLanguageVariantFromRegion(
    e
  ) {
    switch (e) {
      case enums.Region.TAIWAN:
        return enums.LanguageVariant.CHINESE_TRADITIONAL;
      case enums.Region.CHINA:
        return enums.LanguageVariant.CHINESE_SIMPLIFIED;
      default:
        return enums.LanguageVariant.NONE;
    }
  }),
  (UTLocaleFactory.prototype._getRegionFromLanguage = function _getRegionFromLanguage(
    e,
    t
  ) {
    switch (e) {
      case enums.Language.ENGLISH:
        return enums.Region.USA;
      case enums.Language.FRENCH:
        return enums.Region.FRANCE;
      case enums.Language.ITALIAN:
        return enums.Region.ITALY;
      case enums.Language.GERMAN:
        return enums.Region.GERMANY;
      case enums.Language.SPANISH:
        return enums.Region.SPAIN;
      case enums.Language.DUTCH:
        return enums.Region.NETHERLANDS;
      case enums.Language.PORTUGUESE:
        return enums.Region.BRAZIL;
      case enums.Language.POLISH:
        return enums.Region.POLAND;
      case enums.Language.ARABIC:
        return enums.Region.SAUDI_ARABIA;
      case enums.Language.RUSSIAN:
        return enums.Region.RUSSIA;
      case enums.Language.TURKISH:
        return enums.Region.TURKEY;
      case enums.Language.JAPANESE:
        return enums.Region.JAPAN;
      case enums.Language.KOREAN:
        return enums.Region.KOREA;
      case enums.Language.CHINESE:
        return t === enums.LanguageVariant.CHINESE_TRADITIONAL
          ? enums.Region.TAIWAN
          : enums.Region.CHINA;
      default:
        return enums.Region.USA;
    }
  }),
  (UTLocaleFactory.prototype._getLanguageName = function _getLanguageName(
    e,
    t,
    i
  ) {
    switch (e) {
      case enums.Language.ENGLISH:
        return 'English';
      case enums.Language.FRENCH:
        return 'FranÃ§ais';
      case enums.Language.ITALIAN:
        return 'Italiano';
      case enums.Language.GERMAN:
        return 'Deutsch';
      case enums.Language.SPANISH:
        return t === enums.Region.MEXICO
          ? 'EspaÃ±ol (AmÃ©rica Latina)'
          : 'EspaÃ±ol';
      case enums.Language.DUTCH:
        return 'Nederlands';
      case enums.Language.PORTUGUESE:
        return 'PortuguÃªs do Brasil';
      case enums.Language.POLISH:
        return 'Polski';
      case enums.Language.ARABIC:
        return 'Ø§Ù„Ø¹ÙŽØ±ÙŽØ¨ÙÙŠÙŽÙ‘Ø©';
      case enums.Language.RUSSIAN:
        return 'Ð ÑƒÑÑÐºÐ¸Ð¹';
      case enums.Language.TURKISH:
        return 'TÃ¼rkÃ§e';
      case enums.Language.JAPANESE:
        return 'æ—¥æœ¬èªž';
      case enums.Language.KOREAN:
        return 'í•œêµ­ì–´';
      case enums.Language.CHINESE:
        return i === enums.LanguageVariant.CHINESE_TRADITIONAL
          ? 'ç¹é«”ä¸­æ–‡'
          : 'ç®€ä½“ä¸­æ–‡';
      default:
        return '';
    }
  }),
  (UTLocaleFactory.prototype._getLanguageDirection = function _getLanguageDirection(
    e
  ) {
    switch (e) {
      case enums.Language.ARABIC:
        return 'rtl';
      default:
        return 'ltr';
    }
  }),
  (UTLocaleFactory.prototype.createLocaleFromLanguage = function createLocaleFromLanguage(
    e,
    t
  ) {
    (e = this._convertLanguageToSupportedLanguage(e.toLowerCase())),
      (t = this._convertLanguageVariantToSupportedVariant(t));
    var i = this._getRegionFromLanguage(e, t);
    return new UTLocaleVO(
      i,
      e,
      t,
      this._getLanguageName(e, i, t),
      this._getLanguageDirection(e)
    );
  }),
  (UTLocaleFactory.prototype.createLocaleFromRegion = function createLocaleFromRegion(
    e
  ) {
    e = this._convertRegionToSupportedRegion(e.toUpperCase());
    var t = this._getLanguageFromRegion(e),
      i = this._getLanguageVariantFromRegion(e);
    return new UTLocaleVO(
      e,
      t,
      i,
      this._getLanguageName(t, e, i),
      this._getLanguageDirection(t)
    );
  }),
  utils.JS.inherits(UTLocalizationRepository, UTHashTable),
  NamespaceManager.Register('services'),
  (services.Localization = (function() {
    function UTLocalizationService() {
      UTObject.call(this),
        (this.storeLocLoaded = !1),
        (this.localizationEnabled = !0),
        (this._factory = new UTLocaleFactory()),
        (this._repository = new UTLocalizationRepository()),
        Object.defineProperty(this, '_repository', {
          writable: !1,
          enumerable: !1
        }),
        (this._locale = this._factory.createLocaleFromLanguage(
          enums.Language.ENGLISH
        )),
        Object.defineProperty(this, '_locale', {
          writable: !0,
          enumerable: !1
        }),
        (this._supportedLanguages = [
          enums.Language.ENGLISH,
          enums.Language.FRENCH,
          enums.Language.ITALIAN,
          enums.Language.GERMAN,
          enums.Language.SPANISH,
          enums.Language.DUTCH,
          enums.Language.PORTUGUESE,
          enums.Language.ARABIC,
          enums.Language.TURKISH,
          enums.Language.POLISH,
          enums.Language.RUSSIAN,
          enums.Language.JAPANESE,
          enums.Language.KOREAN,
          enums.Language.CHINESE
        ]),
        Object.defineProperty(this, '_supportedLanguages', {
          writable: !1,
          enumerable: !1
        }),
        (this._rtlLanguages = [enums.Language.ARABIC]),
        Object.defineProperty(this, '_rtlLanguages', {
          writable: !1,
          enumerable: !1
        });
    }
    return (
      utils.JS.inherits(UTLocalizationService, UTObject),
      (UTLocalizationService.prototype.setLocale = function setLocale(e) {
        this._locale = e;
      }),
      (UTLocalizationService.prototype.setLocaleFromString = function setLocaleFromString(
        e
      ) {
        var t = e.split('_');
        2 < t.length
          ? this.setLocaleFromLanguage(t[0], t[1])
          : 2 === t.length
          ? this.setLocaleFromRegion(t[1])
          : this.setLocaleFromLanguage(t[0]);
      }),
      (UTLocalizationService.prototype.setLocaleFromRegion = function setLocaleFromRegion(
        e
      ) {
        this._locale = this._factory.createLocaleFromRegion(e);
      }),
      (UTLocalizationService.prototype.setLocaleFromLanguage = function setLocaleFromLanguage(
        e,
        t
      ) {
        this._locale = this._factory.createLocaleFromLanguage(e, t);
      }),
      (UTLocalizationService.prototype.getLocale = function getLocale() {
        return this._locale;
      }),
      (UTLocalizationService.prototype.getSupportedLocales = function getSupportedLocales() {
        return [
          this._factory.createLocaleFromLanguage(enums.Language.ENGLISH),
          this._factory.createLocaleFromLanguage(enums.Language.FRENCH),
          this._factory.createLocaleFromLanguage(enums.Language.ITALIAN),
          this._factory.createLocaleFromLanguage(enums.Language.GERMAN),
          this._factory.createLocaleFromRegion(enums.Region.SPAIN),
          this._factory.createLocaleFromLanguage(enums.Language.DUTCH),
          this._factory.createLocaleFromLanguage(enums.Language.PORTUGUESE),
          this._factory.createLocaleFromLanguage(enums.Language.POLISH),
          this._factory.createLocaleFromLanguage(enums.Language.ARABIC),
          this._factory.createLocaleFromLanguage(enums.Language.RUSSIAN),
          this._factory.createLocaleFromLanguage(enums.Language.TURKISH),
          this._factory.createLocaleFromRegion(enums.Region.MEXICO),
          this._factory.createLocaleFromLanguage(enums.Language.JAPANESE),
          this._factory.createLocaleFromLanguage(enums.Language.KOREAN),
          this._factory.createLocaleFromLanguage(
            enums.Language.CHINESE,
            enums.LanguageVariant.CHINESE_SIMPLIFIED
          ),
          this._factory.createLocaleFromLanguage(
            enums.Language.CHINESE,
            enums.LanguageVariant.CHINESE_TRADITIONAL
          )
        ];
      }),
      (UTLocalizationService.prototype.isRTL = function isRTL() {
        return 0 <= this._rtlLanguages.indexOf(this._locale.language);
      }),
      (UTLocalizationService.prototype.isLatinAlphabet = function isLatinAlphabet() {
        return (
          this._locale.language !== enums.Language.JAPANESE &&
          this._locale.language !== enums.Language.KOREAN &&
          this._locale.language !== enums.Language.CHINESE &&
          this._locale.language !== enums.Language.ARABIC &&
          this._locale.language !== enums.Language.RUSSIAN
        );
      }),
      (UTLocalizationService.prototype.isLanguageSupported = function isLanguageSupported(
        e
      ) {
        return 0 <= this._supportedLanguages.indexOf(e);
      }),
      (UTLocalizationService.prototype.addLocalizationStrings = function addLocalizationStrings(
        e
      ) {
        var t;
        for (t in e) e.hasOwnProperty(t) && this._repository.set(t, e[t]);
      }),
      (UTLocalizationService.prototype.localize = function localize(e, t) {
        var i = this._repository.get(e);
        return i
          ? (Array.isArray(t) &&
              0 < t.length &&
              t.forEach(function(e, t) {
                i = i.replace('%' + (t + 1).toString(), e.toString());
              }),
            i)
          : (i = '*' + e);
      }),
      (UTLocalizationService.prototype.localizeNumber = function localizeNumber(
        e
      ) {
        return this._locale.language === enums.Language.ARABIC
          ? e.toLocaleString(enums.Language.ENGLISH + '-' + enums.Region.USA)
          : e.toLocaleString(this._locale.toBCPString());
      }),
      (UTLocalizationService.prototype.localizeHeight = function localizeHeight(
        e
      ) {
        return this._locale.region === enums.Region.USA
          ? utils.TextUtils.centimetersToFeet(e)
          : e + ' cm';
      }),
      (UTLocalizationService.prototype.localizeDate = function localizeDate(e) {
        var t = utils.TextUtils.formatToTwoDigits(e.getMonth() + 1),
          i = utils.TextUtils.formatToTwoDigits(e.getDate()),
          s = e.getFullYear().toString();
        return this.localize('date.mmddyyyy', [t, i, s]);
      }),
      (UTLocalizationService.prototype.localizeDateTime = function localizeDateTime(
        e,
        t
      ) {
        var i = t ? e.getUTCHours() : e.getHours(),
          s = utils.TextUtils.formatToTwoDigits(
            t ? e.getUTCMinutes() : e.getMinutes()
          ),
          n = t ? e.getUTCDate().toString() : e.getDate().toString(),
          o = this.localize(MONTH_NAMES[t ? e.getUTCMonth() : e.getMonth()]),
          a = t ? e.getUTCFullYear().toString() : e.getFullYear().toString(),
          r = this._locale.language === enums.Language.ENGLISH,
          l = r ? (i % 12 || 12).toString() : i.toString(),
          c = '';
        return (
          r && (c = 12 <= i ? 'pm' : 'am'),
          this.localize('date.ddmmmyyyyhhmm', [n, o, a, l, s, c])
        );
      }),
      (UTLocalizationService.prototype.localizeEstablishedDate = function localizeEstablishedDate(
        e
      ) {
        return (function _FUTFounder(e) {
          return e.valueOf() < new Date(2009, 4, 1).valueOf();
        })(e)
          ? this.localize('controlbar.FUTFounder')
          : this.localize('controlbar.clubinfo.established', [
              function _localizeMonthYear(e) {
                var t = e.getMonth(),
                  i = e.getFullYear().toString();
                return this.localize('date.mmyy', [
                  this.localize(MONTH_NAMES[t]),
                  i
                ]);
              }.call(this, e)
            ]);
      }),
      (UTLocalizationService.prototype.localizeTimeRemaining = function localizeTimeRemaining(
        e
      ) {
        utils.Debug.Assert(
          0 <= e,
          'Expected parameter to be a positive integer.'
        );
        var t = Math.floor(e / SECONDS_PER_DAY),
          i = Math.floor(e / SECONDS_PER_HOUR),
          s = Math.floor(e / SECONDS_PER_MINUTE),
          n = Math.floor(
            e -
              (t * SECONDS_PER_DAY +
                i * SECONDS_PER_HOUR +
                s * SECONDS_PER_MINUTE)
          );
        return 0 < t
          ? ((i = Math.floor((e - t * SECONDS_PER_DAY) / SECONDS_PER_HOUR)),
            this.localize('timespan.dayshours', [this.localizeNumber(t), i]))
          : 0 < i
          ? ((s = Math.floor((e - i * SECONDS_PER_HOUR) / SECONDS_PER_MINUTE)),
            this.localize('timespan.hoursminutes', [i, s]))
          : 0 < s
          ? this.localize('timespan.minutesseconds', [s, n])
          : 1 === n
          ? '1 ' + this.localize('timespan.second')
          : this.localize('timespan.seconds', [n]);
      }),
      (UTLocalizationService.prototype.localizePromoTimeRemaining = function localizePromoTimeRemaining(
        e
      ) {
        if (
          (utils.Debug.Assert(
            0 <= e,
            'Expected parameter to be a positive integer.'
          ),
          e < 0)
        )
          return this.localize('timespan.listview.seconds');
        var t = Math.floor(e / SECONDS_PER_DAY),
          i = Math.floor(e / SECONDS_PER_HOUR),
          s = Math.floor(e / SECONDS_PER_MINUTE);
        return 0 < t
          ? ((i = Math.floor((e - t * SECONDS_PER_DAY) / SECONDS_PER_HOUR)),
            this.localize('timespan.dayshours', [t, i]))
          : 0 < i
          ? ((s = Math.floor((e - i * SECONDS_PER_HOUR) / SECONDS_PER_MINUTE)),
            this.localize('timespan.hoursminutes', [i, s]))
          : 0 < s
          ? 1 === s
            ? '1 ' + this.localize('timespan.minute')
            : this.localize('timespan.minutes', [s])
          : this.localize('timespan.listview.seconds');
      }),
      (UTLocalizationService.prototype.localizeAuctionTimeRemaining = function localizeAuctionTimeRemaining(
        e
      ) {
        utils.Debug.Assert(
          0 <= e,
          'Expected parameter to be a positive integer.'
        );
        var t = Math.floor(e / SECONDS_PER_DAY),
          i = Math.floor(e / SECONDS_PER_HOUR),
          s = Math.floor(e / SECONDS_PER_MINUTE);
        return (
          (e = Math.floor(
            e -
              (t * SECONDS_PER_DAY +
                i * SECONDS_PER_HOUR +
                s * SECONDS_PER_MINUTE)
          )),
          0 < t
            ? 1 === t
              ? '1 ' + this.localize('timespan.day')
              : this.localize('timespan.days', [t])
            : 0 < i
            ? 1 === i
              ? '1 ' + this.localize('timespan.hour')
              : this.localize('timespan.hours', [i])
            : 0 < s
            ? 1 === s
              ? '1 ' + this.localize('timespan.minute')
              : this.localize('timespan.minutes', [s])
            : 30 < e
            ? this.localize('timespan.listview.seconds')
            : 15 < e
            ? this.localize('timespan.listview.underseconds', [30])
            : 5 < e
            ? this.localize('timespan.listview.underseconds', [15])
            : this.localize('timespan.listview.underseconds', [5])
        );
      }),
      (UTLocalizationService.prototype.addObfuscatedLocalizationStrings = function addObfuscatedLocalizationStrings(
        e
      ) {
        function b64DecodeUnicode(e) {
          return decodeURIComponent(
            atob(e)
              .split('')
              .map(function(e) {
                return '%' + ('00' + e.charCodeAt(0).toString(16)).slice(-2);
              })
              .join('')
          );
        }
        var t;
        for (t in e)
          if (e.hasOwnProperty(t)) {
            var i = b64DecodeUnicode(e[t]);
            (t = b64DecodeUnicode(t)), this._repository.set(t, i);
          }
      }),
      (UTLocalizationService.prototype.requestLocalization = function requestLocalization() {
        var i = new UTObservable(),
          s = new transferobjects.ServiceResponse();
        return (
          accessobjects.Configuration.getLocalization(this._locale).observe(
            this,
            function _onGetLocalizationComplete(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                t.success && this.addObfuscatedLocalizationStrings(t.response),
                i.notify(s);
            }
          ),
          i
        );
      }),
      (UTLocalizationService.prototype.requestStoreLocalization = function requestStoreLocalization() {
        var i = new UTObservable(),
          s = new transferobjects.ServiceResponse();
        return (
          accessobjects.Configuration.getStoreLocalization().observe(
            this,
            function _onGetStoreLocalizationComplete(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                t.success &&
                  ((function _convertStoreLocXMLToKeyValuePairs(e) {
                    return DOMKit.HTMLCollectionToArray(
                      e.getElementsByTagName('trans-unit')
                    ).reduce(function(e, t) {
                      var i = t.attributes.resname;
                      if (i && utils.JS.isValid(i.value)) {
                        var s = t.getElementsByTagName('source')[0];
                        e.push({
                          key: i.value,
                          value: s.textContent
                        });
                      }
                      return e;
                    }, []);
                  })(t.response).forEach(function(e) {
                    this._repository.set(e.key, e.value);
                  }, this),
                  (this.storeLocLoaded = !0)),
                i.notify(s);
            }
          ),
          i
        );
      }),
      new UTLocalizationService()
    );
  })()),
  NamespaceManager.Register('services'),
  (services.MTX = (function() {
    function UTMTXService() {
      (this._transactions = new UTHashTable()),
        Object.defineProperty(this, '_transactions', {
          writable: !1,
          enumerable: !1
        }),
        (this._nimbleMTXDisableFlag = !1),
        Object.defineProperty(this, '_nimbleMTXDisableFlag', {
          writable: !0,
          enumerable: !1
        });
    }
    return (
      (UTMTXService.prototype.reset = function reset() {
        this._transactions.clear(), (this._nimbleMTXDisableFlag = !1);
      }),
      (UTMTXService.prototype.hasUnverifiedTransactions = function hasUnverifiedTransactions() {
        return 0 < this._transactions.length;
      }),
      (UTMTXService.prototype.isNimbleMTXEnabled = function isNimbleMTXEnabled() {
        return !this._nimbleMTXDisableFlag;
      }),
      (UTMTXService.prototype.disableNimbleMTX = function disableNimbleMTX() {
        this._nimbleMTXDisableFlag = !0;
      }),
      (UTMTXService.prototype.storeNimbleMTXItems = function storeNimbleMTXItems(
        e
      ) {
        repositories.UTNimbleMTXItem.reset(),
          repositories.UTNimbleMTXItem.add(e);
      }),
      (UTMTXService.prototype.getNimbleMTXItems = function getNimbleMTXItems() {
        return repositories.UTNimbleMTXItem.values();
      }),
      (UTMTXService.prototype.hasNimbleMTXItems = function hasNimbleMTXItems() {
        return !repositories.UTNimbleMTXItem.isEmpty();
      }),
      (UTMTXService.prototype.beginTransaction = function beginTransaction(e) {
        var t = new UTObservable(),
          i = new transferobjects.ServiceResponse();
        return (
          window.plugins.utilities.startMTXPurchase(
            e,
            function transactionSuccessCb(e) {
              (i.success = !0), t.notify(i);
            },
            function transactionFailCb(e) {
              t.notify(i);
            }
          ),
          t
        );
      }),
      (UTMTXService.prototype.verifyTransaction = function verifyTransaction(
        i
      ) {
        var s = new UTObservable(),
          n = new transferobjects.ServiceResponse();
        if (
          ((n.data = {
            verified: !1
          }),
          this._transactions.set(i.id, i),
          !services.Configuration.checkFeatureEnabled(
            enums.ServerFeature.COMPANION_COMMERCE_ENABLED
          ))
        )
          return (
            (n.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED),
            s.notify(n),
            s
          );
        return (
          accessobjects.MTX.verifyAndRecordPurchase(i).observe(
            this,
            function _onVerificationComplete(e, t) {
              e.unobserve(this),
                (n.success = t.success),
                (n.status = t.status),
                (n.data.verified =
                  t.success || t.status === enums.HTTPStatusCode.CONFLICT),
                t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                  services.Configuration.setFeatureEnabled(
                    enums.ServerFeature.COMPANION_COMMERCE_ENABLED,
                    !1
                  ),
                n.data.verified && this._transactions.remove(i.id),
                s.notify(n);
            }
          ),
          s
        );
      }),
      (UTMTXService.prototype.verifyStoredTransactions = function verifyStoredTransactions() {
        var e = new UTObservable(),
          t = new transferobjects.ServiceResponse();
        if (!this.hasUnverifiedTransactions())
          return (
            utils.Debug.Assert(
              !1,
              "No transactions to verify. verifyStoredTransactions() shouldn't have been called."
            ),
            e.notify(t),
            e
          );
        var i = this._transactions.values()[0];
        return this.verifyTransaction(i);
      }),
      (UTMTXService.prototype.checkForOutstandingTransactions = function checkForOutstandingTransactions() {
        var i = new UTObservable(),
          s = new transferobjects.ServiceResponse();
        return (
          accessobjects.MTX.checkForOutstandingTransactions().observe(
            this,
            function _onCheckComplete(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                (s.data = t.response),
                t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                  (isWeb()
                    ? services.Configuration.setFeatureEnabled(
                        enums.ServerFeature.MTX_ENABLED,
                        !1
                      )
                    : services.Configuration.setFeatureEnabled(
                        enums.ServerFeature.COMPANION_COMMERCE_ENABLED,
                        !1
                      )),
                i.notify(s);
            }
          ),
          i
        );
      }),
      new UTMTXService()
    );
  })()),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.Notification = function UTNotificationDTO(e, t) {
    (this.message = e),
      Object.defineProperty(this, 'message', {
        writable: !1
      }),
      (this.type = t),
      Object.defineProperty(this, 'type', {
        writable: !1
      });
  }),
  NamespaceManager.Register('services'),
  (services.Notification = (function() {
    var t;

    function NotificationService() {
      (this.display = new UTObservable()),
        Object.freeze(this.display),
        (this._queue = []),
        Object.defineProperty(this, '_queue', {
          writable: !1,
          enumerable: !1
        });
    }
    return (
      (NotificationService.prototype.clearAll = function clearAll() {
        (t = clearInterval(t)), (this._queue.length = 0);
      }),
      (NotificationService.prototype.queue = function queue(e) {
        Array.prototype.slice.call(arguments).forEach(function(e) {
          if (Array.isArray(e)) {
            var t = new transferobjects.Notification(e[0], e[1]);
            this._queue.push(t);
          } else e instanceof transferobjects.Notification && this._queue.push(e);
        }, this),
          t ||
            function pushNotification() {
              if (0 < this._queue.length) {
                t || (t = setInterval(pushNotification.bind(this), 2e3));
                var e = this._queue.shift();
                this.display.notify(e);
              } else 0 === this._queue.length && (t = clearInterval(t));
            }.call(this);
      }),
      new NotificationService()
    );
  })()),
  NamespaceManager.Register('accessobjects'),
  (accessobjects.Onboarding = (function() {
    function UTOnboardingDAO() {
      UTObject.call(this),
        (this.UTAS_REQUEST_PATH = '/ut/game/' + GAME_NAME + '/'),
        Object.defineProperty(this, 'UTAS_REQUEST_PATH', {
          writable: !1,
          enumerable: !0
        });
    }
    return (
      utils.JS.inherits(UTOnboardingDAO, UTObject),
      (UTOnboardingDAO.prototype.getHistorical = function getHistorical(e) {
        var s = new UTObservable(),
          t = new UTUtasHttpRequest(e);

        function _mapToRewardDTO(e) {
          var t = {
            halId: e.halId,
            count: e.rewardQuantity,
            value: e.rewardValue
          };
          switch (e.rewardType) {
            case enums.LoyaltyRewardType.PACKS:
              t.type = enums.AwardType.PACK;
              break;
            case enums.LoyaltyRewardType.COINS:
              t.type = enums.AwardType.COIN;
              break;
            case enums.LoyaltyRewardType.ITEMS:
              (t.type = enums.AwardType.ITEM), (t.itemData = e.itemData);
          }
          return new transferobjects.Reward(t);
        }
        return (
          t.setPath(this.UTAS_REQUEST_PATH + 'user/historical'),
          t.observe(this, function _onGetHistoricalComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            utils.JS.assignPropertyValues(t, i),
              (i.response = {
                name: t.success ? t.response.clubName : '',
                abbr: t.success ? t.response.clubAbbr : '',
                rewards:
                  t.success && t.response.returningUserRewards
                    ? t.response.returningUserRewards.map(_mapToRewardDTO)
                    : []
              }),
              s.notify(i);
          }),
          services.UTUtasRequestQueue.send(t),
          s
        );
      }),
      (UTOnboardingDAO.prototype.createClub = function createClub(e, t, i) {
        var n = new UTObservable(),
          s = new UTUtasHttpRequest(e);
        return (
          s.setPath(this.UTAS_REQUEST_PATH + 'user'),
          s.setRequestType(enums.HTTPRequestMethod.POST),
          s.setRequestBody({
            clubName: t,
            clubAbbr: i,
            purchased: !0
          }),
          s.observe(this, function _onCreateClubComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse(),
              s = utils.JS.isObject(t.response);
            (i.success = t.success),
              (i.status = t.status),
              (i.response = {
                login: s ? t.response.login : {},
                starterPack: s ? t.response.starterPack : []
              }),
              (i.maxAge = t.maxAge),
              (i.retryAfter = t.retryAfter),
              n.notify(t);
          }),
          services.UTUtasRequestQueue.send(s),
          n
        );
      }),
      (UTOnboardingDAO.prototype.getState = function getState(e) {
        var i = new UTObservable(),
          t = new UTUtasHttpRequest(e);
        return (
          t.setPath(this.UTAS_REQUEST_PATH + 'clientdata/onboarding'),
          t.observe(this, function _onGetStateComplete(e, t) {
            e.unobserve(this), i.notify(t);
          }),
          services.UTUtasRequestQueue.send(t),
          i
        );
      }),
      (UTOnboardingDAO.prototype.setState = function setState(e, t) {
        var i = new UTObservable(),
          s = new UTUtasHttpRequest(e);
        return (
          s.setPath(+this.UTAS_REQUEST_PATH + 'clientdata/onboarding'),
          s.setRequestType(enums.HTTPRequestMethod.PUT),
          s.setRequestBody({
            entries: [
              {
                key: 0,
                value: t
              }
            ]
          }),
          s.observe(this, function _onSetStateComplete(e, t) {
            e.unobserve(this), i.notify(t);
          }),
          services.UTUtasRequestQueue.send(s),
          i
        );
      }),
      (UTOnboardingDAO.prototype.selectCountry = function selectCountry(e, s) {
        var n = new UTObservable(),
          t = new UTUtasHttpRequest(e);
        return (
          t.setPath(
            this.UTAS_REQUEST_PATH +
              'user/action/ONBOARDING_COUNTRY_' +
              s +
              '_SELECTED'
          ),
          t.setRequestType(enums.HTTPRequestMethod.POST),
          t.observe(this, function _onSelectCountryComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            utils.JS.assignPropertyValues(t, i),
              (i.response = {
                countryId: s
              }),
              n.notify(i);
          }),
          services.UTUtasRequestQueue.send(t),
          n
        );
      }),
      (UTOnboardingDAO.prototype.getBadges = function getBadges(e) {
        var s = new UTObservable(),
          t = new UTUtasHttpRequest(e);
        return (
          t.setPath(this.UTAS_REQUEST_PATH + 'onboarding/badges'),
          t.observe(this, function _onGetBadgesComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            utils.JS.assignPropertyValues(t, i),
              (i.response = {
                badges: t.success
                  ? factories.Item.generateItemsFromItemData(
                      t.response.badgeItemDataList
                    )
                  : []
              }),
              s.notify(i);
          }),
          services.UTUtasRequestQueue.send(t),
          s
        );
      }),
      (UTOnboardingDAO.prototype.selectBadge = function selectBadge(e, t) {
        var s = new UTObservable(),
          i = new UTUtasHttpRequest(e);
        return (
          i.setPath(this.UTAS_REQUEST_PATH + 'onboarding/badge/' + t),
          i.setRequestType(enums.HTTPRequestMethod.POST),
          i.observe(this, function _onSelectBadgeComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            utils.JS.assignPropertyValues(t, i),
              (i.response = {
                badgeId: t.success ? t.response.badgeId : 0
              }),
              s.notify(i);
          }),
          services.UTUtasRequestQueue.send(i),
          s
        );
      }),
      (UTOnboardingDAO.prototype.getKits = function getKits(e) {
        var s = new UTObservable(),
          t = new UTUtasHttpRequest(e);
        return (
          t.setPath(this.UTAS_REQUEST_PATH + 'onboarding/kits'),
          t.observe(this, function _onGetKitsComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            utils.JS.assignPropertyValues(t, i),
              (i.response = {
                homeKits: t.success
                  ? factories.Item.generateItemsFromItemData(
                      t.response.homeItemDataList
                    )
                  : [],
                awayKits: t.success
                  ? factories.Item.generateItemsFromItemData(
                      t.response.awayItemDataList
                    )
                  : []
              }),
              s.notify(i);
          }),
          services.UTUtasRequestQueue.send(t),
          s
        );
      }),
      (UTOnboardingDAO.prototype.selectKits = function selectKits(e, t, i) {
        var s = new UTObservable(),
          n = new UTUtasHttpRequest(e);
        return (
          n.setPath(this.UTAS_REQUEST_PATH + 'onboarding/kits'),
          n.setRequestType(enums.HTTPRequestMethod.POST),
          n.setRequestBody({
            homeKitId: t,
            awayKitId: i
          }),
          n.observe(this, function _onSelectKitsComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            utils.JS.assignPropertyValues(t, i),
              (i.response = {
                awayKitId: t.success ? t.response.awayKitId : 0,
                homeKitId: t.success ? t.response.homeKitId : 0
              }),
              s.notify(i);
          }),
          services.UTUtasRequestQueue.send(n),
          s
        );
      }),
      (UTOnboardingDAO.prototype.getLoanPlayers = function getLoanPlayers(e) {
        var n = new UTObservable(),
          t = new UTUtasHttpRequest(e);
        return (
          t.setPath(this.UTAS_REQUEST_PATH + 'loan/players'),
          t.observe(this, function _onGetLoanPlayersComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse(),
              s = utils.JS.isObject(t.response);
            (i.success = t.success),
              (i.status = t.status),
              (i.response = {
                items: s
                  ? t.response.loans.map(function(e) {
                      return factories.Item.createItem(e.itemData);
                    })
                  : []
              }),
              (i.maxAge = t.maxAge),
              (i.retryAfter = t.retryAfter),
              n.notify(i);
          }),
          services.UTUtasRequestQueue.send(t),
          n
        );
      }),
      (UTOnboardingDAO.prototype.grantLoanPlayer = function grantLoanPlayer(
        e,
        t
      ) {
        var n = new UTObservable(),
          i = new UTUtasHttpRequest(e);
        return (
          i.setPath(this.UTAS_REQUEST_PATH + 'loan/player/' + t.toString()),
          i.setRequestType(enums.HTTPRequestMethod.PUT),
          i.observe(this, function _onGrantLoanPlayerComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse(),
              s = utils.JS.isObject(t.response);
            (i.success = t.success),
              (i.status = t.status),
              (i.response = {
                item: s ? factories.Item.createItem(t.response) : null
              }),
              (i.maxAge = t.maxAge),
              (i.retryAfter = t.retryAfter),
              n.notify(i);
          }),
          services.UTUtasRequestQueue.send(i),
          n
        );
      }),
      new UTOnboardingDAO()
    );
  })()),
  NamespaceManager.Register('services'),
  (services.Onboarding = (function() {
    function UTOnboardingService() {
      UTObject.call(this);
    }
    return (
      utils.JS.inherits(UTOnboardingService, UTObject),
      (UTOnboardingService.prototype.getCountries = function getCountries() {
        var e = new UTObservable(),
          t = new transferobjects.ServiceResponse();
        return (
          (t.success = !0),
          (t.status = enums.HTTPStatusCode.OK),
          (t.data = {
            countries: [
              enums.Country.ENGLAND,
              enums.Country.BRAZIL,
              enums.Country.FRANCE,
              enums.Country.ARGENTINA,
              enums.Country.GERMANY,
              enums.Country.ITALY,
              enums.Country.SPAIN,
              enums.Country.PORTUGAL,
              enums.Country.NETHERLANDS
            ]
          }),
          e.notify(t),
          e
        );
      }),
      (UTOnboardingService.prototype.selectCountry = function selectCountry(e) {
        var i = new UTObservable(),
          t = services.Authentication,
          s = new transferobjects.ServiceResponse();
        var n = utils.FUTData.mapNationIdToOnboardingCountryId(e);
        return (
          0 === n
            ? (utils.Debug.Assert(!1, 'Encountered an unsupported nation ID.'),
              (s.success = !1),
              (s.status = enums.HTTPStatusCode.BAD_REQUEST),
              i.notify(s))
            : accessobjects.Onboarding.selectCountry(t, n).observe(
                this,
                function _onSelectCountryComplete(e, t) {
                  e.unobserve(this),
                    (s.success = t.success),
                    (s.status = t.status),
                    (s.data = {
                      countryId: t.response.countryId
                    }),
                    i.notify(s);
                }
              ),
          i
        );
      }),
      (UTOnboardingService.prototype.getBadges = function getBadges() {
        var s = new UTObservable(),
          e = services.Authentication;
        return (
          accessobjects.Onboarding.getBadges(e).observe(
            this,
            function _onGetBadgesComplete(e, t) {
              e.unobserve(this);
              var i = new transferobjects.ServiceResponse();
              (i.success = t.success),
                (i.status = t.status),
                (i.data = {
                  badges: t.response.badges || []
                }),
                s.notify(i);
            }
          ),
          s
        );
      }),
      (UTOnboardingService.prototype.selectBadge = function selectBadge(i) {
        var s = new UTObservable(),
          e = services.Authentication,
          n = new transferobjects.ServiceResponse();
        return (
          i.isBadge()
            ? accessobjects.Onboarding.selectBadge(e, i.getDefId()).observe(
                this,
                function _onSelectBadgeComplete(e, t) {
                  e.unobserve(this),
                    t.success &&
                      ((i.state = enums.ItemState.ACTIVE_BADGE),
                      (i.pile = enums.FUTItemPile.CLUB),
                      repositories.Item.add(i)),
                    (n.success = t.success),
                    (n.status = t.status),
                    (n.data = {
                      badgeId: t.response.badgeId
                    }),
                    s.notify(n);
                }
              )
            : (utils.Debug.Assert(
                !1,
                'Expected a badge item when selecting a badge.'
              ),
              (n.success = !1),
              (n.status = enums.HTTPStatusCode.BAD_REQUEST),
              s.notify(n)),
          s
        );
      }),
      (UTOnboardingService.prototype.getKits = function getKits() {
        var s = new UTObservable(),
          e = services.Authentication;
        return (
          accessobjects.Onboarding.getKits(e).observe(
            this,
            function _onGetKitsComplete(e, t) {
              e.unobserve(this);
              var i = new transferobjects.ServiceResponse();
              (i.success = t.success),
                (i.status = t.status),
                (i.data = {
                  homeKits: t.response.homeKits || [],
                  awayKits: t.response.awayKits || []
                }),
                s.notify(i);
            }
          ),
          s
        );
      }),
      (UTOnboardingService.prototype.selectKits = function selectKits(i, s) {
        var n = new UTObservable(),
          e = services.Authentication,
          o = new transferobjects.ServiceResponse();
        return (
          i.isKit() && s.isKit()
            ? accessobjects.Onboarding.selectKits(
                e,
                i.getDefId(),
                s.getDefId()
              ).observe(this, function _onSelectKitsComplete(e, t) {
                e.unobserve(this),
                  t.success &&
                    ((i.state = enums.ItemState.ACTIVE_HOME_KIT),
                    (i.pile = enums.FUTItemPile.CLUB),
                    (s.state = enums.ItemState.ACTIVE_AWAY_KIT),
                    (s.pile = enums.FUTItemPile.CLUB),
                    repositories.Item.add([i, s])),
                  (o.success = t.success),
                  (o.status = t.status),
                  (o.data = {
                    awayKitId: t.response.awayKitId,
                    homeKitId: t.response.homeKitId
                  }),
                  n.notify(o);
              })
            : (utils.Debug.Assert(
                i.isKit(),
                'Expected a kit item when selecting a home kit.'
              ),
              utils.Debug.Assert(
                s.isKit(),
                'Expected a kit item when selecting an away kit.'
              ),
              (o.success = !1),
              (o.status = enums.HTTPStatusCode.BAD_REQUEST),
              n.notify(o)),
          n
        );
      }),
      (UTOnboardingService.prototype.getLoanPlayers = function getLoanPlayers() {
        var i = new UTObservable(),
          e = services.Authentication,
          s = new transferobjects.ServiceResponse();
        return (
          accessobjects.Onboarding.getLoanPlayers(e).observe(
            this,
            function _onGetLoanPlayersComplete(e, t) {
              e.unobserve(this),
                (s.data = {
                  items: t.response.items || []
                }),
                (s.success = t.success),
                (s.status = t.status),
                i.notify(s);
            }
          ),
          i
        );
      }),
      (UTOnboardingService.prototype.grantLoanPlayer = function grantLoanPlayer(
        e
      ) {
        var i = new UTObservable(),
          t = services.Authentication,
          s = new transferobjects.ServiceResponse();
        return (
          e.isLoaned()
            ? accessobjects.Onboarding.grantLoanPlayer(t, e.getDefId()).observe(
                this,
                function _onGrantLoanPlayerComplete(e, t) {
                  e.unobserve(this),
                    (s.data = {
                      item: t.response.item || null
                    }),
                    (s.success = t.success),
                    (s.status = t.status),
                    i.notify(s);
                }
              )
            : ((s.success = !1),
              (s.status = enums.HTTPStatusCode.BAD_REQUEST),
              i.notify(s)),
          i
        );
      }),
      (UTOnboardingService.prototype.createClub = function createClub() {
        var n = new UTObservable(),
          o = services.Authentication,
          a = new transferobjects.ServiceResponse();

        function _onCreateClubComplete(e, t) {
          e.unobserve(this),
            (a.success = t.success),
            (a.status = t.status),
            t.success && (a.data = t.data),
            n.notify(a);
        }
        return (
          accessobjects.Onboarding.getHistorical(o).observe(
            this,
            function _onGetHistoricalComplete(e, t) {
              if ((e.unobserve(this), t.success)) {
                var i = t.response,
                  s = o.getCurrentUser().getSelectedPersona();
                s.setLoyaltyRewards(i.rewards),
                  s
                    .createClub(o, i.name, i.abbr)
                    .observe(this, _onCreateClubComplete);
              } else
                (a.success = t.success), (a.status = t.status), n.notify(a);
            }
          ),
          n
        );
      }),
      new UTOnboardingService()
    );
  })()),
  NamespaceManager.Register('accessobjects'),
  (accessobjects.Rivals = (function() {
    function UTRivalsDAO() {
      UTObject.call(this),
        (this._authDelegate = null),
        Object.defineProperty(this, '_authDelegate', {
          writable: !0,
          enumerable: !1
        });
    }
    return (
      utils.JS.inherits(UTRivalsDAO, UTObject),
      (UTRivalsDAO.prototype.setAuthDelegate = function setAuthDelegate(e) {
        e && e.conforms(interfaces.AuthDelegate) && (this._authDelegate = e);
      }),
      (UTRivalsDAO.prototype._triggerUnauthorizedResponse = function _triggerUnauthorizedResponse(
        e
      ) {
        console.log(
          '(UTRivalsDAO) - Missing composite authentication delegate'
        );
        var t = new transferobjects.FUTHttpResponse();
        (t.status = enums.HTTPStatusCode.UNAUTHORIZED), e.notify(t);
      }),
      (UTRivalsDAO.prototype.getWeekendLeagueStatus = function getWeekendLeagueStatus() {
        var s = new UTObservable();
        if (!this._authDelegate) return this._triggerUnauthorizedResponse(s), s;
        var e = new UTUtasHttpRequest(this._authDelegate);
        return (
          e.setPath('/ut/game/' + GAME_NAME + '/rivals/weekendleague/status'),
          e.observe(this, function _onGetWeekendLeagueStatusComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            utils.JS.assignPropertyValues(t, i),
              (i.response = {
                enabled: !1,
                qualified: !1,
                points: 0,
                threshold: 0
              }),
              t.success &&
                t.response &&
                utils.JS.isObject(t.response) &&
                (i.response = {
                  enabled: t.response.weekendLeagueEnabled || !1,
                  qualified: t.response.qualifiedInWeekendLeague || !1,
                  points: t.response.weekendLeaguePoints || 0,
                  threshold: t.response.weekendLeagueThreshold || 0
                }),
              s.notify(i);
          }),
          services.UTUtasRequestQueue.send(e),
          s
        );
      }),
      (UTRivalsDAO.prototype.getPrizeDetails = function getPrizeDetails() {
        var s = new UTObservable();
        if (!this._authDelegate) return this._triggerUnauthorizedResponse(s), s;
        var e = new UTUtasHttpRequest(this._authDelegate);
        return (
          e.setPath('/ut/game/' + GAME_NAME + '/rivals/user/prizeDetails'),
          e.observe(this, function _onGetPrizeDetailsComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            (i.response = {
              unclaimedRewards: []
            }),
              utils.JS.isObject(t.response) &&
                utils.JS.isObject(t.response.prizes) &&
                t.response.prizes.prizeTiers.forEach(function(e) {
                  e.categoryAwardsList.forEach(function(e) {
                    i.response.unclaimedRewards.push(
                      new UTConsolidatedRewardsDTO(e)
                    );
                  });
                }),
              (i.status = t.status),
              (i.success = t.success),
              s.notify(i);
          }),
          services.UTUtasRequestQueue.send(e),
          s
        );
      }),
      (UTRivalsDAO.prototype.claimById = function claimById(e) {
        var s = new UTObservable();
        if (!this._authDelegate) return this._triggerUnauthorizedResponse(s), s;
        var t = new UTUtasHttpRequest(this._authDelegate);
        return (
          t.setRequestType(enums.HTTPRequestMethod.PUT),
          t.setPath('/ut/game/' + GAME_NAME + '/rivals/reward/' + e),
          t.observe(this, function _onClaimRewardsComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            (i.status = t.status),
              (i.success = t.success),
              (i.response = {
                rewards: []
              }),
              t.success &&
                t.response &&
                utils.JS.isObject(t.response) &&
                0 < Object.keys(t.response).length &&
                t.response.awardedPrizes &&
                t.response.awardedPrizes.forEach(function(e) {
                  i.response.rewards.push(new transferobjects.Reward(e));
                }),
              s.notify(i);
          }),
          services.UTUtasRequestQueue.send(t),
          s
        );
      }),
      (UTRivalsDAO.prototype.accessWeekendLeague = function accessWeekendLeague() {
        var i = new UTObservable();
        if (!this._authDelegate) return this._triggerUnauthorizedResponse(i), i;
        var e = new UTUtasHttpRequest(this._authDelegate);
        return (
          e.setPath(
            '/ut/game/' + GAME_NAME + '/rivals/user/weekendleague/access'
          ),
          e.setRequestType(enums.HTTPRequestMethod.POST),
          e.observe(this, function _onAccessWeekendLeagueComplete(e, t) {
            e.unobserve(this), i.notify(t);
          }),
          services.UTUtasRequestQueue.send(e),
          i
        );
      }),
      new UTRivalsDAO()
    );
  })()),
  NamespaceManager.Register('interfaces'),
  (interfaces.AccessObject = function() {}),
  (interfaces.AccessObject.prototype.setAuthDelegate = function setAuthDelegate(
    e
  ) {}),
  NamespaceManager.Register('repositories'),
  (repositories.RivalRewards = (function() {
    function UTRivalRewardsRepository(e) {
      (this._rewards = new UTHashTable()),
        Object.defineProperty(this, '_rewards', {
          writable: !1,
          enumerable: !1
        }),
        (this._expiryTimestamp = 0),
        utils.JS.isValid(e) && this.add(e);
    }
    return (
      (UTRivalRewardsRepository.prototype.add = function add(e) {
        Array.isArray(e)
          ? e.forEach(function(e) {
              this._rewards.set(e.id, e);
            })
          : this._rewards.set(e.id, e);
      }),
      (UTRivalRewardsRepository.prototype.get = function get(e) {
        return this._rewards.get(e).awards;
      }),
      (UTRivalRewardsRepository.prototype.values = function values() {
        return this._rewards.values();
      }),
      (UTRivalRewardsRepository.prototype.isEmpty = function isEmpty() {
        return this._rewards.length < 1;
      }),
      (UTRivalRewardsRepository.prototype.isCacheExpired = function isCacheExpired() {
        return this._expiryTimestamp < Date.now();
      }),
      (UTRivalRewardsRepository.prototype.reset = function reset() {
        this._rewards.clear(), (this._expiryTimestamp = 0);
      }),
      (UTRivalRewardsRepository.prototype.setCacheTimestamp = function setCacheTimestamp(
        e,
        t
      ) {
        this._expiryTimestamp =
          e + (utils.JS.isNumber(t) ? t * MS_PER_SECOND : 36e5);
      }),
      new UTRivalRewardsRepository()
    );
  })()),
  NamespaceManager.Register('services'),
  (services.Rivals = (function() {
    function UTRivalsService() {
      UTObject.call(this),
        (this._rivalsDAO = null),
        Object.defineProperty(this, '_rivalsDAO', {
          writable: !0,
          enumerable: !1
        });
    }
    return (
      utils.JS.inherits(UTRivalsService, UTObject),
      (UTRivalsService.prototype.setDataAccessObject = function setDataAccessObject(
        e
      ) {
        e && e.conforms(interfaces.AccessObject) && (this._rivalsDAO = e);
      }),
      (UTRivalsService.prototype._triggerObjectNotFound = function _triggerObjectNotFound(
        e
      ) {
        console.log('(UTRivalsService) - Missing Data Access Object');
        var t = new transferobjects.FUTHttpResponse();
        (t.status = enums.HTTPStatusCode.BAD_REQUEST), e.notify(t);
      }),
      (UTRivalsService.prototype.reset = function reset() {
        repositories.RivalRewards.reset();
      }),
      (UTRivalsService.prototype.requestWeekendLeagueState = function requestWeekendLeagueState() {
        var i = new UTObservable(),
          s = new transferobjects.ServiceResponse();
        return (
          accessobjects.Rivals.getWeekendLeagueStatus().observe(
            this,
            function _onGetWeekendLeagueStatusComplete(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                (s.data = {
                  enabled: t.response.enabled,
                  points: t.response.points,
                  qualified: t.response.qualified,
                  threshold: t.response.threshold
                }),
                i.notify(s);
            }
          ),
          i
        );
      }),
      (UTRivalsService.prototype.accessWeekendLeague = function accessWeekendLeague() {
        var i = new UTObservable(),
          s = new transferobjects.ServiceResponse();
        return (
          accessobjects.Rivals.accessWeekendLeague().observe(
            this,
            function _onAccessWeekendLeagueComplete(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                i.notify(s);
            }
          ),
          i
        );
      }),
      (UTRivalsService.prototype.getRewardsInfo = function getRewardsInfo() {
        var i = new UTObservable();
        if (!this._rivalsDAO) return this._triggerObjectNotFound(i), i;
        var s = new transferobjects.ServiceResponse();
        if (
          ((s.data = {
            unclaimedRewards: []
          }),
          !repositories.RivalRewards.isEmpty() &&
            !repositories.RivalRewards.isCacheExpired())
        )
          return (
            (s.success = !0),
            (s.status = enums.HTTPStatusCode.OK),
            (s.data.unclaimedRewards = repositories.RivalRewards.values()),
            i.notify(s),
            i
          );
        return (
          this._rivalsDAO
            .getPrizeDetails()
            .observe(this, function _onGetRewardsInfoComplete(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                s.success &&
                  (t.response.unclaimedRewards.forEach(function(e) {
                    s.data.unclaimedRewards.push(e),
                      repositories.RivalRewards.add(e);
                  }),
                  repositories.RivalRewards.setCacheTimestamp(
                    Date.now(),
                    0 < t.maxAge ? t.maxAge : null
                  )),
                i.notify(s);
            }),
          i
        );
      }),
      (UTRivalsService.prototype.claimById = function claimById(e) {
        var i = new UTObservable();
        if (!this._rivalsDAO) return this._triggerObjectNotFound(i), i;
        var s = new transferobjects.ServiceResponse();
        return (
          this._rivalsDAO
            .claimById(e)
            .observe(this, function _onClaimByIdComplete(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                (s.data = {
                  rewards: t.response.rewards
                }),
                s.success
                  ? this.reset()
                  : services.Notification.queue([
                      services.Localization.localize(
                        'notification.rivals.claimFailed'
                      ),
                      enums.UINotificationType.NEGATIVE
                    ]),
                i.notify(s);
            }),
          i
        );
      }),
      new UTRivalsService()
    );
  })()),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.SquadBattlesEvent = function SquadBattlesEventDTO(e) {
    (this.id = e.sqbtEventId),
      Object.defineProperty(this, 'id', {
        writable: !1
      }),
      (this.rank = e.rank),
      Object.defineProperty(this, 'rank', {
        writable: !1
      }),
      (this.score = e.score),
      Object.defineProperty(this, 'score', {
        writable: !1
      }),
      (this.tierLevel = e.userTierLevel),
      Object.defineProperty(this, 'tierLevel', {
        writable: !1
      }),
      (this.isPrizeAvailable = e.isPrizeAvailable),
      Object.defineProperty(this, 'isPrizeAvailable', {
        writable: !1
      });
    var t = [];
    utils.JS.valToArray(e.prizeTiers).forEach(function(e) {
      e.awards.forEach(function(e) {
        t.push(new transferobjects.Reward(e));
      }, this);
    }, this),
      (this.rewards = t),
      Object.defineProperty(this, 'rewards', {
        writable: !1
      });
  }),
  NamespaceManager.Register('accessobjects'),
  (accessobjects.SquadBattles = (function() {
    function UTSquadBattlesDAO() {
      UTObject.call(this),
        (this._authDelegate = null),
        Object.defineProperty(this, '_authDelegate', {
          writable: !0,
          enumerable: !1
        });
    }
    return (
      utils.JS.inherits(UTSquadBattlesDAO, UTObject),
      (UTSquadBattlesDAO.prototype.setAuthDelegate = function setAuthDelegate(
        e
      ) {
        e && e.conforms(interfaces.AuthDelegate) && (this._authDelegate = e);
      }),
      (UTSquadBattlesDAO.prototype._triggerUnauthorizedResponse = function _triggerUnauthorizedResponse(
        e
      ) {
        console.log(
          'Missing composite authentication delegate in UTSquadBattlesDAO'
        );
        var t = new transferobjects.FUTHttpResponse();
        (t.status = enums.HTTPStatusCode.UNAUTHORIZED), e.notify(t);
      }),
      (UTSquadBattlesDAO.prototype.getHub = function getHub() {
        var s = new UTObservable();
        if (!this._authDelegate) return this._triggerUnauthorizedResponse(s), s;
        var e = new UTUtasHttpRequest(this._authDelegate);
        return (
          e.setPath('/ut/game/' + GAME_NAME + '/sqbt/user/hub'),
          e.setUrlVariables({
            scope: 'mini'
          }),
          e.observe(this, function _onGetSQBTHubComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            (i.response = {
              event: utils.JS.isObject(t.response)
                ? new transferobjects.SquadBattlesEvent(t.response)
                : null
            }),
              (i.status = t.status),
              (i.success = t.success),
              s.notify(i);
          }),
          services.UTUtasRequestQueue.send(e),
          s
        );
      }),
      (UTSquadBattlesDAO.prototype.claimRewards = function claimRewards() {
        var s = new UTObservable();
        if (!this._authDelegate) return this._triggerUnauthorizedResponse(s), s;
        var e = new UTUtasHttpRequest(this._authDelegate);
        return (
          e.setPath('/ut/game/' + GAME_NAME + '/sqbt/user/prize'),
          e.setRequestType(enums.HTTPRequestMethod.POST),
          e.observe(this, function _onClaimComplete(e, t) {
            e.unobserve(this);
            var i = new transferobjects.FUTHttpResponse();
            (i.response = {
              awards: [],
              allClaimed: !0
            }),
              (i.status = t.status),
              (i.success = t.success),
              utils.JS.isObject(t.response) &&
                t.response.awardedPrizes &&
                (t.response.awardedPrizes.forEach(function(e) {
                  e.awards.forEach(function(e) {
                    i.response.awards.push(new transferobjects.Reward(e));
                  }, this);
                }, this),
                (i.response.allClaimed =
                  0 === t.response.prizesInError.length)),
              s.notify(i);
          }),
          services.UTUtasRequestQueue.send(e),
          s
        );
      }),
      new UTSquadBattlesDAO()
    );
  })()),
  NamespaceManager.Register('services'),
  (services.SquadBattles = (function() {
    function UTSquadBattlesService() {
      (this._currentEvent = null),
        Object.defineProperty(this, '_currentEvent', {
          writable: !0,
          enumerable: !1
        }),
        (this._squadBattlesDAO = null),
        Object.defineProperty(this, '_squadBattlesDAO', {
          writable: !0,
          enumerable: !1
        });
    }
    return (
      (UTSquadBattlesService.prototype.reset = function reset() {
        this._currentEvent = null;
      }),
      (UTSquadBattlesService.prototype.setDataAccessObject = function setDataAccessObject(
        e
      ) {
        e && e.conforms(interfaces.AccessObject) && (this._squadBattlesDAO = e);
      }),
      (UTSquadBattlesService.prototype._triggerObjectNotFound = function _triggerObjectNotFound(
        e
      ) {
        console.log('(UTSquadBattlesService) - Missing Data Access Object');
        var t = new transferobjects.FUTHttpResponse();
        (t.status = enums.HTTPStatusCode.BAD_REQUEST), e.notify(t);
      }),
      (UTSquadBattlesService.prototype.requestCurrentEvent = function requestCurrentEvent() {
        var i = new UTObservable();
        if (!this._squadBattlesDAO) return this._triggerObjectNotFound(i), i;
        var s = new transferobjects.ServiceResponse();
        if (
          ((s.data = {
            event: {}
          }),
          utils.JS.isValid(this._currentEvent))
        )
          return (
            (s.success = !0),
            (s.status = enums.HTTPStatusCode.OK),
            (s.data.event = this._currentEvent),
            i.notify(s),
            i
          );
        return (
          this._squadBattlesDAO
            .getHub()
            .observe(this, function _onSQBTStateRetrieved(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                (s.data = t.response),
                (this._currentEvent = s.data.event),
                i.notify(s);
            }),
          i
        );
      }),
      (UTSquadBattlesService.prototype.claimRewards = function claimRewards() {
        var s = new UTObservable();
        if (!this._squadBattlesDAO) return this._triggerObjectNotFound(s), s;
        var n = new transferobjects.ServiceResponse();
        return (
          this._squadBattlesDAO
            .claimRewards()
            .observe(this, function _onClaimRewardsComplete(e, t) {
              e.unobserve(this), (n.success = t.success), (n.status = t.status);
              var i = {
                id: 1
              };
              (i.awards = t.response.awards),
                (n.data = {
                  awards: [new UTConsolidatedRewardsDTO(i)],
                  allClaimed: t.response.allClaimed
                }),
                t.success
                  ? n.data.allClaimed
                    ? this.reset()
                    : services.Notification.queue([
                        services.Localization.localize(
                          'notification.sqbt.claimAllFailed'
                        ),
                        enums.UINotificationType.NEGATIVE
                      ])
                  : services.Notification.queue([
                      services.Localization.localize(
                        'notification.sqbt.claimFailed'
                      ),
                      enums.UINotificationType.NEGATIVE
                    ]),
                s.notify(n);
            }),
          s
        );
      }),
      new UTSquadBattlesService()
    );
  })()),
  NamespaceManager.Register('services'),
  (services.URL = (function() {
    var n = 'easfc://',
      o = new UTHashTable(),
      s = '';

    function URLService() {}
    return (
      (URLService.prototype.registerDeepLinkID = function registerDeepLinkID(
        e,
        t
      ) {
        o.set(e, t);
      }),
      (URLService.prototype.findValidDeepLinkID = function findValidDeepLinkID(
        e
      ) {
        return (
          utils.JS.find(
            e,
            function(e) {
              return this._isValidDeepLinkID(e);
            }.bind(this)
          ) || enums.DeepLinkSections.NONE
        );
      }),
      (URLService.prototype._isValidDeepLinkID = function _isValidDeepLinkID(
        e
      ) {
        return o.has(e);
      }),
      (URLService.prototype.setDeepLinkURL = function setDeepLinkURL(e, t) {
        if (!utils.JS.isEmpty(e)) {
          var i = decodeURIComponent(e).trim();
          0 !== i.indexOf(n) && ((i = n + 'fut/' + e), t && (i += '/' + t)),
            (s = i);
        }
      }),
      (URLService.prototype.getDeepLinkURL = function getDeepLinkURL() {
        return s;
      }),
      (URLService.prototype.clearDeepLinkURL = function clearDeepLinkURL() {
        s = '';
      }),
      (URLService.prototype.hasDeepLinkURL = function hasDeepLinkURL() {
        return !utils.JS.isEmpty(s);
      }),
      (URLService.prototype.processDeepLinkURL = function processDeepLinkURL() {
        if (!this.hasDeepLinkURL()) return !1;
        var e = this.process(this.getDeepLinkURL());
        return e && this.clearDeepLinkURL(), e;
      }),
      (URLService.prototype.process = function process(e) {
        if (0 === (e = decodeURIComponent(e).trim()).indexOf(n)) {
          if (!this._checkAuth()) return !1;
          var t = e
              .substr(n.length)
              .split('/')
              .filter(function(e) {
                return '' !== e;
              }),
            i = t.shift(),
            s = t.shift();
          if ('fut' !== i || !this._isValidDeepLinkID(s))
            return (
              utils.Debug.Assert(
                !1,
                '[services.URL::process] Unable to process unknown deep link: ' +
                  e
              ),
              !1
            );
          o.get(s)(t);
        } else {
          if (
            !(
              0 === e.indexOf('https://') ||
              0 === e.indexOf('http://') ||
              (isAndroid() && e.indexOf('market://')) ||
              (isIOS() && e.indexOf('itms-apps://'))
            )
          )
            return (
              utils.Debug.Assert(
                !1,
                '[services.URL::process] Unable to process unknown or unsupported URL structure: ' +
                  e
              ),
              !1
            );
          window.open(e, '_system');
        }
        return !0;
      }),
      (URLService.prototype._checkAuth = function _checkAuth() {
        var e = services.Authentication.getFUTAuthState();
        if (
          services.User.getUser().getSelectedPersona().hasFUT &&
          e === enums.FUTAuthState.COMPLETE
        )
          return !0;
        if (e !== enums.FUTAuthState.SERVER_DOWN)
          switch (e) {
            case enums.FUTAuthState.CONCURRENT_SESSION:
              getAppMain()
                .getRootViewController()
                .showLoggedOnConsoleView();
              break;
            case enums.FUTAuthState.NEW_TRIAL_USER:
              getAppMain()
                .getRootViewController()
                .showGettingStartedView(enums.GettingStartedTypes.FIFA);
              break;
            default:
              getAppMain()
                .getRootViewController()
                .showGettingStartedView(enums.GettingStartedTypes.FUT);
          }
        return !1;
      }),
      new URLService()
    );
  })()),
  utils.JS.inherits(UTCareerEntryDTO, UTObject),
  utils.JS.inherits(UTLegendsBioDTO, UTObject),
  utils.JS.inherits(UTConfigurationService, UTObject),
  (UTConfigurationService.prototype.getItemRarity = function getItemRarity(e) {
    return repositories.Rarity.getRarity(e.rareflag, e.getYear());
  }),
  (UTConfigurationService.prototype.loadRarityData = function loadRarityData() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    return (
      repositories.Rarity.isCacheExpired()
        ? this._configurationDAO
            .getRarity()
            .observe(this, function _onGetRarityComplete(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                t.success &&
                  (repositories.Rarity.add(
                    t.response.rarities,
                    enums.Year.ASSET
                  ),
                  repositories.Rarity.setCacheTimestamp(
                    Date.now(),
                    0 < t.maxAge ? t.maxAge : null
                  )),
                i.notify(s);
            })
        : ((s.success = !0),
          (s.status = enums.HTTPStatusCode.NOT_MODIFIED),
          i.notify(s)),
      i
    );
  }),
  (UTConfigurationService.prototype.loadStaffStatData = function loadStaffStatData() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    return (
      gStaffStatsModel.isDirty()
        ? this._configurationDAO
            .getStaffStats()
            .observe(this, function _onGetStaffStatsComplete(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                t.success &&
                  (gStaffStatsModel.setPlayerAttribBoosts(
                    t.response.playerAttribBoosts
                  ),
                  gStaffStatsModel.setGKAttribBoosts(t.response.gkAttribBoosts),
                  gStaffStatsModel.setHealthAttribBoosts(
                    t.response.healthAttribBoosts
                  ),
                  gStaffStatsModel.setContractBoost(t.response.contractBoost),
                  gStaffStatsModel.setDirtyFlag(!1)),
                i.notify(s);
            })
        : ((s.success = !0),
          (s.status = enums.HTTPStatusCode.NOT_MODIFIED),
          i.notify(s)),
      i
    );
  }),
  (UTConfigurationService.prototype.requestSquadData = function requestSquadData() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    return (
      this._configurationDAO
        .getSquadData()
        .observe(this, function _onGetSquadDataComplete(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            t.success &&
              (repositories.Squad.setSquadDataLookup(t.response),
              repositories.PlayStyle.setPlayStyles(t.response.styleAttribMods)),
            i.notify(s);
        }),
      i
    );
  }),
  (UTConfigurationService.prototype.requestTeamConfig = function requestTeamConfig() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    return (
      this._configurationDAO
        .getTeamConfig()
        .observe(this, function _onGetTeamConfigComplete(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            t.success && this._parseTeamConfig(t.response),
            i.notify(s);
        }),
      i
    );
  }),
  (UTConfigurationService.prototype.requestStaticPlayerData = function requestStaticPlayerData() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    return (
      this._configurationDAO
        .getStaticPlayerData()
        .observe(this, function _onGetStaticPlayerDataComplete(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            t.success &&
              repositories.Item.setStaticData(
                t.response.Players.concat(t.response.LegendsPlayers)
              ),
            i.notify(s);
        }),
      i
    );
  }),
  (UTConfigurationService.prototype.requestPlayerMetaData = function requestPlayerMetaData() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    return (
      this._configurationDAO
        .getPlayerMetaData()
        .observe(this, function _onGetPlayerMetaDataComplete(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            t.success && repositories.PlayerMeta.setData(t.response),
            i.notify(s);
        }),
      i
    );
  }),
  (UTConfigurationService.prototype.requestPlayerIconData = function requestPlayerIconData() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    return (
      this._configurationDAO
        .getPlayerIconData()
        .observe(this, function _onGetPlayerIconDataComplete(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            t.success && repositories.PlayerIcon.setData(t.response),
            i.notify(s);
        }),
      i
    );
  }),
  (UTConfigurationService.prototype.requestMissingImagesData = function requestMissingImagesData() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    return (
      this._configurationDAO
        .getMissingImagesData()
        .observe(this, function _onGetMissingImagesDataComplete(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            t.success && utils.AssetLocator.setPlaceholderData(t.response),
            i.notify(s);
        }),
      i
    );
  }),
  (UTConfigurationService.prototype.requestSettingsData = function requestSettingsData() {
    var o = new UTObservable(),
      a = new transferobjects.ServiceResponse();
    if (!this._serverSettings.isCacheExpired())
      return (
        (a.success = !0),
        (a.status = enums.HTTPStatusCode.NOT_MODIFIED),
        (a.data = {
          settings: this._serverSettings.getSettings()
        }),
        o.notify(a),
        o
      );
    return (
      this._configurationDAO
        .getSettingsData()
        .observe(this, function _onRequestSettingsComplete(e, t) {
          if (
            (e.unobserve(this),
            (a.success = t.success),
            (a.status = t.status),
            t.success)
          ) {
            this._serverSettings.reset(),
              t.response.settings.forEach(function(e) {
                this._serverSettings.setSettingByKey(e.type, e.value);
              }, this),
              this._serverSettings.setCacheTimestamp(
                Date.now(),
                0 < t.maxAge ? t.maxAge : 600
              );
            var i = this._serverSettings.getSettingByKey(
                enums.ServerFeature.TRANSFER_LIST_SIZE
              ),
              s = this._serverSettings.getSettingByKey(
                enums.ServerFeature.TRANSFER_TARGET_SIZE
              ),
              n = this._serverSettings.getSettingByKey(
                enums.ServerFeature.MAX_ALLOWED_SQUADS
              );
            0 < i &&
              repositories.Item.setPileSize(enums.FUTItemPile.TRANSFER, i),
              0 < s &&
                repositories.Item.setPileSize(enums.FUTItemPile.INBOX, s),
              0 < n && services.Squad.setMaxSquads(n);
          }
          (a.data = {
            settings: this._serverSettings.getSettings()
          }),
            o.notify(a);
        }),
      o
    );
  }),
  (UTConfigurationService.prototype.getKillswitchableFeatures = function getKillswitchableFeatures() {
    return this._killswitchFeatures.slice();
  }),
  (UTConfigurationService.prototype.setFeatureEnabled = function setFeatureEnabled(
    e,
    t
  ) {
    this._serverSettings.setSettingByKey(e, t ? 1 : 0);
  }),
  (UTConfigurationService.prototype.checkFeatureEnabled = function checkFeatureEnabled(
    e
  ) {
    return 0 < this._serverSettings.getSettingByKey(e);
  }),
  (UTConfigurationService.prototype.getFeatureSetting = function getFeatureSetting(
    e
  ) {
    return this._serverSettings.getSettingByKey(e);
  }),
  (UTConfigurationService.prototype._parseTeamConfig = function _parseTeamConfig(
    e
  ) {
    e.Years.forEach(function(e) {
      var t = utils.TextUtils.getYearFromString(e.Year);
      repositories.TeamConfig.addTeams(e.Teams, t),
        e.ClubItemTeams && repositories.TeamConfig.addTeams(e.ClubItemTeams, t),
        e.InternationalTeams &&
          repositories.TeamConfig.addTeams(e.InternationalTeams, t),
        e.LegendsTeams &&
          repositories.TeamConfig.addTeams(e.LegendsTeams, t, !0),
        e.CustomTeams &&
          repositories.TeamConfig.addCustomTeams(e.CustomTeams, t),
        repositories.TeamConfig.addLeagues(e.Leagues, t),
        e.LegendsLeagues &&
          repositories.TeamConfig.addLeagues(e.LegendsLeagues, t, !0),
        repositories.TeamConfig.addNations(e.Nations, t);
    }, this);
  }),
  (UTMessagesRepository.prototype.reset = function reset() {
    this.resetDailyGift(),
      (this._cacheExpiration.dailyGift = 0),
      (this._cacheExpiration.liveMessages = 0);
  }),
  (UTMessagesRepository.prototype.getDailyGift = function getDailyGift() {
    return this._dailyGift;
  }),
  (UTMessagesRepository.prototype.setDailyGift = function setDailyGift(e) {
    this._dailyGift = e;
  }),
  (UTMessagesRepository.prototype.resetDailyGift = function resetDailyGift() {
    this._dailyGift = null;
  }),
  (UTMessagesRepository.prototype.isDailyGiftExpired = function isDailyGiftExpired() {
    return this._cacheExpiration.dailyGift < Date.now();
  }),
  (UTMessagesRepository.prototype.isLiveMessagesExpired = function isLiveMessagesExpired() {
    return this._cacheExpiration.liveMessages < Date.now();
  }),
  (UTMessagesRepository.prototype.setLiveMessagesCacheExpiration = function setLiveMessagesCacheExpiration(
    e
  ) {
    this._cacheExpiration.liveMessages = e;
  }),
  (UTMessagesRepository.prototype.setDailyGiftCacheExpiration = function setDailyGiftCacheExpiration(
    e
  ) {
    this._cacheExpiration.dailyGift = e;
  }),
  utils.JS.inherits(UTMessagesService, UTObject),
  (UTMessagesService.prototype.reset = function reset() {
    this._repository.reset();
  }),
  (UTMessagesService.prototype.setDailyGiftFromPayload = function setDailyGiftFromPayload(
    e
  ) {
    this._repository.setDailyGift(new entities.DailyGift(e)),
      this._repository.setDailyGiftCacheExpiration(Date.now() + 36e5);
  }),
  (UTMessagesService.prototype.getLiveMessages = function getLiveMessages() {
    var s = new UTObservable(),
      n = new transferobjects.ServiceResponse();
    if (
      ((n.data = {
        messages: [],
        promoCoins: !1,
        promoItems: !1
      }),
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.LIVE_MESSAGING_ENABLED
      ))
    )
      return (
        (n.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), s.notify(n), s
      );
    if (!this._repository.isLiveMessagesExpired())
      return (
        (n.success = !0),
        (n.status = enums.HTTPStatusCode.NOT_MODIFIED),
        s.notify(n),
        s
      );
    return (
      this._messagesDAO
        .getLiveMessages()
        .observe(this, function _onLiveMessagesRetrieved(e, t) {
          if (
            (e.unobserve(this),
            (n.success = t.success),
            (n.status = t.status),
            n.success)
          ) {
            var i = t.response.promos;
            (n.data.promoCoins = -1 !== i.indexOf(enums.AwardType.COIN)),
              (n.data.promoItems = -1 !== i.indexOf(enums.AwardType.ITEM)),
              (n.data.messages = t.response.messages),
              this._repository.setLiveMessagesCacheExpiration(Date.now() + 3e5);
          } else n.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED && services.Configuration.setFeatureEnabled(enums.ServerFeature.LIVE_MESSAGING_ENABLED, !1);
          s.notify(n);
        }),
      s
    );
  }),
  (UTMessagesService.prototype.readLiveMessage = function readLiveMessage(e) {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    if (
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.LIVE_MESSAGING_ENABLED
      )
    )
      return (
        (s.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), i.notify(s), i
      );
    return (
      this._messagesDAO
        .readLiveMessage(e)
        .observe(this, function _onLiveMessageRead(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            s.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
              services.Configuration.setFeatureEnabled(
                enums.ServerFeature.LIVE_MESSAGING_ENABLED,
                !1
              ),
            i.notify(s);
        }),
      i
    );
  }),
  (UTMessagesService.prototype.getHubMessages = function getHubMessages(e) {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    return (
      this._messagesDAO
        .getHubMessages(services.User.getUser().getSelectedPersona().id, e)
        .observe(this, function _onHubMessagesRetrieved(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            (s.data = t.response),
            i.notify(s);
        }),
      i
    );
  }),
  (UTMessagesService.prototype.getDailyGift = function getDailyGift() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse(),
      e = this._repository.getDailyGift();
    if (
      (utils.JS.isValid(e) && e.isValid) ||
      !this._repository.isDailyGiftExpired()
    )
      return (
        (s.success = !0),
        (s.status = enums.HTTPStatusCode.NOT_MODIFIED),
        (s.data = {
          dailyGift: e
        }),
        i.notify(s),
        i
      );
    return (
      this._messagesDAO
        .getDailyGift()
        .observe(this, function _onDailyGiftRetrieved(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            (s.data = t.response),
            this._repository.setDailyGiftCacheExpiration(
              Date.now() + (s.status ? 36e5 : 6e5)
            ),
            s.success && this._repository.setDailyGift(s.data.dailyGift),
            i.notify(s);
        }),
      i
    );
  }),
  (UTMessagesService.prototype.claimDailyGift = function claimDailyGift() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse(),
      n = this._repository.getDailyGift();
    if (
      ((s.data = {
        claimed: !1,
        rewardType: ''
      }),
      !utils.JS.isValid(n) || !n.isValid)
    )
      return (
        (s.success = !1),
        (s.status = enums.HTTPStatusCode.BAD_REQUEST),
        i.notify(s),
        i
      );
    return (
      this._messagesDAO
        .claimDailyGift(n.id)
        .observe(this, function _onDailyGiftClaimed(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            s.success &&
              (n.rewardType === enums.AwardType.COIN
                ? services.User.requestCurrencies()
                : n.rewardType === enums.AwardType.PACK &&
                  services.User.getUser().incrementNumUnopenedPacks(),
              this._repository.resetDailyGift()),
            i.notify(s);
        }),
      i
    );
  }),
  utils.JS.inherits(UTObjectivesRepository, UTObject),
  (UTObjectivesRepository.prototype.reset = function reset() {
    this._categories.clear(),
      (this._activeCampaign = null),
      (this._campaignCacheExpiration = 0),
      (this._objectivesCacheExpiration = 0);
  }),
  (UTObjectivesRepository.prototype.setCampaignCacheTimestamp = function setCampaignCacheTimestamp(
    e
  ) {
    this._campaignCacheExpiration = e;
  }),
  (UTObjectivesRepository.prototype.isCampaignCacheExpired = function isCampaignCacheExpired() {
    return (
      0 === this._campaignCacheExpiration ||
      this._campaignCacheExpiration < Math.round(Date.now() / 1e3)
    );
  }),
  (UTObjectivesRepository.prototype.setObjectivesCacheTimestamp = function setObjectivesCacheTimestamp(
    e
  ) {
    this._objectivesCacheExpiration = e;
  }),
  (UTObjectivesRepository.prototype.isObjectivesCacheExpired = function isObjectivesCacheExpired() {
    return (
      0 === this._objectivesCacheExpiration ||
      this._objectivesCacheExpiration < Math.round(Date.now() / 1e3)
    );
  }),
  (UTObjectivesRepository.prototype.setActiveCampaign = function setActiveCampaign(
    e
  ) {
    this._activeCampaign = e;
  }),
  (UTObjectivesRepository.prototype.getActiveCampaign = function getActiveCampaign() {
    return this._activeCampaign;
  }),
  (UTObjectivesRepository.prototype.setCategories = function setCategories(e) {
    e.forEach(function(i) {
      var e = this._categories.get(i.id);
      (e && 0 !== e.groups.length) ||
        (i.groups.forEach(function(e) {
          var t = utils.JS.isValid(
            utils.JS.find(
              e.groupIdsToUnlock,
              function(e) {
                var t = i.groups.get(e);
                return t && (t.isNotStarted() || t.isInProgress());
              }.bind(this)
            )
          );
          e.setLockedByGroups(t);
        }, this),
        this._categories.set(i.id, i));
    }, this);
  }),
  (UTObjectivesRepository.prototype.getCategories = function getCategories() {
    return this._categories.values();
  }),
  (UTObjectivesRepository.prototype.getCategoryById = function getCategoryById(
    e
  ) {
    return this._categories.get(e);
  }),
  (UTObjectivesRepository.prototype.getGroup = function getGroup(e, t) {
    var i = this.getCategoryById(e);
    return i
      ? utils.JS.find(i.getGroups(), function(e) {
          return e.id === t;
        })
      : null;
  }),
  utils.JS.inherits(UTObjectivesService, UTObject),
  (UTObjectivesService.prototype.reset = function reset() {
    this._repository.reset();
  }),
  (UTObjectivesService.prototype.isCampaignCacheExpired = function isCampaignCacheExpired() {
    return this._repository.isCampaignCacheExpired();
  }),
  (UTObjectivesService.prototype.isObjectivesCacheExpired = function isObjectivesCacheExpired() {
    return this._repository.isObjectivesCacheExpired();
  }),
  (UTObjectivesService.prototype.getActiveCampaign = function getActiveCampaign() {
    var n = new UTObservable(),
      o = new transferobjects.ServiceResponse();
    if (
      ((o.data = {
        campaign: null
      }),
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.OBJECTIVES_ENABLED
      ))
    )
      return (
        (o.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), n.notify(o), n
      );
    if (!this.isCampaignCacheExpired())
      return (
        (o.success = !0),
        (o.status = enums.HTTPStatusCode.NOT_MODIFIED),
        (o.data.campaign = this._repository.getActiveCampaign()),
        n.notify(o),
        n
      );
    return (
      this._objectivesDAO
        .getActiveCampaign()
        .observe(this, function _onActiveCampaignRetrieved(e, t) {
          if (
            (e.unobserve(this),
            (o.success = t.success),
            (o.status = t.status),
            o.success)
          ) {
            o.data = t.response;
            var i = Math.round(Date.now() / MS_PER_SECOND) + 600,
              s = Math.min(i, o.data.campaign.endTime);
            this._repository.reset(),
              this._repository.setCampaignCacheTimestamp(
                Math.max(s, Math.round(Date.now() / MS_PER_SECOND + 30))
              ),
              this._repository.setActiveCampaign(o.data.campaign);
          } else this._repository.setCampaignCacheTimestamp(Date.now() / MS_PER_SECOND + 30), o.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED && services.Configuration.setFeatureEnabled(enums.ServerFeature.OBJECTIVES_ENABLED, !1);
          n.notify(o);
        }),
      n
    );
  }),
  (UTObjectivesService.prototype.getCampaignDetails = function getCampaignDetails(
    i
  ) {
    var s = new UTObservable(),
      n = new transferobjects.ServiceResponse();
    n.data = {
      campaign: null
    };
    var o = i === enums.Objectives.CampaignType.ACTIVE,
      a = this._repository.getActiveCampaign();
    if (
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.OBJECTIVES_ENABLED
      )
    )
      return (
        (n.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), s.notify(n), s
      );
    if (!this.isCampaignCacheExpired() && o && a && a.hasLevels())
      return (
        (n.success = !0),
        (n.status = enums.HTTPStatusCode.NOT_MODIFIED),
        (n.data.campaign = a),
        s.notify(n),
        s
      );

    function _onCampaignDetailsRetrieved(e, t) {
      e.unobserve(this),
        (n.success = t.success),
        (n.status = t.status),
        n.success
          ? ((a = this._repository.getActiveCampaign()),
            o && (a.setLevels(t.response.levels), (n.data.campaign = a)))
          : n.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
            services.Configuration.setFeatureEnabled(
              enums.ServerFeature.OBJECTIVES_ENABLED,
              !1
            ),
        s.notify(n);
    }
    return (
      this.isCampaignCacheExpired() && o
        ? this.getActiveCampaign().observe(this, function(e, t) {
            e.unobserve(this),
              this._objectivesDAO
                .getCampaignDetails(i)
                .observe(this, _onCampaignDetailsRetrieved);
          })
        : this._objectivesDAO
            .getCampaignDetails(i)
            .observe(this, _onCampaignDetailsRetrieved),
      s
    );
  }),
  (UTObjectivesService.prototype.getCategories = function getCategories() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    if (
      ((s.data = {
        categories: []
      }),
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.OBJECTIVES_ENABLED
      ))
    )
      return (
        (s.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), i.notify(s), i
      );
    if (
      !this.isObjectivesCacheExpired() &&
      0 < this._repository.getCategories().length
    )
      return (
        (s.success = !0),
        (s.status = enums.HTTPStatusCode.NOT_MODIFIED),
        (s.data.categories = this._repository.getCategories()),
        i.notify(s),
        i
      );
    return (
      this._objectivesDAO
        .getCategories()
        .observe(this, function _onCategoriesRetrieved(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            s.success
              ? ((s.data = t.response),
                this._repository.setObjectivesCacheTimestamp(
                  Math.round(Date.now() / MS_PER_SECOND) + 300
                ),
                this._repository.setCategories(s.data.categories))
              : (this._repository.setObjectivesCacheTimestamp(
                  Date.now() / MS_PER_SECOND + 30
                ),
                s.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                  services.Configuration.setFeatureEnabled(
                    enums.ServerFeature.OBJECTIVES_ENABLED,
                    !1
                  )),
            i.notify(s);
        }),
      i
    );
  }),
  (UTObjectivesService.prototype.getCategoryById = function getCategoryById(i) {
    var s = new UTObservable(),
      n = new transferobjects.ServiceResponse();
    if (
      ((n.data = {
        category: null
      }),
      !this.isObjectivesCacheExpired())
    ) {
      var e = this._repository.getCategoryById(i);
      if (e)
        return (
          (n.success = !0),
          (n.status = enums.HTTPStatusCode.NOT_MODIFIED),
          (n.data.category = e),
          s.notify(n),
          s
        );
    }
    return (
      this.getCategories().observe(this, function _onCategoriesRetrieved(e, t) {
        e.unobserve(this),
          (n.success = t.success),
          (n.status = t.status),
          n.success && (n.data.category = this._repository.getCategoryById(i)),
          s.notify(n);
      }),
      s
    );
  }),
  (UTObjectivesService.prototype.getGroup = function getGroup(s, n) {
    var o = new UTObservable(),
      a = new transferobjects.ServiceResponse();
    if (
      ((a.data = {
        group: null
      }),
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.OBJECTIVES_ENABLED
      ))
    )
      return (
        (a.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), o.notify(a), o
      );
    if (
      !this.isObjectivesCacheExpired() &&
      utils.JS.isValid(this._repository.getCategoryById(s))
    ) {
      var e = this._repository.getGroup(s, n);
      if (e && e.hasObjectives())
        return (
          (a.success = !0),
          (a.status = enums.HTTPStatusCode.NOT_MODIFIED),
          (a.data.group = e),
          o.notify(a),
          o
        );
    }

    function _onGroupObjectivesRetrieved(e, t) {
      if (
        (e.unobserve(this),
        (a.success = t.success),
        (a.status = t.status),
        a.success)
      ) {
        var i = this._repository.getGroup(s, n);
        utils.JS.isValid(i) &&
          t.response.objectives.forEach(function(e) {
            i.objectives.set(e.id, e);
          }, this),
          (a.data.group = i);
      }
      o.notify(a);
    }
    return (
      this.getCategoryById(s).observe(this, function _onCategoryByIdRetrieved(
        e,
        t
      ) {
        e.unobserve(this),
          t.success
            ? t.data.category.isMilestones()
              ? this._objectivesDAO
                  .getLearningGroupObjectives(s, n)
                  .observe(this, _onGroupObjectivesRetrieved)
              : this._objectivesDAO
                  .getGroupObjectives(s, n)
                  .observe(this, _onGroupObjectivesRetrieved)
            : ((a.success = t.success), (a.status = t.status), o.notify(a));
      }),
      o
    );
  }),
  (UTObjectivesService.prototype.claimLevelReward = function claimLevelReward(
    n,
    e
  ) {
    var o = new UTObservable(),
      a = new transferobjects.ServiceResponse();
    if (
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.OBJECTIVES_ENABLED
      )
    )
      return (
        (a.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), o.notify(a), o
      );
    return (
      this._objectivesDAO
        .redeemCampaignLevelReward(n, e)
        .observe(this, function _onLevelRewardClaimed(e, t) {
          if (
            (e.unobserve(this),
            (a.success = t.success),
            (a.status = t.status),
            (a.data = {
              rewards: t.response.rewards
            }),
            a.success)
          ) {
            var i = this._repository.getActiveCampaign();
            if (i) {
              i.remainingRewards--;
              var s = i.levels.get(n);
              s.setState(enums.Objectives.LevelState.REWARDED),
                (a.data.level = s);
            }
          }
          o.notify(a);
        }),
      o
    );
  }),
  (UTObjectivesService.prototype.claimGroupReward = function claimGroupReward(
    s,
    n,
    e
  ) {
    var o = new UTObservable(),
      a = new transferobjects.ServiceResponse();
    if (
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.OBJECTIVES_ENABLED
      )
    )
      return (
        (a.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), o.notify(a), o
      );

    function _onGroupRewardClaimed(e, t) {
      if (
        (e.unobserve(this),
        (a.success = t.success),
        (a.status = t.status),
        (a.data = {
          rewards: t.response.rewards
        }),
        a.success)
      ) {
        var i = this._repository.getGroup(s, n);
        i.setState(enums.Objectives.GroupState.REWARDED), (a.data.group = i);
      }
      o.notify(a);
    }
    return (
      e
        ? this._objectivesDAO
            .redeemLearningGroupReward(n)
            .observe(this, _onGroupRewardClaimed)
        : this._objectivesDAO
            .redeemGroupReward(n)
            .observe(this, _onGroupRewardClaimed),
      o
    );
  }),
  (UTObjectivesService.prototype.claimObjectiveReward = function claimObjectiveReward(
    s,
    n,
    o,
    e
  ) {
    var a = new UTObservable(),
      r = new transferobjects.ServiceResponse();
    if (
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.OBJECTIVES_ENABLED
      )
    )
      return (
        (r.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), a.notify(r), a
      );

    function _onObjectiveRewardClaimed(e, t) {
      if (
        (e.unobserve(this),
        (r.success = t.success),
        (r.status = t.status),
        (r.data = {
          rewards: t.response.rewards
        }),
        r.success)
      ) {
        var i = this._repository.getGroup(s, n).objectives.get(o);
        i.setState(enums.Objectives.State.REDEEMED), (r.data.objective = i);
      }
      a.notify(r);
    }
    return (
      e
        ? this._objectivesDAO
            .redeemLearningObjectiveReward(n, o)
            .observe(this, _onObjectiveRewardClaimed)
        : this._objectivesDAO
            .redeemObjectiveReward(n, o)
            .observe(this, _onObjectiveRewardClaimed),
      a
    );
  }),
  (UTObjectivesService.prototype.claimExpiredRewards = function claimExpiredRewards() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    if (
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.OBJECTIVES_ENABLED
      )
    )
      return (
        (s.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), i.notify(s), i
      );
    return (
      this._objectivesDAO
        .redeemExpiredRewards()
        .observe(this, function _onExpiredRewardsClaimed(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            (s.data = {
              rewards: t.response.rewards
            }),
            s.success && this.reset(),
            i.notify(s);
        }),
      i
    );
  }),
  (UTObjectivesService.prototype.update = function update(update) {
    if (utils.JS.isValid(update) && update instanceof UTCampaignUpdatesDTO) {
      if (0 < update.autoRedeemedXp)
        (this._repository.getActiveCampaign().xp += update.autoRedeemedXp),
          services.Notification.queue([
            services.Localization.localize('notification.xp.added'),
            enums.UINotificationType.POSITIVE
          ]);
      0 < update.entries.length &&
        (update.entries.forEach(function(e) {
          -1 === this._updateGroupIds.indexOf(e.groupId) &&
            this._updateGroupIds.push(e.groupId);
        }, this),
        this._triggerUpdates(update.entries));
    }
  }),
  (UTObjectivesService.prototype._triggerUpdates = function _triggerUpdates(e) {
    var o = e.slice(),
      a = o.shift();
    this.getGroup(a.categoryId, a.groupId).observe(
      this,
      function _onGroupRetrieved(e, t) {
        if ((e.unobserve(this), t.success)) {
          var i = t.data.group,
            s = i.objectives.get(a.objectiveId);
          s &&
            (s.setState(a.objectiveState),
            s.setCurrentProgress(a.objectiveProgress),
            (s.isClaimable() || s.isRedeemed()) &&
              getDefaultDispatcher().notify(
                enums.Notification.OBJECTIVE_COMPLETE,
                this,
                {
                  name: s.title
                }
              ));
          var n = this._updateGroupIds.indexOf(a.groupId);
          -1 < n &&
            (this._updateGroupIds.splice(n, 1),
            i.setState(a.groupState),
            (i.isClaimable() || i.isRedeemed()) &&
              getDefaultDispatcher().notify(
                enums.Notification.OBJECTIVE_GROUP_COMPLETE,
                this,
                {
                  name: i.title
                }
              ));
        }
        0 < o.length &&
          ((a = o.shift()),
          this.getGroup(a.categoryId, a.groupId).observe(
            this,
            _onGroupRetrieved
          ));
      }
    );
  }),
  utils.JS.inherits(UTSBCRepository, UTObject),
  (UTSBCRepository.CATEGORIES = {
    ALL: 'All',
    FAVOURITE: 'Favourite'
  }),
  (UTSBCRepository.prototype.reset = function reset() {
    this.sets.clear(), this.categories.clear(), (this._cacheExpiration = 0);
  }),
  (UTSBCRepository.prototype.setCacheTimestamp = function setCacheTimestamp(e) {
    this._cacheExpiration = e;
  }),
  (UTSBCRepository.prototype.isCacheExpired = function isCacheExpired() {
    return (
      0 === this._cacheExpiration ||
      this._cacheExpiration < Math.round(Date.now() / 1e3)
    );
  }),
  (UTSBCRepository.prototype.setCategories = function setCategories(e) {
    e.forEach(function(e) {
      this.categories.set(e.id, e);
    }, this);
    var t = new transferobjects.SBCCategory(
      -2,
      -2,
      services.Localization.localize('sbc.categories.all'),
      enums.SBC.CATEGORY_TYPE.CUSTOM_ALL
    );
    this.categories.set(UTSBCRepository.CATEGORIES.ALL, t);
    var i = new transferobjects.SBCCategory(
      -1,
      -1,
      services.Localization.localize('sbc.categories.favourites'),
      enums.SBC.CATEGORY_TYPE.CUSTOM_FAVOURITE
    );
    this.categories.set(UTSBCRepository.CATEGORIES.FAVOURITE, i);
  }),
  (UTSBCRepository.prototype.setSBCSets = function setSBCSets(e) {
    var t = this.categories.get(UTSBCRepository.CATEGORIES.ALL),
      i = this.categories.get(UTSBCRepository.CATEGORIES.FAVOURITE);
    (t.setIds = []),
      (i.setIds = []),
      e.forEach(function(e) {
        this.sets.set(e.id, e),
          t.setIds.push(e.id),
          e.isFavourite && !e.isComplete() && i.setIds.push(e.id);
      }, this);
  }),
  (UTSBCRepository.prototype.tagFavouriteSet = function tagFavouriteSet(e, t) {
    var i = this.categories.get(UTSBCRepository.CATEGORIES.FAVOURITE).setIds;
    if (t) i.push(e);
    else {
      var s = i.indexOf(e);
      0 <= s && i.splice(s, 1);
    }
  }),
  (UTSBCRepository.prototype.getCategories = function getCategories() {
    this.categories.forEach(function(e) {
      var t;
      for (e.displayable = !1, t = 0; t < e.setIds.length; t++)
        if (this.sets.get(e.setIds[t]).isDisplayable()) {
          e.displayable = !0;
          break;
        }
    }, this);
    var e = this.categories.get(UTSBCRepository.CATEGORIES.FAVOURITE);
    return (
      e && (e.displayable = !0),
      this.categories.values().sort(function categorySort(e, t) {
        return e.priority < t.priority ? -1 : e.priority > t.priority ? 1 : 0;
      })
    );
  }),
  (UTSBCRepository.prototype.getSets = function getSets() {
    return this.sets.values();
  }),
  (UTSBCRepository.prototype.getSetById = function getSetById(e) {
    return this.sets.get(e);
  }),
  utils.JS.inherits(UTSBCService, UTObject),
  (UTSBCService.prototype.reset = function reset() {
    this._repository.reset();
  }),
  (UTSBCService.prototype.isCacheExpired = function isCacheExpired() {
    return this._repository.isCacheExpired();
  }),
  (UTSBCService.prototype.getCachedSBCSquads = function getCachedSBCSquads() {
    return this._repository.getSets().reduce(function(t, e) {
      return (
        0 < e.challenges.length &&
          e.challenges.forEach(function(e) {
            e.squad && t.push(e.squad);
          }, this),
        t
      );
    }, []);
  }),
  (UTSBCService.prototype.requestSets = function requestSets() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    if (
      ((s.data = {
        categories: [],
        sets: []
      }),
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.SBC_ENABLED
      ))
    )
      return (
        (s.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), i.notify(s), i
      );
    if (!this.isCacheExpired())
      return (
        (s.success = !0),
        (s.status = enums.HTTPStatusCode.NOT_MODIFIED),
        (s.data.categories = this._repository.getCategories()),
        (s.data.sets = this._repository.getSets()),
        i.notify(s),
        i
      );
    return (
      this._sbcDAO
        .getSets()
        .observe(this, function _onRequestSetsComplete(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            t.success
              ? (this._repository.setCategories(t.response.categories),
                this._repository.setSBCSets(t.response.sets),
                this._repository.setCacheTimestamp(
                  Math.round(Date.now() / MS_PER_SECOND) + 300
                ))
              : s.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                services.Configuration.setFeatureEnabled(
                  enums.ServerFeature.SBC_ENABLED,
                  !1
                ),
            (s.data = {
              categories: this._repository.getCategories(),
              sets: this._repository.getSets()
            }),
            i.notify(s);
        }),
      i
    );
  }),
  (UTSBCService.prototype.requestChallengesForSet = function requestChallengesForSet(
    s
  ) {
    var n = new UTObservable(),
      o = new transferobjects.ServiceResponse();
    if (
      ((o.data = {
        challenges: []
      }),
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.SBC_ENABLED
      ))
    )
      return (
        (o.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), n.notify(o), n
      );
    var e = s.challenges.values();
    if (0 < e.length && !this.isCacheExpired())
      return (
        (o.success = !0),
        (o.status = enums.HTTPStatusCode.NOT_MODIFIED),
        (o.data.challenges = e),
        n.notify(o),
        n
      );
    return (
      this._sbcDAO
        .getChallengesForSet(s)
        .observe(this, function _onRequestChallengesComplete(e, t) {
          if (
            (e.unobserve(this),
            (o.success = t.success),
            (o.status = t.status),
            (o.data.challenges = t.response.challenges),
            t.success)
          ) {
            var i = this._repository.getSetById(s.id);
            i.challenges.clear(),
              o.data.challenges.forEach(function(e) {
                i.addChallenge(e);
              }, this);
          } else
            o.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
              services.Configuration.setFeatureEnabled(
                enums.ServerFeature.SBC_ENABLED,
                !1
              );
          n.notify(o);
        }),
      n
    );
  }),
  (UTSBCService.prototype.loadChallenge = function loadChallenge(s) {
    var n = new UTObservable(),
      o = new transferobjects.ServiceResponse();
    if (
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.SBC_ENABLED
      )
    )
      return (
        (o.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), n.notify(o), n
      );
    return (
      this._sbcDAO
        .loadChallenge(s.id, s.isInProgress())
        .observe(this, function _onLoadChallengeComplete(e, t) {
          if (
            (e.unobserve(this),
            (o.success = t.success),
            (o.status = t.status),
            (o.data = t.response),
            o.success)
          ) {
            (s.squad = t.response.squad), s.squad.setSaveDelegate(s);
            var i = {
              squad: s.squad
            };
            s.hasNotStarted() &&
              ((s.status = enums.SBC.CHALLENGE_STATUS.IN_PROGRESS),
              (i.status = s.status)),
              s.onDataChange.notify(i);
          } else o.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED && services.Configuration.setFeatureEnabled(enums.ServerFeature.SBC_ENABLED, !1);
          n.notify(o);
        }),
      n
    );
  }),
  (UTSBCService.prototype.saveChallenge = function saveChallenge(i) {
    var s = new UTObservable(),
      n = new transferobjects.ServiceResponse();
    if (
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.SBC_ENABLED
      )
    )
      return (
        (n.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), s.notify(n), s
      );
    return (
      this._sbcDAO
        .saveChallenge(i.id, i.squad)
        .observe(this, function _onSaveChallengeComplete(e, t) {
          e.unobserve(this),
            (n.success = t.success),
            (n.status = t.status),
            (n.data = t.response),
            n.success
              ? i.onSave.notify()
              : n.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                services.Configuration.setFeatureEnabled(
                  enums.ServerFeature.SBC_ENABLED,
                  !1
                ),
            s.notify(n);
        }),
      s
    );
  }),
  (UTSBCService.prototype.submitChallenge = function submitChallenge(s, n, i) {
    var o = new UTObservable(),
      a = new transferobjects.ServiceResponse();
    if (
      ((a.data = {
        objectiveUpdates: null,
        itemViolations: [],
        setCompleted: !1
      }),
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.SBC_ENABLED
      ))
    )
      return (
        (a.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), o.notify(a), o
      );
    var r = s.squad;

    function _onSubmitChallengeComplete(e, t) {
      if (
        (e.unobserve(this),
        (a.success = t.success),
        (a.status = t.status),
        (a.data = t.response),
        a.success)
      ) {
        s.timesCompleted++,
          (s.status = enums.SBC.CHALLENGE_STATUS.COMPLETED),
          s.onDataChange.notify({
            status: s.status,
            timesCompleted: s.timesCompleted
          }),
          n.challengesCompletedCount++,
          (a.data.setCompleted = n.isComplete()),
          a.data.setCompleted &&
            (n.timesCompleted++,
            n.repeatable
              ? ((n.challengesCompletedCount = 0),
                n.challenges.forEach(function(e) {
                  e.reset();
                }, this))
              : n.isFavourite && this.toggleFavouriteTag(n));
        var i = r.getFieldPlayers().map(function(e) {
          return e.getItem();
        });
        repositories.Item.remove(i),
          services.Squad.resetSquadsCache(),
          services.Objectives.update(t.response.objectiveUpdates),
          n &&
            n.repeatable &&
            1 === n.timesCompleted &&
            this._repository.reset();
      }
      o.notify(a);
    }
    return (
      this.saveChallenge(s).observe(this, function(e, t) {
        e.unobserve(this),
          t.success &&
            this._sbcDAO
              .submitChallenge(s.id, !!i)
              .observe(this, _onSubmitChallengeComplete);
      }),
      o
    );
  }),
  (UTSBCService.prototype.toggleFavouriteTag = function toggleFavouriteTag(i) {
    var s = new UTObservable(),
      n = new transferobjects.ServiceResponse();
    if (!(i instanceof entities.SBCSet))
      return (
        utils.Debug.Assert(
          !1,
          'Expected a valid SBC set entity when attempting to toggle favourite state.'
        ),
        (n.status = enums.HTTPStatusCode.BAD_REQUEST),
        (n.data = {
          setId: 0,
          isFavourite: !1
        }),
        s.notify(n),
        s
      );
    return (
      this._sbcDAO
        .setFavouriteTag(i, !i.isFavourite)
        .observe(this, function _onSetFavouriteTagComplete(e, t) {
          e.unobserve(this),
            t.success
              ? ((i.isFavourite = !i.isFavourite),
                this._repository.tagFavouriteSet(i.id, i.isFavourite))
              : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                services.Configuration.setFeatureEnabled(
                  enums.ServerFeature.SBC_ENABLED,
                  !1
                ),
            (n.success = t.success),
            (n.status = t.status),
            (n.data = {
              setId: i.id,
              isFavourite: i.isFavourite
            }),
            s.notify(n);
        }),
      s
    );
  }),
  (UTSBCService.prototype.toggleFavouriteTagById = function toggleFavouriteTagById(
    e
  ) {
    return this.toggleFavouriteTag(this._repository.getSetById(e));
  }),
  utils.JS.inherits(UTTOTWSquadRepository, UTObject),
  (UTTOTWSquadRepository.prototype.reset = function reset() {
    (this._cacheTimestamp = 0), this._squadCollection.resetCollection([]);
  }),
  (UTTOTWSquadRepository.prototype.setSquadList = function setSquadList(e) {
    this._squadCollection.resetCollection(e);
  }),
  (UTTOTWSquadRepository.prototype.getSquadList = function getSquadList() {
    return this._squadCollection.values();
  }),
  (UTTOTWSquadRepository.prototype.isCacheExpired = function isCacheExpired() {
    return this._cacheTimestamp < Date.now();
  }),
  (UTTOTWSquadRepository.prototype.setCacheTimestamp = function setCacheTimestamp(
    e,
    t
  ) {
    this._cacheTimestamp =
      e + (utils.JS.isNumber(t) ? t * MS_PER_SECOND : 36e6);
  }),
  utils.JS.inherits(UTSquadService, UTObject),
  (UTSquadService.prototype.reset = function reset() {
    (this._activeSquad = 0),
      repositories.Squad.reset(),
      this._totwRepository.reset();
  }),
  (UTSquadService.prototype.resetSquadsCache = function resetSquadsCache() {
    repositories.Squad.setDirty();
  }),
  (UTSquadService.prototype.getMaxSquads = function getMaxSquads() {
    return this._maxSquads;
  }),
  (UTSquadService.prototype.setMaxSquads = function setMaxSquads(e) {
    this._maxSquads = e;
  }),
  (UTSquadService.prototype.getActiveSquadId = function getActiveSquadId() {
    return this._activeSquad;
  }),
  (UTSquadService.prototype.setActiveSquadId = function setActiveSquadId(t) {
    repositories.Squad.getSquads(
      services.User.getUser().selectedPersona
    ).forEach(function(e) {
      e.setActive(e.getId() === t);
    }),
      (this._activeSquad = t);
  }),
  (UTSquadService.prototype.hasExternalShowOffSquad = function hasExternalShowOffSquad() {
    return !utils.JS.isEmpty(this.unauthenticatedShowOffId);
  }),
  (UTSquadService.prototype.create = function create(e, t, i, s) {
    var n = new UTObservable(),
      o = new transferobjects.ServiceResponse();
    return (
      this._squadDAO
        .create(e, t, i, s)
        .observe(this, function _onSquadCreateComplete(e, t) {
          if (
            (e.unobserve(this),
            (o.status = t.status),
            (o.success = t.success),
            (o.data = {
              squad: t.response.squad
            }),
            t.success)
          ) {
            var i = services.User.getUser().selectedPersona,
              s = t.response.squad;
            repositories.Squad.set(i, s),
              s.setCacheTimestamp(0),
              getDefaultDispatcher().notify(
                enums.Notification.SQUAD_CREATE,
                this,
                o.data
              );
          }
          n.notify(o);
        }),
      n
    );
  }),
  (UTSquadService.prototype.copy = function copy(e, t) {
    var n = new UTObservable(),
      o = new transferobjects.ServiceResponse();
    return (
      this._squadDAO
        .copy(e, t)
        .observe(this, function _onSquadCopyComplete(e, t) {
          if (
            (e.unobserve(this),
            (o.status = t.status),
            (o.success = t.success),
            (o.data = {
              squad: t.response.squad
            }),
            t.success)
          ) {
            var i = services.User.getUser().selectedPersona,
              s = t.response.squad;
            repositories.Squad.set(i, s),
              s.setCacheTimestamp(0),
              getDefaultDispatcher().notify(
                enums.Notification.SQUAD_CREATE,
                this,
                o.data
              );
          }
          n.notify(o);
        }),
      n
    );
  }),
  (UTSquadService.prototype.duplicate = function duplicate(o) {
    var i = new UTObservable();

    function _onCreateDuplicateComplete(e, t) {
      e.unobserve(this), i.notify(t);
    }
    return (
      services.Squad.requestSquadList().observe(this, function(e, t) {
        e.unobserve(this);
        var i = t.data.squads,
          s = o.getPlayers().map(function(e) {
            return e.getItem();
          }),
          n = o.getName();
        (n = utils.TextUtils.squadNameExists(n, i)
          ? utils.TextUtils.createSquadNameCopy(n, i)
          : n),
          this.create(n, o.getFormation().getName(), s, !0).observe(
            this,
            _onCreateDuplicateComplete
          );
      }),
      i
    );
  }),
  (UTSquadService.prototype.rename = function rename(i, s) {
    var n = new UTObservable(),
      o = new transferobjects.ServiceResponse();

    function _onGetSquad(e, t) {
      e.unobserve(this),
        t.success && t.data.squad.setName(s, []),
        (o.data = {
          squad: t.success ? t.data.squad : null
        }),
        n.notify(o),
        getDefaultDispatcher().notify(
          enums.Notification.SQUAD_SAVE,
          this,
          t.data.squad
        );
    }
    return (
      this._squadDAO
        .rename(i, s)
        .observe(this, function _onSquadRenameComplete(e, t) {
          e.unobserve(this),
            (o.status = t.status),
            (o.success = t.success),
            t.success
              ? this.requestSquadById(i).observe(this, _onGetSquad)
              : n.notify(o);
        }),
      n
    );
  }),
  (UTSquadService.prototype.remove = function remove(s) {
    var n = new UTObservable(),
      o = new transferobjects.ServiceResponse();
    return (
      this._squadDAO
        .remove(s)
        .observe(this, function _onSquadRemoveComplete(e, t) {
          if (
            (e.unobserve(this),
            (o.success = t.success),
            (o.status = t.status),
            (o.data = {
              id: s
            }),
            t.success)
          ) {
            var i = services.User.getUser().selectedPersona;
            repositories.Squad.removeSquad(i, s),
              repositories.Squad.setDirty(),
              n.notify(o),
              getDefaultDispatcher().notify(
                enums.Notification.SQUAD_DELETE,
                this,
                o
              );
          } else n.notify(o);
        }),
      n
    );
  }),
  (UTSquadService.prototype.addShowOff = function addShowOff(n) {
    var o = new UTObservable(),
      a = new transferobjects.ServiceResponse();

    function _onCreateShowOffSquadComplete(e, s) {
      e.unobserve(this),
        (a.success = s.success),
        (a.status = s.status),
        s.success
          ? this.requestSquadById(n).observe(this, function(e, t) {
              if ((e.unobserve(this), t)) {
                var i = new transferobjects.ShowOffSquad(
                  t.data.squad,
                  s.response
                );
                a.data = {
                  url:
                    i.url +
                    ':' +
                    services.User.getUser().getSelectedPersona().sku
                };
              }
              o.notify(a);
            })
          : o.notify(a);
    }

    function _onDeleteShowOffSquadComplete(e, t) {
      e.unobserve(this),
        t.success
          ? this._squadDAO
              .createShowOffSquad(n)
              .observe(this, _onCreateShowOffSquadComplete)
          : ((a.status = t.status), o.notify(a));
    }
    return (
      this._squadDAO
        .getShowOffSquads()
        .observe(this, function _onGetShowOffSquadsComplete(e, t) {
          if ((e.unobserve(this), t.success))
            if (10 <= t.response.showOffSquads.length) {
              var i = t.response.showOffSquads.map(function(e) {
                return e.id;
              });
              this.deleteShowOff(Math.min.apply(Math, i)).observe(
                this,
                _onDeleteShowOffSquadComplete
              );
            } else
              this._squadDAO
                .createShowOffSquad(n)
                .observe(this, _onCreateShowOffSquadComplete);
          else (a.status = t.status), o.notify(a);
        }),
      o
    );
  }),
  (UTSquadService.prototype.deleteShowOff = function deleteShowOff(e) {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    return (
      this._squadDAO
        .deleteShowOffSquad(e)
        .observe(this, function _onDeleteShowOffSquadComplete(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            i.notify(s);
        }),
      i
    );
  }),
  (UTSquadService.prototype.loadShowOffSquad = function loadShowOffSquad() {
    var n = new UTObservable(),
      o = new transferobjects.ServiceResponse(),
      e = decodeURIComponent(this.unauthenticatedShowOffId).split(':');
    if (
      ((o.data = {
        showOff: null
      }),
      !this.hasExternalShowOffSquad() || 2 !== e.length)
    )
      return (o.status = enums.HTTPStatusCode.BAD_REQUEST), n.notify(o), n;
    var t = e[0],
      a = e[1],
      i = services.Authentication.getServerShardBySKU(a);

    function _onGetShowOffSquadComplete(e, t) {
      e.unobserve(this),
        (this.unauthenticatedShowOffId = ''),
        (o.success = t.success),
        (o.status = t.status),
        (o.data = {
          showOff: t.response.showOff
        }),
        n.notify(o);
    }

    function _getShowOffSquad(e) {
      this._squadDAO
        .getShowOffSquad(e, t)
        .observe(this, _onGetShowOffSquadComplete);
    }
    return (
      utils.JS.isValid(i)
        ? _getShowOffSquad.call(this, i)
        : services.Authentication.requestServerShards().observe(
            this,
            function _onRequestServerShardsComplete(e, t) {
              if ((e.unobserve(this), t.success && 0 < t.data.shards.length)) {
                for (var i in t.data.shards) {
                  var s = t.data.shards[i];
                  if (s.supportsSKU(a))
                    return void _getShowOffSquad.call(this, s);
                }
                (this.unauthenticatedShowOffId = ''), n.notify(o);
              } else
                (this.unauthenticatedShowOffId = ''),
                  (o.status = t.status),
                  n.notify(o);
            }
          ),
      n
    );
  }),
  (UTSquadService.prototype.setActiveSquad = function setActiveSquad(e) {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    return (
      this._squadDAO
        .getSquadById(e, -1)
        .observe(this, function _onSetActiveComplete(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            t.success && this.setActiveSquadId(t.response.squad.getId()),
            i.notify(s);
        }),
      i
    );
  }),
  (UTSquadService.prototype.requestSquadById = function requestSquadById(e, s) {
    s = utils.JS.isNumber(s) ? s : services.User.getUser().selectedPersona;
    var n = new UTObservable(),
      o = new transferobjects.ServiceResponse(),
      t = repositories.Squad.getSquadById(s, e);
    return (
      utils.JS.isValid(t) && !t.isCacheExpired()
        ? ((o.success = !0),
          (o.status = enums.HTTPStatusCode.NOT_MODIFIED),
          (o.data = {
            squad: t
          }),
          n.notify(o))
        : this._squadDAO
            .getSquadById(e, s)
            .observe(this, function _onRequestSquadComplete(e, t) {
              if (
                (e.unobserve(this),
                (o.success = t.success),
                (o.status = t.status),
                t.success)
              ) {
                utils.Debug.Assert(
                  utils.JS.isValid(t.response.squad),
                  'Expected a squad entity.'
                ),
                  repositories.Squad.set(s, t.response.squad),
                  s <= 0 && this.setActiveSquadId(t.response.squad.getId());
                var i = repositories.Squad.getSquadById(
                  s,
                  t.response.squad.getId()
                );
                i.setCacheTimestamp(Date.now()),
                  (o.data = {
                    squad: i
                  });
              } else
                o.data = {
                  squad: null
                };
              n.notify(o);
            }),
      n
    );
  }),
  (UTSquadService.prototype.requestSquadByType = function requestSquadByType(
    e
  ) {
    var s = new UTObservable(),
      n = new transferobjects.ServiceResponse(),
      o = services.User.getUser().selectedPersona;
    if (e === enums.UserSquadId.ACTIVE) {
      var t = repositories.Squad.getSquadById(o, this._activeSquad);
      utils.JS.isValid(t) && !t.isCacheExpired()
        ? ((n.success = !0),
          (n.status = enums.HTTPStatusCode.NOT_MODIFIED),
          (n.data = {
            squad: t
          }),
          s.notify(n))
        : this._squadDAO
            .getSquadByType(e)
            .observe(this, function _onGetSquadComplete(e, t) {
              if (
                (e.unobserve(this),
                (n.success = t.success),
                (n.status = t.status),
                t.success)
              ) {
                utils.Debug.Assert(
                  utils.JS.isValid(t.response.squad),
                  'Expected a squad entity.'
                ),
                  repositories.Squad.set(o, t.response.squad);
                var i = repositories.Squad.getSquadById(
                  o,
                  t.response.squad.getId()
                );
                repositories.Squad.getSquadById(
                  o,
                  t.response.squad.getId()
                ).setCacheTimestamp(Date.now()),
                  (n.data = {
                    squad: i
                  });
              } else
                n.data = {
                  squad: null
                };
              s.notify(n);
            });
    } else (n.status = enums.HTTPStatusCode.BAD_REQUEST), s.notify(n);
    return s;
  }),
  (UTSquadService.prototype.requestSquadList = function requestSquadList() {
    var s = new UTObservable(),
      n = new transferobjects.ServiceResponse(),
      o = services.User.getUser().selectedPersona;
    if (!repositories.Squad.isSquadListCacheExpired()) {
      var e = repositories.Squad.getSquads(o);
      return (
        (n.success = !0),
        (n.status = enums.HTTPStatusCode.NOT_MODIFIED),
        (n.data = {
          activeSquadId: this._activeSquad,
          listFull: e.length >= this._maxSquads,
          squads: e
        }),
        s.notify(n),
        s
      );
    }
    return (
      this._squadDAO
        .getSquadList()
        .observe(this, function _onGetSquadListComplete(e, t) {
          e.unobserve(this),
            (n.success = t.success),
            (n.status = t.status),
            t.success &&
              (repositories.Squad.removeSquads(o),
              t.response.squads.forEach(function(e) {
                repositories.Squad.set(o, e);
              }),
              repositories.Squad.setSquadListCacheTimestamp(
                Date.now(),
                0 < t.maxAge ? t.maxAge : null
              ),
              this.setActiveSquadId(t.response.activeSquadId));
          var i = repositories.Squad.getSquads(o);
          (n.data = {
            activeSquadId: this._activeSquad,
            listFull: i.length >= this._maxSquads,
            squads: i
          }),
            s.notify(n);
        }),
      s
    );
  }),
  (UTSquadService.prototype.requestTOTWHistory = function requestTOTWHistory() {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    return (
      this._totwRepository.isCacheExpired()
        ? this._squadDAO
            .getTOTWHistory(0, 90)
            .observe(this, function _onGetTOTWHistoryComplete(e, t) {
              e.unobserve(this),
                (s.success = t.success),
                (s.status = t.status),
                t.success &&
                  (services.Configuration.setFeatureEnabled(
                    enums.ServerFeature.TOTW_HISTORY_ENABLED,
                    !0
                  ),
                  (s.data = {
                    squads: t.response.squads,
                    hasNext: t.response.hasNext,
                    hasPrev: t.response.hasPrev
                  }),
                  this._totwRepository.setSquadList(t.response.squads),
                  this._totwRepository.setCacheTimestamp(
                    Date.now(),
                    0 < t.maxAge ? t.maxAge : null
                  )),
                i.notify(s);
            })
        : ((s.success = !0),
          (s.status = enums.HTTPStatusCode.NOT_MODIFIED),
          (s.data = {
            squads: this._totwRepository.getSquadList(),
            hasNext: !1,
            hasPrev: !1
          }),
          i.notify(s)),
      i
    );
  }),
  (UTSquadService.prototype.removeItemsFromSquads = function removeItemsFromSquads(
    i
  ) {
    function _removeItemFromSquad(e, t) {
      (t.isPlayer() || t.isManager()) &&
        e.forEach(function(e) {
          e.containsItem(t, !0) && e.removeItem(t);
        }, this);
    }
    this.requestSquadList().observe(this, function(e, t) {
      e.unobserve(this),
        Array.isArray(i)
          ? i.forEach(function(e) {
              _removeItemFromSquad.call(this, t.data.squads, e);
            }, this)
          : _removeItemFromSquad.call(this, t.data.squads, i);
    });
  }),
  utils.JS.inherits(UTStoreService, UTObject),
  (UTStoreService.prototype.reset = function reset() {}),
  (UTStoreService.prototype.getPacks = function getPacks(e, t) {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    if (
      ((s.data = {
        packs: []
      }),
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.STORE_ENABLED
      ))
    )
      return (
        (s.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), i.notify(s), i
      );
    return (
      this._storeDAO
        .getPacks(e, t)
        .observe(this, function _onPacksRetrieved(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            s.success
              ? (s.data = t.response)
              : s.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                services.Configuration.setFeatureEnabled(
                  enums.ServerFeature.STORE_ENABLED,
                  !1
                ),
            i.notify(s);
        }),
      i
    );
  }),
  (UTStoreService.prototype.openPack = function openPack(e) {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    if (
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.STORE_ENABLED
      )
    )
      return (
        (s.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), i.notify(s), i
      );
    if (!e.isMyPack)
      return (s.status = enums.HTTPStatusCode.BAD_REQUEST), i.notify(s), i;
    return (
      this._storeDAO.openPack(e.id).observe(this, function _onPackOpened(e, t) {
        e.unobserve(this),
          (s.success = t.success),
          (s.status = t.status),
          s.success
            ? (s.data = t.response)
            : s.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
              services.Configuration.setFeatureEnabled(
                enums.ServerFeature.STORE_ENABLED,
                !1
              ),
          i.notify(s);
      }),
      i
    );
  }),
  (UTStoreService.prototype.purchasePack = function purchasePack(e, t) {
    var i = new UTObservable(),
      s = new transferobjects.ServiceResponse();
    if (
      !services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.STORE_ENABLED
      )
    )
      return (
        (s.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED), i.notify(s), i
      );
    if (e.isMyPack)
      return (s.status = enums.HTTPStatusCode.BAD_REQUEST), i.notify(s), i;
    return (
      this._storeDAO
        .openPack(e.id, t)
        .observe(this, function _onPackOpened(e, t) {
          e.unobserve(this),
            (s.success = t.success),
            (s.status = t.status),
            s.success
              ? (s.data = t.response)
              : s.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                services.Configuration.setFeatureEnabled(
                  enums.ServerFeature.STORE_ENABLED,
                  !1
                ),
            i.notify(s);
        }),
      i
    );
  }),
  NamespaceManager.Register('services'),
  (services.UTUtasRequestQueue = (function() {
    function UTUtasRequestQueueService() {
      (this._numOfCurrentRequests = 0),
        Object.defineProperty(this, '_numOfCurrentRequests', {
          writable: !0,
          enumerable: !1
        }),
        (this._queue = []),
        Object.defineProperty(this, '_queue', {
          writable: !1,
          enumerable: !1
        });
    }
    return (
      (UTUtasRequestQueueService.prototype.send = function send(e) {
        e instanceof UTUtasHttpRequest
          ? (this._queue.push(e),
            this._numOfCurrentRequests <
              this._getMaxNumOfConcurrentRequests() && this._handleQueue())
          : utils.Debug.Assert(
              !1,
              'UTUtasRequestQueueService should only receive UTAS HTTP requests.'
            );
      }),
      (UTUtasRequestQueueService.prototype._getMaxNumOfConcurrentRequests = function _getMaxNumOfConcurrentRequests() {
        return (
          services.Configuration.getFeatureSetting(
            enums.ServerFeature.MAX_CONCURRENT_REQUESTS
          ) || 5
        );
      }),
      (UTUtasRequestQueueService.prototype._handleQueue = function _handleQueue() {
        if (0 < this._queue.length) {
          var e = this._queue.shift();
          e.observe(this, this._onRequestFinished),
            e.send(),
            this._numOfCurrentRequests++;
        }
      }),
      (UTUtasRequestQueueService.prototype._onRequestFinished = function _onRequestFinished(
        e
      ) {
        e.unobserve(this), this._numOfCurrentRequests--, this._handleQueue();
      }),
      new UTUtasRequestQueueService()
    );
  })()),
  NamespaceManager.Register('valueobjects'),
  (valueobjects.NetworkErrorVO = function(e, t, i, s) {
    (this._code = e), (this._level = t), (this._title = i), (this._message = s);
  }),
  (valueobjects.NetworkErrorVO.prototype.getMessage = function() {
    return this._message;
  }),
  (valueobjects.NetworkErrorVO.prototype.getTitle = function() {
    return this._title;
  }),
  (valueobjects.NetworkErrorVO.prototype.getCode = function() {
    return this._code;
  }),
  (valueobjects.NetworkErrorVO.prototype.getErrorLevel = function() {
    return this._level;
  }),
  (valueobjects.NetworkErrorVO.prototype.isCritical = function() {
    return this._level === enums.NetworkErrorLevel.CRITICAL;
  }),
  (valueobjects.NetworkErrorVO.prototype.isImportant = function() {
    return this._level === enums.NetworkErrorLevel.IMPORTANT;
  }),
  (valueobjects.NetworkErrorVO.prototype.isUnimportant = function() {
    return this._level === enums.NetworkErrorLevel.UNIMPORTANT;
  });
var NetworkErrorManager = {
  queue: [],
  handlingError: !(valueobjects.NetworkErrorVO.prototype.isCodeValid = function() {
    return 0 < this._code;
  })
};

function UTTargetActionView() {
  UTView.call(this), (this._targets = new UTHashTable());
}

function UTControl() {
  UTTargetActionView.call(this);
}

function UTButtonControl() {
  UTControl.call(this);
}

function UTGroupButtonControl() {
  UTButtonControl.call(this);
}

function UTModalContainerView() {
  UTTargetActionView.call(this), this._generate();
}

function UTPresentationController() {
  UTObject.call(this),
    (this._presentingViewController = null),
    Object.defineProperty(this, '_presentingViewController', {
      writable: !0,
      enumerable: !1
    }),
    (this._presentedViewController = null),
    Object.defineProperty(this, '_presentedViewController', {
      writable: !0,
      enumerable: !1
    }),
    (this._presentedView = null),
    (this._isPresenting = !1);
}

function UTViewController() {
  UTResponder.call(this),
    (this._view = null),
    Object.defineProperty(this, '_view', {
      writable: !0,
      enumerable: !1
    }),
    (this._parentViewController = null),
    Object.defineProperty(this, '_parentViewController', {
      writable: !0,
      enumerable: !1
    }),
    (this._childViewControllers = []),
    Object.defineProperty(this, '_childViewControllers', {
      writable: !0,
      enumerable: !1
    }),
    (this._presentationController = null),
    Object.defineProperty(this, '_presentationController', {
      writable: !0,
      enumerable: !1
    }),
    (this.tabBarItem = null),
    (this.isLoading = !1),
    (this.hasLoaded = !1),
    (this.initialized = !1),
    (this.modalDisplayStyle = enums.UIModalDisplayStyles.FILL);
}

function UTPopupDTO(e, t, i) {
  (this.title = e), (this.message = t), (this.buttonLabels = i);
}

function UTViewModel() {
  UTObject.call(this),
    (this._requests = []),
    Object.defineProperty(this, '_requests', {
      writable: !0,
      enumerable: !1
    }),
    (this._blockingRequests = []),
    Object.defineProperty(this, '_blockingRequests', {
      writable: !0,
      enumerable: !1
    });
}

function UTCaptchaViewModel(e) {
  UTViewModel.call(this),
    (this._captchaDataObject = e),
    Object.defineProperty(this, '_captchaDataObject', {
      writable: !0,
      enumerable: !1
    });
}
(NetworkErrorManager.NUM_INTERNAL_SERVER_ERRORS = 0),
  (NetworkErrorManager.checkCriticalStatus = function checkCriticalStatus(e) {
    return (
      e === enums.HTTPStatusCode.NOT_FOUND ||
      e === enums.HTTPStatusCode.LOGGED_IN_ON_CONSOLE ||
      e === enums.HTTPStatusCode.LOGGED_IN_ON_CONSOLE_LEGACY ||
      e === enums.HTTPStatusCode.ACCOUNT_BANNED ||
      e === enums.HTTPStatusCode.INVALID_COOKIE ||
      e === enums.HTTPStatusCode.CAPTCHA_REQUIRED ||
      e === enums.HTTPStatusCode.FUN_CAPTCHA_REQUIRED ||
      e === enums.HTTPStatusCode.UNAUTHORIZED ||
      e === enums.HTTPStatusCode.UNRECOVERABLE_ERROR ||
      e === enums.HTTPStatusCode.SERVER_ERROR
    );
  }),
  (NetworkErrorManager.generateDefaultStatusMessage = function generateDefaultStatusMessage(
    e
  ) {
    switch (e) {
      case enums.HTTPStatusCode.NOT_FOUND:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.CRITICAL,
          'popup.error.serviceNotFoundTitle',
          'popup.error.serviceNotFound'
        );
      case enums.HTTPStatusCode.LOGGED_IN_ON_CONSOLE:
      case enums.HTTPStatusCode.LOGGED_IN_ON_CONSOLE_LEGACY:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.CRITICAL,
          'signedontoanotherdevice.title',
          'rpcErrorResponses.general.CARDHOUSE_ERR_ALREADY_LOGGEDIN_ON_CONSOLE'
        );
      case enums.HTTPStatusCode.ACCOUNT_BANNED:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.CRITICAL,
          'error.banneduser.header',
          'error.banneduser.body'
        );
      case enums.HTTPStatusCode.INVALID_COOKIE:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.CRITICAL,
          'popup.error.invalidcookieTitle',
          'popup.error.invalidcookie'
        );
      case enums.HTTPStatusCode.CAPTCHA_REQUIRED:
      case enums.HTTPStatusCode.FUN_CAPTCHA_REQUIRED:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.CRITICAL,
          'popup.error.captcharequiredTitle',
          'popup.error.captcharequired'
        );
      case enums.HTTPStatusCode.NO_CONTENT:
      case enums.HTTPStatusCode.BAD_REQUEST:
      case enums.HTTPStatusCode.UT_BAD_REQUEST:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.UNIMPORTANT,
          'popup.error.invalidrequestTitle',
          'popup.error.invalidrequest'
        );
      case enums.HTTPStatusCode.PROFANITY:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.UNIMPORTANT,
          'popup.error.profanityTitle',
          'popup.error.profanity'
        );
      case enums.HTTPStatusCode.NO_CARD_EXISTS:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.UNIMPORTANT,
          'popup.error.NoSuchCardTitle',
          'popup.error.NoSuchCard'
        );
      case enums.HTTPStatusCode.SERVER_ERROR:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.CRITICAL,
          'popup.error.serverdownTitle',
          'popup.error.serverdown'
        );
      case enums.HTTPStatusCode.SERVICE_IS_DISABLED:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.UNIMPORTANT,
          'popup.error.ServiceIsDisabledTitle',
          'popup.error.ServiceIsDisabled'
        );
      case enums.HTTPStatusCode.RATE_LIMIT:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.UNIMPORTANT,
          'popup.error.RateLimitHeader',
          'popup.error.RateLimitBody'
        );
      case enums.HTTPStatusCode.UNAUTHORIZED:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.CRITICAL,
          'popup.error.unauthorized.title',
          'popup.error.unauthorized.body'
        );
      case enums.HTTPStatusCode.UNRECOVERABLE_ERROR:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.CRITICAL,
          'popup.error.cannotcontinueTitle',
          'popup.error.cannotcontinue'
        );
      case enums.HTTPStatusCode.NO_INTERNET_CONNECTION:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.UNIMPORTANT,
          'popup.error.NoInternetConnectionTitle',
          'popup.error.NoInternetConnection'
        );
      case enums.HTTPStatusCode.REQUEST_TIME_OUT:
      case enums.HTTPStatusCode.NETWORK_ERROR:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.UNIMPORTANT,
          'popup.error.networkerrorTitle',
          'popup.error.networkerrorNotCritical'
        );
      case enums.HTTPStatusCode.SOME_ITEMS_NOT_FREE:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.UNIMPORTANT,
          'popup.error.activesquad.itemsNotFreeTitle',
          'popup.error.activesquad.itemsNotFreeMsg'
        );
      default:
        return new valueobjects.NetworkErrorVO(
          e,
          enums.NetworkErrorLevel.UNIMPORTANT,
          'popup.title.genericError',
          'popup.body.genericError'
        );
    }
  }),
  (NetworkErrorManager.handleStatus = function handleStatus(e) {
    NetworkErrorManager.handle(
      NetworkErrorManager.generateDefaultStatusMessage(e)
    );
  }),
  (NetworkErrorManager.handle = function handle(e, t, i) {
    if (NetworkErrorManager.handlingError)
      NetworkErrorManager.queue.push({
        error: e,
        silent: t,
        cb: i
      });
    else {
      if (((NetworkErrorManager.handlingError = !0), e.isCritical())) {
        gClickShield.reset();
        var s = getAppMain().getLoginController();
        (i = s.logout.bind(s, enums.PIN.LOGOUT_EVT_END_REASON.ERROR)),
          services.PIN.sendData(enums.PIN.EVENT.ERROR, {
            sid: services.Authentication.getSession(enums.AuthEnvironment.UTAS)
              .id,
            type: 'disconnect',
            errid: enums.PIN.ERROR_EVT_ERRID.SERVER,
            server_type: 'utas'
          }),
          (NetworkErrorManager.queue = []);
      }
      if (
        (!e.isUnimportant() || (e.isUnimportant() && !t)
          ? utils.PopupManager.displayNetworkError(e, i)
          : utils.JS.isFunction(i) && i(),
        (NetworkErrorManager.handlingError = !1),
        0 < NetworkErrorManager.queue.length)
      ) {
        var n = NetworkErrorManager.queue.shift();
        NetworkErrorManager.handle(n.error, n.silent, n.cb);
      }
    }
  }),
  (NetworkErrorManager.trackServerError = function trackServerError() {
    if (
      (NetworkErrorManager.NUM_INTERNAL_SERVER_ERRORS++,
      NetworkErrorManager.NUM_INTERNAL_SERVER_ERRORS >=
        gConfigurationModel.getConfigNumber(
          models.ConfigurationModel.KEY_MAX_CONSECUTIVE_500_ERRORS
        ))
    ) {
      NetworkErrorManager.NUM_INTERNAL_SERVER_ERRORS = 0;
      var e = new valueobjects.NetworkErrorVO(
        enums.HTTPStatusCode.SERVER_ERROR,
        enums.NetworkErrorLevel.CRITICAL,
        'popup.error.cannotcontinueTitle',
        'popup.error.cannotcontinue'
      );
      return NetworkErrorManager.handle(e, !1), !0;
    }
    return !1;
  }),
  NamespaceManager.Register('views.popups'),
  (views.popups.LiveMessage = function LiveMessage() {
    UTView.call(this), (this._isRendered = !1), this._generate();
  }),
  utils.JS.inherits(views.popups.LiveMessage, UTView),
  (views.popups.LiveMessage.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-livemessage'),
        e.classList.add('sm-ut-content-container'),
        e.classList.add('ut-content-container'),
        (this.__contentContainer = document.createElement('div')),
        this.__contentContainer.classList.add('ut-content');
      var t = document.createElement('div');
      t.classList.add('ut-livemessage-container'),
        (this.__header = document.createElement('header')),
        this.__header.classList.add('ut-livemessage-header');
      var i = document.createElement('div');
      i.classList.add('ut-livemessage-header--meta'),
        (this.__date = document.createElement('p')),
        this.__date.classList.add('ut-livemessage-header--date'),
        i.appendChild(this.__date),
        (this.__numMessages = document.createElement('p')),
        this.__numMessages.classList.add('ut-livemessage-header--counter'),
        i.appendChild(this.__numMessages),
        this.__header.appendChild(i),
        (this.__title = document.createElement('h1')),
        this.__header.appendChild(this.__title),
        (this.__subtitle = document.createElement('h2')),
        this.__header.appendChild(this.__subtitle),
        (this.__info = document.createElement('h3')),
        this.__header.appendChild(this.__info),
        t.appendChild(this.__header);
      var s = document.createElement('div');
      s.classList.add('ut-livemessage-content'),
        (this._image = new UTImageView()),
        this._image
          .getRootElement()
          .classList.add('ut-livemessage-content--image'),
        s.appendChild(this._image.getRootElement()),
        (this.__content = document.createElement('div')),
        this.__content.classList.add('ut-livemessage-content--body'),
        s.appendChild(this.__content),
        t.appendChild(s);
      var n = document.createElement('div');
      n.classList.add('ut-livemessage-footer'),
        (this._continueBtn = new UTStandardButtonControl()),
        this._continueBtn.getRootElement().classList.add('call-to-action'),
        n.appendChild(this._continueBtn.getRootElement()),
        t.appendChild(n),
        this.__contentContainer.appendChild(t),
        e.appendChild(this.__contentContainer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.popups.LiveMessage.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__contentContainer = null),
      (this.__header = null),
      (this.__date = null),
      (this.__numMessages = null),
      (this.__title = null),
      (this.__subtitle = null),
      (this.__info = null),
      this._image.destroy(),
      (this.__content = null),
      this._continueBtn.destroy();
  }),
  (views.popups.LiveMessage.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.popups.LiveMessage.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.popups.LiveMessage.prototype.init = function init() {
    this.superclass(),
      this._continueBtn.init(),
      this._continueBtn.setText(
        services.Localization.localize('common.dialog.continue')
      ),
      this.setInteractionState(!0);
  }),
  (views.popups.LiveMessage.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    this._setInteractionStateFlag(e), this._continueBtn.setInteractionState(e);
  }),
  (views.popups.LiveMessage.prototype._renderImages = function _renderImages(
    e,
    t
  ) {
    this._image.setExternalResource(e, !0).observe(this, this._imageLoad),
      (this.__contentContainer.style.backgroundImage = utils.JS.isEmpty(t)
        ? ''
        : 'url(' + t + ')');
  }),
  (views.popups.LiveMessage.prototype._imageLoad = function _imageLoad(
    e,
    t,
    i,
    s
  ) {
    e.unobserve(this), t || i.setLocalResource('images/liveMessageDefault.png');
  }),
  (views.popups.LiveMessage.prototype._renderHeader = function _renderHeader(
    e,
    t
  ) {
    var i = e.textFields.get(enums.ArubaTextFieldType.TITLE),
      s = e.textFields.get(enums.ArubaTextFieldType.SUBTITLE),
      n = e.textFields.get(enums.ArubaTextFieldType.INFO),
      o = utils.JS.isValid(i),
      a = utils.JS.isValid(s),
      r = utils.JS.isValid(n),
      l = r ? n.colour : '';
    this.renderTitleText(o ? i.text : ''),
      (this.__title.style.color = o ? i.colour : ''),
      this.renderSubtitleText(a ? s.text : ''),
      (this.__subtitle.style.color = a ? s.colour : ''),
      this.renderInfoText(r ? n.text : ''),
      (this.__info.style.backgroundColor = l),
      (this.__info.style.color = utils.JS.isEmpty(l) ? '' : '#fff'),
      (this.__numMessages.textContent = t);
  }),
  (views.popups.LiveMessage.prototype.renderTitleText = function renderTitleText(
    e
  ) {
    this.__title.textContent = e;
  }),
  (views.popups.LiveMessage.prototype.renderSubtitleText = function renderSubtitleText(
    e
  ) {
    this.__subtitle.textContent = e;
  }),
  (views.popups.LiveMessage.prototype.renderInfoText = function renderInfoText(
    e
  ) {
    this.__info.textContent = e;
  }),
  (views.popups.LiveMessage.prototype.renderContent = function renderContent(
    e
  ) {
    this.renderContentText(e.text), (this.__content.style.color = e.colour);
  }),
  (views.popups.LiveMessage.prototype.renderContentText = function renderContentText(
    e
  ) {
    this.__content.innerHTML = e;
  }),
  (views.popups.LiveMessage.prototype.render = function render(e, t) {
    var i = e.textFields.get(enums.ArubaTextFieldType.BODY),
      s = e.images.get(enums.ArubaImageType.BODY) || '',
      n = e.images.get(enums.ArubaImageType.BACKGROUND) || '';
    this._isRendered
      ? ($(this.__header).fadeOut(
          200,
          function() {
            this._renderHeader(e, t), $(this.__header).fadeIn(200);
          }.bind(this)
        ),
        $(this.__content).fadeOut(
          200,
          function() {
            this.renderContent(i), $(this.__content).fadeIn(200);
          }.bind(this)
        ),
        this._image.getRoot().fadeOut(
          200,
          function() {
            this._renderImages(s, n), this._image.getRoot().fadeIn(200);
          }.bind(this)
        ))
      : (this._renderHeader(e, t),
        this._renderImages(s, n),
        this.renderContent(i),
        (this._isRendered = !0));
  }),
  (views.popups.LiveMessage.prototype.getContinueButton = function getContinueButton() {
    return this._continueBtn;
  }),
  utils.JS.inherits(UTTargetActionView, UTView),
  (UTTargetActionView.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._targets && (this._targets.clear(), (this._targets = null));
  }),
  (UTTargetActionView.prototype.addTarget = function addTarget(e, t, i) {
    0 <= this.getActions(e, i).indexOf(t) ||
      (this._targets.has(i)
        ? this._targets.get(i).push(
            Object.freeze({
              target: e,
              action: t
            })
          )
        : this._targets.set(i, [
            Object.freeze({
              target: e,
              action: t
            })
          ]));
  }),
  (UTTargetActionView.prototype.removeTarget = function removeTarget(t, i, e) {
    if (this._targets.has(e)) {
      var s = this._targets.get(e).filter(function(e) {
        return !(e.target === t && e.action === i);
      });
      this._targets.set(e, s);
    }
  }),
  (UTTargetActionView.prototype.getActions = function getActions(i, e) {
    var t = [],
      s = this._targets.get(e);
    return (
      s &&
        (t = s.reduce(function(e, t) {
          return t.target === i && e.push(t.action), e;
        }, [])),
      t
    );
  }),
  (UTTargetActionView.prototype._triggerActions = function _triggerActions(
    t,
    i
  ) {
    (i = i || null),
      this._targets.has(t) &&
        this._targets.get(t).forEach(function(e) {
          e.action.call(e.target, this, t, i);
        }, this);
  }),
  utils.JS.inherits(UTControl, UTTargetActionView),
  (UTControl.prototype.blur = function blur() {
    var e = this.getRootElement();
    e === document.activeElement && e.blur();
  }),
  (UTControl.prototype.focus = function focus() {
    var e = this.getRootElement();
    e !== document.activeElement && e.focus();
  }),
  (UTControl.prototype.addTarget = function addTarget(e, t, i) {
    var s = this._evaluateEventString(i);
    utils.Debug.Assert(s, 'Invalid assignment; expected enums.Event.<string>'),
      s && this.superclass(e, t, i);
  }),
  (UTControl.prototype.removeTarget = function removeTarget(e, t, i) {
    var s = this._evaluateEventString(i);
    utils.Debug.Assert(s, 'Invalid assignment; expected enums.Event.<string>'),
      s && this.superclass(e, t, i);
  }),
  (UTControl.prototype.getActions = function getActions(e, t) {
    var i = this._evaluateEventString(t);
    return (
      utils.Debug.Assert(
        i,
        'Invalid assignment; expected enums.Event.<string>'
      ),
      i ? this.superclass(e, t) : []
    );
  }),
  (UTControl.prototype._triggerActions = function _triggerActions(e, t) {
    var i = this._evaluateEventString(e);
    utils.Debug.Assert(i, 'Invalid assignment; expected enums.Event.<string>'),
      i && this.superclass(e, t);
  }),
  (UTControl.prototype._evaluateEventString = function _evaluateEventString(e) {
    var t;
    for (t in enums.Event)
      if (enums.Event.hasOwnProperty(t) && e === enums.Event[t]) return !0;
    return !1;
  }),
  utils.JS.inherits(UTButtonControl, UTControl),
  (UTButtonControl.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTButtonControl.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    var t = this._interactionState;
    this.superclass(e),
      this._interactionState !== t &&
        ((this.getRootElement().disabled = !this._interactionState),
        this.toggleClass(enums.UIButtonState.DISABLED, !this._interactionState),
        this._interactionState ||
          this.removeClass(
            [enums.UIButtonState.ACTIVE, enums.UIButtonState.HOVER].join(' ')
          ));
  }),
  (UTButtonControl.prototype.setText = function setText(e) {
    this.getRootElement().textContent = e;
  }),
  (UTButtonControl.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(e), this.addClass(enums.UIButtonState.ACTIVE);
  }),
  (UTButtonControl.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(e), this.removeClass(enums.UIButtonState.ACTIVE);
  }),
  (UTButtonControl.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(e), this.removeClass(enums.UIButtonState.ACTIVE);
  }),
  (UTButtonControl.prototype._touchCancelled = function _touchCancelled(e) {
    this.superclass(e), this.removeClass(enums.UIButtonState.ACTIVE);
  }),
  (UTButtonControl.prototype._mouseLeave = function _mouseLeave(e) {
    this.superclass(e),
      this.removeClass(enums.UIButtonState.ACTIVE),
      this.removeClass(enums.UIButtonState.HOVER);
  }),
  (UTButtonControl.prototype._mouseEnter = function _mouseEnter(e) {
    this.superclass(e), this.addClass(enums.UIButtonState.HOVER);
  }),
  (UTButtonControl.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(e), this._triggerActions(enums.Event.TAP);
  }),
  utils.JS.inherits(UTGroupButtonControl, UTButtonControl),
  (UTGroupButtonControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      (this.__text = document.createElement('span')),
        this.__text.classList.add('btn-text'),
        e.appendChild(this.__text),
        (this.__subtext = document.createElement('span')),
        this.__subtext.classList.add('btn-subtext'),
        e.appendChild(this.__subtext),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTGroupButtonControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__text = null),
      (this.__subtext = null);
  }),
  (UTGroupButtonControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTGroupButtonControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTGroupButtonControl.prototype.setText = function setText(e) {
    this.__text.textContent = e;
  }),
  (UTGroupButtonControl.prototype.setSubtext = function setSubtext(e) {
    this.__subtext.textContent = e;
  }),
  (UTGroupButtonControl.prototype.displayCurrencyIcon = function displayCurrencyIcon(
    e
  ) {
    DOMKit.toggleClass(this.__subtext, 'currency-coins', e);
  }),
  NamespaceManager.Register('views.popups'),
  (views.popups.Dialog = function UTDialogPopupView() {
    UTView.call(this), (this._optionBtns = []), this._generate();
  }),
  utils.JS.inherits(views.popups.Dialog, UTView),
  (views.popups.Dialog.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('Dialog');
      var t = document.createElement('header');
      (this.__title = document.createElement('h1')),
        this.__title.classList.add('dialog-title'),
        t.appendChild(this.__title),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('dialog-body'),
        (this.__msg = document.createElement('p')),
        this.__msg.classList.add('dialog-msg'),
        i.appendChild(this.__msg),
        (this.__btnContainer = document.createElement('div')),
        this.__btnContainer.classList.add('ut-button-group'),
        i.appendChild(this.__btnContainer),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.popups.Dialog.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      (this.__msg = null),
      (this.__btnContainer = null);
  }),
  (views.popups.Dialog.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.popups.Dialog.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.popups.Dialog.prototype.dealloc = function dealloc() {
    this._optionBtns.forEach(function(e) {
      e.dealloc();
    }),
      (this._optionBtns = []),
      this.superclass();
  }),
  (views.popups.Dialog.prototype.getContent = function getContent() {
    return this.__msg;
  }),
  (views.popups.Dialog.prototype.render = function render(e, t, i, s) {
    var n = utils.JS.isValid(s)
      ? services.Localization.localize(e, s)
      : services.Localization.localize(e);
    (this.__msg.innerHTML = new DOMParser().parseFromString(
      n,
      'text/html'
    ).body.innerHTML),
      (this.__title.textContent = services.Localization.localize(t)),
      this.addClass(i),
      this.layoutSubviews();
  }),
  (views.popups.Dialog.prototype.createOption = function createOption(e) {
    var t = new UTGroupButtonControl();
    return (
      t.setText(e),
      t.init(),
      this._optionBtns.push(t),
      this.addSubview(t, this.__btnContainer),
      t
    );
  }),
  utils.JS.inherits(UTModalContainerView, UTTargetActionView),
  (UTModalContainerView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('view-modal-container'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTModalContainerView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTModalContainerView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTModalContainerView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTModalContainerView.Event = {
    SHIELDPRESS: 'UTModalContainerView.Event.SHIELDPRESS'
  }),
  (UTModalContainerView.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTModalContainerView.prototype._touchMoved = function _touchMoved(e) {
    this.getRootElement().contains(e.target)
      ? this.superclass()
      : (e.preventDefault(), e.stopPropagation());
  }),
  (UTModalContainerView.prototype._tapDetected = function _tapDetected(e) {
    e.target === this.getRootElement()
      ? this._triggerActions(UTModalContainerView.Event.SHIELDPRESS)
      : this.superclass();
  }),
  utils.JS.inherits(UTPresentationController, UTObject),
  (UTPresentationController.prototype.initWithViewControllers = function initWithViewControllers(
    e,
    t
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        utils.JS.isValid(e) && e.isSubClass(UTViewController),
        'Presented object expected to be a view controller.'
      ),
      utils.Debug.Assert(
        utils.JS.isValid(t) && t.isSubClass(UTViewController),
        'Presenting object expected to be a view controller.'
      ),
      (this._presentedViewController = e),
      (this._presentingViewController = t),
      this.init());
  }),
  (UTPresentationController.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this._presentedView = null),
      (this._presentedViewController = null),
      (this._presentingViewController = null),
      (this._isPresenting = !1);
  }),
  (UTPresentationController.prototype.getPresentedViewController = function getPresentedViewController() {
    return this._presentedViewController;
  }),
  (UTPresentationController.prototype._insertView = function _insertView(e, t) {
    (this._presentedView = e),
      this._presentedView.getSuperview() !== t &&
        (t.addSubview(this._presentedView), t.layoutSubviews());
  }),
  (UTPresentationController.prototype._presentInFullScreen = function _presentInFullScreen() {
    var e = this._presentedViewController.getView(),
      t = e.getRootElement();
    (t.style.position = 'fixed'),
      (t.style.top = '0'),
      (t.style.left = '0'),
      (t.style.right = '0'),
      (t.style.bottom = '0'),
      (t.style.zIndex = '10'),
      this._insertView(
        e,
        getAppMain()
          .getRootViewController()
          .getView()
      );
  }),
  (UTPresentationController.prototype._presentInContainerContext = function _presentInContainerContext() {
    var e = this._presentedViewController.getView(),
      t = e.getRootElement();
    (t.style.position = 'absolute'),
      (t.style.top = '0'),
      (t.style.left = '0'),
      (t.style.right = '0'),
      (t.style.bottom = '0'),
      (t.style.zIndex = '10'),
      this._insertView(e, this._presentingViewController.getView());
  }),
  (UTPresentationController.prototype._presentInFormModal = function _presentInFormModal() {
    var e = new UTModalContainerView();
    e.init(),
      e.addClass('form-modal'),
      e.addSubview(this._presentedViewController.getView()),
      e.layoutSubviews(),
      e.addTarget(
        this._presentingViewController,
        function(e, t, i) {
          this.dismissViewController(!0);
        },
        UTModalContainerView.Event.SHIELDPRESS
      ),
      this._insertView(
        e,
        getAppMain()
          .getRootViewController()
          .getView()
      );
  }),
  (UTPresentationController.prototype._presentInPageModal = function _presentInPageModal() {
    var e = new UTModalContainerView();
    e.init(),
      e.addClass('page-modal'),
      e.addSubview(this._presentedViewController.getView()),
      e.layoutSubviews(),
      e.addTarget(
        this._presentingViewController,
        function(e, t, i) {
          this.dismissViewController(!0);
        },
        UTModalContainerView.Event.SHIELDPRESS
      ),
      this._insertView(
        e,
        getAppMain()
          .getRootViewController()
          .getView()
      );
  }),
  (UTPresentationController.prototype.present = function present(e, t) {
    if (!this._isPresenting) {
      switch (
        ((this._isPresenting = !0),
        this._presentingViewController.willPresent(
          this._presentedViewController
        ),
        this.presentationWillBegin(),
        this._presentingViewController.addChildViewController(
          this._presentedViewController
        ),
        this._presentedViewController.viewWillAppear(),
        this._presentedViewController.modalDisplayStyle)
      ) {
        case enums.UIModalDisplayStyles.FULLSCREEN:
          this._presentInFullScreen();
          break;
        case enums.UIModalDisplayStyles.FILL:
          this._presentInContainerContext();
          break;
        case enums.UIModalDisplayStyles.FORM:
          this._presentInFormModal();
          break;
        case enums.UIModalDisplayStyles.PAGE:
          this._presentInPageModal();
          break;
        default:
          utils.Debug.Assert(
            !1,
            'View controller does not have a supported modal display style.'
          );
      }
      this._presentedViewController.viewDidAppear(),
        e
          ? this._presentedViewController
              .getView()
              .perform(
                enums.UIAnimation.FADE_IN,
                _completePresentation.bind(this)
              )
          : _completePresentation.call(this);
    }

    function _completePresentation() {
      this.presentationDidEnd(),
        this._presentingViewController.didPresent(
          this._presentedViewController
        ),
        utils.JS.isFunction(t) && t();
    }
  }),
  (UTPresentationController.prototype.dismiss = function dismiss(e, t) {
    this._isPresenting &&
      (this._presentingViewController.willDismiss(
        this._presentedViewController
      ),
      this.dismissalWillBegin(),
      this._presentedViewController.viewWillDisappear(),
      this._presentedView.removeFromSuperview(
        e,
        function _completeDismissal() {
          this._presentedView.isSubClass(UTModalContainerView)
            ? this._presentedView.dealloc()
            : this._presentedView.getRootElement().removeAttribute('style'),
            this._presentingViewController.viewDidDisappear(),
            this.dismissalDidEnd(),
            this._presentingViewController.didDismiss(
              this._presentedViewController
            ),
            (this._presentedView = null),
            (this._isPresenting = !1),
            this._presentingViewController.removeChildViewController(
              this._presentedViewController
            ),
            utils.JS.isFunction(t) && t();
        }.bind(this)
      ));
  }),
  (UTPresentationController.prototype.presentationWillBegin = function presentationWillBegin() {}),
  (UTPresentationController.prototype.presentationDidEnd = function presentationDidEnd() {}),
  (UTPresentationController.prototype.dismissalWillBegin = function dismissalWillBegin() {}),
  (UTPresentationController.prototype.dismissalDidEnd = function dismissalDidEnd() {}),
  utils.JS.inherits(UTViewController, UTResponder),
  (UTViewController.prototype.init = function init() {
    this.initialized || (this.superclass(), (this.initialized = !0));
  }),
  (UTViewController.prototype.dealloc = function dealloc() {
    this.tabBarItem && (this.tabBarItem = null),
      this._presentationController && this.dismissViewController(),
      this.removeFromParentViewController(),
      this._childViewControllers.forEach(function(e) {
        e.willMove(this), (e._parentViewController = null), e.didMove(this);
      }, this),
      (this._childViewControllers = []),
      this._view && (this._view.dealloc(), (this._view = null)),
      this.superclass();
  }),
  (UTViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return null;
  }),
  (UTViewController.prototype.getParentViewController = function getParentViewController() {
    return this._parentViewController;
  }),
  (UTViewController.prototype.getNavigationController = function getNavigationController() {
    for (var e = this.getParentViewController(); null !== e; ) {
      if (e.isSubClass(UTNavigationController)) return e;
      e = e.getParentViewController();
    }
    return null;
  }),
  (UTViewController.prototype.getRootNavigationController = function getRootNavigationController() {
    for (var e = this.getNavigationController(), t = null; null !== e; )
      e = (t = e).getNavigationController();
    return t;
  }),
  (UTViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return null;
  }),
  (UTViewController.prototype._loadView = function _loadView() {
    if (!this.hasLoaded) {
      var e = this._getViewInstanceFromData();
      e &&
        ((this._view = e),
        this._view.setEventDelegate(this),
        this._view.init());
    }
  }),
  (UTViewController.prototype.getView = function getView() {
    return (
      this._view ||
        ((this.isLoading = !0),
        this._loadView(),
        (this.isLoading = !1),
        this.viewDidLoad()),
      this.hasLoaded || this.isLoading || (this.hasLoaded = !0),
      this._view
    );
  }),
  (UTViewController.prototype.setView = function setView(e) {
    if (e !== this._view) {
      if (this._view) {
        var t = this._view;
        t.removeFromSuperview(), t.dealloc();
      }
      this._view = e;
    }
  }),
  (UTViewController.prototype.isViewDisplayed = function isViewDisplayed() {
    var e = this.getView();
    return (
      !!e &&
      (function _checkIfInElement(e, t) {
        var i = e.parentNode;
        return !!i && (i === t || _checkIfInElement(i, t));
      })(e.getRootElement(), document.getElementsByTagName('body')[0])
    );
  }),
  (UTViewController.prototype._getPresentationControllerInstance = function _getPresentationControllerInstance() {
    return new UTPresentationController();
  }),
  (UTViewController.prototype.addChildViewController = function addChildViewController(
    e
  ) {
    e.willMove(this),
      this._childViewControllers.push(e),
      (e._parentViewController = this),
      e.setEventDelegate(this),
      e.didMove(this);
  }),
  (UTViewController.prototype.removeChildViewController = function removeChildViewController(
    e
  ) {
    var t = this._childViewControllers.indexOf(e);
    if (0 <= t) {
      e.willMove(this);
      var i = this.getView(),
        s = e.getView();
      i && s && s.isSubview(i) && s.removeFromSuperview(),
        e.removeEventDelegate(this),
        e._parentViewController === this && (e._parentViewController = null),
        this._childViewControllers.splice(t, 1),
        e.didMove(this);
    }
  }),
  (UTViewController.prototype.removeFromParentViewController = function removeFromParentViewController() {
    var e = this.getParentViewController();
    e && e.removeChildViewController(this);
  }),
  (UTViewController.prototype.presentViewController = function presentViewController(
    e,
    t,
    i
  ) {
    function _performPresentation() {
      (this._presentationController = this._getPresentationControllerInstance()),
        this._presentationController.initWithViewControllers(e, this),
        this._presentationController.present(!!t, i);
    }
    (this._presentationController &&
      this._presentationController.getPresentedViewController() === e) ||
      (this._presentationController
        ? this.dismissViewController(!!t, _performPresentation.bind(this))
        : _performPresentation.call(this));
  }),
  (UTViewController.prototype.dismissViewController = function dismissViewController(
    e,
    t
  ) {
    utils.Debug.Assert(
      utils.JS.isValid(this._presentationController),
      'Attempted to perform a dismiss when no view controller is being presented.'
    ),
      this._presentationController &&
        this._presentationController.dismiss(
          !!e,
          function _completeDismiss() {
            this._presentationController.dealloc(),
              (this._presentationController = null),
              utils.JS.isFunction(t) && t();
          }.bind(this)
        );
  }),
  (UTViewController.prototype.decorateLinks = function decorateLinks(e) {
    DOMKit.findElements(e, 'a').forEach(function(e) {
      ('a' !== e.nodeName && 'A' !== e.nodeName) ||
        (e.addEventListener(enums.Event.TOUCHEND, this._linkHandler, !1),
        e.addEventListener(enums.Event.CLICK, this._linkHandler, !1));
    }, this);
  }),
  (UTViewController.prototype.stripLinks = function stripLinks(e) {
    DOMKit.findElements(e, 'a').forEach(function(e) {
      ('a' !== e.nodeName && 'A' !== e.nodeName) ||
        (e.removeEventListener(enums.Event.TOUCHEND, this._linkHandler, !1),
        e.removeEventListener(enums.Event.CLICK, this._linkHandler, !1));
    }, this);
  }),
  (UTViewController.prototype._linkHandler = function _linkHandler(e) {
    e.preventDefault();
    var t = this.attributes.href || null,
      i = null;
    if (t) return (i = isWeb() ? '_blank' : '_system'), window.open(t.value, i);
  }),
  (UTViewController.prototype.getPresentedViewController = function getPresentedViewController() {
    return this._presentationController
      ? this._presentationController.getPresentedViewController()
      : null;
  }),
  (UTViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return '';
  }),
  (UTViewController.prototype.getToolbarItems = function getToolbarItems() {
    return this.getNavigationController().getToolbarItems();
  }),
  (UTViewController.prototype.getNavigationItem = function getNavigationItem() {
    return null;
  }),
  (UTViewController.prototype.willMove = function willMove(e) {}),
  (UTViewController.prototype.didMove = function didMove(e) {}),
  (UTViewController.prototype.willPresent = function willPresent(e) {}),
  (UTViewController.prototype.didPresent = function didPresent(e) {}),
  (UTViewController.prototype.willDismiss = function willDismiss(e) {}),
  (UTViewController.prototype.didDismiss = function didDismiss(e) {}),
  (UTViewController.prototype.viewDidLoad = function viewDidLoad() {}),
  (UTViewController.prototype.viewWillAppear = function viewWillAppear() {}),
  (UTViewController.prototype.viewWillDisappear = function viewWillDisappear() {}),
  (UTViewController.prototype.viewDidAppear = function viewDidAppear() {
    var e = this._getTelemetryId();
    utils.JS.isString(e) &&
      services.PIN.sendData(enums.PIN.EVENT.PAGE_VIEW, {
        type: PIN_PAGEVIEW_EVT_TYPE,
        pgid: e
      });
  }),
  (UTViewController.prototype.viewDidDisappear = function viewDidDisappear() {}),
  NamespaceManager.Register('interfaces'),
  (interfaces.KeyboardEventDelegate = function IKeyboardEventDelegate() {}),
  (interfaces.KeyboardEventDelegate.prototype.handleKeyUpEvent = function handleKeyUpEvent(
    e
  ) {}),
  NamespaceManager.Register('controllers.views.popups'),
  (controllers.views.popups.BasePopup = function BasePopup() {
    UTViewController.call(this),
      (this.onExit = new UTObservable()),
      Object.defineProperty(this, 'onExit', {
        writable: !1
      });
  }),
  utils.JS.inherits(controllers.views.popups.BasePopup, UTViewController),
  (controllers.views.popups.BasePopup.prototype.init = function init() {
    this.superclass(),
      getKeyboardEventController().registerDelegate(
        this,
        UTKeyboardEventController.PRIORITY.POPUP
      );
  }),
  (controllers.views.popups.BasePopup.prototype.dealloc = function dealloc() {
    this.onExit.dealloc(),
      (this.onExit = null),
      getKeyboardEventController().unregisterDelegate(
        this,
        UTKeyboardEventController.PRIORITY.POPUP
      ),
      this.superclass();
  }),
  (controllers.views.popups.BasePopup.prototype.onBackButton = function onBackButton() {
    return this.closePopup(), !1;
  }),
  (controllers.views.popups.BasePopup.prototype.closePopup = function closePopup() {
    this.onExit.notify();
  }),
  (controllers.views.popups.BasePopup.prototype.handleKeyUpEvent = function handleKeyUpEvent(
    e
  ) {
    (e.key !== enums.KeyboardKey.ESCAPE &&
      e.key !== enums.KeyboardKey.MS_ESCAPE) ||
      this.onExit.notify(enums.UIDialogOptions.CANCEL);
  }),
  (controllers.views.popups.Dialog = function UTDialogPopupViewController(
    e,
    t,
    i,
    s,
    n
  ) {
    controllers.views.popups.BasePopup.call(this),
      (this._msg = e),
      (this._title = t),
      (this._options = utils.JS.valToArray(n)),
      (this._messageParameters = s || []),
      (this._type = utils.JS.isValid(i) ? i : enums.UIDialogTypes.MESSAGE);
  }),
  utils.JS.inherits(
    controllers.views.popups.Dialog,
    controllers.views.popups.BasePopup
  ),
  (controllers.views.popups.Dialog.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.Dialog();
  }),
  (controllers.views.popups.Dialog.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var i = this.getView();
    this._options.forEach(function(e, t) {
      i.createOption(utils.PopupManager.getLocalizedDialogOption(e)).addTarget(
        this,
        this._eOptionSelected.bind(this, e),
        enums.Event.TAP
      );
    }, this),
      i.render(this._msg, this._title, this._type, this._messageParameters),
      this.decorateLinks(i.getContent());
  }),
  (controllers.views.popups.Dialog.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(), this.stripLinks(this.getView().getContent());
  }),
  (controllers.views.popups.Dialog.prototype.handleKeyUpEvent = function handleKeyUpEvent(
    e
  ) {
    var t;
    this._options.length < 1 ||
      (e.key === enums.KeyboardKey.ESCAPE ||
      e.key === enums.KeyboardKey.MS_ESCAPE
        ? ((t = isWeb() ? this._options[1] : this._options[0]),
          this.onExit.notify(
            utils.JS.isNumber(t) ? t : enums.UIDialogOptions.CANCEL
          ))
        : e.key === enums.KeyboardKey.ENTER &&
          ((t = isWeb() ? this._options[0] : this._options[1]),
          this.onExit.notify(
            utils.JS.isNumber(t) ? t : enums.UIDialogOptions.OK
          )));
  }),
  (controllers.views.popups.Dialog.prototype._eOptionSelected = function _eOptionSelected(
    e
  ) {
    this.onExit.notify(e);
  }),
  NamespaceManager.Register('utils'),
  (utils.PopupManager = {}),
  (utils.PopupManager.displayingNativePopup = !1),
  (utils.PopupManager.ShowAlert = function showAlert(e, i, t) {
    var s = new controllers.views.popups.Dialog(
      e.message,
      e.title,
      enums.UIDialogTypes.ALERT,
      t,
      e.buttonLabels.slice(0, 1)
    );
    s.init(),
      gPopupClickShield.setActivePopup(s),
      s.onExit.observe(this, function(e, t) {
        i && i();
      });
  }),
  (utils.PopupManager.displayNetworkError = function(e, t) {
    var i = new UTPopupDTO(e.getTitle(), e.getMessage(), [
      enums.UIDialogOptions.OK
    ]);
    utils.PopupManager.ShowAlert(i, t);
  }),
  (utils.PopupManager.ShowConfirmation = function showConfirmation(e, t, i, s) {
    utils.JS.isFunction(s) || (s = function() {});
    var n = new controllers.views.popups.Dialog(
      e.message,
      e.title,
      enums.UIDialogTypes.MESSAGE,
      t,
      e.buttonLabels
    );
    n.init(),
      gPopupClickShield.setActivePopup(n),
      n.onExit.observe(this, function(e, t) {
        t !== enums.UIDialogOptions.CANCEL &&
        t !== enums.UIDialogOptions.NO &&
        i
          ? i()
          : s && s();
      });
  }),
  (utils.PopupManager.showNoInternetConnectionPopup = function showNoInternetConnectionPopup() {
    var e = getAppMain().getLoginController(),
      t = e ? e.logout.bind(e, enums.PIN.LOGOUT_EVT_END_REASON.ERROR) : null;
    utils.PopupManager.ShowAlert(
      utils.PopupManager.Alerts.NO_INTERNET_CONNECTION,
      t
    );
  }),
  (utils.PopupManager.getLocalizedDialogOption = function getLocalizedDialogOption(
    e
  ) {
    var t = '';
    switch (e) {
      case enums.UIDialogOptions.RETRY:
        t = 'easfcdown.retry';
        break;
      case enums.UIDialogOptions.OK:
        t = 'common.dialog.ok';
        break;
      case enums.UIDialogOptions.CANCEL:
        t = 'common.dialog.cancel';
        break;
      case enums.UIDialogOptions.YES:
        t = 'popup.yes';
        break;
      case enums.UIDialogOptions.NO:
        t = 'popup.no';
        break;
      case enums.UIDialogOptions.SIGN_OUT:
        t = 'more.signout.button';
        break;
      case enums.UIDialogOptions.TAKE_ME:
        t = 'popup.takeMeThere';
    }
    return services.Localization.localize(t);
  }),
  (utils.PopupManager.Alerts = {}),
  (utils.PopupManager.CONFIRM_DENY = [
    enums.UIDialogOptions.OK,
    enums.UIDialogOptions.CANCEL
  ]),
  (utils.PopupManager.SIGN_OUT = [
    enums.UIDialogOptions.SIGN_OUT,
    enums.UIDialogOptions.CANCEL
  ]),
  (utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE = new UTPopupDTO(
    'popup.originUnavailableTitle',
    'popup.originUnavailable',
    [enums.UIDialogOptions.RETRY]
  )),
  (utils.PopupManager.Alerts.ACCOUNT_BANNED = new UTPopupDTO(
    'error.banneduser.header',
    'error.banneduser.body',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.BID_TOO_LOW = new UTPopupDTO(
    'popup.errorLowBidTitle',
    'popup.bidTooLow',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.CANT_UNWATCH_ACTIVE_BID = new UTPopupDTO(
    'popup.cantUnwatchCardPlayerBidTitle',
    'popup.cantUnwatchCardPlayerBidText',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.WATCH_LIST_FULL = new UTPopupDTO(
    'popup.watchlist.full.title',
    'popup.watchlist.full.message',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.TRANSFER_LIST_FULL = new UTPopupDTO(
    'popup.error.tradetoken.SellItemTradePileFullTitle',
    'popup.error.tradetoken.SellItemTradePileFull',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.DESTINATION_FULL = new UTPopupDTO(
    'popup.error.tradetoken.DestinationFullTitle',
    'popup.error.item.DestinationFull',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.DUPLICATE_SQUAD_NAME = new UTPopupDTO(
    'popup.error.duplicateSquadNameTitle',
    'popup.error.duplicateSquadName',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.CANNOT_DELETE_SQUAD = new UTPopupDTO(
    'popup.cannotdeletesquad.title',
    'popup.cannotdeletesquad.message',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.DID_CREATE_EXCEEDED = new UTPopupDTO(
    'popup.error.DID.CreateExceededHeader',
    'popup.error.DID.CreateExceededBody',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.DID_LOGIN_EXCEEDED = new UTPopupDTO(
    'popup.error.DID.LoginExceededHeader',
    'popup.error.DID.LoginExceededBody',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.DEVICE_SUSPENDED = new UTPopupDTO(
    'popup.error.DeviceSuspendedHeader',
    'popup.error.DeviceSuspendedBody',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.GEOIP_BLACKLISTED = new UTPopupDTO(
    'popup.error.geoipblacklist.title',
    'popup.error.geoipblacklist',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.NO_INTERNET_CONNECTION = new UTPopupDTO(
    'popup.error.NoInternetConnectionTitle',
    'popup.error.NoInternetConnection',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.LOW_MEMORY = new UTPopupDTO(
    'popup.warningLowMemoryTitle',
    'popup.warningLowMemory',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.SERVER_DOWN = new UTPopupDTO(
    'popup.error.serverdownTitle',
    'popup.error.serverdown',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.DUPLICATE_ITEM = new UTPopupDTO(
    'popup.error.item.DuplicatedItemTypeTitle',
    'popup.error.squadManagement.DuplicateItem',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.SERVICE_IS_DISABLED = new UTPopupDTO(
    'popup.error.ServiceIsDisabledTitle',
    'popup.error.ServiceIsDisabled',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.ALL_NEED_TO_BE_CLAIMED = new UTPopupDTO(
    'popup.error.autoassign.cannotAutoAssign',
    'popup.error.autoassign.allFreePack',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.HIT_MAX_LISTING = new UTPopupDTO(
    'popup.error.list.forbidden.title',
    'popup.error.list.forbidden.message',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.TRADING_DISABLED = new UTPopupDTO(
    'tile.disabled.transfersunavailable',
    'popup.error.auctioninfo.tradingdisabled',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.SBC_GRACE_PERIOD = new UTPopupDTO(
    'popup.sbcgraceperiod.title',
    'popup.sbcgraceperiod.message',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.SBC_INELIGIBLE_SQUAD = new UTPopupDTO(
    'popup.sbcineligiblesquad.title',
    'popup.sbcineligiblesquad.message',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.SBC_UNTRADEABLE_NOT_ALLOWED = new UTPopupDTO(
    'popup.sbcineligiblesquad.title',
    'popup.sbcUntradeableNotAllowed.message',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.SQUAD_BUILDER_NO_RESULTS = new UTPopupDTO(
    'popup.title.noSquadBuilderResults',
    'popup.error.squad.builder.noresults',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.ONBOARDING_INTRO = new UTPopupDTO(
    'onboarding.popup.loanswap.title',
    'onboarding.popup.loanswap.body',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Alerts.SAVE_TACTICS = new UTPopupDTO(
    'tactics.popup.savetutorial.title',
    'tactics.popup.savetutorial.body',
    [enums.UIDialogOptions.OK]
  )),
  (utils.PopupManager.Confirmations = {}),
  (utils.PopupManager.Confirmations.CONFIRM_COPY_SQUAD = new UTPopupDTO(
    'manage.copy.message.title',
    'manage.copy.message',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.CONFIRM_RELIST_ALL = new UTPopupDTO(
    'popup.tradepile.relistAllTitle',
    'popup.tradepile.relistAllPriceBandingText',
    [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.YES]
  )),
  (utils.PopupManager.Confirmations.BID_WHEN_HIGHEST_BIDDER = new UTPopupDTO(
    'popup.confirmHighestBidderTitle',
    'popup.confirmHighestBidder',
    [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.YES]
  )),
  (utils.PopupManager.Confirmations.CONFIRM_BID = new UTPopupDTO(
    'popup.bidConfirmationTitle',
    'popup.bidConfirmationText',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.CONFIRM_BUY_NOW = new UTPopupDTO(
    'popup.buyNowConfirmationTitle',
    'popup.buyNowConfirmationText',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.UNASSIGNED_ENTITLEMENT = new UTPopupDTO(
    'popup.error.unassignedItemsEntitlementTitle',
    'popup.error.fifacredits.unassignedItemsEntitlement',
    [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.TAKE_ME]
  )),
  (utils.PopupManager.Confirmations.NEW_ITEMS_FULL = new UTPopupDTO(
    'popup.newItemsFullTitle',
    'popup.newItemsFullText',
    [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.TAKE_ME]
  )),
  (utils.PopupManager.Confirmations.CONFIRM_DISCARD = new UTPopupDTO(
    'infopanel.label.discard',
    'popup.confirmItemDiscard',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.CONFIRM_DISCARD_ALL = new UTPopupDTO(
    'infopanel.label.discardall',
    'popup.confirmDiscardAll',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.DELETE_SQUAD = new UTPopupDTO(
    'popup.deletesquad.title',
    'popup.deletesquad.message',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.UPDATE_FUT = new UTPopupDTO(
    'popup.updateFUTTitle',
    'popup.update.FUTText',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.ENABLE_USAGE_SHARING = new UTPopupDTO(
    'more.usagesharing.title',
    'more.usagesharing.enablebody',
    [enums.UIDialogOptions.NO, enums.UIDialogOptions.YES]
  )),
  (utils.PopupManager.Confirmations.DISABLE_USAGE_SHARING = new UTPopupDTO(
    'more.usagesharing.title',
    'more.usagesharing.disablebody',
    [enums.UIDialogOptions.NO, enums.UIDialogOptions.YES]
  )),
  (utils.PopupManager.Confirmations.BUY_PACK = new UTPopupDTO(
    'store.confirmation.questionTitle',
    'popup.confirmPurchase',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.BUY_PACK_FIFAPOINTS = new UTPopupDTO(
    'store.confirmation.questionTitle',
    'popup.confirmPointsPurchase',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.SEND_ALL_TO_TRANSFER_LIST = new UTPopupDTO(
    'popup.confirmation.sendAllToTransferListTitle',
    'popup.confirmation.sendAllToTransferList',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.SEND_TO_CLUB = new UTPopupDTO(
    'infopanel.label.club',
    'popup.confirmSendToClub',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.SEND_TO_TRANSFER_LIST = new UTPopupDTO(
    'infopanel.label.sendTradePile',
    'popup.confirmSendToTransferList',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.APPLY_CONSUMABLE = new UTPopupDTO(
    'panel.applyitem.button',
    'popup.confirmApplyConsumable',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.SUBMIT_CHALLENGE = new UTPopupDTO(
    'sbc.overlay.btn.submitChallenge',
    'sbc.popup.submitChallenge.message',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.SIGN_OUT = new UTPopupDTO(
    'more.signout.title',
    'more.signout.body',
    utils.PopupManager.SIGN_OUT
  )),
  (utils.PopupManager.Confirmations.CHANGE_PERSONA = new UTPopupDTO(
    'personaselector.title',
    'personaselector.message',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.CLEAR_SQUAD = new UTPopupDTO(
    'clearSquad.title',
    'clearSquad.message',
    utils.PopupManager.CONFIRM_DENY
  )),
  (utils.PopupManager.Confirmations.WEEKEND_LEAGUE_ACCESS = new UTPopupDTO(
    'rivals.weekendleague.popup.title',
    'rivals.weekendleague.popup.body',
    [enums.UIDialogOptions.NO, enums.UIDialogOptions.YES]
  )),
  (utils.PopupManager.Confirmations.WEEKEND_LEAGUE_ACCESS_GRACE_PERIOD = new UTPopupDTO(
    'rivals.weekendleague.popup.title',
    'rivals.weekendleague.popup.bodyGracePeriod',
    [enums.UIDialogOptions.NO, enums.UIDialogOptions.YES]
  )),
  utils.JS.inherits(UTViewModel, UTObject),
  (UTViewModel.prototype.dealloc = function dealloc() {
    this.superclass(), this.stopTrackingRequests();
  }),
  (UTViewModel.prototype.stopTrackingRequests = function stopTrackingRequests() {
    0 < this._requests.length &&
      (this._requests.forEach(function(e) {
        e.clearObservers();
      }, this),
      (this._requests = [])),
      0 < this._blockingRequests.length &&
        (this._blockingRequests.forEach(function(e) {
          e.clearObservers(),
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }, this),
        (this._blockingRequests = []));
  }),
  (UTViewModel.prototype._trackRequest = function _trackRequest(e, s, n) {
    var o = s ? this._blockingRequests : this._requests;
    s && gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      o.push(
        e.observe(this, function _onRequestComplete(e, t) {
          e.unobserve(this),
            s && gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
          var i = o.indexOf(e);
          0 <= i && o.splice(i, 1), utils.JS.isFunction(n) && n(t);
        })
      );
  }),
  utils.JS.inherits(UTCaptchaViewModel, UTViewModel),
  (UTCaptchaViewModel.prototype.dealloc = function dealloc() {
    this.superclass(), (this._captchaDataObject = null);
  }),
  (UTCaptchaViewModel.prototype.requestHealthCheck = function requestHealthCheck() {
    var e = this._captchaDataObject.checkHealth();
    return this._trackRequest(e, !0), e;
  }),
  (UTCaptchaViewModel.prototype.requestCaptchaData = function requestCaptchaData() {
    var e = this._captchaDataObject.getCaptchaData();
    return this._trackRequest(e, !0), e;
  }),
  (UTCaptchaViewModel.prototype.validateToken = function validateToken(e) {
    var t = this._captchaDataObject.validateToken(e);
    return this._trackRequest(t, !0), t;
  }),
  (UTCaptchaViewModel.prototype.requestLegacyImage = function requestLegacyImage() {
    var e = this._captchaDataObject.getLegacyImage();
    return this._trackRequest(e, !0), e;
  }),
  (UTCaptchaViewModel.prototype.exchangeLegacyImage = function exchangeLegacyImage() {
    var e = this._captchaDataObject.exchangeLegacyImage();
    return this._trackRequest(e, !0), e;
  }),
  (UTCaptchaViewModel.prototype.validateLegacyAnswer = function validateLegacyAnswer(
    e
  ) {
    var t = this._captchaDataObject.validateLegacyAnswer(e);
    return this._trackRequest(t, !0), t;
  }),
  NamespaceManager.Register('models'),
  (models.StaffStatsModel = function() {
    (this._isDirty = !0),
      (this._playerAttribBoosts = [0, 0, 0, 0, 0, 0]),
      (this._gkAttribBoosts = [0, 0, 0, 0, 0, 0]),
      (this._healthAttribBoosts = [0, 0, 0, 0, 0, 0, 0, 0, 0]),
      (this._contractBoost = 0);
  }),
  (models.StaffStatsModel.prototype.reset = function reset() {
    (this._isDirty = !0),
      (this._playerAttribBoosts = [0, 0, 0, 0, 0, 0]),
      (this._gkAttribBoosts = [0, 0, 0, 0, 0, 0]),
      (this._healthAttribBoosts = [0, 0, 0, 0, 0, 0, 0, 0, 0]),
      (this._contractBoost = 0);
  }),
  (models.StaffStatsModel.prototype.isDirty = function isDirty() {
    return this._isDirty;
  }),
  (models.StaffStatsModel.prototype.setDirtyFlag = function setDirtyFlag(e) {
    this._isDirty = e;
  }),
  (models.StaffStatsModel.prototype.getPlayerAttribBoost = function getPlayerAttribBoost(
    e
  ) {
    return 0 <= e && e < this._playerAttribBoosts.length
      ? this._playerAttribBoosts[e]
      : 0;
  }),
  (models.StaffStatsModel.prototype.getGKAttribBoost = function getGKAttribBoost(
    e
  ) {
    return 0 <= e && e < this._gkAttribBoosts.length
      ? this._gkAttribBoosts[e]
      : 0;
  }),
  (models.StaffStatsModel.prototype.getHealthAttribBoost = function getHealthAttribBoost(
    e
  ) {
    return 0 <= e && e < this._healthAttribBoosts.length
      ? this._healthAttribBoosts[e]
      : 0;
  }),
  (models.StaffStatsModel.prototype.getPlayerAttribBoosts = function getPlayerAttribBoosts() {
    return this._playerAttribBoosts;
  }),
  (models.StaffStatsModel.prototype.setPlayerAttribBoosts = function setPlayerAttribBoosts(
    e
  ) {
    this._playerAttribBoosts = e;
  }),
  (models.StaffStatsModel.prototype.getGKAttribBoosts = function getGKAttribBoosts() {
    return this._gkAttribBoosts;
  }),
  (models.StaffStatsModel.prototype.setGKAttribBoosts = function setGKAttribBoosts(
    e
  ) {
    this._gkAttribBoosts = e;
  }),
  (models.StaffStatsModel.prototype.getHealthAttribBoosts = function getHealthAttribBoosts() {
    return this._healthAttribBoosts;
  }),
  (models.StaffStatsModel.prototype.setHealthAttribBoosts = function setHealthAttribBoosts(
    e
  ) {
    this._healthAttribBoosts = e;
  }),
  (models.StaffStatsModel.prototype.setContractBoost = function setContractBoost(
    e
  ) {
    this._contractBoost = e;
  }),
  (models.StaffStatsModel.prototype.getContractBoost = function getContractBoost() {
    return this._contractBoost;
  });
var gStaffStatsModel = new models.StaffStatsModel();

function UTNimbleMTXItemEntity(e) {
  (this.sku = e.toString()),
    Object.defineProperty(this, 'sku', {
      writable: !1,
      enumberable: !0
    }),
    (this.points = 0),
    (this.title = ''),
    (this.priceFormatted = '');
}

function UTNimbleMTXItemFactory() {
  UTObject.call(this);
}

function UTSquadSlotEntity(e, t) {
  UTObject.call(this),
    (this.onDataUpdated = new UTObservable()),
    Object.defineProperty(this, 'onDataUpdated', {
      writable: !1,
      enumerable: !0
    }),
    (this._index = e),
    (this._kitNumber = 0),
    (this._chemistry = 0),
    (this._item = factories.Item.createItem()),
    (this._position = t || null),
    (this._requirement = null),
    (this._managerBonus = 0);
}

function UTNullSquadSlotEntity() {
  UTSquadSlotEntity.call(this, -1, null);
}

function UTPlayerInstructionsVO(e) {
  UTObject.call(this),
    (this._positionId = e),
    Object.defineProperty(this, '_positionId', {
      enumerable: !1,
      writable: !1
    }),
    (this._instructions = []),
    Object.defineProperty(this, '_instructions', {
      enumerable: !1,
      writable: !0
    });
}

function UTPlayerInstructionGroupEntity(e) {
  UTObject.call(this),
    (this._id = e),
    Object.defineProperty(this, '_id', {
      enumerable: !1,
      writable: !1
    }),
    (this._instructions = []),
    Object.defineProperty(this, '_instructions', {
      enumerable: !1,
      writable: !0
    }),
    (this._selectedInstruction =
      UTPlayerInstructionsVO.INSTRUCTION.NO_INSTRUCTION),
    Object.defineProperty(this, '_selectedInstruction', {
      enumerable: !1,
      writable: !0
    });
}

function UTSquadMentalityEntity(e, t) {
  UTObject.call(this),
    (this.onDataUpdated = new UTObservable()),
    Object.defineProperty(this, 'onDataUpdated', {
      enumerable: !0,
      writable: !1
    }),
    (this._id = e),
    Object.defineProperty(this, '_id', {
      enumerable: !1,
      writable: !1
    }),
    (this._offensiveStyle = UTSquadMentalityEntity.OFFENSIVE_STYLE.BALANCED),
    Object.defineProperty(this, '_offensiveStyle', {
      enumerable: !1,
      writable: !0
    }),
    (this._offensiveWidth = 5),
    Object.defineProperty(this, '_offensiveWidth', {
      enumerable: !1,
      writable: !0
    }),
    (this._offensivePlayersInBox = 5),
    Object.defineProperty(this, '_offensivePlayersInBox', {
      enumerable: !1,
      writable: !0
    }),
    (this._defensiveStyle = UTSquadMentalityEntity.DEFENSIVE_STYLE.BALANCED),
    Object.defineProperty(this, '_defensiveStyle', {
      enumerable: !1,
      writable: !0
    }),
    (this._defensiveWidth = 5),
    Object.defineProperty(this, '_defensiveWidth', {
      enumerable: !1,
      writable: !0
    }),
    (this._defensiveDepth = 5),
    Object.defineProperty(this, '_defensiveDepth', {
      enumerable: !1,
      writable: !0
    }),
    (this._cornerPlayersInBox = 3),
    Object.defineProperty(this, '_cornerPlayersInBox', {
      enumerable: !1,
      writable: !0
    }),
    (this._freeKickPlayersInBox = 3),
    Object.defineProperty(this, '_freeKickPlayersInBox', {
      enumerable: !1,
      writable: !0
    }),
    (this._formation = null),
    Object.defineProperty(this, '_formation', {
      enumerable: !1,
      writable: !0
    }),
    (this._squadId = 0),
    Object.defineProperty(this, '_squadId', {
      enumerable: !1,
      writable: !0
    }),
    (this._instructions = new UTHashTable()),
    Object.defineProperty(this, '_instructions', {
      enumerable: !1,
      writable: !1
    }),
    (this._positions = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),
    Object.defineProperty(this, '_positions', {
      enumerable: !1,
      writable: !0
    }),
    (this._modified = !1),
    Object.defineProperty(this, '_modified', {
      enumerable: !1,
      writable: !0
    }),
    (this._customized = !1),
    Object.defineProperty(this, '_customized', {
      enumerable: !1,
      writable: !0
    }),
    (this._squadDAO = t),
    Object.defineProperty(this, '_squadDAO', {
      enumerable: !1,
      writable: !1
    });
}

function UTSquadMentalityEntityFactory(e) {
  UTObject.call(this),
    (this._squadDAO = e),
    Object.defineProperty(this, '_squadDAO', {
      enumerable: !1,
      writable: !1
    });
}

function UTSquadEntityFactory(e) {
  UTObject.call(this),
    (this._mentalityFactory = new UTSquadMentalityEntityFactory(e)),
    Object.defineProperty(this, '_mentalityFactory', {
      enumerable: !1,
      writable: !1
    }),
    (this._squadDAO = e),
    Object.defineProperty(this, '_squadDAO', {
      enumerable: !1,
      writable: !1
    });
}

function _parseSquadPayload(t, e) {
  (t._owner = e.personaId),
    (t._id = e.id),
    (t._valid = e.valid),
    (t._captain = e.captain),
    (t._formation = repositories.Squad.getFormation(e.formation)),
    (t._chemistry = e.chemistry),
    (t._rating = e.rating),
    (t._name = e.squadName),
    utils.JS.isEmpty(e.squadType) || (t._type = e.squadType);
  for (var i = 0; i <= entities.Squad.MANAGER_SLOT_INDEX; ) {
    var s = new UTSquadSlotEntity(i, t._formation.getPosition(i)),
      n = 0,
      o = null;
    if (i === entities.Squad.MANAGER_SLOT_INDEX && e.manager)
      o = factories.Item.createItem(e.manager);
    else if (e.players[i]) {
      var a = e.players[i];
      (o = factories.Item.createItem(a.itemData)), (n = a.kitNumber || 0);
    } else o = factories.Item.createItem();
    s.setItem(o),
      s.setKitNumber(n),
      s.onDataUpdated.observe(t, t._eSlotDataUpdated),
      i === entities.Squad.MANAGER_SLOT_INDEX
        ? ((o.type = enums.ItemType.MANAGER), (t._manager = s))
        : ((o.type = enums.ItemType.PLAYER), t._players.push(s)),
      i++;
  }
  for (var r in (t._updateChemistryLinks(),
  t._players.forEach(t._calculateSlotChemistry, t),
  e.tactics &&
    e.tactics.forEach(function(e) {
      t.setTacticMentality(this._mentalityFactory.createMentality(e, t));
    }, this),
  UTSquadMentalityEntity.TYPE)) {
    var l = UTSquadMentalityEntity.TYPE[r];
    t.getTacticMentalityById(l) ||
      t.setTacticMentality(this._mentalityFactory.createDefaultMentality(l, t));
  }
}

function _parseSBCSquadPayload(e, t, i, s) {
  (e._id = t.id),
    (e._formation = repositories.Squad.getFormation(t.formation)),
    (e._chemistry = t.chemistry),
    (e._rating = t.rating);
  for (
    var n = utils.JS.isValid(s), o = 0;
    o < entities.Squad.MANAGER_SLOT_INDEX;

  ) {
    var a = new UTSquadSlotEntity(o, e._formation.getPosition(o)),
      r = o < entities.Squad.FIELD_PLAYERS,
      l = !1,
      c = null;
    if (n && r) {
      var u = s[o];
      u.playerType === enums.SBC.PLAYER_TYPE.BRICK
        ? e.simpleBrickIndices.push(u.index)
        : u.playerType === enums.SBC.PLAYER_TYPE.CUSTOM_BRICK &&
          (e.customBrickIndices.push(u.index), (l = !0)),
        a.setRequirement(
          new transferobjects.SBCPlayerRequirement(
            u,
            l ? i.createRequirements(u.elgReq) : []
          )
        );
    }
    ((c =
      l && t.players[o]
        ? factories.Item.createCustomBrickItem(t.players[o].itemData)
        : t.players[o]
        ? factories.Item.createItem(t.players[o].itemData)
        : factories.Item.createItem()).type = enums.ItemType.PLAYER),
      a.setItem(c),
      a.onDataUpdated.observe(e, e._eSlotDataUpdated),
      e._players.push(a),
      c.concept &&
        r &&
        e._type === enums.SquadType.REGULAR &&
        (e._type = enums.SquadType.DREAM),
      o++;
  }
  e._updateChemistryLinks(), e._players.forEach(e._calculateSlotChemistry, e);
}

function UTItemRepository() {
  UTHashTable.call(this, {}),
    (this._expiryTimestamp = 0),
    Object.defineProperty(this, 'endOfList', {
      writable: !0,
      enumerable: !1
    }),
    (this.endOfList = !1),
    (this.count = -1);
}

function UTClubRepository() {
  UTObject.call(this),
    (this._players = new UTItemRepository()),
    (this._staff = new UTItemRepository()),
    (this._consumables = new UTItemRepository()),
    (this._badges = new UTItemRepository()),
    (this._balls = new UTItemRepository()),
    (this._kits = new UTItemRepository()),
    (this._stadiums = new UTItemRepository()),
    (this._banners = new UTItemRepository()),
    (this._celebrations = new UTItemRepository()),
    (this._tifos = new UTItemRepository()),
    (this._activeItems = new UTHashTable()),
    (this._cacheTimestamp = 0),
    Object.defineProperty(this, '_cacheTimestamp', {
      writable: !0,
      enumerable: !1
    });
}

function LeagueRepository(e) {
  (this._leagues = new UTHashTable()),
    Object.defineProperty(this, '_leagues', {
      writable: !1,
      enumerable: !1
    }),
    utils.JS.isValid(e) && this.add(e);
}

function NationRepository(e) {
  (this._nations = new UTHashTable()),
    Object.defineProperty(this, '_nations', {
      writable: !1,
      enumerable: !1
    }),
    utils.JS.isValid(e) && this.add(e);
}

function TeamRepository(e) {
  (this._teams = new UTHashTable()),
    Object.defineProperty(this, '_teams', {
      writable: !1,
      enumerable: !1
    }),
    utils.JS.isValid(e) && this.add(e);
}

function UTNavigationButtonControl() {
  UTButtonControl.call(this);
}

function UTToolbarButtonControl() {
  UTButtonControl.call(this), (this._unreadBubble = null);
}

function UTNavigationController(e, t) {
  UTViewController.call(this),
    (this._navigationBar = e || new views.NavigationBar()),
    (this._toolbar = t || new views.Toolbar()),
    (this._backButton = new UTNavigationButtonControl()),
    (this._rootController = null),
    (this._currentController = null),
    (this._currentView = null),
    (this.isNavVisible = !1),
    (this.isToolbarVisible = !1),
    (this._isTransitioning = !1);
}

function UTKeyboardEventController() {
  UTObject.call(this),
    (this._eventDelegates = new UTHashTable()),
    (this._keyupHandler = this._eHandleKeyUpEvent.bind(this));
}

function UTRootPresentationController() {
  UTPresentationController.call(this);
}

function UTTabBarItemNotificationView() {
  UTView.call(this);
}

function UTTabBarItemView() {
  UTButtonControl.call(this),
    (this._tag = -1),
    Object.defineProperty(this, '_tag', {
      writable: !0,
      enumerable: !1
    }),
    (this._notifBubble = null),
    Object.defineProperty(this, '_notifBubble', {
      writable: !0,
      enumerable: !1
    });
}

function UTTabBarView() {
  UTTargetActionView.call(this),
    (this._tabItems = []),
    Object.defineProperty(this, '_tabItems', {
      writable: !0,
      enumerable: !1
    }),
    this._generate();
}

function UTTabBarController() {
  UTViewController.call(this),
    (this._currentController = null),
    (this._currentView = null);
}

function UTGameTabBarController() {
  UTTabBarController.call(this);
}

function UTPersonaSelectorView() {
  UTTargetActionView.call(this), (this._personaRows = []);
}

function UTPersonaSelectorViewController() {
  UTViewController.call(this);
}

function UTFlatButtonControl() {
  UTButtonControl.call(this);
}

function UTStandardButtonControl() {
  UTButtonControl.call(this);
}

function UTTextInputControl() {
  UTControl.call(this),
    (this._selectionTimeout = 0),
    Object.defineProperty(this, '_selectionTimeout', {
      writable: !0,
      enumerable: !1
    }),
    (this._blurTimeout = 0),
    Object.defineProperty(this, '_blurTimeout', {
      writable: !0,
      enumerable: !1
    });
}

function UTCaptchaViewController() {
  UTViewController.call(this),
    (this._timeoutId = 0),
    (this._cooldownTimer = new utils.UTTimer()),
    (this._cooldownSeconds = 0),
    (this._captchaAttempt = !1),
    (this._personaController = null),
    (this._captchaViewModel = null),
    Object.defineProperty(this, '_captchaViewModel', {
      writable: !0,
      enumerable: !1
    });
}

function UTFunCaptchaView() {
  UTView.call(this);
}

function UTFunCaptchaViewController() {
  UTViewController.call(this),
    (this._personaController = null),
    Object.defineProperty(this, '_personaController', {
      writable: !0,
      enumerable: !1
    }),
    (this._captchaLoaded = !1),
    Object.defineProperty(this, '_captchaLoaded', {
      writable: !0,
      enumerable: !1
    }),
    (this._captchaViewModel = null),
    Object.defineProperty(this, '_captchaViewModel', {
      writable: !0,
      enumerable: !1
    });
}

function UTGettingStartedViewController() {
  UTViewController.call(this),
    (this._type = enums.GettingStartedTypes.FIFA),
    Object.defineProperty(this, '_type', {
      writable: !0,
      enumerable: !1
    }),
    (this._personaController = null),
    Object.defineProperty(this, '_personaController', {
      writable: !0,
      enumerable: !1
    });
}

function UTLanguageTableCellView() {
  UTTargetActionView.call(this);
}

function UTLanguageSelectView() {
  UTTargetActionView.call(this), (this._cells = []);
}

function UTLanguageSelectViewController() {
  UTViewController.call(this),
    (this._callback = null),
    Object.defineProperty(this, '_callback', {
      writable: !0,
      enumerable: !1
    }),
    (this._locales = []),
    Object.defineProperty(this, '_locales', {
      writable: !0,
      enumerable: !1
    });
}

function UTLicenseViewController() {
  UTViewController.call(this),
    (this._completedFlags = 0),
    (this._hasLowMemory = !1),
    (this._setTimerFlagTimeout = 0);
}

function UTLoginViewController() {
  UTViewController.call(this),
    (this._inAppBrowser = null),
    (this._successCallbackDelegate = null),
    (this._errorCallbackDelegate = null),
    (this._linkCallbackDelegate = null),
    (this._browserDismissedCallbackDelegate = null),
    (this._recreateOnResume = !1);
}

function UTLoggedOnConsoleViewController() {
  UTViewController.call(this), (this._personaController = null);
}

function UTDropDownControl() {
  UTControl.call(this),
    (this.__picker = null),
    (this.__list = null),
    Object.defineProperty(this, 'enabled', {
      get: this.getEnabled,
      set: this.setEnabled,
      enumerable: !0
    }),
    (this.enabled = !0),
    (this._options = []),
    Object.defineProperty(this, '_options', {
      writable: !0,
      enumerable: !1
    }),
    (this._shieldShowing = !1),
    Object.defineProperty(this, '_shieldShowing', {
      writable: !0,
      enumerable: !1
    }),
    (this._defaultIndex = 0),
    Object.defineProperty(this, '_defaultIndex', {
      writable: !0,
      enumerable: !1
    }),
    (this.label = ''),
    Object.defineProperty(this, 'label', {
      get: this.getLabel,
      enumerable: !0
    }),
    (this.id = 0),
    Object.defineProperty(this, 'id', {
      get: this.getId,
      enumerable: !0
    }),
    (this.value = ''),
    Object.defineProperty(this, 'value', {
      get: this.getValue,
      enumerable: !0
    }),
    (this.length = 0),
    Object.defineProperty(this, 'length', {
      get: function() {
        return this._options.length;
      },
      enumerable: !0
    }),
    (this._windowListener = null),
    (this._isOpen = !1),
    (this._searchString = ''),
    Object.defineProperty(this, '_searchString', {
      writable: !0,
      enumerable: !1
    }),
    (this._searchTimeout = 0),
    Object.defineProperty(this, '_searchTimeout', {
      writable: !0,
      enumerable: !1
    });
}

function UTSearchFilterControl() {
  UTDropDownControl.call(this),
    (this.setId = ''),
    (this.image = ''),
    Object.defineProperty(this, 'image', {
      get: this.getImage,
      set: this.setImage,
      enumerable: !0
    }),
    (this._defaultLabel = ''),
    (this._hasDefault = !1),
    (this._iconTable = null);
}

function UTImageButtonControl() {
  UTButtonControl.call(this);
}

function UTItemInfoStateViewModel(e) {
  UTObject.call(this),
    (this._configDelegate = e || null),
    Object.defineProperty(this, '_configDelegate', {
      writable: !1,
      enumerable: !1
    }),
    (this._state =
      (this._configDelegate &&
        parseInt(this._configDelegate.getSessionItem('UTItemInfoState'), 10)) ||
      enums.UIItemInfoState.MAIN),
    Object.defineProperty(this, '_state', {
      writable: !0,
      enumerable: !1
    });
}

function UTItemCanvasDTO(e, t, i, s, n, o) {
  UTObject.call(this),
    (this.element = e || null),
    (this.dynamic = t || !1),
    (this.width = i || 0),
    (this.height = s || 0),
    (this.xPos = n || 0),
    (this.yPos = o || 0);
}

function UTItemStatChevronsView() {
  UTView.call(this), this._generate();
}

function UTItemCanvasView() {
  UTView.call(this),
    (this._ctx = null),
    Object.defineProperty(this, '_ctx', {
      writable: !0,
      enumerable: !1
    }),
    (this._colormap = null),
    Object.defineProperty(this, '_ctx', {
      writable: !0,
      enumerable: !1
    }),
    (this.assets = {}),
    (this.size = enums.ItemViewType.LARGE),
    (this.rendered = !1);
}

function UTItemPlayerCanvasView() {
  UTItemCanvasView.call(this),
    (this.renderSpecial = !1),
    (this.renderConcept = !1);
}

function UTItemPlayerLargeView() {
  components.ItemPlayerBase.call(this), this._generate();
}

function UTItemPlayerSmallView() {
  components.ItemPlayerBase.call(this), this._generate();
}

function UTItemManagerCanvasView() {
  UTItemCanvasView.call(this);
}

function UTImageView() {
  UTView.call(this),
    (this.src = ''),
    (this.path = ''),
    (this._useCache = !0),
    Object.defineProperty(this, '_useCache', {
      writable: !0,
      enumerable: !1
    }),
    (this._imageLoadEvent = new UTObservable());
}
NamespaceManager.Register('utils'),
  (utils.ImagePreloader = function ImagePreloader() {
    UTObject.call(this), (this._preloadedImages = new UTHashTable());
  }),
  utils.JS.inherits(utils.ImagePreloader, UTObject),
  (utils.ImagePreloader.prototype.dealloc = function dealloc() {
    this._preloadedImages.clear(), (this._preloadedImages = null);
  }),
  (utils.ImagePreloader.prototype.preloadImages = function preloadImages(e) {
    e = utils.JS.valToArray(e);
    var t = null,
      i = new UTObservable(),
      s = e.length;

    function imgLoaded(e) {
      --s <= 0 && i.notify(),
        e.target.removeEventListener('load', imgLoaded, !1);
    }
    return (
      e.forEach(function(e) {
        this._preloadedImages.has(e)
          ? s--
          : ((t = new Image()).addEventListener('load', imgLoaded, !1),
            (t.src = e),
            this._preloadedImages.set(e, t));
      }, this),
      i
    );
  }),
  NamespaceManager.Register('utils'),
  (utils.UTTimer = function UTTimer(e, t, i) {
    UTObject.call(this),
      (this._workFunc = utils.JS.isFunction(t) ? t : null),
      (this._interval = utils.JS.isNumber(e) && 0 < e ? e : 1e3),
      (this._errorFunc = utils.JS.isFunction(i) ? i : null),
      (this._expected = 0),
      (this._timeout = 0);
  }),
  utils.JS.inherits(utils.UTTimer, UTObject),
  (utils.UTTimer.prototype.dealloc = function dealloc() {
    this.reset(), this.superclass();
  }),
  (utils.UTTimer.prototype.reset = function reset() {
    this.stop(),
      (this._workFunc = null),
      (this._errorFunc = null),
      (this._interval = 0),
      (this._expected = 0);
  }),
  (utils.UTTimer.prototype.setInterval = function setInterval(e) {
    utils.Debug.Assert(
      utils.JS.isNumber(e) && 0 < e,
      'Expected a number greater than 0.'
    ),
      (this._interval = e);
  }),
  (utils.UTTimer.prototype.setWorkFunc = function setWorkFunc(e) {
    utils.Debug.Assert(utils.JS.isFunction(e), 'Expected a function.'),
      (this._workFunc = utils.JS.isFunction(e) ? e : null);
  }),
  (utils.UTTimer.prototype.setErrorFunc = function setErrorFunc(e) {
    utils.Debug.Assert(utils.JS.isFunction(e), 'Expected a function.'),
      (this._errorFunc = utils.JS.isFunction(e) ? e : null);
  }),
  (utils.UTTimer.prototype.start = function start() {
    this.stop(),
      (this._expected = Date.now() + this._interval),
      (this._timeout = setTimeout(this._step.bind(this), this._interval));
  }),
  (utils.UTTimer.prototype.stop = function stop() {
    clearTimeout(this._timeout), (this._timeout = 0);
  }),
  (utils.UTTimer.prototype._step = function _step() {
    var e = Date.now() - this._expected;
    e > this._interval && this._errorFunc && this._errorFunc.call(),
      (this._expected += this._interval),
      (this._timeout = setTimeout(
        this._step.bind(this),
        Math.max(0, this._interval - e)
      )),
      this._workFunc && this._workFunc.call();
  }),
  NamespaceManager.Register('utils'),
  (utils.AD = new (function ADUtil() {})()),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.DataProviderEntry = function UTDataProviderEntryDTO(
    e,
    t,
    i
  ) {
    (this.id = e),
      Object.defineProperty(this, 'id', {
        writable: !1,
        enumerable: !0
      }),
      (this.value = t),
      Object.defineProperty(this, 'value', {
        writable: !1,
        enumerable: !0
      }),
      (this.label = i),
      Object.defineProperty(this, 'label', {
        writable: !1,
        enumerable: !0
      });
  }),
  NamespaceManager.Register('factories'),
  (factories.DataProvider = (function() {
    function DataProviderFactory() {}
    return (
      (DataProviderFactory.prototype.getSearchPileDP = function getSearchPileDP() {
        return [
          new transferobjects.DataProviderEntry(
            0,
            enums.ItemSearchFeature.CLUB,
            services.Localization.localize('search.searchmode.club')
          ),
          new transferobjects.DataProviderEntry(
            1,
            enums.ItemSearchFeature.CONCEPT,
            services.Localization.localize('search.searchmode.database')
          )
        ];
      }),
      (DataProviderFactory.prototype.getClubTypeDP = function getClubTypeDP() {
        return [
          new transferobjects.DataProviderEntry(
            0,
            enums.SearchCategory.KIT,
            services.Localization.localize('clubtype.kit')
          ),
          new transferobjects.DataProviderEntry(
            1,
            enums.SearchCategory.STADIUM,
            services.Localization.localize('search.filters.stadiums')
          ),
          new transferobjects.DataProviderEntry(
            2,
            enums.SearchCategory.BALL,
            services.Localization.localize('search.filters.balls')
          ),
          new transferobjects.DataProviderEntry(
            3,
            enums.SearchCategory.BADGE,
            services.Localization.localize('clubtype.badge')
          )
        ];
      }),
      (DataProviderFactory.prototype.getTeamDP = function getTeamDP(i) {
        var e = repositories.TeamConfig.getTeamsByYear(enums.Year.ASSET),
          t = [];

        function _generateDataRow(e) {
          return new transferobjects.DataProviderEntry(
            e.id,
            e.id.toString(),
            e.name
          );
        }
        return (
          (t =
            utils.JS.isNumber(i) && 0 <= i
              ? e.reduce(function(e, t) {
                  return i === t.league && e.push(_generateDataRow(t)), e;
                }, [])
              : e.map(_generateDataRow)).unshift(
            new transferobjects.DataProviderEntry(
              -1,
              '-1',
              services.Localization.localize('roles.defaultRole')
            )
          ),
          t
        );
      }),
      (DataProviderFactory.prototype.getCustomTeamDP = function getCustomTeamDP(
        e
      ) {
        e = !!e;
        var t = [];
        return (
          (t = repositories.TeamConfig.getCustomTeamsByYear(
            enums.Year.ASSET
          ).map(function(e) {
            return new transferobjects.DataProviderEntry(
              e.id,
              e.id.toString(),
              e.name
            );
          })),
          e &&
            t.unshift(
              new transferobjects.DataProviderEntry(
                -1,
                '-1',
                services.Localization.localize('roles.defaultRole')
              )
            ),
          t
        );
      }),
      (DataProviderFactory.prototype.getLeagueDP = function getLeagueDP(e) {
        var t,
          i = repositories.TeamConfig.getLeaguesByYear(enums.Year.ASSET),
          s = [],
          n = [],
          o = [],
          a = [],
          r = [
            'ENG 1',
            'ENG 2',
            'ENG 3',
            'ENG 4',
            'FRA 1',
            'FRA 2',
            'ITA 1',
            'ITA 2',
            'GER 1',
            'GER 2',
            'GER 3',
            'ESP 1',
            'ESP 2'
          ],
          l = {};
        for (t = 0; t < r.length; t++) l[r[t]] = t;
        var c,
          u = ['AUT 1', 'CZE 1'],
          d = {};
        for (c = 0; c < u.length; c++) d[u[c]] = c;
        return (
          i.forEach(function(e) {
            0 <= r.indexOf(e.abbreviation)
              ? n.push(e)
              : 0 <= u.indexOf(e.abbreviation)
              ? o.push(e)
              : a.push(e);
          }),
          n.sort(function(e, t) {
            return l[e.abbreviation] - l[t.abbreviation];
          }),
          o.sort(function(e, t) {
            return d[e.abbreviation] - d[t.abbreviation];
          }),
          (i = n.concat(a).concat(o)),
          (s = e
            ? i.reduce(function(e, t) {
                return (
                  t.id !== REWARDS_LEAGUE_ID &&
                    e.push(
                      new transferobjects.DataProviderEntry(
                        t.id,
                        t.id.toString(),
                        t.name + ' (' + t.abbreviation + ')'
                      )
                    ),
                  e
                );
              }, [])
            : i.map(function(e) {
                return new transferobjects.DataProviderEntry(
                  e.id,
                  e.id.toString(),
                  e.name + ' (' + e.abbreviation + ')'
                );
              })).unshift(
            new transferobjects.DataProviderEntry(
              -1,
              '-1',
              services.Localization.localize('roles.defaultRole')
            )
          ),
          s
        );
      }),
      (DataProviderFactory.prototype.getNationDP = function getNationDP(e) {
        e || (e = enums.Year.ASSET);
        var t = TOP_NINE_NATIONS.map(function(e) {
            return new transferobjects.DataProviderEntry(
              e,
              e.toString(),
              utils.FUTLocalization.getNationNameById(e)
            );
          }),
          i = repositories.TeamConfig.getNationsByYear(e).map(function(e) {
            return new transferobjects.DataProviderEntry(
              e.id,
              e.id.toString(),
              e.name
            );
          });
        return [
          new transferobjects.DataProviderEntry(
            -1,
            -1,
            services.Localization.localize('roles.defaultRole')
          )
        ].concat(t, i);
      }),
      (DataProviderFactory.prototype.getPositionModifierDP = function getPositionModifierDP() {
        return [
          new transferobjects.DataProviderEntry(
            -1,
            'any',
            services.Localization.localize('roles.defaultRole')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_LWB_LB,
            'LWB-LB',
            services.Localization.localize('posmods.lwbtolb')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_LB_LWB,
            'LB-LWB',
            services.Localization.localize('posmods.lbtolwb')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_RWB_RB,
            'RWB-RB',
            services.Localization.localize('posmods.rwbtorb')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_RB_RWB,
            'RB-RWB',
            services.Localization.localize('posmods.rbtorwb')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_LM_LW,
            'LM-LW',
            services.Localization.localize('posmods.lmtolw')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_LW_LM,
            'LW-LM',
            services.Localization.localize('posmods.lwtolm')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_RM_RW,
            'RM-RW',
            services.Localization.localize('posmods.rmtorw')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_RW_RM,
            'RW-RM',
            services.Localization.localize('posmods.rwtorm')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_LW_LF,
            'LW-LF',
            services.Localization.localize('posmods.lwtolf')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_LF_LW,
            'LF-LW',
            services.Localization.localize('posmods.lftolw')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_RW_RF,
            'RW-RF',
            services.Localization.localize('posmods.rwtorf')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_RF_RW,
            'RF-RW',
            services.Localization.localize('posmods.rftorw')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_CM_CAM,
            'CM-CAM',
            services.Localization.localize('posmods.cmtocam')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_CAM_CM,
            'CAM-CM',
            services.Localization.localize('posmods.camtocm')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_CM_CDM,
            'CM-CDM',
            services.Localization.localize('posmods.cmtocdm')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_CDM_CM,
            'CDM-CM',
            services.Localization.localize('posmods.cdmtocm')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_CAM_CF,
            'CAM-CF',
            services.Localization.localize('posmods.camtocf')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_CF_CAM,
            'CF-CAM',
            services.Localization.localize('posmods.cftocam')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_CF_ST,
            'CF-ST',
            services.Localization.localize('posmods.cftost')
          ),
          new transferobjects.DataProviderEntry(
            enums.ItemSubType.TRAINING_PLAYER_POS_ST_CF,
            'ST-CF',
            services.Localization.localize('posmods.sttocf')
          )
        ];
      }),
      (DataProviderFactory.prototype.getPlayerPositionDP = function getPlayerPositionDP(
        t
      ) {
        var i = [];
        return (
          PLAYER_ZONE_LOOKUP.forEach(function(e) {
            ((t && 'any' !== e.value) || (!t && 'noGK' !== e.value)) &&
              i.push(
                new transferobjects.DataProviderEntry(
                  e.id,
                  e.value,
                  services.Localization.localize(e.label)
                )
              );
          }),
          SEARCHABLE_POSITIONS.forEach(function(e) {
            var t = repositories.Squad.getPosition(e);
            i.push(
              new transferobjects.DataProviderEntry(
                t.getId(),
                t.getTypeName(),
                utils.FUTLocalization.getLocalizedPositionStringById(
                  t.getTypeId()
                )
              )
            );
          }),
          i
        );
      }),
      (DataProviderFactory.prototype.getPlayStyleDP = function getPlayStyleDP(
        e
      ) {
        function _generatePlayStyleDPObject(e) {
          return new transferobjects.DataProviderEntry(
            e,
            e,
            utils.FUTLocalization.getPlaystyleByID(e)
          );
        }
        var t = [
          new transferobjects.DataProviderEntry(
            -1,
            -1,
            services.Localization.localize('roles.defaultRole')
          )
        ];
        return (
          (utils.JS.isBoolean(e) && e) ||
            (t = t.concat([
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_1
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_2
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_3
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_4
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_5
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_6
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_7
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_8
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_9
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_10
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_11
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_12
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_13
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_14
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_15
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_16
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_17
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_18
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_19
              )
            ])),
          (utils.JS.isBoolean(e) && !e) ||
            (t = t.concat([
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GOALKEEPER_1
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GOALKEEPER_2
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GOALKEEPER_3
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GOALKEEPER_4
              ),
              _generatePlayStyleDPObject(
                enums.ItemSubType.TRAINING_PLAYERSTYLE_GOALKEEPER_5
              )
            ])),
          t
        );
      }),
      (DataProviderFactory.prototype.getItemLevelDP = function getItemLevelDP(
        e
      ) {
        var t = [
          new transferobjects.DataProviderEntry(
            -1,
            enums.SearchLevel.ANY,
            services.Localization.localize('roles.defaultRole')
          ),
          new transferobjects.DataProviderEntry(
            0,
            enums.SearchLevel.BRONZE,
            services.Localization.localize('search.cardLevels.cardLevel1')
          ),
          new transferobjects.DataProviderEntry(
            1,
            enums.SearchLevel.SILVER,
            services.Localization.localize('search.cardLevels.cardLevel2')
          ),
          new transferobjects.DataProviderEntry(
            2,
            enums.SearchLevel.GOLD,
            services.Localization.localize('search.cardLevels.cardLevel3')
          )
        ];
        return (
          e &&
            t.push(
              new transferobjects.DataProviderEntry(
                3,
                enums.SearchLevel.SPECIAL,
                services.Localization.localize('search.cardLevels.cardLevel4')
              )
            ),
          t
        );
      }),
      (DataProviderFactory.prototype.getFormationDP = function getFormationDP() {
        return repositories.Squad.getFormations().map(function(e) {
          return new transferobjects.DataProviderEntry(
            e.getId(),
            e.getName(),
            e.getDisplayName()
          );
        });
      }),
      (DataProviderFactory.prototype.getStaffTypeDP = function getStaffTypeDP() {
        return [
          new transferobjects.DataProviderEntry(
            -1,
            enums.SearchCategory.ANY,
            services.Localization.localize('roles.defaultRole')
          ),
          new transferobjects.DataProviderEntry(
            0,
            enums.SearchCategory.MANAGER,
            services.Localization.localize('roles.manager')
          ),
          new transferobjects.DataProviderEntry(
            1,
            enums.SearchCategory.COACH_HEAD,
            services.Localization.localize('roles.headCoach')
          ),
          new transferobjects.DataProviderEntry(
            2,
            enums.SearchCategory.COACH_GK,
            services.Localization.localize('roles.GKCoach')
          ),
          new transferobjects.DataProviderEntry(
            3,
            enums.SearchCategory.COACH_FITNESS,
            services.Localization.localize('roles.fitnessCoach')
          ),
          new transferobjects.DataProviderEntry(
            4,
            enums.SearchCategory.PHYSIO,
            services.Localization.localize('roles.physio')
          )
        ];
      }),
      (DataProviderFactory.prototype.getConsumableTypeDP = function getConsumableTypeDP() {
        return [
          new transferobjects.DataProviderEntry(
            0,
            enums.SearchCategory.PLAYER_TRAINING,
            services.Localization.localize('trainingtype.playerTraining')
          ),
          new transferobjects.DataProviderEntry(
            1,
            enums.SearchCategory.GK_TRAINING,
            services.Localization.localize('trainingtype.GKTraining')
          ),
          new transferobjects.DataProviderEntry(
            2,
            enums.SearchCategory.POSITION,
            services.Localization.localize('trainingtype.position')
          ),
          new transferobjects.DataProviderEntry(
            3,
            enums.SearchCategory.PLAYSTYLE,
            services.Localization.localize('trainingtype.playStyle')
          ),
          new transferobjects.DataProviderEntry(
            4,
            enums.SearchCategory.MANAGER_LEAGUE,
            services.Localization.localize('trainingtype.managerLeague')
          ),
          new transferobjects.DataProviderEntry(
            5,
            enums.SearchCategory.CONTRACT,
            services.Localization.localize('devtype.contract')
          ),
          new transferobjects.DataProviderEntry(
            6,
            enums.SearchCategory.FITNESS,
            services.Localization.localize('devtype.fitness')
          ),
          new transferobjects.DataProviderEntry(
            7,
            enums.SearchCategory.HEALING,
            services.Localization.localize('devtype.healing')
          )
        ];
      }),
      (DataProviderFactory.prototype.getSortTypeDP = function getSortTypeDP() {
        return [
          new transferobjects.DataProviderEntry(
            enums.SearchSortType.VALUE_DESC,
            enums.SearchSort.DESCENDING,
            services.Localization.localize('search.sort.highestValue')
          ),
          new transferobjects.DataProviderEntry(
            enums.SearchSortType.VALUE_ASC,
            enums.SearchSort.ASCENDING,
            services.Localization.localize('search.sort.lowestValue')
          ),
          new transferobjects.DataProviderEntry(
            enums.SearchSortType.RECENCY_DESC,
            enums.SearchSort.DESCENDING,
            services.Localization.localize('search.sort.mostRecent')
          )
        ];
      }),
      (DataProviderFactory.prototype.getTacticOffensiveStyleDP = function getTacticOffensiveStyleDP() {
        return [
          new transferobjects.DataProviderEntry(
            0,
            UTSquadMentalityEntity.OFFENSIVE_STYLE.POSSESSION,
            services.Localization.localize(
              'tactics.mentality.style.offensive.0'
            )
          ),
          new transferobjects.DataProviderEntry(
            1,
            UTSquadMentalityEntity.OFFENSIVE_STYLE.BALANCED,
            services.Localization.localize(
              'tactics.mentality.style.offensive.1'
            )
          ),
          new transferobjects.DataProviderEntry(
            2,
            UTSquadMentalityEntity.OFFENSIVE_STYLE.LONG_BALL,
            services.Localization.localize(
              'tactics.mentality.style.offensive.2'
            )
          ),
          new transferobjects.DataProviderEntry(
            3,
            UTSquadMentalityEntity.OFFENSIVE_STYLE.FAST_BUILD_UP,
            services.Localization.localize(
              'tactics.mentality.style.offensive.3'
            )
          )
        ];
      }),
      (DataProviderFactory.prototype.getTacticDefensiveStyleDP = function getTacticDefensiveStyleDP() {
        return [
          new transferobjects.DataProviderEntry(
            0,
            UTSquadMentalityEntity.DEFENSIVE_STYLE.DROP_BACK,
            services.Localization.localize(
              'tactics.mentality.style.defensive.0'
            )
          ),
          new transferobjects.DataProviderEntry(
            1,
            UTSquadMentalityEntity.DEFENSIVE_STYLE.BALANCED,
            services.Localization.localize(
              'tactics.mentality.style.defensive.1'
            )
          ),
          new transferobjects.DataProviderEntry(
            2,
            UTSquadMentalityEntity.DEFENSIVE_STYLE.PRESSURE_ON_HEAVY_TOUCH,
            services.Localization.localize(
              'tactics.mentality.style.defensive.2'
            )
          ),
          new transferobjects.DataProviderEntry(
            3,
            UTSquadMentalityEntity.DEFENSIVE_STYLE.PRESS_AFTER_POSSESSION_LOSS,
            services.Localization.localize(
              'tactics.mentality.style.defensive.3'
            )
          ),
          new transferobjects.DataProviderEntry(
            4,
            UTSquadMentalityEntity.DEFENSIVE_STYLE.CONSTANT_PRESSURE,
            services.Localization.localize(
              'tactics.mentality.style.defensive.4'
            )
          )
        ];
      }),
      new DataProviderFactory()
    );
  })()),
  utils.JS.inherits(UTNimbleMTXItemEntity, UTObject),
  (UTNimbleMTXItemEntity.prototype.setTitle = function setTitle(e) {
    this.title = isAndroid() ? e.replace(/ *\([^)]*\) */g, ' ').trim() : e;
  }),
  (UTNimbleMTXItemEntity.prototype.getLocalImageAssetId = function getLocalImageAssetId() {
    return 1600 < this.points
      ? 2
      : this.points <= 1600 && 800 <= this.points
      ? 1
      : 0;
  }),
  utils.JS.inherits(UTNimbleMTXItemFactory, UTObject),
  (UTNimbleMTXItemFactory.prototype.generateMTXItem = function generateMTXItem(
    e
  ) {
    var t = new UTNimbleMTXItemEntity(e.sku);
    return (
      t.setTitle(e.title),
      (t.price = e.price),
      (t.priceFormatted = e.priceFormatted),
      (t.type = e.type),
      (t.currency = e.currency),
      t
    );
  }),
  (UTNimbleMTXItemFactory.prototype.generateMTXItemArray = function generateMTXItemArray(
    e
  ) {
    return e.map(function(e) {
      return this.generateMTXItem(e);
    }, this);
  }),
  NamespaceManager.Register('factories'),
  (factories.UTNimbleMTXItem = new UTNimbleMTXItemFactory()),
  NamespaceManager.Register('interfaces'),
  (interfaces.ListItem = function IListItem() {}),
  (interfaces.ListItem.prototype.getItemData = function getItemData() {}),
  (interfaces.ListItem.prototype.getAuctionData = function getAuctionData() {}),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.StaticItemData = function UTStaticItemDataDTO() {
    UTObject.call(this),
      (this.assetId = 0),
      (this.assetType = ''),
      (this.assetYear = -1),
      (this.amount = 0),
      (this.name = enums.Localization.BLANK_STR),
      (this.firstName = enums.Localization.BLANK_STR),
      (this.lastName = enums.Localization.BLANK_STR),
      (this.knownAs = enums.Localization.BLANK_STR),
      (this.description = ''),
      (this.manufacturer = ''),
      (this.trainedAttribute = -1),
      (this.trainPosFrom = ''),
      (this.trainPosTo = ''),
      (this.goldBoost = 0),
      (this.silverBoost = 0),
      (this.bronzeBoost = 0);
  }),
  utils.JS.inherits(transferobjects.StaticItemData, UTObject),
  (transferobjects.StaticItemData.prototype.parseDynamicItemData = function(
    e,
    t
  ) {
    this.amount = t.amount || 0;
  }),
  (transferobjects.StaticItemData.prototype.generateNameData = function generateNameData(
    e,
    t,
    i
  ) {
    (this.firstName = e || enums.Localization.BLANK_STR),
      (this.lastName = t || enums.Localization.BLANK_STR),
      (this.knownAs = i || enums.Localization.BLANK_STR),
      (this.name =
        this.knownAs === enums.Localization.BLANK_STR
          ? this.lastName
          : this.knownAs);
  }),
  (transferobjects.StaticItemData.prototype.getFullName = function getFullName() {
    return this.knownAs === enums.Localization.BLANK_STR
      ? this.firstName + ' ' + this.lastName
      : this.knownAs;
  }),
  (transferobjects.StaticItemData.prototype.hasLoanPackDescription = function hasLoanPackDescription() {
    return 'FreeLoanPackDesc' === this.description;
  }),
  (transferobjects.StaticPlayerItemData = function UTStaticPlayerItemDataDTO() {
    transferobjects.StaticItemData.call(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticPlayerItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticPlayerItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    this.superclass(e, t),
      this.generateNameData(t.firstName, t.lastName, t.knownAs);
  }),
  (transferobjects.StaticPlayerItemData.prototype.hasNameData = function hasNameData() {
    return (
      this.firstName !== enums.Localization.BLANK_STR ||
      this.lastName !== enums.Localization.BLANK_STR ||
      this.knownAs !== enums.Localization.BLANK_STR
    );
  }),
  (transferobjects.StaticManagerItemData = function UTStaticManagerItemDataDTO() {
    transferobjects.StaticItemData.apply(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticManagerItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticManagerItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    this.superclass(e, t),
      (this.firstName = t.firstName || enums.Localization.BLANK_STR),
      (this.lastName = t.lastName || enums.Localization.BLANK_STR),
      (this.knownAs = t.commonname || enums.Localization.BLANK_STR),
      (this.lastName === enums.Localization.BLANK_STR ||
        utils.JS.isEmpty(this.lastName.trim())) &&
        (this.knownAs = this.firstName),
      (this.amount = t.negotiation || 0),
      this.firstName === enums.Localization.BLANK_STR &&
      this.lastName === enums.Localization.BLANK_STR &&
      this.knownAs === enums.Localization.BLANK_STR
        ? (this.name = enums.Localization.BLANK_STR)
        : (this.name =
            this.knownAs === enums.Localization.BLANK_STR
              ? this.firstName.charAt(0) + '. ' + this.lastName
              : this.knownAs);
  }),
  (transferobjects.StaticStaffItemData = function UTStaticStaffItemDataDTO() {
    transferobjects.StaticItemData.apply(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticStaffItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticStaffItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    this.superclass(e, t),
      (this.firstName = t.firstName || enums.Localization.BLANK_STR),
      (this.lastName = t.lastName || enums.Localization.BLANK_STR),
      (this.name = this.firstName.trim() + '. ' + this.lastName.trim()),
      (this.trainedAttribute = parseInt(t.attribute, 10) || 0);
  }),
  (transferobjects.StaticBadgeItemData = function UTStaticBadgeItemDataDTO() {
    transferobjects.StaticItemData.apply(this),
      (this.name = services.Localization.localize('card.title.badge'));
  }),
  utils.JS.inherits(
    transferobjects.StaticBadgeItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticBadgeItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    this.superclass(e, t), (this.assetId = parseInt(t.assetId, 10) || 0);
  }),
  NamespaceManager.Register('valueobjects'),
  (transferobjects.StaticKitItemData = function UTStaticKitItemDataDTO() {
    transferobjects.StaticItemData.apply(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticKitItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticKitItemData.CATEGORY_KIT_HOME = 2),
  (transferobjects.StaticKitItemData.CATEGORY_KIT_AWAY = 3),
  (transferobjects.StaticKitItemData.CATEGORY_KIT_THIRD = 5),
  (transferobjects.StaticKitItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    this.superclass(e, t);
    var i = parseInt(t.category, 10) || 0;
    (this.assetYear = parseInt(t.year, 10) || 0),
      (this.name = services.Localization.localize('clubtype.kit')),
      i === transferobjects.StaticKitItemData.CATEGORY_KIT_HOME
        ? ((this.description = services.Localization.localize(
            'card.desc.homekit'
          )),
          (this.assetType = utils.AssetLocator.IMAGE_TYPE_KIT_HOME))
        : i === transferobjects.StaticKitItemData.CATEGORY_KIT_AWAY
        ? ((this.description = services.Localization.localize(
            'card.desc.awaykit'
          )),
          (this.assetType = utils.AssetLocator.IMAGE_TYPE_KIT_AWAY))
        : ((this.description = services.Localization.localize(
            'card.desc.thirdkit'
          )),
          (this.assetType = utils.AssetLocator.IMAGE_TYPE_KIT_THIRD)),
      0 < this.assetYear &&
        (this.description = services.Localization.localize(
          'card.desc.classickit'
        ));
  }),
  (transferobjects.StaticBallItemData = function UTStaticBallItemDataDTO() {
    transferobjects.StaticItemData.apply(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticBallItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticBallItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    this.superclass(e, t),
      (this.assetId = parseInt(t.assetId, 10) || 0),
      (this.name = services.Localization.localize('club.edit.ballLabel')),
      (this.description = t.name || 'BallName_' + this.assetId),
      (this.manufacturer = t.manufacturer || '');
  }),
  NamespaceManager.Register('valueobjects'),
  (transferobjects.StaticStadiumItemData = function UTStaticStadiumItemDataDTO() {
    transferobjects.StaticItemData.apply(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticStadiumItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticStadiumItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    this.superclass(e, t),
      (this.name = services.Localization.localize('club.edit.stadiumLabel')),
      (this.assetId =
        parseInt(t.stadiumid, 10) || parseInt(t.assetId, 10) || 0),
      (this.description = services.Localization.localize(
        'global.stadiumFull.' + APP_YEAR + '.stadium' + this.assetId
      ));
  }),
  (transferobjects.StaticTrainingItemData = function UTStaticTrainingItemDataDTO() {
    transferobjects.StaticItemData.apply(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticTrainingItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticTrainingItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    this.superclass(e, t);
    var i = e.subtype;
    if (e.isGKTraining())
      switch (
        ((this.name = services.Localization.localize(
          'card.desc.training.goalkeeper'
        )),
        (this.assetType = utils.AssetLocator.IMAGE_TYPE_TRAINING_GKATTRIB),
        i)
      ) {
        case enums.ItemSubType.TRAINING_GK_DIVING:
          (this.assetId = 0), (this.trainedAttribute = 0);
          break;
        case enums.ItemSubType.TRAINING_GK_HANDLING:
          (this.assetId = 1), (this.trainedAttribute = 1);
          break;
        case enums.ItemSubType.TRAINING_GK_KICKING:
          (this.assetId = 2), (this.trainedAttribute = 2);
          break;
        case enums.ItemSubType.TRAINING_GK_SPEED:
          (this.assetId = 4), (this.trainedAttribute = 4);
          break;
        case enums.ItemSubType.TRAINING_GK_POSITION:
          (this.assetId = 5), (this.trainedAttribute = 5);
          break;
        case enums.ItemSubType.TRAINING_GK_REFLEX:
          (this.assetId = 3), (this.trainedAttribute = 3);
          break;
        case enums.ItemSubType.TRAINING_GK_ALL:
          (this.assetId = 6), (this.trainedAttribute = 6);
      }
    else if (e.isPlayerTraining())
      switch (
        ((this.name = services.Localization.localize(
          'card.desc.contract.player'
        )),
        (this.assetType = utils.AssetLocator.IMAGE_TYPE_TRAINING_PLAYERATTRIB),
        i)
      ) {
        case enums.ItemSubType.TRAINING_PLAYER_PACE:
          (this.assetId = 0), (this.trainedAttribute = 0);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_SHOOTING:
          (this.assetId = 1), (this.trainedAttribute = 1);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_PASSING:
          (this.assetId = 2), (this.trainedAttribute = 2);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_DRIBBLING:
          (this.assetId = 3), (this.trainedAttribute = 3);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_HEADING:
          (this.assetId = 5), (this.trainedAttribute = 5);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_DEFEND:
          (this.assetId = 4), (this.trainedAttribute = 4);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_ALL:
          (this.assetId = 6), (this.trainedAttribute = 6);
      }
    else if (e.isPlayerPositionModifier())
      switch (
        ((this.name = services.Localization.localize('card.title.position')),
        (this.assetId = utils.AssetLocator.ASSET_ID_PLAYER),
        (this.assetType = utils.AssetLocator.IMAGE_TYPE_TRAINING_POSITION),
        i)
      ) {
        case enums.ItemSubType.TRAINING_PLAYER_POS_LWB_LB:
          (this.trainPosFrom = enums.PlayerPositions.LWB),
            (this.trainPosTo = enums.PlayerPositions.LB);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_LB_LWB:
          (this.trainPosFrom = enums.PlayerPositions.LB),
            (this.trainPosTo = enums.PlayerPositions.LWB);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_RWB_RB:
          (this.trainPosFrom = enums.PlayerPositions.RWB),
            (this.trainPosTo = enums.PlayerPositions.RB);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_RB_RWB:
          (this.trainPosFrom = enums.PlayerPositions.RB),
            (this.trainPosTo = enums.PlayerPositions.RWB);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_LM_LW:
          (this.trainPosFrom = enums.PlayerPositions.LM),
            (this.trainPosTo = enums.PlayerPositions.LW);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_RM_RW:
          (this.trainPosFrom = enums.PlayerPositions.RM),
            (this.trainPosTo = enums.PlayerPositions.RW);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_LW_LM:
          (this.trainPosFrom = enums.PlayerPositions.LW),
            (this.trainPosTo = enums.PlayerPositions.LM);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_RW_RM:
          (this.trainPosFrom = enums.PlayerPositions.RW),
            (this.trainPosTo = enums.PlayerPositions.RM);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_LW_LF:
          (this.trainPosFrom = enums.PlayerPositions.LW),
            (this.trainPosTo = enums.PlayerPositions.LF);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_RW_RF:
          (this.trainPosFrom = enums.PlayerPositions.RW),
            (this.trainPosTo = enums.PlayerPositions.RF);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_LF_LW:
          (this.trainPosFrom = enums.PlayerPositions.LF),
            (this.trainPosTo = enums.PlayerPositions.LW);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_RF_RW:
          (this.trainPosFrom = enums.PlayerPositions.RF),
            (this.trainPosTo = enums.PlayerPositions.RW);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CM_CAM:
          (this.trainPosFrom = enums.PlayerPositions.CM),
            (this.trainPosTo = enums.PlayerPositions.CAM);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CAM_CM:
          (this.trainPosFrom = enums.PlayerPositions.CAM),
            (this.trainPosTo = enums.PlayerPositions.CM);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CDM_CM:
          (this.trainPosFrom = enums.PlayerPositions.CDM),
            (this.trainPosTo = enums.PlayerPositions.CM);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CM_CDM:
          (this.trainPosFrom = enums.PlayerPositions.CM),
            (this.trainPosTo = enums.PlayerPositions.CDM);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CAM_CF:
          (this.trainPosFrom = enums.PlayerPositions.CAM),
            (this.trainPosTo = enums.PlayerPositions.CF);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CF_CAM:
          (this.trainPosFrom = enums.PlayerPositions.CF),
            (this.trainPosTo = enums.PlayerPositions.CAM);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CF_ST:
          (this.trainPosFrom = enums.PlayerPositions.CF),
            (this.trainPosTo = enums.PlayerPositions.ST);
          break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_ST_CF:
          (this.trainPosFrom = enums.PlayerPositions.ST),
            (this.trainPosTo = enums.PlayerPositions.CF);
      }
    else
      e.isManagerLeagueModifier()
        ? ((this.name = services.Localization.localize(
            'card.title.leaguechange'
          )),
          (this.assetType = utils.AssetLocator.IMAGE_TYPE_TRAINING_LEAGUEMOD),
          (e.leagueId = this.amount))
        : e.isStyleModifier()
        ? ((this.name = services.Localization.localize('card.title.playstyle')),
          (this.assetType = utils.AssetLocator.IMAGE_TYPE_TRAINING_PLAYSTYLE))
        : utils.Debug.Assert(!1, 'Unknown item subtype: ' + i);
  }),
  (transferobjects.StaticHealingItemData = function UTStaticHealingItemDataDTO() {
    transferobjects.StaticItemData.apply(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticHealingItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticHealingItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    if ((this.superclass(e, t), e.isPlayerFitness()))
      (this.name = services.Localization.localize('card.desc.contract.player')),
        (this.assetType = utils.AssetLocator.IMAGE_TYPE_HEALING_FITNESS),
        (this.assetId = utils.AssetLocator.ASSET_ID_PLAYER);
    else if (e.isTeamFitness())
      (this.name = services.Localization.localize('card.desc.healing.squad')),
        (this.assetType = utils.AssetLocator.IMAGE_TYPE_HEALING_FITNESS),
        (this.assetId = utils.AssetLocator.ASSET_ID_TEAM);
    else if (e.isInjuryHealing())
      switch (
        ((this.name = services.Localization.localize(
          'card.desc.contract.player'
        )),
        (this.assetType = utils.AssetLocator.IMAGE_TYPE_HEALING_INJURY),
        e.subtype)
      ) {
        case enums.ItemSubType.HEALING_HEAD:
          this.assetId = 0;
          break;
        case enums.ItemSubType.HEALING_SHOULDER:
          this.assetId = 1;
          break;
        case enums.ItemSubType.HEALING_ARM:
          this.assetId = 2;
          break;
        case enums.ItemSubType.HEALING_BACK:
          this.assetId = 3;
          break;
        case enums.ItemSubType.HEALING_HIP:
          this.assetId = 4;
          break;
        case enums.ItemSubType.HEALING_LEG:
          this.assetId = 5;
          break;
        case enums.ItemSubType.HEALING_FOOT:
          this.assetId = 6;
          break;
        case enums.ItemSubType.HEALING_ALL:
          this.assetId = 7;
      }
    else utils.Debug.Assert(!1, 'Unknown item subtype: ' + e.subtype);
  }),
  (transferobjects.StaticContractItemData = function UTStaticContractItemDataDTO() {
    transferobjects.StaticItemData.apply(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticContractItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticContractItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    this.superclass(e, t),
      (this.assetType = utils.AssetLocator.IMAGE_TYPE_CONTRACT);
    var i = e.isManagerContract();
    (this.assetId = i ? 1 : 0),
      (this.name = services.Localization.localize(
        i ? 'card.desc.contract.manager' : 'card.desc.contract.player'
      )),
      t.bronze && (this.bronzeBoost = parseInt(t.bronze, 10)),
      t.silver && (this.silverBoost = parseInt(t.silver, 10)),
      t.gold && (this.goldBoost = parseInt(t.gold, 10));
  }),
  (transferobjects.StaticMiscItemData = function UTStaticMiscItemDataDTO() {
    transferobjects.StaticItemData.apply(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticMiscItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticMiscItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    switch (
      (this.superclass(e, t),
      (this.name = services.Localization.localize('card.title.unlock')),
      (this.description = t.description || ''),
      e.subtype)
    ) {
      case enums.ItemSubType.FREE_COINS:
        (this.assetType = utils.AssetLocator.IMAGE_TYPE_BOOST_COIN),
          (this.assetId = utils.AssetLocator.ASSET_ID_DEFAULT);
        break;
      case enums.ItemSubType.DRAFT_TOKEN:
        (this.assetType = utils.AssetLocator.IMAGE_TYPE_DRAFT_TOKEN),
          (this.assetId = utils.AssetLocator.ASSET_ID_DEFAULT);
        break;
      case enums.ItemSubType.PLAYER_PICK_ITEM:
        utils.JS.isEmpty(t.name) || (this.name = t.name),
          (this.assetType = utils.AssetLocator.IMAGE_TYPE_PLAYER_PICK_ITEM),
          (this.assetId = utils.AssetLocator.ASSET_ID_DEFAULT);
        break;
      case enums.ItemSubType.FREE_PACK:
        (this.assetType = utils.AssetLocator.IMAGE_TYPE_BOOST_PACK),
          e.isBronzeRating()
            ? (this.assetId = utils.AssetLocator.ASSET_ID_BRONZE_PACK)
            : e.isSilverRating()
            ? (this.assetId = utils.AssetLocator.ASSET_ID_SILVER_PACK)
            : (this.assetId = utils.AssetLocator.ASSET_ID_GOLD_PACK);
    }
  }),
  (transferobjects.StaticBannerItemData = function UTStaticBannerItemDataDTO() {
    transferobjects.StaticItemData.apply(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticBannerItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticBannerItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    this.superclass(e, t),
      (this.assetId = parseInt(t.assetId, 10) || 0),
      (this.description = t.description || ''),
      (this.name = 'FUT_BannerName_' + this.assetId);
  }),
  (transferobjects.StaticCelebrationItemData = function UTStaticCelebrationItemDataDTO() {
    transferobjects.StaticItemData.apply(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticCelebrationItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticCelebrationItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    this.superclass(e, t);
    var i = parseInt(t.resourceId, 10) || 0;
    (this.assetId = parseInt(t.cardassetid, 10) || 0),
      (this.description = t.description || ''),
      (this.name = 'FUT_CelebrationName_' + i);
  }),
  (transferobjects.StaticTifoItemData = function UTStaticTifoItemDataDTO() {
    transferobjects.StaticItemData.apply(this);
  }),
  utils.JS.inherits(
    transferobjects.StaticTifoItemData,
    transferobjects.StaticItemData
  ),
  (transferobjects.StaticTifoItemData.prototype.parseDynamicItemData = function parseDynamicItemData(
    e,
    t
  ) {
    this.superclass(e, t),
      (this.assetId = parseInt(t.assetId, 10) || 0),
      (this.description = t.description || ''),
      (this.name = 'FUT_TifoName_' + this.assetId);
  }),
  NamespaceManager.Register('entities'),
  (entities.Item = function UTItemEntity(e) {
    var i = enums.ItemType.PLAYER;
    Object.defineProperty(this, 'type', {
      set: function(e) {
        var t;
        if (i !== e)
          for (t in enums.ItemType)
            if (enums.ItemType.hasOwnProperty(t)) return void (i = e);
      },
      get: function() {
        return i;
      },
      enumerable: !0
    });
    var s = enums.FUTItemPile.ANY;
    Object.defineProperty(this, 'pile', {
      set: function(e) {
        var t;
        if (s !== e)
          for (t in enums.FUTItemPile)
            if (enums.FUTItemPile.hasOwnProperty(t)) return void (s = e);
      },
      get: function() {
        return s;
      },
      enumerable: !0
    });
    var n = enums.ItemState.FREE;
    Object.defineProperty(this, 'state', {
      set: function(e) {
        var t;
        if (n !== e)
          for (t in enums.ItemState)
            if (enums.ItemState.hasOwnProperty(t)) return void (n = e);
      },
      get: function() {
        return n;
      },
      enumerable: !0
    }),
      (this.onDataUpdated = new UTObservable()),
      Object.defineProperty(this, 'onDataUpdated', {
        writable: !1,
        enumerable: !0
      }),
      (this.id = 0),
      (this.resourceId = 0),
      (this.iconId = 0),
      (this.type = utils.JS.isValid(e) ? e : enums.ItemType.PLAYER),
      (this._assetId = enums.ItemCardAssetId.NONE),
      Object.defineProperty(this, '_assetId', {
        writable: !0,
        enumerable: !1
      }),
      (this.subtype = enums.ItemSubType.NONE),
      (this.lastSalePrice = 0),
      (this.discardValue = 0),
      (this.state = enums.ItemState.FREE),
      (this.untradeable = !0),
      (this.untradeableCount = 0),
      (this.concept = !1),
      (this.contract = -1),
      (this.teamId = -1),
      (this.leagueId = -1),
      (this.nationId = -1),
      (this.loans = -1),
      (this.fitness = -1),
      (this.injuryType = enums.PlayerInjury.NONE),
      (this.injuryGames = 0),
      (this.preferredPosition = -1),
      (this._attributes = [0, 0, 0, 0, 0, 0]),
      (this._lifetimeStats = [0, 0, 0, 0]),
      (this._stats = [0, 0, 0, 0]),
      (this._skillMoves = -1),
      (this._weakFoot = -1),
      (this._offensiveWorkRate = -1),
      (this._defensiveWorkRate = -1),
      (this._preferredFoot = -1),
      (this.training = 0),
      (this._auction = new entities.Auction()),
      (this.duplicateId = 0),
      (this.duplicateItemLoans = -1),
      (this.playStyle = 0),
      (this.loyaltyBonus = 0),
      (this.pile = enums.FUTItemPile.ANY),
      (this.amount = 0),
      (this.stackCount = 0),
      (this.rareflag = entities.Item.Rarity.NONE),
      (this.groups = []),
      (this.rating = 0),
      (this.hasLevels = !1),
      (this.owners = 0),
      (this.timestamp = 0),
      (this._itemPriceLimits = null),
      (this._staticData = this._generateStaticData()),
      (this._trainingItem = null),
      (this._metaData = null);
  }),
  (entities.Item.Rarity = {
    NONE: 0,
    RARE: 1,
    ICON: 12,
    PRIMEICON: 84,
    CHAMPIONS_COMMON: 47,
    CHAMPIONS_RARE: 48,
    CHAMPIONS_MOTM: 49,
    CHAMPIONS_LIVE: 50,
    CHAMPIONS_SBC: 69,
    CHAMPIONS_TOTT: 70
  }),
  Object.freeze(entities.Item.Rarity),
  (entities.Item.prototype.activate = function activate(e) {
    if ((this.clearAuction(), this.isBadge()))
      this.state = enums.ItemState.ACTIVE_BADGE;
    else if (this.isBall()) this.state = enums.ItemState.ACTIVE_BALL;
    else if (this.isKit())
      switch (e) {
        case enums.KitActivationSlot.HOME:
          this.state = enums.ItemState.ACTIVE_HOME_KIT;
          break;
        case enums.KitActivationSlot.AWAY:
          this.state = enums.ItemState.ACTIVE_AWAY_KIT;
      }
    else
      this.isStadium()
        ? (this.state = enums.ItemState.ACTIVE_STADIUM)
        : this.isTifo()
        ? (this.state = enums.ItemState.ACTIVE_TIFO)
        : this.isBanner()
        ? (this.state = enums.ItemState.ACTIVE_BANNER)
        : this.isCelebration() &&
          (this.state = enums.ItemState.ACTIVE_CELEBRATION);
  }),
  (entities.Item.prototype.clearAuction = function clearAuction() {
    this._auction = new entities.Auction();
  }),
  (entities.Item.prototype._generateStaticData = function _generateStaticData() {
    var e;
    switch (this.type) {
      case enums.ItemType.PLAYER:
        e = new transferobjects.StaticPlayerItemData();
        break;
      case enums.ItemType.MANAGER:
        e = new transferobjects.StaticManagerItemData();
        break;
      case enums.ItemType.HEAD_COACH:
      case enums.ItemType.GK_COACH:
      case enums.ItemType.FITNESS_COACH:
      case enums.ItemType.PHYSIO:
        e = new transferobjects.StaticStaffItemData();
        break;
      case enums.ItemType.BADGE:
        e = new transferobjects.StaticBadgeItemData();
        break;
      case enums.ItemType.KIT:
        e = new transferobjects.StaticKitItemData();
        break;
      case enums.ItemType.BALL:
        e = new transferobjects.StaticBallItemData();
        break;
      case enums.ItemType.STADIUM:
        e = new transferobjects.StaticStadiumItemData();
        break;
      case enums.ItemType.TRAINING:
        e = new transferobjects.StaticTrainingItemData();
        break;
      case enums.ItemType.HEALTH:
        e = new transferobjects.StaticHealingItemData();
        break;
      case enums.ItemType.CONTRACT:
        e = new transferobjects.StaticContractItemData();
        break;
      case enums.ItemType.MISC:
        e = new transferobjects.StaticMiscItemData();
        break;
      case enums.ItemType.BANNER:
        e = new transferobjects.StaticBannerItemData();
        break;
      case enums.ItemType.CELEBRATION:
        e = new transferobjects.StaticCelebrationItemData();
        break;
      case enums.ItemType.TIFO:
        e = new transferobjects.StaticTifoItemData();
        break;
      default:
        window.console.log(
          '[createStaticItemData] Reached default statement with itemType ' +
            this.type
        ),
          (e = new transferobjects.StaticItemData());
    }
    return e;
  }),
  (entities.Item.prototype.update = function update(e) {
    (this.lastSalePrice = e.lastSalePrice),
      (this.state = e.state),
      (this.pile = e.pile),
      (this.duplicateId = e.duplicateId),
      (this.stackCount = e.stackCount),
      (this.untradeableCount = e.untradeableCount),
      0 !== e.id &&
        this.getAuctionData().compareTo(e.getAuctionData()) &&
        (this.id = e.id),
      (this.isPlayer() || this.isManager()) &&
        ((this.contract = e.contract), (this.loans = e.loans)),
      this.isPlayer() &&
        ((this.loyaltyBonus = e.loyaltyBonus),
        (this.fitness = e.fitness),
        (this.injuryType = e.injuryType),
        (this.injuryGames = e.injuryGames),
        (this.preferredPosition = e.preferredPosition),
        (this.training = e.training),
        (this.playStyle = e.playStyle)),
      this.getAuctionData().update(e.getAuctionData());
  }),
  (entities.Item.prototype.isValid = function isValid() {
    return (0 !== this.id || 0 !== this.resourceId) && 0 < this.stackCount;
  }),
  (entities.Item.prototype.isStack = function isStack() {
    return 1 < this.stackCount;
  }),
  (entities.Item.prototype.isCustomBrick = function isCustomBrick() {
    return !1;
  }),
  (entities.Item.prototype.getMaskedResourceId = function getMaskedResourceId() {
    return this.resourceId & enums.ItemMask.DATABASE;
  }),
  (entities.Item.prototype.getDefId = function getDefId() {
    return services.Configuration.checkFeatureEnabled(
      enums.ServerFeature.LEGACY_YEAR_ENABLED
    )
      ? this.resourceId & (enums.ItemMask.DATABASE | enums.ItemMask.REVISION)
      : this.resourceId &
          (enums.ItemMask.DATABASE | enums.ItemMask.FULL_REVISION);
  }),
  (entities.Item.prototype.getItemData = function getItemData() {
    return this;
  }),
  (entities.Item.prototype.getTier = function getTier() {
    return this.isValid()
      ? this.isBronzeRating()
        ? enums.ItemRatingTier.BRONZE
        : this.isSilverRating()
        ? enums.ItemRatingTier.SILVER
        : enums.ItemRatingTier.GOLD
      : enums.ItemRatingTier.NONE;
  }),
  (entities.Item.prototype.getBoostLevel = function getBoostLevel() {
    return this.hasTraining()
      ? this._trainingItem.getTier()
      : enums.ItemRatingTier.NONE;
  }),
  (entities.Item.prototype.getYear = function getYear() {
    return enums.Year.ASSET;
  }),
  (entities.Item.prototype.getSearchType = function getSearchType() {
    switch (this.type) {
      case enums.ItemType.PLAYER:
        return enums.SearchType.PLAYER;
      case enums.ItemType.MANAGER:
      case enums.ItemType.HEAD_COACH:
      case enums.ItemType.FITNESS_COACH:
      case enums.ItemType.GK_COACH:
      case enums.ItemType.PHYSIO:
        return enums.SearchType.STAFF;
      case enums.ItemType.BADGE:
      case enums.ItemType.KIT:
        return enums.SearchType.CLUB_INFO;
      case enums.ItemType.STADIUM:
        return enums.SearchType.STADIUM;
      case enums.ItemType.BALL:
        return enums.SearchType.BALL;
      case enums.ItemType.CONTRACT:
      case enums.ItemType.HEALTH:
        return enums.SearchType.CONSUMABLES_DEVELOPMENT;
      case enums.ItemType.TRAINING:
        return enums.SearchType.CONSUMABLES_TRAINING;
      default:
        return (
          utils.Debug.Assert(
            !1,
            "[entities.Item::getSearchType] Unexpected item type. Defaulting to search type 'Any'."
          ),
          enums.SearchType.ANY
        );
    }
  }),
  (entities.Item.prototype.isInjured = function isInjured() {
    return this.isPlayer() && 0 < this.injuryGames;
  }),
  (entities.Item.prototype.hasTraining = function hasTraining() {
    return 0 !== this.training && utils.JS.isValid(this._trainingItem);
  }),
  (entities.Item.prototype.getAppliedTrainingItem = function getAppliedTrainingItem() {
    return this._trainingItem;
  }),
  (entities.Item.prototype.isSuspended = function isSuspended() {
    return this.isPlayer() && 0 < this.getCurrentRedCards();
  }),
  (entities.Item.prototype.getStaticData = function getStaticData() {
    return this._staticData;
  }),
  (entities.Item.prototype.setStaticData = function setStaticData(e) {
    this._staticData = e;
  }),
  (entities.Item.prototype.setTrainingItem = function setTrainingItem(e) {
    utils.Debug.Assert(e.isTraining(), 'Expected a training consumable item.'),
      e.isTraining() && ((this.training = e.id), (this._trainingItem = e));
  }),
  (entities.Item.prototype.getAuctionData = function getAuctionData() {
    return this._auction;
  }),
  (entities.Item.prototype.setAuctionData = function setAuctionData(e) {
    this._auction = e;
  }),
  (entities.Item.prototype.getSkillMoves = function getSkillMoves() {
    return -1 < this._skillMoves
      ? this._skillMoves
      : utils.JS.isValid(this._metaData)
      ? this._metaData.skillMoves
      : -1;
  }),
  (entities.Item.prototype.getWeakFoot = function getWeakFoot() {
    return -1 < this._weakFoot
      ? this._weakFoot
      : utils.JS.isValid(this._metaData)
      ? this._metaData.weakFoot
      : -1;
  }),
  (entities.Item.prototype.getOffensiveWorkRate = function getOffensiveWorkRate() {
    return -1 < this._offensiveWorkRate
      ? this._offensiveWorkRate
      : utils.JS.isValid(this._metaData)
      ? this._metaData.offensiveWorkRate
      : -1;
  }),
  (entities.Item.prototype.getDefensiveWorkRate = function getDefensiveWorkRate() {
    return -1 < this._defensiveWorkRate
      ? this._defensiveWorkRate
      : utils.JS.isValid(this._metaData)
      ? this._metaData.defensiveWorkRate
      : -1;
  }),
  (entities.Item.prototype.isLeftFoot = function isLeftFoot() {
    return -1 < this._preferredFoot
      ? 1 !== parseInt(this._preferredFoot, 10)
      : !!utils.JS.isValid(this._metaData) && this._metaData.isLeftFoot;
  }),
  (entities.Item.prototype.getMetaData = function getMetaData() {
    return this._metaData;
  }),
  (entities.Item.prototype.setMetaData = function setMetaData(e) {
    var t = e instanceof UTPlayerMetaDataDTO;
    utils.Debug.Assert(t, 'Expected a PlayerMetaData DTO'),
      utils.Debug.Assert(
        this.isPlayer(),
        'Cannot assign player meta data to non-player items'
      ),
      t && this.isPlayer() && (this._metaData = e);
  }),
  (entities.Item.prototype.isDiscardable = function isDiscardable() {
    return this.isValid() && !this.isMiscItem();
  }),
  (entities.Item.prototype.isMovable = function isMovable() {
    var e = !this.isDuplicate() && !this.isDuplicateLoanPlayer();
    return (e = e && this.type !== enums.ItemType.MISC);
  }),
  (entities.Item.prototype.isDuplicate = function isDuplicate() {
    return !this.isConsumable() && 0 < this.duplicateId;
  }),
  (entities.Item.prototype.isLoaned = function isLoaned() {
    return 0 <= this.loans;
  }),
  (entities.Item.prototype.isPlayer = function isPlayer() {
    return this.type === enums.ItemType.PLAYER;
  }),
  (entities.Item.prototype.isChampionsLeagueItem = function isChampionsLeagueItem() {
    return (
      (this.rareflag === entities.Item.Rarity.CHAMPIONS_COMMON ||
        this.rareflag === entities.Item.Rarity.CHAMPIONS_RARE ||
        this.rareflag === entities.Item.Rarity.CHAMPIONS_MOTM ||
        this.rareflag === entities.Item.Rarity.CHAMPIONS_LIVE ||
        this.rareflag === entities.Item.Rarity.CHAMPIONS_SBC ||
        this.rareflag === entities.Item.Rarity.CHAMPIONS_TOTT) &&
      this.isPlayer()
    );
  }),
  (entities.Item.prototype.isManager = function isManager() {
    return this.type === enums.ItemType.MANAGER;
  }),
  (entities.Item.prototype.isHeadCoach = function isHeadCoach() {
    return this.type === enums.ItemType.HEAD_COACH;
  }),
  (entities.Item.prototype.isFitnessCoach = function isFitnessCoach() {
    return this.type === enums.ItemType.FITNESS_COACH;
  }),
  (entities.Item.prototype.isGKCoach = function isGKCoach() {
    return this.type === enums.ItemType.GK_COACH;
  }),
  (entities.Item.prototype.isPhysio = function isPhysio() {
    return this.type === enums.ItemType.PHYSIO;
  }),
  (entities.Item.prototype.isCoach = function isCoach() {
    return (
      this.isHeadCoach() ||
      this.isFitnessCoach() ||
      this.isGKCoach() ||
      this.isPhysio()
    );
  }),
  (entities.Item.prototype.isStaff = function isStaff() {
    return this.isManager() || this.isCoach();
  }),
  (entities.Item.prototype.isPlayerBanned = function isPlayerBanned() {
    return (
      this.isValid() &&
      this.isPlayer() &&
      (this.isSuspended() || this.contract <= 0)
    );
  }),
  (entities.Item.prototype.isContractExpired = function isContractExpired() {
    return (this.isPlayer() || this.isManager()) && this.contract <= 0;
  }),
  (entities.Item.prototype.isDuplicateLoanPlayer = function isDuplicateLoanPlayer() {
    return (
      this.isValid() && this.isPlayer() && this.isDuplicate() && this.isLoaned()
    );
  }),
  (entities.Item.prototype.getAttribute = function getAttribute(e, t) {
    var i = this._attributes[e] || 0;
    return (
      this.hasTraining() &&
        !t &&
        (i = this._modifyAttribute(e, parseInt(i, 10))),
      i
    );
  }),
  (entities.Item.prototype.getAttributes = function getAttributes() {
    var e = this.isPlayer() ? this._attributes : [];
    return (
      this.hasTraining() &&
        (e = e.map(function(e, t) {
          return this._modifyAttribute(t, parseInt(e, 10));
        }, this)),
      e
    );
  }),
  (entities.Item.prototype.getStats = function getStats() {
    return this.isPlayer() ? this._stats : [];
  }),
  (entities.Item.prototype.getGamesPlayed = function getGamesPlayed() {
    return this.isPlayer() ? this._stats[0] : 0;
  }),
  (entities.Item.prototype.getGoals = function getGoals() {
    return this.isPlayer() ? this._stats[1] : 0;
  }),
  (entities.Item.prototype.getYellowCards = function getYellowCards() {
    return this.isPlayer() ? this._stats[2] : 0;
  }),
  (entities.Item.prototype.getRedCards = function getRedCards() {
    return this.isPlayer() ? this._stats[3] : 0;
  }),
  (entities.Item.prototype.getCurrentRedCards = function getCurrentRedCards() {
    return this.isPlayer() ? this._stats[4] : 0;
  }),
  (entities.Item.prototype.getLifetimeStats = function getLifetimeStats() {
    return this.isPlayer() ? this._lifetimeStats : [];
  }),
  (entities.Item.prototype.getLoyaltyRequiredGames = function getLoyaltyRequiredGames() {
    return entities.Item.LOYALTY_REQUIRED_GAMES;
  }),
  (entities.Item.prototype.getTotalGamesPlayed = function getTotalGamesPlayed() {
    return this.isPlayer() ? this._lifetimeStats[0] : 0;
  }),
  (entities.Item.prototype.getTotalGoals = function getTotalGoals() {
    return this.isPlayer() ? this._lifetimeStats[1] : 0;
  }),
  (entities.Item.prototype.getTotalYellowCards = function getTotalYellowCards() {
    return this.isPlayer() ? this._lifetimeStats[2] : 0;
  }),
  (entities.Item.prototype.getTotalRedCards = function getTotalRedCards() {
    return this.isPlayer() ? this._lifetimeStats[3] : 0;
  }),
  (entities.Item.prototype.isAttributeBoosted = function isAttributeBoosted(e) {
    return (
      this.hasTraining() &&
      (this._trainingItem.isAllAttributeTraining() ||
        this._trainingItem.getStaticData().trainedAttribute === e)
    );
  }),
  (entities.Item.prototype._modifyAttribute = function _modifyAttribute(e, t) {
    if (this.isAttributeBoosted(e)) {
      var i = this._trainingItem.getStaticData(),
        s = i.amount;
      return (
        this._trainingItem.isPlayerTraining()
          ? (s += Math.floor(
              gStaffStatsModel.getPlayerAttribBoost(e) * i.amount
            ))
          : this._trainingItem.isGKTraining() &&
            (s += Math.floor(gStaffStatsModel.getGKAttribBoost(e) * i.amount)),
        Math.min(t + s, 99)
      );
    }
    return t;
  }),
  (entities.Item.prototype.isGK = function isGK() {
    return 0 === this.preferredPosition;
  }),
  (entities.Item.prototype.isContract = function isContract() {
    return this.type === enums.ItemType.CONTRACT;
  }),
  (entities.Item.prototype.isPlayerContract = function isPlayerContract() {
    return (
      this.isContract() &&
      this._assetId === enums.ItemCardAssetId.CONTRACT_PLAYER
    );
  }),
  (entities.Item.prototype.isManagerContract = function isManagerContract() {
    return (
      this.isContract() &&
      this._assetId === enums.ItemCardAssetId.CONTRACT_MANAGER
    );
  }),
  (entities.Item.prototype.isTraining = function isTraining() {
    return this.type === enums.ItemType.TRAINING;
  }),
  (entities.Item.prototype.isGKTraining = function isGKTraining() {
    return (
      this.isTraining() && this._assetId === enums.ItemCardAssetId.TRAINING_GK
    );
  }),
  (entities.Item.prototype.isPlayerTraining = function isPlayerTraining() {
    return (
      this.isTraining() &&
      this._assetId === enums.ItemCardAssetId.TRAINING_PLAYER
    );
  }),
  (entities.Item.prototype.isAllAttributeTraining = function isAllAttributeTraining() {
    return (
      this.isTraining() &&
      (this.subtype === enums.ItemSubType.TRAINING_GK_ALL ||
        this.subtype === enums.ItemSubType.TRAINING_PLAYER_ALL)
    );
  }),
  (entities.Item.prototype.isPlayerPositionModifier = function isPlayerPositionModifier() {
    return (
      this.isTraining() &&
      this._assetId === enums.ItemCardAssetId.POSITION_MODIFIER
    );
  }),
  (entities.Item.prototype.isStyleModifier = function isStyleModifier() {
    return (
      this.isTraining() &&
      (this._assetId === enums.ItemCardAssetId.PLAYSTYLE_PLAYER ||
        this._assetId === enums.ItemCardAssetId.PLAYSTYLE_GK)
    );
  }),
  (entities.Item.prototype.isPlayerStyleModifier = function isPlayerStyleModifier() {
    return (
      this.isTraining() &&
      this._assetId === enums.ItemCardAssetId.PLAYSTYLE_PLAYER
    );
  }),
  (entities.Item.prototype.isGKStyleModifier = function isGKStyleModifier() {
    return (
      this.isTraining() && this._assetId === enums.ItemCardAssetId.PLAYSTYLE_GK
    );
  }),
  (entities.Item.prototype.isManagerLeagueModifier = function isManagerLeagueModifier() {
    return (
      this.isTraining() &&
      this._assetId === enums.ItemCardAssetId.MANAGER_LEAGUE
    );
  }),
  (entities.Item.prototype.isManagerConsumable = function isManagerConsumable() {
    return this.isManagerLeagueModifier() || this.isManagerContract();
  }),
  (entities.Item.prototype.isHealth = function isHealth() {
    return this.type === enums.ItemType.HEALTH;
  }),
  (entities.Item.prototype.isInjuryHealing = function isInjuryHealing() {
    return this.isHealth() && this._assetId === enums.ItemCardAssetId.HEALING;
  }),
  (entities.Item.prototype.isFitness = function isFitness() {
    return (
      this.isHealth() &&
      (this._assetId === enums.ItemCardAssetId.FITNESS_PLAYER ||
        this._assetId === enums.ItemCardAssetId.FITNESS_TEAM)
    );
  }),
  (entities.Item.prototype.isPlayerFitness = function isPlayerFitness() {
    return (
      this.isHealth() && this._assetId === enums.ItemCardAssetId.FITNESS_PLAYER
    );
  }),
  (entities.Item.prototype.isTeamFitness = function isTeamFitness() {
    return (
      this.isHealth() && this._assetId === enums.ItemCardAssetId.FITNESS_TEAM
    );
  }),
  (entities.Item.prototype.isConsumable = function isConsumable() {
    return this.isContract() || this.isTraining() || this.isHealth();
  }),
  (entities.Item.prototype.isClubConsumable = function isClubConsumable() {
    return this.isConsumable() && this.pile === enums.FUTItemPile.CLUB;
  }),
  (entities.Item.prototype.isBanner = function isBanner() {
    return this.type === enums.ItemType.BANNER;
  }),
  (entities.Item.prototype.isCelebration = function isCelebration() {
    return this.type === enums.ItemType.CELEBRATION;
  }),
  (entities.Item.prototype.isTifo = function isTifo() {
    return this.type === enums.ItemType.TIFO;
  }),
  (entities.Item.prototype.isCustomItem = function isCustomItem() {
    return this.isBanner() || this.isCelebration() || this.isTifo();
  }),
  (entities.Item.prototype.isBadge = function isBadge() {
    return this.type === enums.ItemType.BADGE;
  }),
  (entities.Item.prototype.isBall = function isBall() {
    return this.type === enums.ItemType.BALL;
  }),
  (entities.Item.prototype.isKit = function isKit() {
    return this.type === enums.ItemType.KIT;
  }),
  (entities.Item.prototype.isStadium = function isStadium() {
    return this.type === enums.ItemType.STADIUM;
  }),
  (entities.Item.prototype.isClubItem = function isClubItem() {
    return (
      this.isCustomItem() ||
      this.isBadge() ||
      this.isBall() ||
      this.isKit() ||
      this.isStadium()
    );
  }),
  (entities.Item.prototype.isActiveBanner = function isActiveBanner() {
    return this.isBanner() && this.state === enums.ItemState.ACTIVE_BANNER;
  }),
  (entities.Item.prototype.isActiveCelebration = function isActiveCelebration() {
    return (
      this.isCelebration() && this.state === enums.ItemState.ACTIVE_CELEBRATION
    );
  }),
  (entities.Item.prototype.isActiveTifo = function isActiveTifo() {
    return this.isTifo() && this.state === enums.ItemState.ACTIVE_TIFO;
  }),
  (entities.Item.prototype.isActiveCustomItem = function isActiveCustomItem() {
    return (
      this.isActiveBanner() || this.isActiveCelebration() || this.isActiveTifo()
    );
  }),
  (entities.Item.prototype.isActiveBall = function isActiveBall() {
    return this.isBall() && this.state === enums.ItemState.ACTIVE_BALL;
  }),
  (entities.Item.prototype.isActiveBadge = function isActiveBadge() {
    return this.isBadge() && this.state === enums.ItemState.ACTIVE_BADGE;
  }),
  (entities.Item.prototype.isActiveAwayKit = function isActiveAwayKit() {
    return this.isKit() && this.state === enums.ItemState.ACTIVE_AWAY_KIT;
  }),
  (entities.Item.prototype.isActiveHomeKit = function isActiveHomeKit() {
    return this.isKit() && this.state === enums.ItemState.ACTIVE_HOME_KIT;
  }),
  (entities.Item.prototype.isActiveStadium = function isActiveStadium() {
    return this.isStadium() && this.state === enums.ItemState.ACTIVE_STADIUM;
  }),
  (entities.Item.prototype.isActiveClubItem = function isActiveClubItem() {
    return (
      this.isActiveCustomItem() ||
      this.isActiveBall() ||
      this.isActiveBadge() ||
      this.isActiveAwayKit() ||
      this.isActiveHomeKit() ||
      this.isActiveStadium()
    );
  }),
  (entities.Item.prototype.isMiscItem = function isMiscItem() {
    return this.type === enums.ItemType.MISC;
  }),
  (entities.Item.prototype.isFreeCoins = function isFreeCoins() {
    return this.isMiscItem() && this.subtype === enums.ItemSubType.FREE_COINS;
  }),
  (entities.Item.prototype.isCoinBoost = function isCoinBoost() {
    return this.isMiscItem() && this.subtype === enums.ItemSubType.COIN_BOOST;
  }),
  (entities.Item.prototype.isFreePack = function isFreePack() {
    return this.isMiscItem() && this.subtype === enums.ItemSubType.FREE_PACK;
  }),
  (entities.Item.prototype.isDraftToken = function isDraftToken() {
    return this.isMiscItem() && this.subtype === enums.ItemSubType.DRAFT_TOKEN;
  }),
  (entities.Item.prototype.isPlayerPickItem = function isPlayerPickItem() {
    return (
      this.isMiscItem() && this.subtype === enums.ItemSubType.PLAYER_PICK_ITEM
    );
  }),
  (entities.Item.prototype.isCharityItem = function isCharityItem() {
    return (
      this.getMaskedResourceId() === entities.Item.DANNY_MILLER_CHARITY_ID ||
      this.getMaskedResourceId() === entities.Item.KENTON_CHARITY_ID
    );
  }),
  (entities.Item.prototype.isCommon = function isCommon() {
    return this.rareflag === entities.Item.Rarity.NONE;
  }),
  (entities.Item.prototype.isRare = function isRare() {
    return this.rareflag === entities.Item.Rarity.RARE;
  }),
  (entities.Item.prototype.isSpecial = function isSpecial() {
    return !this.isCommon() && !this.isRare();
  }),
  (entities.Item.prototype.isLegend = function isLegend() {
    return (
      this.rareflag === entities.Item.Rarity.ICON ||
      this.rareflag === entities.Item.Rarity.PRIMEICON
    );
  }),
  (entities.Item.isStoryMode = function isStoryMode(e) {
    return (
      entities.Item.isAlex(e) ||
      entities.Item.isJim(e) ||
      entities.Item.isDanny(e)
    );
  }),
  (entities.Item.isAlex = function isAlex(e) {
    return e >= ALEX_HUNTER_MIN_ID && e <= ALEX_HUNTER_MAX_ID;
  }),
  (entities.Item.isJim = function isJim(e) {
    return e >= JIM_HUNTER_MIN_ID && e <= JIM_HUNTER_MAX_ID;
  }),
  (entities.Item.isDanny = function isDanny(e) {
    return e >= DANNY_WILLIAMS_MIN_ID && e <= DANNY_WILLIAMS_MAX_ID;
  }),
  (entities.Item.prototype.belongsToGroup = function belongsToGroup(e) {
    return -1 < this.groups.indexOf(e);
  }),
  (entities.Item.prototype.hasQualityTiers = function hasQualityTiers() {
    return this.hasLevels;
  }),
  (entities.Item.prototype.isBronzeRating = function isBronzeRating() {
    return this.rating <= 64;
  }),
  (entities.Item.prototype.isSilverRating = function isSilverRating() {
    return this.rating <= 74 && 64 < this.rating;
  }),
  (entities.Item.prototype.isGoldRating = function isGoldRating() {
    return 74 < this.rating;
  }),
  (entities.Item.prototype.prefersDefensePosition = function prefersDefensePosition() {
    return (
      this.isPlayer() &&
      this.preferredPosition >= enums.PlayerPositionsAsInts.RWB &&
      this.preferredPosition <= enums.PlayerPositionsAsInts.LWB
    );
  }),
  (entities.Item.prototype.prefersMidfieldPosition = function prefersMidfieldPosition() {
    return (
      this.isPlayer() &&
      this.preferredPosition >= enums.PlayerPositionsAsInts.RDM &&
      this.preferredPosition <= enums.PlayerPositionsAsInts.LAM
    );
  }),
  (entities.Item.prototype.prefersAttackerPosition = function prefersAttackerPosition() {
    return (
      this.isPlayer() &&
      this.preferredPosition >= enums.PlayerPositionsAsInts.RF
    );
  }),
  (entities.Item.prototype.compareTo = function compareTo(e) {
    var t = this.getAuctionData(),
      i = e.getAuctionData();
    return t.isValid() && i.isValid() ? t.compareTo(i) : this.id === e.id;
  }),
  (entities.Item.prototype.compareResourceTo = function compareResourceTo(
    e,
    t
  ) {
    return e instanceof entities.Item
      ? t
        ? this.resourceId === e.resourceId
        : this.isLegend() && e.isLegend() && 0 < this.iconId && 0 < e.iconId
        ? this.iconId === e.iconId
        : this.getMaskedResourceId() === e.getMaskedResourceId()
      : (utils.Debug.Assert(
          !1,
          '[entities.Item::compareResourceTo] Parameter expected a valid item entity.'
        ),
        !1);
  }),
  (entities.Item.prototype.setItemPriceLimits = function setItemPriceLimits(e) {
    this._itemPriceLimits = e;
  }),
  (entities.Item.prototype.hasPriceLimits = function hasPriceLimits() {
    return null !== this._itemPriceLimits;
  }),
  (entities.Item.prototype.getPriceLimits = function getPriceLimits() {
    return this._itemPriceLimits;
  }),
  (entities.Item.prototype.increaseStackCount = function increaseStackCount(e) {
    return (
      (e = e || 1),
      (this.stackCount = this.stackCount + e),
      this._updateUntradeableState(),
      this.stackCount
    );
  }),
  (entities.Item.prototype.decreaseStackCount = function decreaseStackCount(e) {
    if (((e = e || 1), this.stackCount >= e)) {
      var t = this.stackCount - this.untradeableCount;
      0 < this.untradeableCount &&
        t < e &&
        (this.untradeableCount = this.untradeableCount + (t - e)),
        (this.stackCount -= e);
    } else
      (this.stackCount = 0), this.untradeable && (this.untradeableCount = 0);
    return (
      this._updateUntradeableState(),
      this.untradeable && (this.discardValue = 0),
      this.stackCount
    );
  }),
  (entities.Item.prototype._updateUntradeableState = function _updateUntradeableState() {
    this.untradeable =
      0 < this.untradeableCount && this.stackCount <= this.untradeableCount;
  }),
  (entities.Item.prototype.compareDream = function compareDream(e) {
    return e instanceof entities.Item
      ? this.getMaskedResourceId() === e.getMaskedResourceId() &&
          this.concept !== e.concept
      : (utils.Debug.Assert(
          !1,
          '[entities.Item::compareToDream] Parameter expected a valid item entity.'
        ),
        !1);
  }),
  (entities.Item.prototype.compareType = function compareType(e) {
    return e instanceof entities.Item
      ? this.type === e.type
      : (utils.Debug.Assert(
          !1,
          '[entities.Item::compareType] Parameter expected a valid item entity.'
        ),
        !1);
  }),
  (entities.Item.prototype.canApplyTo = function canApplyTo(e) {
    if (!this.isConsumable() || e.isConsumable()) return !1;
    var t = this.getStaticData();
    if (this.isPlayerStyleModifier())
      return e.isPlayer() && !e.isGK() && e.playStyle !== this.subtype;
    if (this.isGKStyleModifier())
      return e.isGK() && e.playStyle !== this.subtype;
    if (this.isManagerLeagueModifier())
      return e.isManager() && e.leagueId !== this.leagueId;
    if (this.isPlayerTraining()) return e.isPlayer() && !e.isGK();
    if (this.isGKTraining()) return e.isPlayer() && e.isGK();
    if (this.isPlayerContract())
      return e.isPlayer() && !e.isLoaned() && e.contract < 99;
    if (this.isManagerContract()) return e.isManager() && e.contract < 99;
    if (this.isPlayerPositionModifier()) {
      var i = repositories.Squad.getPosition(e.preferredPosition);
      return !!i && i.getTypeName() === t.trainPosFrom;
    }
    return this.isFitness()
      ? e.isPlayer() && (this.isTeamFitness() || e.fitness < 99)
      : !!this.isInjuryHealing() &&
          (e.isInjured() && this._canApplyToInjury(e.injuryType));
  }),
  (entities.Item.prototype._canApplyToInjury = function _canApplyToInjury(e) {
    if (!this.isInjuryHealing()) return !1;
    switch (this.subtype) {
      case enums.ItemSubType.HEALING_HEAD:
        return e === enums.PlayerInjury.HEAD;
      case enums.ItemSubType.HEALING_SHOULDER:
        return e === enums.PlayerInjury.SHOULDER;
      case enums.ItemSubType.HEALING_ARM:
        return e === enums.PlayerInjury.ARM;
      case enums.ItemSubType.HEALING_BACK:
        return e === enums.PlayerInjury.BACK;
      case enums.ItemSubType.HEALING_HIP:
        return e === enums.PlayerInjury.HIP;
      case enums.ItemSubType.HEALING_LEG:
        return e === enums.PlayerInjury.LEG;
      case enums.ItemSubType.HEALING_FOOT:
        return e === enums.PlayerInjury.FOOT;
      case enums.ItemSubType.HEALING_ALL:
        return !0;
    }
    return !1;
  }),
  (entities.Item.DANNY_MILLER_CHARITY_ID = 227904),
  (entities.Item.KENTON_CHARITY_ID = 235430),
  (entities.Item.LOYALTY_REQUIRED_GAMES = 10),
  (entities.CustomBrickItem = function FUTCustomBrickItem() {
    entities.Item.call(this, enums.ItemType.PLAYER);
  }),
  utils.JS.inherits(entities.CustomBrickItem, entities.Item),
  (entities.CustomBrickItem.prototype.activate = function activate(e) {
    var t = new UTObservable();
    return (
      t.notify({
        success: !1,
        error: null
      }),
      t
    );
  }),
  (entities.CustomBrickItem.prototype._generateStaticData = function _generateStaticData() {
    return new transferobjects.StaticItemData();
  }),
  (entities.CustomBrickItem.prototype.update = function update(e) {}),
  (entities.CustomBrickItem.prototype.isValid = function isValid() {
    return !1;
  }),
  (entities.CustomBrickItem.prototype.isCustomBrick = function isCustomBrick() {
    return !0;
  }),
  (entities.CustomBrickItem.prototype.isInjured = function isInjured() {
    return !1;
  }),
  (entities.CustomBrickItem.prototype.hasTraining = function hasTraining() {
    return !1;
  }),
  (entities.CustomBrickItem.prototype.isSuspended = function isSuspended() {
    return !1;
  }),
  (entities.CustomBrickItem.prototype.setStaticData = function setStaticData(
    e
  ) {}),
  (entities.CustomBrickItem.prototype.setAuctionData = function setAuctionData(
    e
  ) {}),
  (entities.CustomBrickItem.prototype.setSkillMoves = function setSkillMoves(
    e
  ) {}),
  (entities.CustomBrickItem.prototype.setWeakFoot = function setWeakFoot(e) {}),
  (entities.CustomBrickItem.prototype.setOffensiveWorkRate = function setOffensiveWorkRate(
    e
  ) {}),
  (entities.CustomBrickItem.prototype.setDefensiveWorkRate = function setDefensiveWorkRate(
    e
  ) {}),
  (entities.CustomBrickItem.prototype.setPreferredFoot = function setPreferredFoot(
    e
  ) {}),
  (entities.CustomBrickItem.prototype.setMetaData = function setMetaData(e) {}),
  (entities.CustomBrickItem.prototype.getAttribute = function getAttribute(
    e,
    t
  ) {
    return 0;
  }),
  (entities.CustomBrickItem.prototype.isAttributeBoosted = function isAttributeBoosted(
    e
  ) {
    return !1;
  }),
  (entities.CustomBrickItem.prototype._modifyAttribute = function _modifyAttribute(
    e,
    t
  ) {
    return 0;
  }),
  (entities.CustomBrickItem.prototype.hasQualityTiers = function hasQualityTiers() {
    return !1;
  }),
  (entities.CustomBrickItem.prototype.compareTo = function compareTo(e) {
    return !1;
  }),
  (entities.CustomBrickItem.prototype.compareResourceTo = function compareResourceTo(
    e,
    t
  ) {
    return !1;
  }),
  (entities.CustomBrickItem.prototype.setItemPriceLimits = function setItemPriceLimits(
    e
  ) {}),
  (entities.CustomBrickItem.prototype.increaseStackCount = function increaseStackCount() {
    return 0;
  }),
  (entities.CustomBrickItem.prototype.decreaseStackCount = function decreaseStackCount() {
    return 0;
  }),
  (entities.CustomBrickItem.prototype._updateUntradeableState = function _updateUntradeableState() {}),
  (entities.CustomBrickItem.prototype.compareDream = function compareDream(e) {
    return !1;
  }),
  (entities.CustomBrickItem.prototype.canApplyTo = function canApplyTo(e) {
    return !1;
  }),
  (entities.CustomBrickItem.prototype._canApplyToInjury = function _canApplyToInjury(
    e
  ) {
    return !1;
  }),
  (entities.NullItem = function FUTNullItem() {
    entities.Item.call(this, enums.ItemType.NONE);
  }),
  utils.JS.inherits(entities.NullItem, entities.Item),
  (entities.NullItem.prototype.activate = function activate(e) {
    var t = new UTObservable();
    return (
      t.notify({
        success: !1,
        error: null
      }),
      t
    );
  }),
  (entities.NullItem.prototype.clearAuction = function clearAuction() {}),
  (entities.NullItem.prototype._generateStaticData = function _generateStaticData() {
    return new transferobjects.StaticItemData();
  }),
  (entities.NullItem.prototype.update = function update(e) {}),
  (entities.NullItem.prototype.isValid = function isValid() {
    return !1;
  }),
  (entities.NullItem.prototype.isInjured = function isInjured() {
    return !1;
  }),
  (entities.NullItem.prototype.hasTraining = function hasTraining() {
    return !1;
  }),
  (entities.NullItem.prototype.isSuspended = function isSuspended() {
    return !1;
  }),
  (entities.NullItem.prototype.setStaticData = function setStaticData(e) {}),
  (entities.NullItem.prototype.setTrainingItem = function setTrainingItem(
    e
  ) {}),
  (entities.NullItem.prototype.setAuctionData = function setAuctionData(e) {}),
  (entities.NullItem.prototype.setSkillMoves = function setSkillMoves(e) {}),
  (entities.NullItem.prototype.setWeakFoot = function setWeakFoot(e) {}),
  (entities.NullItem.prototype.setOffensiveWorkRate = function setOffensiveWorkRate(
    e
  ) {}),
  (entities.NullItem.prototype.setDefensiveWorkRate = function setDefensiveWorkRate(
    e
  ) {}),
  (entities.NullItem.prototype.setPreferredFoot = function setPreferredFoot(
    e
  ) {}),
  (entities.NullItem.prototype.setMetaData = function setMetaData(e) {}),
  (entities.NullItem.prototype.isMovable = function isMovable() {
    return !1;
  }),
  (entities.NullItem.prototype.getAttribute = function getAttribute(e, t) {
    return 0;
  }),
  (entities.NullItem.prototype.getAttributes = function getAttributes() {
    return [];
  }),
  (entities.NullItem.prototype.getStats = function getStats() {
    return [];
  }),
  (entities.NullItem.prototype.isAttributeBoosted = function isAttributeBoosted(
    e
  ) {
    return !1;
  }),
  (entities.NullItem.prototype._modifyAttribute = function _modifyAttribute(
    e,
    t
  ) {
    return 0;
  }),
  (entities.NullItem.prototype.hasQualityTiers = function hasQualityTiers() {
    return !1;
  }),
  (entities.NullItem.prototype.compareTo = function compareTo(e) {
    return !1;
  }),
  (entities.NullItem.prototype.compareResourceTo = function compareResourceTo(
    e,
    t
  ) {
    return !1;
  }),
  (entities.NullItem.prototype.setItemPriceLimits = function setItemPriceLimits(
    e
  ) {}),
  (entities.NullItem.prototype.increaseStackCount = function increaseStackCount() {
    return 0;
  }),
  (entities.NullItem.prototype.decreaseStackCount = function decreaseStackCount() {
    return 0;
  }),
  (entities.NullItem.prototype._updateUntradeableState = function _updateUntradeableState() {}),
  (entities.NullItem.prototype.compareDream = function compareDream(e) {
    return !1;
  }),
  (entities.NullItem.prototype.compareType = function compareType(e) {
    return !1;
  }),
  (entities.NullItem.prototype.canApplyTo = function canApplyTo(e) {
    return !1;
  }),
  (entities.NullItem.prototype._canApplyToInjury = function _canApplyToInjury(
    e
  ) {
    return !1;
  }),
  NamespaceManager.Register('factories'),
  (factories.Item = (function() {
    function ItemEntityFactory() {
      this._auctionFactory = new UTAuctionEntityFactory();
    }

    function _convertCardAssetIdToItemType(e) {
      switch (e) {
        case enums.ItemCardAssetId.CONTRACT_PLAYER:
        case enums.ItemCardAssetId.CONTRACT_MANAGER:
          return enums.ItemType.CONTRACT;
        case enums.ItemCardAssetId.HEALING:
        case enums.ItemCardAssetId.FITNESS_PLAYER:
        case enums.ItemCardAssetId.FITNESS_TEAM:
          return enums.ItemType.HEALTH;
        case enums.ItemCardAssetId.TRAINING_PLAYER:
        case enums.ItemCardAssetId.TRAINING_GK:
        case enums.ItemCardAssetId.MANAGER_LEAGUE:
        case enums.ItemCardAssetId.POSITION_MODIFIER:
        case enums.ItemCardAssetId.PLAYSTYLE_PLAYER:
        case enums.ItemCardAssetId.PLAYSTYLE_GK:
          return enums.ItemType.TRAINING;
      }
      return (
        utils.Debug.Assert(!1, 'Unknown cardassetid: ' + e), enums.ItemType.NONE
      );
    }

    function _normalizePayload(e, t) {
      if (
        (utils.JS.isNumber(e.rareFlag) &&
          ((e.rareflag = e.rareFlag), delete e.rareFlag),
        utils.JS.isNumber(e.teamid) && ((e.teamId = e.teamid), delete e.teamid),
        !utils.JS.isBoolean(t) || t)
      ) {
        if (e.teamId && (!utils.JS.isNumber(e.leagueId) || e.leagueId <= 0)) {
          var i = repositories.TeamConfig.getTeam(e.teamId, enums.Year.ASSET);
          e.leagueId = i ? i.league : -1;
        }
        if (e.leagueId && (!utils.JS.isNumber(e.nation) || e.nation <= 0)) {
          var s = repositories.TeamConfig.getLeague(
            e.leagueId,
            enums.Year.ASSET
          );
          e.nation = s ? s.nation : -1;
        }
      }
      return e;
    }

    function _parseItemPayload(i, e) {
      if (
        ((i.id = e.id),
        (i.resourceId = e.resourceId),
        (i.type = e.itemType),
        (i._assetId = e.cardassetid || enums.ItemCardAssetId.NONE),
        (i.subtype =
          e.cardsubtypeid ||
          (function _generateSubtype(e) {
            switch (
              (utils.Debug.Assert(
                e.isPlayer() || e.isStaff(),
                'Missing required item subtype in server payload.'
              ),
              e.type)
            ) {
              case enums.ItemType.PLAYER:
                return enums.ItemSubType.PLAYER;
              case enums.ItemType.MANAGER:
                return enums.ItemSubType.MANAGER;
              case enums.ItemType.HEAD_COACH:
                return enums.ItemSubType.HEAD_COACH;
              case enums.ItemType.GK_COACH:
                return enums.ItemSubType.GK_COACH;
              case enums.ItemType.FITNESS_COACH:
                return enums.ItemSubType.FITNESS_COACH;
              case enums.ItemType.PHYSIO:
                return enums.ItemSubType.PHYSIO;
            }
            return enums.ItemSubType.NONE;
          })(i)),
        (i.untradeable = !utils.JS.isBoolean(e.untradeable) || e.untradeable),
        (i.lastSalePrice = e.lastSalePrice || 0),
        (i.discardValue = e.discardValue || 0),
        (i.state = e.itemState),
        (i.pile = e.pile),
        (i.amount = e.amount || 0),
        (i.rating = parseInt(e.rating, 10) || 0),
        (i.teamId = e.teamId || 0),
        (i.leagueId = e.leagueId || 0),
        (i.nationId = e.nation || 0),
        (i.rareflag = e.rareflag || 0),
        (i.groups = e.groups || []),
        (i.owners = e.owners || 0),
        (i.timestamp = e.timestamp || 0),
        (i.type === enums.ItemType.KIT || i.type === enums.ItemType.BADGE) &&
          i.nationId < 1 &&
          (i.nationId = 75),
        i.type === enums.ItemType.STADIUM &&
          ((i.ballRestricted =
            !!utils.JS.isBoolean(e.ballRestricted) && e.ballRestricted),
          (i.bannerRestricted =
            !utils.JS.isBoolean(e.bannerRestricted) || e.bannerRestricted),
          (i.tifoRestricted =
            !utils.JS.isBoolean(e.tifoRestricted) || e.tifoRestricted),
          (i.tifoSupportType = e.tifoSupportType || 0),
          i.tifoSupportType !== enums.TifoSupportType.PLAYER &&
            i.tifoSupportType !== enums.TifoSupportType.BOTH &&
            (i.tifoRestricted = !0)),
        (i.stackCount = 1),
        (i.untradeableCount = i.untradeable ? 1 : 0),
        (i.isPlayer() || i.isManager()) &&
          ((i.contract = e.contract),
          (i.concept = e.dream || !1),
          (i.loans = utils.JS.isNumber(e.loans) ? e.loans : -1)),
        i.isPlayer())
      ) {
        i.concept
          ? (i.loyaltyBonus = services.Configuration.checkFeatureEnabled(
              enums.ServerFeature.CONCEPT_SQUAD_LOYALTY_BONUS_ENABLED
            ))
          : (i.loyaltyBonus = e.loyaltyBonus || 0),
          (i.fitness = e.fitness || 99),
          (i.injuryType = e.injuryType || enums.PlayerInjury.NONE),
          (i.injuryGames = e.injuryGames || 0),
          (i.training = utils.JS.isNumber(e.training) ? e.training : 0);
        var t = repositories.Squad.getPositionByUniqueName(e.preferredPosition);
        i.preferredPosition = t ? t.getId() : 0;
        var s = e.preferredPosition === enums.PlayerPositions.GK;
        if (
          ((i.playStyle =
            e.playStyle ||
            (s
              ? enums.ItemSubType.TRAINING_PLAYERSTYLE_GOALKEEPER_5
              : DEFAULT_PLAYSTYLE_ID)),
          Array.isArray(e.attributeArray)
            ? (i._attributes = e.attributeArray)
            : Array.isArray(e.attributeList) &&
              e.attributeList.forEach(function(e, t) {
                i._attributes[t] = e.value;
              }, this),
          Array.isArray(e.lifetimeStatsArray)
            ? (i._lifetimeStats = e.lifetimeStatsArray)
            : Array.isArray(e.lifetimeStats) &&
              e.lifetimeStats.forEach(function(e, t) {
                i._lifetimeStats[t] = e.value;
              }, this),
          Array.isArray(e.statsArray)
            ? (i._stats = e.statsArray)
            : Array.isArray(e.statsList) &&
              e.statsList.forEach(function(e, t) {
                i._stats[t] = e.value;
              }, this),
          i.isLegend())
        ) {
          var n = repositories.PlayerIcon.get(i.getMaskedResourceId());
          i.iconId = n ? n.iconId : 0;
        }
        services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.NEW_SERVER_PLAYER_ATTRIBUTES
        ) &&
          ((i._skillMoves = utils.JS.isNumber(e.skillmoves)
            ? e.skillmoves
            : -1),
          (i._weakFoot = e.weakfootabilitytypecode || -1),
          (i._offensiveWorkRate = utils.JS.isNumber(e.attackingworkrate)
            ? e.attackingworkrate
            : -1),
          (i._defensiveWorkRate = utils.JS.isNumber(e.defensiveworkrate)
            ? e.defensiveworkrate
            : -1),
          (i._preferredFoot = e.preferredfoot || -1));
        var o = repositories.PlayerMeta.get(i.getMaskedResourceId());
        o && i.setMetaData(o);
      }
      i._staticData.parseDynamicItemData(i, e),
        e.trainingItem && (i._trainingItem = this.createItem(e.trainingItem)),
        utils.JS.isNumber(e.marketDataMinPrice) &&
          utils.JS.isNumber(e.marketDataMaxPrice) &&
          (i._itemPriceLimits = new UTValueBandVO(
            e.marketDataMinPrice,
            e.marketDataMaxPrice
          ));
    }
    return (
      (ItemEntityFactory.prototype.createItem = function createItem(e) {
        if (!e) return new entities.NullItem();
        if (
          (e.itemType ||
            (e.itemType = e.cardassetid
              ? _convertCardAssetIdToItemType(e.cardassetid)
              : enums.ItemType.PLAYER),
          (e = _normalizePayload(e)).itemType === enums.ItemType.PLAYER)
        ) {
          var t = repositories.Item.getStaticDataByDefId(
            e.resourceId & enums.ItemMask.DATABASE
          );
          t &&
            ((e.firstName = t.firstName),
            (e.lastName = t.lastName),
            (e.knownAs = t.commonName || enums.Localization.BLANK_STR));
        }
        var i = new entities.Item(e.itemType);
        _parseItemPayload.call(this, i, e);
        var s = services.Configuration.getItemRarity(i);
        return s && (i.hasLevels = s.levels), i;
      }),
      (ItemEntityFactory.prototype.createConsumable = function createConsumable(
        e
      ) {
        if (!e) return new entities.NullItem();
        e.item.itemType ||
          (e.item.itemType = e.item.cardassetid
            ? _convertCardAssetIdToItemType(e.item.cardassetid)
            : enums.ItemType.PLAYER),
          (e.item = _normalizePayload(e.item));
        var t = new entities.Item(e.item.itemType);
        (function _parseConsumablePayload(e, t) {
          t.item.itemType || (t.item.itemType = e.type),
            _parseItemPayload.call(this, e, t.item),
            (e.discardValue = t.discardValue),
            (e.stackCount = t.count),
            (e.resourceId = t.resourceId),
            (e.untradeableCount = t.untradeableCount),
            e._updateUntradeableState();
        }.call(this, t, e));
        var i = services.Configuration.getItemRarity(t);
        return i && (t.hasLevels = i.levels), t;
      }),
      (ItemEntityFactory.prototype.createCustomBrickItem = function createItem(
        e
      ) {
        if (!e) return new entities.NullItem();
        e = _normalizePayload(e, !1);
        var t = new entities.CustomBrickItem();
        return _parseItemPayload.call(this, t, e), t;
      }),
      (ItemEntityFactory.prototype.generateItemsFromItemData = function generateItemsFromItemData(
        e,
        s
      ) {
        return e.map(function(e) {
          var t = utils.JS.isValid(e.count)
            ? this.createConsumable(e)
            : this.createItem(e);
          if (utils.JS.isValid(s)) {
            var i = utils.JS.find(s, function(e) {
              return e.itemId === t.id;
            });
            utils.JS.isValid(i) &&
              ((t.duplicateId = i.duplicateItemId),
              utils.JS.isValid(i.duplicateItemLoans) &&
                (t.duplicateItemLoans = i.duplicateItemLoans));
          }
          return t;
        }, this);
      }),
      (ItemEntityFactory.prototype.generateItemsFromAuctionData = function generateItemsFromAuctionData(
        e,
        n
      ) {
        return e.map(function(e) {
          var t = this.createItem(e.itemData),
            i = this._auctionFactory.createFromUtasObject(e);
          if (
            (t.setAuctionData(i),
            0 === t.id && (t.id = 'Trade' + i.tradeId),
            !t.isConsumable() && utils.JS.isValid(n))
          ) {
            var s = utils.JS.find(n, function(e) {
              return e.itemId === t.id;
            });
            utils.JS.isValid(s) && (t.duplicateId = s.duplicateItemId);
          }
          return t;
        }, this);
      }),
      new ItemEntityFactory()
    );
  })()),
  utils.JS.inherits(UTSquadSlotEntity, UTObject),
  (UTSquadSlotEntity.prototype.getIndex = function getIndex() {
    return this._index;
  }),
  (UTSquadSlotEntity.prototype.getItem = function getItem() {
    return this._item;
  }),
  (UTSquadSlotEntity.prototype.getKitNumber = function getKitNumber() {
    return this._kitNumber;
  }),
  (UTSquadSlotEntity.prototype.setItem = function setItem(e) {
    this._item && this._item.onDataUpdated.unobserve(this),
      (this._item = e),
      this._item.onDataUpdated.observe(this, this._eItemDataUpdated);
  }),
  (UTSquadSlotEntity.prototype.setKitNumber = function setKitNumber(e) {
    this._kitNumber = e;
  }),
  (UTSquadSlotEntity.prototype.getChemistry = function getChemistry() {
    return this._chemistry;
  }),
  (UTSquadSlotEntity.prototype.setChemistry = function setChemistry(e) {
    this._chemistry = Math.min(Math.max(e, 0), 10);
  }),
  (UTSquadSlotEntity.prototype.setPosition = function setPosition(e) {
    this._position = e;
  }),
  (UTSquadSlotEntity.prototype.getGeneralPosition = function getGeneralPosition() {
    return this._position ? this._position.getTypeId() : -1;
  }),
  (UTSquadSlotEntity.prototype.getUniquePosition = function getUniquePosition() {
    return this._position ? this._position.getId() : -1;
  }),
  (UTSquadSlotEntity.prototype.getGeneralPositionName = function getGeneralPositionName() {
    return this._position ? this._position.getTypeName() : '';
  }),
  (UTSquadSlotEntity.prototype.getUniquePositionName = function getUniquePositionName() {
    return this._position ? this._position.getName() : '';
  }),
  (UTSquadSlotEntity.prototype.setRequirement = function setRequirement(e) {
    this._requirement = e;
  }),
  (UTSquadSlotEntity.prototype.getRequirement = function getRequirement() {
    return this._requirement;
  }),
  (UTSquadSlotEntity.prototype.getManagerBonus = function getManagerBonus() {
    return this._managerBonus;
  }),
  (UTSquadSlotEntity.prototype.setManagerBonus = function setManagerBonus(e) {
    this._managerBonus = e;
  }),
  (UTSquadSlotEntity.prototype.getPositionBonus = function getPositionBonus() {
    return this._position &&
      this._item &&
      (this._item.isValid() || this.isCustomBrick())
      ? this._position.getBonus(this._item.preferredPosition)
      : 0;
  }),
  (UTSquadSlotEntity.prototype.hasChemistry = function hasChemistry() {
    return 0 < this._chemistry.get();
  }),
  (UTSquadSlotEntity.prototype.isBrick = function isBrick() {
    return this.isRegularBrick() || this.isCustomBrick();
  }),
  (UTSquadSlotEntity.prototype.isRegularBrick = function isRegularBrick() {
    return !!this._requirement && this._requirement.isRegularBrickType();
  }),
  (UTSquadSlotEntity.prototype.isCustomBrick = function isCustomBrick() {
    return !!this._requirement && this._requirement.isCustomBrickType();
  }),
  (UTSquadSlotEntity.prototype.isValid = function isValid() {
    return !!this._item && this._item.isValid();
  }),
  (UTSquadSlotEntity.prototype.compareTo = function compareTo(e) {
    return this.getIndex() === e.getIndex();
  }),
  (UTSquadSlotEntity.prototype._eItemDataUpdated = function _eItemDataUpdated(
    e,
    t,
    i
  ) {
    this.onDataUpdated.notify(this, {
      item: t
    });
  }),
  utils.JS.inherits(UTNullSquadSlotEntity, UTSquadSlotEntity),
  (UTNullSquadSlotEntity.prototype.getIndex = function getIndex() {
    return -1;
  }),
  (UTNullSquadSlotEntity.prototype.setItem = function setItem(e) {}),
  (UTNullSquadSlotEntity.prototype.setKitNumber = function setKitNumber(e) {}),
  (UTNullSquadSlotEntity.prototype.getChemistry = function getChemistry() {
    return 0;
  }),
  (UTNullSquadSlotEntity.prototype.setChemistry = function setChemistry(e) {}),
  (UTNullSquadSlotEntity.prototype.setPosition = function setPosition(e) {}),
  (UTNullSquadSlotEntity.prototype.getGeneralPosition = function getGeneralPosition() {
    return -1;
  }),
  (UTNullSquadSlotEntity.prototype.getUniquePosition = function getUniquePosition() {
    return -1;
  }),
  (UTNullSquadSlotEntity.prototype.setRequirement = function setRequirement(
    e
  ) {}),
  (UTNullSquadSlotEntity.prototype.getManagerBonus = function getManagerBonus() {
    return 0;
  }),
  (UTNullSquadSlotEntity.prototype.setManagerBonus = function setManagerBonus(
    e
  ) {}),
  (UTNullSquadSlotEntity.prototype.getPositionBonus = function getPositionBonus() {
    return 0;
  }),
  (UTNullSquadSlotEntity.prototype.hasChemistry = function hasChemistry() {
    return !1;
  }),
  (UTNullSquadSlotEntity.prototype.compareTo = function compareTo(e) {
    return !1;
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.SBCPlayerRequirement = function UTSBCPlayerRequirementDTO(
    e,
    t
  ) {
    var i;
    (this.index = e.index),
      Object.defineProperty(this, 'index', {
        writable: !1
      }),
      Object.defineProperty(this, 'playerType', {
        get: function() {
          return i;
        },
        set: function(e) {
          var t;
          for (t in enums.SBC.PLAYER_TYPE)
            if (
              enums.SBC.PLAYER_TYPE.hasOwnProperty(t) &&
              enums.SBC.PLAYER_TYPE[t] === e
            )
              return void (i = e);
          utils.Debug.Assert(
            !1,
            'Invalid playerType assignment to transferobjects.SBCPlayerRequirement'
          );
        }
      }),
      (this.playerType = e.playerType),
      (this.elgReq = t),
      Object.defineProperty(this, 'elgReq', {
        writable: !1
      });
  }),
  (transferobjects.SBCPlayerRequirement.prototype.isRegularBrickType = function isRegularBrickType() {
    return this.playerType === enums.SBC.PLAYER_TYPE.BRICK;
  }),
  (transferobjects.SBCPlayerRequirement.prototype.isCustomBrickType = function isCustomBrickType() {
    return this.playerType === enums.SBC.PLAYER_TYPE.CUSTOM_BRICK;
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.SquadPosition = function UTSquadPositionDTO(e, t) {
    (this._id = e.uniqueId),
      (this._typeId = e.typeId),
      (this._name = e.uniqueName),
      (this._typeName = e.typeName),
      (this._bonusLookup = t);
  }),
  (transferobjects.SquadPosition.prototype.getId = function getId() {
    return this._id;
  }),
  (transferobjects.SquadPosition.prototype.getTypeId = function getTypeId() {
    return this._typeId;
  }),
  (transferobjects.SquadPosition.prototype.getName = function getName() {
    return this._name;
  }),
  (transferobjects.SquadPosition.prototype.getTypeName = function getTypeName() {
    return this._typeName;
  }),
  (transferobjects.SquadPosition.prototype.getBonus = function getBonus(e) {
    return this._bonusLookup[e] || 0;
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.SquadLink = function UTSquadLinkDTO(e) {
    (this._posA = e.a), (this._posB = e.b);
  }),
  (transferobjects.SquadLink.prototype.getPositionA = function getPositionA() {
    return this._posA;
  }),
  (transferobjects.SquadLink.prototype.getPositionB = function getPositionB() {
    return this._posB;
  }),
  (transferobjects.SquadLink.prototype.containsPosition = function containsPosition(
    e
  ) {
    return e === this._posA || e === this._posB;
  }),
  (transferobjects.SquadLink.prototype.getLinkedPosition = function getLinkedPosition(
    e
  ) {
    return (
      utils.Debug.Assert(
        this.containsPosition(e),
        '[SquadLink::getLinkedPosition] Provided position not associated with chemistry link.'
      ),
      e === this._posA ? this._posB : this._posA
    );
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.SquadFormation = function UTSquadFormationDTO(e, t, i, s) {
    (this._id = e.id),
      (this._name = e.name),
      (this._displayName = services.Localization.localize(
        'global.formation.' + e.name
      )),
      (this._teamBonus = t),
      (this._positions = s),
      (this.generalPositions = e.generalPositionSlots),
      Object.defineProperty(this, 'generalPositions', {
        writable: !1
      }),
      (this.uniquePositions = e.uniquePositionSlots),
      Object.defineProperty(this, 'uniquePositions', {
        writable: !1
      }),
      (this._links = i);
  }),
  (transferobjects.SquadFormation.prototype.getId = function getId() {
    return this._id;
  }),
  (transferobjects.SquadFormation.prototype.getName = function getName() {
    return this._name;
  }),
  (transferobjects.SquadFormation.prototype.getDisplayName = function getDisplayName() {
    return this._displayName;
  }),
  (transferobjects.SquadFormation.prototype.getPositions = function getPositions() {
    return this._positions;
  }),
  (transferobjects.SquadFormation.prototype.getPosition = function getPosition(
    e
  ) {
    return this._positions[e] || null;
  }),
  (transferobjects.SquadFormation.prototype.getLinks = function getLinks() {
    return this._links;
  }),
  (transferobjects.SquadFormation.prototype.getTeamBonus = function getTeamBonus(
    e
  ) {
    return this._teamBonus[e] || 0;
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.SquadChemistryLink = function(e, t, i, s) {
    (this._posA = e),
      (this._posB = t),
      (this._chemistry = i),
      (this._isValid = s);
  }),
  (transferobjects.SquadChemistryLink.prototype.getPositionA = function getPositionA() {
    return this._posA;
  }),
  (transferobjects.SquadChemistryLink.prototype.getPositionB = function getPositionB() {
    return this._posB;
  }),
  (transferobjects.SquadChemistryLink.prototype.getChemistry = function getChemistry() {
    return this._chemistry;
  }),
  (transferobjects.SquadChemistryLink.prototype.isValid = function isValid() {
    return this._isValid;
  }),
  NamespaceManager.Register('entities'),
  (entities.Squad = function UTSquadEntity(e) {
    UTObject.call(this),
      (this.onDataUpdated = new UTObservable()),
      Object.defineProperty(this, 'onDataUpdated', {
        writable: !1,
        enumerable: !0
      }),
      (this._owner = 0),
      Object.defineProperty(this, '_owner', {
        enumerable: !1,
        writable: !0
      }),
      (this._id = -1),
      Object.defineProperty(this, '_id', {
        enumerable: !1,
        writable: !0
      }),
      (this._captain = 0),
      Object.defineProperty(this, '_captain', {
        enumerable: !1,
        writable: !0
      }),
      (this._name = ''),
      Object.defineProperty(this, '_name', {
        enumerable: !1,
        writable: !0
      }),
      (this._formation = null),
      Object.defineProperty(this, '_formation', {
        enumerable: !1,
        writable: !0
      }),
      (this._rating = 0),
      Object.defineProperty(this, '_rating', {
        enumerable: !1,
        writable: !0
      }),
      (this._chemistry = 0),
      Object.defineProperty(this, '_chemistry', {
        enumerable: !1,
        writable: !0
      }),
      (this._manager = new UTNullSquadSlotEntity()),
      Object.defineProperty(this, '_manager', {
        enumerable: !1,
        writable: !0
      }),
      (this._players = []),
      Object.defineProperty(this, '_players', {
        enumerable: !1,
        writable: !0
      }),
      (this._chemistryLinks = []),
      Object.defineProperty(this, '_chemistryLinks', {
        enumerable: !1,
        writable: !0
      }),
      (this._type = enums.SquadType.REGULAR),
      Object.defineProperty(this, '_type', {
        enumerable: !1,
        writable: !0
      }),
      (this._valid = !1),
      Object.defineProperty(this, '_valid', {
        enumerable: !1,
        writable: !0
      }),
      (this._isActive = !1),
      Object.defineProperty(this, '_isActive', {
        enumerable: !1,
        writable: !0
      }),
      (this._isTOTW = !1),
      Object.defineProperty(this, '_isTOTW', {
        enumerable: !1,
        writable: !0
      }),
      (this._isSBC = !1),
      Object.defineProperty(this, '_isSBC', {
        enumerable: !1,
        writable: !0
      }),
      (this._isShowOff = !1),
      Object.defineProperty(this, '_isShowOff', {
        enumerable: !1,
        writable: !0
      }),
      (this._timestamp = 0),
      Object.defineProperty(this, '_timestamp', {
        enumerable: !1,
        writable: !0
      }),
      (this._modified = !1),
      Object.defineProperty(this, '_modified', {
        enumerable: !1,
        writable: !0
      }),
      (this.simpleBrickIndices = []),
      (this.customBrickIndices = []),
      (this._mentalities = new UTHashTable()),
      Object.defineProperty(this, '_mentalities', {
        enumerable: !1,
        writable: !1
      }),
      (this._squadSaveDelegate = null),
      (this._squadDAO = e),
      Object.defineProperty(this, '_squadDAO', {
        enumerable: !1,
        writable: !1
      });
  }),
  utils.JS.inherits(entities.Squad, UTObject),
  (entities.Squad.TOTAL_PLAYERS_AND_MANAGER = 24),
  (entities.Squad.TOTAL_PLAYERS = 23),
  (entities.Squad.FIELD_PLAYERS = 11),
  (entities.Squad.SUB_PLAYERS = 7),
  (entities.Squad.RESERVE_PLAYERS = 5),
  (entities.Squad.MANAGER_SLOT_INDEX = 23),
  (entities.Squad.NATION_BONUS = 3),
  (entities.Squad.LEAGUE_BONUS = 3),
  (entities.Squad.CLUB_BONUS = 3),
  (entities.Squad.MANAGER_BONUS = 1),
  (entities.Squad.prototype.save = function save() {
    var i = new UTObservable();
    return (
      this._squadSaveDelegate
        ? this._squadSaveDelegate
            .save(this)
            .observe(this, function _onSquadSaveDelegateComplete(e, t) {
              e.unobserve(this),
                i.notify(t),
                t.success &&
                  (this.setCacheTimestamp(Date.now()),
                  (this._modified = !1),
                  getDefaultDispatcher().notify(
                    enums.Notification.SQUAD_SAVE,
                    this,
                    this
                  ));
            })
        : this._squadDAO
            .save(this)
            .observe(this, function _onSquadSaveComplete(e, t) {
              e.unobserve(this),
                i.notify(t),
                t.success &&
                  (this.setCacheTimestamp(Date.now()),
                  (this._modified = !1),
                  getDefaultDispatcher().notify(
                    enums.Notification.SQUAD_SAVE,
                    this,
                    this
                  ));
            }),
      i
    );
  }),
  (entities.Squad.prototype.setCacheTimestamp = function setCacheTimestamp(e) {
    this._timestamp = e;
  }),
  (entities.Squad.prototype.getOwner = function getOwner() {
    return this._owner;
  }),
  (entities.Squad.prototype.getId = function getId() {
    return this._id;
  }),
  (entities.Squad.prototype.getCaptain = function getCaptain() {
    return this._captain;
  }),
  (entities.Squad.prototype.getManager = function getManager() {
    return this._manager;
  }),
  (entities.Squad.prototype.getPlayer = function getPlayer(e) {
    return (
      utils.Debug.Assert(
        this._isValidPlayerSlot(e),
        '[Squad::getPlayer] Invalid slot value provided.'
      ),
      this.getSlot(e)
    );
  }),
  (entities.Squad.prototype.getPlayers = function getPlayers() {
    return this._players;
  }),
  (entities.Squad.prototype.getFieldPlayers = function getFieldPlayers() {
    return this._players.slice(0, entities.Squad.FIELD_PLAYERS);
  }),
  (entities.Squad.prototype.getSubPlayers = function getSubPlayers() {
    return this._players.slice(
      entities.Squad.FIELD_PLAYERS,
      entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS
    );
  }),
  (entities.Squad.prototype.getReservePlayers = function getReservePlayers() {
    return this._players.slice(
      entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS,
      entities.Squad.TOTAL_PLAYERS
    );
  }),
  (entities.Squad.prototype.getSubAndReservePlayers = function getSubAndReservePlayers() {
    return this._players.slice(
      entities.Squad.FIELD_PLAYERS,
      entities.Squad.TOTAL_PLAYERS
    );
  }),
  (entities.Squad.prototype.getFieldAndSubPlayers = function getFieldAndSubPlayers() {
    return this._players.slice(
      0,
      entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS
    );
  }),
  (entities.Squad.prototype.getPlayersByZone = function getPlayersByZone() {
    var i = {};
    return (
      this._players.forEach(function(e) {
        var t = enums.SquadPositionZones[e.getUniquePosition()];
        utils.JS.isValid(t) &&
          (i.hasOwnProperty(t) || (i[t] = []), i[t].push(e));
      }, this),
      i
    );
  }),
  (entities.Squad.prototype._getSlotByUniquePosition = function _getSlotByUniquePosition(
    t
  ) {
    var e = utils.JS.find(this.getFieldPlayers(), function(e) {
      return e.getUniquePosition() === t;
    });
    return (
      e ||
      (utils.Debug.Assert(
        !1,
        '[Squad::_getPlayerByUniqueSlotId] Unable to find a slot associated with the unique position: ' +
          t
      ),
      new UTNullSquadSlotEntity())
    );
  }),
  (entities.Squad.prototype.getSlot = function getSlot(e) {
    return utils.JS.isNumber(e)
      ? this._getSlotByIndex(e)
      : e instanceof entities.Item
      ? this._getSlotByItem(e)
      : new UTNullSquadSlotEntity();
  }),
  (entities.Squad.prototype._getSlotByIndex = function _getSlotByIndex(e) {
    return e === entities.Squad.MANAGER_SLOT_INDEX
      ? this._manager
      : this._isValidPlayerSlot(e)
      ? this._players[e]
      : new UTNullSquadSlotEntity();
  }),
  (entities.Squad.prototype._getSlotByItem = function _getSlotByItem(t) {
    return this._manager.getItem().id === t.id && t.isValid()
      ? this._manager
      : (t.isValid()
          ? utils.JS.find(this._players, function(e) {
              return e.getItem().id === t.id;
            })
          : utils.JS.find(this._players, function(e) {
              return e.getItem() === t;
            })) || new UTNullSquadSlotEntity();
  }),
  (entities.Squad.prototype.getSlots = function getSlots() {
    var e = this._filterBrickIndices(this._players);
    return this._manager && !this.isSBC() && (e = e.concat(this._manager)), e;
  }),
  (entities.Squad.prototype.getType = function getType() {
    return this._type;
  }),
  (entities.Squad.prototype.getName = function getName() {
    return this._name;
  }),
  (entities.Squad.prototype.setName = function setName(e, t) {
    (this._name = utils.TextUtils.createSquadName(e, t)),
      (this._modified = !0),
      this.onDataUpdated.notify({
        name: this._name
      });
  }),
  (entities.Squad.prototype.getFormation = function getFormation() {
    return this._formation;
  }),
  (entities.Squad.prototype.setFormation = function setFormation(e) {
    if (this._formation.getId() !== e.getId()) {
      (this._formation = e),
        this._players.forEach(function(e) {
          e.setPosition(this._formation.getPosition(e.getIndex()));
        }, this),
        this.updateChemistry();
      var t = this._mentalities.get(UTSquadMentalityEntity.TYPE.BALANCED);
      utils.Debug.Assert(
        utils.JS.isValid(t),
        'Could not find balanced tactics mentality.'
      ),
        t && t.setFormation(e),
        (this._modified = !0),
        this.onDataUpdated.notify({
          slots: this._players.slice(0, entities.Squad.FIELD_PLAYERS),
          chemistry: this.getChemistry(),
          formation: this._formation
        });
    }
  }),
  (entities.Squad.prototype.getStarRating = function getStarRating() {
    var e = this._rating,
      t = 0;
    return e <= enums.TeamStarRanges.RATING_0_0
      ? t
      : (t =
          e <= enums.TeamStarRanges.RATING_0_5
            ? 0.5
            : e <= enums.TeamStarRanges.RATING_1_0
            ? 1
            : e <= enums.TeamStarRanges.RATING_1_5
            ? 1.5
            : e <= enums.TeamStarRanges.RATING_2_0
            ? 2
            : e <= enums.TeamStarRanges.RATING_2_5
            ? 2.5
            : e <= enums.TeamStarRanges.RATING_3_0
            ? 3
            : e <= enums.TeamStarRanges.RATING_3_5
            ? 3.5
            : e <= enums.TeamStarRanges.RATING_4_0
            ? 4
            : e <= enums.TeamStarRanges.RATING_4_5
            ? 4.5
            : 5);
  }),
  (entities.Squad.prototype.getRating = function getRating() {
    return this._rating;
  }),
  (entities.Squad.prototype.getChemistry = function getChemistry() {
    return this._chemistry;
  }),
  (entities.Squad.prototype.getChemistryLinks = function getChemistryLinks() {
    return this._chemistryLinks;
  }),
  (entities.Squad.prototype.setActive = function setActive(e) {
    this._isActive !== e &&
      ((this._isActive = e),
      this.onDataUpdated.notify({
        active: this._isActive
      }));
  }),
  (entities.Squad.prototype.setTOTW = function setTOTW(e) {
    this._isTOTW = e;
  }),
  (entities.Squad.prototype.setSBC = function setSBC(e) {
    this._isSBC = e;
  }),
  (entities.Squad.prototype.setSaveDelegate = function setSaveDelegate(e) {
    this._squadSaveDelegate = e;
  }),
  (entities.Squad.prototype.setShowOff = function setShowOff(e) {
    this._isShowOff = e;
  }),
  (entities.Squad.prototype.getSlotsLinkedToPosition = function getSlotsLinkedToPosition(
    i
  ) {
    var s = this;
    return this._chemistryLinks.reduce(function(e, t) {
      return (
        t.getPositionA() === i
          ? e.push(s._getSlotByUniquePosition(t.getPositionB()))
          : t.getPositionB() === i &&
            e.push(s._getSlotByUniquePosition(t.getPositionA())),
        e
      );
    }, []);
  }),
  (entities.Squad.prototype.getBestAvailableEmptySlotIndex = function getBestAvailableEmptySlotIndex(
    s,
    n
  ) {
    var o, a;
    n = !utils.JS.isBoolean(n) || n;
    var r = 0,
      l = 0,
      c = -1;
    return (
      this.getPlayers()
        .filter(function getEmptySlots(e) {
          return !e.isValid();
        })
        .forEach(function checkIfBestSlot(e) {
          if (!(e.getIndex() < entities.Squad.FIELD_PLAYERS))
            return 0 < r ? c : e.getIndex();
          if ((e.setItemData(s), (a = e.getPositionBonus()), n)) {
            var t;
            for (t = o = 0; t < entities.Squad.FIELD_PLAYERS; ++t) {
              var i = this._players[t];
              o += this._calculateSlotChemistry(i);
            }
            (r < o || l < a) && ((r = o), (l = a), (c = e.getIndex()));
          } else r < a && ((r = a), (c = e.getIndex()));
          this._emptySlot(e);
        }, this),
      c
    );
  }),
  (entities.Squad.prototype.getManagerBonusImpact = function getManagerBonusImpact(
    t
  ) {
    var i = [];
    return (
      t.isManager() &&
        this._players.forEach(function(e) {
          0 < this._calculateManagerBonus(e.getItem(), t) &&
            i.push(e.getIndex());
        }, this),
      i
    );
  }),
  (entities.Squad.prototype._getPlayersForCounters = function _getPlayersForCounters(
    e
  ) {
    return this.getNonBrickSlots(e).filter(function(e) {
      return e.isValid();
    });
  }),
  (entities.Squad.prototype._clubCounter = function _clubCounter(e) {
    var i = {};
    return (
      this._getPlayersForCounters(e).forEach(function incrementClubCount(e) {
        var t = e.getItem().teamId;
        i[t] ? i[t].push(e.getIndex()) : (i[t] = [e.getIndex()]);
      }, this),
      i
    );
  }),
  (entities.Squad.prototype._leagueCounter = function _leagueCounter(e) {
    var i = {};
    return (
      this._getPlayersForCounters(e).forEach(function incrementLeagueCount(e) {
        var t = e.getItem().leagueId;
        i[t] ? i[t].push(e.getIndex()) : (i[t] = [e.getIndex()]);
      }, this),
      i
    );
  }),
  (entities.Squad.prototype._nationCounter = function _nationCounter(e) {
    var i = {};
    return (
      this._getPlayersForCounters(e).forEach(function incrementNationCount(e) {
        var t = e.getItem().nationId;
        i[t] ? i[t].push(e.getIndex()) : (i[t] = [e.getIndex()]);
      }, this),
      i
    );
  }),
  (entities.Squad.prototype._qualityCounter = function _qualityCounter(e) {
    var i = {};
    return (
      this._getPlayersForCounters(e).forEach(function incrementTierCount(e) {
        var t = e.getItem().getTier();
        i[t] ? i[t].push(e.getIndex()) : (i[t] = [e.getIndex()]);
      }, this),
      i
    );
  }),
  (entities.Squad.prototype._playerCountHelper = function _playerCountHelper(
    e,
    i
  ) {
    return Array.isArray(e)
      ? e.reduce(
          function(e, t) {
            return e + i.call(this, t);
          }.bind(this),
          0
        )
      : i.call(this, e);
  }),
  (entities.Squad.prototype.getNumberOfPlayersByRarity = function getNumberOfPlayersByRarity(
    e,
    t
  ) {
    return this._playerCountHelper(e, function(i) {
      return this.getNonBrickSlots(t).reduce(
        function(e, t) {
          return t.isValid() && t.getItem().rareflag === i ? ++e : e;
        }.bind(this),
        0
      );
    });
  }),
  (entities.Squad.prototype.getNumberOfPlayersByGroup = function getNumberOfPlayersByGroup(
    e,
    t
  ) {
    return this._playerCountHelper(e, function(i) {
      return this.getNonBrickSlots(t).reduce(
        function(e, t) {
          return t.isValid() && t.getItem().belongsToGroup(i) ? ++e : e;
        }.bind(this),
        0
      );
    });
  }),
  (entities.Squad.prototype.getPlayersPerQualityTier = function getPlayersPerQualityTier() {
    var i = this._qualityCounter();
    return new UTHashTable(
      Object.keys(i).reduce(function(e, t) {
        return (e[t] = i[t].length), e;
      }, {})
    );
  }),
  (entities.Squad.prototype.getSlotIndicesByQualityTier = function getSlotIndicesByQualityTier(
    e,
    t
  ) {
    return this._qualityCounter(t)[e] || [];
  }),
  (entities.Squad.prototype.getNumberOfPlayersByQualityTier = function getNumberOfPlayersByQualityTier(
    e,
    t
  ) {
    return this._playerCountHelper(e, function(i) {
      return this.getNonBrickSlots(t).reduce(
        function(e, t) {
          return t.isValid() && t.getItem().getTier() === i ? ++e : e;
        }.bind(this),
        0
      );
    });
  }),
  (entities.Squad.prototype.getPlayersPerLeague = function getPlayersPerLeague() {
    var i = this._leagueCounter();
    return new UTHashTable(
      Object.keys(i).reduce(function(e, t) {
        return (e[t] = i[t].length), e;
      }, {})
    );
  }),
  (entities.Squad.prototype.getPopularLeagues = function getPopularLeagues() {
    return utils.JS.getSortedKeys(this._leagueCounter());
  }),
  (entities.Squad.prototype.getSlotIndicesByLeague = function getSlotIndicesByLeague(
    e,
    t
  ) {
    return this._leagueCounter(t)[e] || [];
  }),
  (entities.Squad.prototype.getNumberOfPlayersByLeague = function getNumberOfPlayersByLeague(
    e,
    t
  ) {
    return this._playerCountHelper(e, function(i) {
      return this.getNonBrickSlots(t).reduce(
        function(e, t) {
          return t.isValid() && t.getItem().leagueId === i ? ++e : e;
        }.bind(this),
        0
      );
    });
  }),
  (entities.Squad.prototype.getPopularClubs = function getPopularClubs() {
    return utils.JS.getSortedKeys(this._clubCounter());
  }),
  (entities.Squad.prototype.getPlayersPerClub = function getPlayersPerClub() {
    var i = this._clubCounter();
    return new UTHashTable(
      Object.keys(i).reduce(function(e, t) {
        return (e[t] = i[t].length), e;
      }, {})
    );
  }),
  (entities.Squad.prototype.getSlotIndicesByClub = function getSlotIndicesByClub(
    e,
    t
  ) {
    return this._clubCounter(t)[e] || [];
  }),
  (entities.Squad.prototype.getNumberOfPlayersByClub = function getNumberOfPlayersByClub(
    e,
    t
  ) {
    return this._playerCountHelper(e, function(i) {
      return this.getNonBrickSlots(t).reduce(
        function(e, t) {
          return t.isValid() && t.getItem().teamId === i ? ++e : e;
        }.bind(this),
        0
      );
    });
  }),
  (entities.Squad.prototype.getPopularNationalities = function getPopularNationalities() {
    return utils.JS.getSortedKeys(this._nationCounter());
  }),
  (entities.Squad.prototype.getPlayersPerNation = function getPlayersPerNation() {
    var i = this._nationCounter();
    return new UTHashTable(
      Object.keys(i).reduce(function(e, t) {
        return (e[t] = i[t].length), e;
      }, {})
    );
  }),
  (entities.Squad.prototype.getSlotIndicesByNation = function getSlotIndicesByNation(
    e,
    t
  ) {
    return this._nationCounter(t)[e] || [];
  }),
  (entities.Squad.prototype.getNumberOfPlayersByNation = function getNumberOfPlayersByNation(
    e,
    t
  ) {
    return this._playerCountHelper(e, function(i) {
      return this.getNonBrickSlots(t).reduce(
        function(e, t) {
          return t.isValid() && t.getItem().nationId === i ? ++e : e;
        }.bind(this),
        0
      );
    });
  }),
  (entities.Squad.prototype.getNumberOfLegends = function getNumberOfLegends() {
    return this.getNonBrickSlots().reduce(function(e, t) {
      return t.getItem().isLegend() ? ++e : e;
    }, 0);
  }),
  (entities.Squad.prototype.getBestPlayerByZone = function getBestPlayerByZone(
    e
  ) {
    var t = this.getPlayersByZone()[e],
      i = null;
    return (
      t.forEach(function getBestPlayer(e) {
        (!i || i.getItem().rating < e.getItem().rating) && (i = e);
      }, this),
      i
    );
  }),
  (entities.Squad.prototype.getAverageRatingByZone = function getAverageRatingByZone(
    e
  ) {
    var t = this.getPlayersByZone()[e],
      i = 0;
    if (t.length < 1) return i;
    return (
      t.forEach(function incrementRatingTotal(e) {
        i += e.getItem().rating;
      }, this),
      Math.floor(i / t.length)
    );
  }),
  (entities.Squad.prototype.replaceDreamItem = function replaceDreamItem(t) {
    var e = utils.JS.find(this.getPlayers(), function(e) {
      return e.getItem().compareDream(t);
    });
    e && this._addItemToSlot(e, t);
  }),
  (entities.Squad.prototype._calculateChemistry = function _calculateChemistry() {
    var t = 0;
    this.getFieldPlayers().forEach(function(e) {
      this._isSlotChemCalculable(e) && (t += e.getChemistry());
    }, this),
      (this._chemistry = Math.min(Math.max(Math.round(t), 0), 100));
  }),
  (entities.Squad.prototype._calculateRating = function _calculateRating() {
    var e = this.isSBC()
        ? this.getFieldPlayers()
        : this.getFieldAndSubPlayers(),
      t = services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.SQUAD_RATING_FLOAT_CALCULATION_ENABLED
      ),
      s = 0,
      n = entities.Squad.FIELD_PLAYERS;
    if (
      (e.forEach(function(e, t) {
        var i = e.getItem();
        i.isValid() &&
          ((s += i.rating), t >= entities.Squad.FIELD_PLAYERS && n++);
      }),
      t)
    ) {
      var o = s,
        a = o;
      0 < n && (o /= n),
        (o = Math.min(o, 99)),
        e.forEach(function(e, t) {
          var i = e.getItem();
          if (i.isValid()) {
            if (i.rating <= o) return;
            t < entities.Squad.FIELD_PLAYERS
              ? (a += i.rating - o)
              : (a += 0.5 * (i.rating - o));
          }
        }),
        (s = Math.round(a));
    } else {
      var r = Math.min(Math.floor(s / n), 99);
      e.forEach(function(e, t) {
        var i = e.getItem();
        if (i.isValid()) {
          if (i.rating <= r) return;
          t < entities.Squad.FIELD_PLAYERS
            ? (s += i.rating - r)
            : (s += Math.floor(0.5 * (i.rating - r)));
        }
      });
    }
    this._rating = Math.min(Math.max(Math.floor(s / n), 0), 99);
  }),
  (entities.Squad.prototype._calculateLinkChemistry = function _calculateLinkChemistry(
    e,
    t
  ) {
    var i = 0;
    if (this._isSlotChemCalculable(e) && this._isSlotChemCalculable(t)) {
      var s = e.getItem(),
        n = t.getItem(),
        o =
          s.isLegend() ||
          s.isCharityItem() ||
          n.isLegend() ||
          n.isCharityItem();
      0 < s.nationId &&
        s.nationId === n.nationId &&
        (i += entities.Squad.NATION_BONUS),
        0 < s.teamId &&
          s.teamId === n.teamId &&
          (i += entities.Squad.CLUB_BONUS),
        (o || (0 < s.leagueId && s.leagueId === n.leagueId)) &&
          (i += entities.Squad.LEAGUE_BONUS);
    }
    return i;
  }),
  (entities.Squad.prototype.updateChemistry = function updateChemistry() {
    this._updateChemistryLinks(),
      this._players.forEach(this._calculateSlotChemistry, this),
      this._calculateChemistry();
  }),
  (entities.Squad.prototype._updateChemistryLinks = function _updateChemistryLinks() {
    this._players.length < 1 ||
      ((this._chemistryLinks = []),
      this._formation.getLinks().forEach(function(e) {
        var t = e.getPositionA(),
          i = e.getPositionB(),
          s = this._getSlotByUniquePosition(t),
          n = this._getSlotByUniquePosition(i),
          o = 0,
          a = this._isSlotChemCalculable(s) && this._isSlotChemCalculable(n);
        a && (o = this._calculateLinkChemistry(s, n)),
          this._chemistryLinks.push(
            new transferobjects.SquadChemistryLink(t, i, o, a)
          );
      }, this));
  }),
  (entities.Squad.prototype._calculateSlotChemistry = function _calculateSlotChemistry(
    e
  ) {
    var t = 0;
    if (this._isSlotChemCalculable(e)) {
      var i = e.getItem();
      if (
        ((t += Math.round(
          e.getPositionBonus() * this._calculateConnectionBonus(e)
        )),
        this.hasManager())
      ) {
        var s = this._calculateManagerBonus(i, this._manager.getItem());
        (t += s), e.setManagerBonus(s);
      }
      t += i.loyaltyBonus;
    }
    e.setChemistry(t);
  }),
  (entities.Squad.prototype._calculateManagerBonus = function _calculateManagerBonus(
    e,
    t
  ) {
    return (
      utils.Debug.Assert(
        e.isPlayer(),
        '[Squad::_calculateManagerBonus] First parameter expected to be a player item.'
      ),
      utils.Debug.Assert(
        t.isManager(),
        '[Squad::_calculateManagerBonus] Second parameter expected to be a manager item.'
      ),
      e.nationId === t.nationId || e.leagueId === t.leagueId
        ? entities.Squad.MANAGER_BONUS
        : 0
    );
  }),
  (entities.Squad.prototype._calculateConnectionBonus = function _calculateConnectionBonus(
    i
  ) {
    if (
      i.getIndex() >= entities.Squad.FIELD_PLAYERS ||
      !this._isSlotChemCalculable(i)
    )
      return 0;
    var s = 0,
      n = 0;
    this._chemistryLinks.forEach(function(e) {
      var t = i.getUniquePosition();
      !e.isValid() ||
        (e.getPositionA() !== t && e.getPositionB() !== t) ||
        ((s += e.getChemistry()), ++n);
    }, this);
    var e = 0;
    return (
      5 <= (s = 0 < n ? s / n : 0)
        ? (e = 3)
        : 3 <= s
        ? (e = 2)
        : 1 <= s && (e = 1),
      this._formation.getTeamBonus(e)
    );
  }),
  (entities.Squad.prototype.isCacheExpired = function isCacheExpired() {
    return Date.now() > this._timestamp + 3e5;
  }),
  (entities.Squad.prototype.isModified = function isModified() {
    return this._modified;
  }),
  (entities.Squad.prototype.isDream = function isDream() {
    return this._type === enums.SquadType.DREAM;
  }),
  (entities.Squad.prototype.isValid = function isValid() {
    return this._valid;
  }),
  (entities.Squad.prototype.isActive = function isActive() {
    return this._isActive;
  }),
  (entities.Squad.prototype.isTOTW = function isTOTW() {
    return this._isTOTW;
  }),
  (entities.Squad.prototype.isSBC = function isSBC() {
    return this._isSBC;
  }),
  (entities.Squad.prototype.isShowOff = function isShowOff() {
    return this._isShowOff;
  }),
  (entities.Squad.prototype.isStartingElevenComplete = function isStartingElevenComplete() {
    return this._slotsHaveValidPlayers(0, entities.Squad.FIELD_PLAYERS);
  }),
  (entities.Squad.prototype.areSubsComplete = function areSubsComplete() {
    return this._slotsHaveValidPlayers(
      entities.Squad.FIELD_PLAYERS,
      entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS
    );
  }),
  (entities.Squad.prototype.areReservesComplete = function areReservesComplete() {
    return this._slotsHaveValidPlayers(
      entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS,
      entities.Squad.MANAGER_SLOT_INDEX
    );
  }),
  (entities.Squad.prototype.isValidForTOTW = function isValidForTOTW() {
    return this._slotsHaveValidPlayers(
      0,
      entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS
    );
  }),
  (entities.Squad.prototype.isSquadFull = function isSquadFull() {
    var e = utils.JS.find(this.getNonBrickSlots(), function(e) {
      return !e.isValid();
    });
    return !utils.JS.isValid(e);
  }),
  (entities.Squad.prototype.isSquadEmpty = function isSquadEmpty() {
    var e = utils.JS.find(this._players, function(e) {
      return e.isValid();
    });
    return !utils.JS.isValid(e);
  }),
  (entities.Squad.prototype.isSquadLoaded = function isSquadLoaded() {
    if (this._manager.getItem() instanceof entities.NullItem) return !1;
    var e = utils.JS.find(this._players, function(e) {
      return !(e.getItem() instanceof entities.NullItem);
    });
    return utils.JS.isValid(e);
  }),
  (entities.Squad.prototype._slotsHaveValidPlayers = function _slotsHaveValidPlayers(
    e,
    t
  ) {
    var i;
    for (i = e; i < t; ++i) if (!this._getSlotByIndex(i).isValid()) return !1;
    return !0;
  }),
  (entities.Squad.prototype._isValidPlayerSlot = function _isValidPlayerSlot(
    e
  ) {
    return 0 <= e && e < entities.Squad.MANAGER_SLOT_INDEX;
  }),
  (entities.Squad.prototype._isValidSlotIndex = function _isValidSlotIndex(e) {
    return 0 <= e && e <= entities.Squad.MANAGER_SLOT_INDEX;
  }),
  (entities.Squad.prototype.containsDreamItem = function containsDreamItem(e) {
    if (this.isDream() && 0 !== e.getMaskedResourceId()) {
      var t,
        i = this._players.length;
      for (t = 0; t < i; t++) {
        var s = this._players[t];
        if (s.getItem().compareDream(e)) return s.getIndex();
      }
    }
    return -1;
  }),
  (entities.Squad.prototype.containsVariationOfCard = function containsVariationOfCard(
    e
  ) {
    if (0 !== e.getMaskedResourceId()) {
      var t,
        i = this._players.length;
      for (t = 0; t < i; t++) {
        if (this._players[t].getItem().compareResourceTo(e)) return !0;
      }
    }
    return !1;
  }),
  (entities.Squad.prototype.containsItem = function containsItem(e, t) {
    if (0 === e.resourceId) return !1;
    if (e.resourceId === this._manager.getItem().resourceId) return !0;
    for (var i = this._players.length; 0 < i--; ) {
      var s = this._players[i].getItem();
      if (
        e.compareResourceTo(s, t) &&
        (e.concept || e.pile === s.pile) &&
        (!t || e.isLoaned() === s.isLoaned())
      )
        return !0;
    }
    return !1;
  }),
  (entities.Squad.prototype.hasManager = function hasManager() {
    return this._manager.isValid();
  }),
  (entities.Squad.prototype.swapPlayersByIndex = function swapPlayersByIndex(
    e,
    t
  ) {
    utils.Debug.Assert(
      this._isValidPlayerSlot(e),
      '[Squad::swapPlayersByIndex] Invalid slot index provided for first parameter.'
    ),
      utils.Debug.Assert(
        this._isValidPlayerSlot(t),
        '[Squad::swapPlayersByIndex] Invalid slot index provided for second parameter.'
      );
    var i = this.getSlot(e),
      s = this.getSlot(t),
      n = i.getItem(),
      o = s.getItem(),
      a = i.getKitNumber(),
      r = s.getKitNumber();
    i.setItem(o),
      s.setItem(n),
      i.setKitNumber(r),
      s.setKitNumber(a),
      this.updateChemistry(),
      this._calculateRating(),
      this.isSBC() && this._updateType(),
      (this._modified = !0),
      this.onDataUpdated.notify({
        slots: [i, s],
        chemistry: this.getChemistry(),
        rating: this.getRating(),
        type: this.getType()
      });
  }),
  (entities.Squad.prototype._addItemToSlot = function _addItemToSlot(e, t) {
    var i = e.getItem(),
      s = e.getIndex();
    return (
      e.setItem(t),
      (s < entities.Squad.FIELD_PLAYERS || t.isManager()) &&
        this.updateChemistry(),
      s < entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS &&
        this._calculateRating(),
      this._updateType(),
      i
    );
  }),
  (entities.Squad.prototype.addItemToSlot = function addItemToSlot(e, t) {
    var i = null;
    if (
      (utils.Debug.Assert(
        this._isValidSlotIndex(e),
        'Invalid squad slot index: ' + e
      ),
      this._isValidSlotIndex(e))
    ) {
      var s = this.getSlot(e);
      (i = this._addItemToSlot(s, t)),
        (this._modified = !0),
        this.onDataUpdated.notify({
          slots: [s],
          chemistry: this.getChemistry(),
          rating: this.getRating(),
          type: this.getType()
        });
    }
    return i;
  }),
  (entities.Squad.prototype._emptySlot = function _emptySlot(e) {
    var t = e.getItem().isManager()
      ? new entities.Item(enums.ItemType.MANAGER)
      : new entities.Item();
    (t.playStyle = DEFAULT_PLAYSTYLE_ID), e.setItem(t);
  }),
  (entities.Squad.prototype._removeItemFromSlot = function _removeItemFromSlot(
    e
  ) {
    this._emptySlot(e);
    var t = e.getIndex();
    (t < entities.Squad.FIELD_PLAYERS || e.getItem().isManager()) &&
      this.updateChemistry(),
      t < entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS &&
        this._calculateRating(),
      this._updateType();
  }),
  (entities.Squad.prototype.removeItemFromSlot = function removeItemFromSlot(
    e
  ) {
    if (this._isValidSlotIndex(e)) {
      var t = this.getSlot(e);
      this._removeItemFromSlot(t),
        (this._modified = !0),
        this.onDataUpdated.notify({
          slots: [t],
          chemistry: this.getChemistry(),
          rating: this.getRating(),
          type: this.getType()
        });
    }
  }),
  (entities.Squad.prototype.removeItem = function removeItem(e) {
    var t = this.getSlot(e);
    t.isValid() &&
      (this._removeItemFromSlot(t),
      (this._modified = !0),
      this.onDataUpdated.notify({
        slots: [t],
        chemistry: this.getChemistry(),
        rating: this.getRating(),
        type: this.getType()
      }));
  }),
  (entities.Squad.prototype.update = function update(e) {
    var t = this.isSquadLoaded();
    (this._chemistry = e.getChemistry()),
      (this._rating = e.getRating()),
      (this._name = e.getName()),
      (this._formation = e.getFormation()),
      (this._type = e.getType()),
      (this._valid = e.isValid()),
      (this._captain = e.getCaptain()),
      this._manager && this._manager.onDataUpdated.unobserve(this),
      (this._manager = e.getManager()),
      this._manager.onDataUpdated.observe(this, this._eSlotDataUpdated),
      0 < this._players.length &&
        this._players.forEach(function(e) {
          e.onDataUpdated.unobserve(this);
        }, this),
      (this._players = e.getPlayers()),
      0 < this._players.length &&
        (this._updateChemistryLinks(),
        this._players.forEach(function(e) {
          this._calculateSlotChemistry(e),
            e.onDataUpdated.observe(this, this._eSlotDataUpdated);
        }, this)),
      t &&
        ((this._modified = !0),
        this.onDataUpdated.notify({
          chemistry: this.getChemistry(),
          formation: this.getFormation(),
          name: this.getName(),
          rating: this.getRating(),
          slots: this.getPlayers().concat(this.getManager()),
          type: this.getType()
        }));
  }),
  (entities.Squad.prototype.setPlayers = function setPlayers(e, t) {
    var i = null,
      s = [];
    (e = e.slice(0, entities.Squad.TOTAL_PLAYERS)),
      t &&
        e.forEach(function(e, t) {
          (i = this.getSlot(t)),
            e && e.isPlayer() && !i.isBrick() && this._emptySlot(i);
        }, this),
      e.forEach(function(e, t) {
        (i = this.getSlot(t)),
          e &&
            e.isPlayer() &&
            !i.isBrick() &&
            !this.containsVariationOfCard(e) &&
            (this._addItemToSlot(i, e), s.push(i));
      }, this),
      0 < s.length &&
        ((this._modified = !0),
        this.onDataUpdated.notify({
          slots: s,
          chemistry: this.getChemistry(),
          rating: this.getRating(),
          type: this.getType()
        }));
  }),
  (entities.Squad.prototype.removeAllItems = function removeAllItems(e) {
    var t = [];
    this.getNonBrickSlots(!0).forEach(function(e) {
      e.isValid() && (this._removeItemFromSlot(e), t.push(e));
    }, this);
    var i = 0 < t.length;
    return (
      !e &&
        this.hasManager() &&
        (this._removeItemFromSlot(this._manager),
        t.push(this._manager),
        (i = !0)),
      i &&
        ((this._modified = !0),
        this.onDataUpdated.notify({
          slots: t,
          chemistry: this.getChemistry(),
          rating: this.getRating(),
          type: this.getType()
        })),
      i
    );
  }),
  (entities.Squad.prototype._isSlotChemCalculable = function _isSlotChemCalculable(
    e
  ) {
    return e.isValid() || this._isSlotCustomBrick(e.getIndex());
  }),
  (entities.Squad.prototype._updateType = function _updateType() {
    var e = this.isSBC() ? this.getFieldPlayers() : this.getPlayers(),
      t = enums.SquadType.REGULAR;
    utils.JS.isValid(
      utils.JS.find(e, function(e) {
        return e.getItem().concept;
      })
    ) && (t = enums.SquadType.DREAM),
      (this._type = t);
  }),
  (entities.Squad.prototype.compareTo = function compareTo(e) {
    return this.getId() === e.getId();
  }),
  (entities.Squad.prototype._filterBrickIndices = function _filterBrickIndices(
    e
  ) {
    return e.filter(function(e) {
      return -1 === this.getAllBrickIndices().indexOf(e.getIndex());
    }, this);
  }),
  (entities.Squad.prototype._filterSimpleBrickIndices = function _filterSimpleBrickIndices(
    e
  ) {
    return e.filter(function(e) {
      return -1 === this.simpleBrickIndices.indexOf(e.getIndex());
    }, this);
  }),
  (entities.Squad.prototype.getAllBrickIndices = function getAllBrickIndices() {
    return this.simpleBrickIndices
      .concat(this.customBrickIndices)
      .sort(function(e, t) {
        return e - t;
      });
  }),
  (entities.Squad.prototype._isSlotBrick = function _isSlotBrick(e) {
    return -1 !== this.getAllBrickIndices().indexOf(e);
  }),
  (entities.Squad.prototype._isSlotSimpleBrick = function _isSlotSimpleBrick(
    e
  ) {
    return -1 !== this.simpleBrickIndices.indexOf(e);
  }),
  (entities.Squad.prototype._isSlotCustomBrick = function _isSlotCustomBrick(
    e
  ) {
    return -1 !== this.customBrickIndices.indexOf(e);
  }),
  (entities.Squad.prototype.isSBCSquadEligible = function isSBCSquadEligible() {
    var e = utils.JS.find(this.getNonBrickSlots(), function(e) {
      var t = e.getItem();
      return (
        t.isLoaned() ||
        t.concept ||
        entities.Item.isAlex(t.resourceId) ||
        entities.Item.isJim(t.resourceId) ||
        entities.Item.isDanny(t.resourceId)
      );
    });
    return !utils.JS.isValid(e);
  }),
  (entities.Squad.prototype.getSBCSlots = function getSBCSlots(e) {
    return e ? this._players : this._filterSimpleBrickIndices(this._players);
  }),
  (entities.Squad.prototype.getNonBrickSlots = function getNonBrickSlots(e) {
    var t = e ? this._players : this.getFieldPlayers();
    return 0 === this.getAllBrickIndices().length
      ? t
      : this._filterBrickIndices(t);
  }),
  (entities.Squad.prototype.getNumOfRequiredPlayers = function getNumOfRequiredPlayers() {
    return entities.Squad.FIELD_PLAYERS - this.getAllBrickIndices().length;
  }),
  (entities.Squad.prototype.setTacticMentality = function setTacticMentality(
    e
  ) {
    var t = e.getSquadId() === this.getId();
    utils.Debug.Assert(
      t,
      'Attempted to assign an invalid tactic mentality to the squad.'
    ),
      t &&
        (this._mentalities.has(e.getId()) &&
          this._mentalities.get(e.getId()).onDataUpdated.unobserve(this),
        this._mentalities.set(e.getId(), e),
        e.onDataUpdated.observe(this, this._eMentalityDataUpdated));
  }),
  (entities.Squad.prototype.getTacticMentalities = function getTacticMentalities() {
    return this._mentalities.values();
  }),
  (entities.Squad.prototype.getTacticMentalityById = function getTacticMentalityById(
    e
  ) {
    return this._mentalities.get(e);
  }),
  (entities.Squad.prototype.getTacticSlotsByMentalityId = function getTacticSlotsByMentalityId(
    e
  ) {
    var t = this._mentalities.get(e);
    if (
      (utils.Debug.Assert(
        utils.JS.isValid(t),
        'Could not find a mentality for ID: ' + e
      ),
      t)
    ) {
      var s = t.getFormation();
      return t.getPositions().map(function(e, t) {
        var i = new UTSquadSlotEntity(t, s.getPosition(t));
        return i.setItem(this._players[e].getItem()), i;
      }, this);
    }
    return [];
  }),
  (entities.Squad.prototype.saveTactics = function saveTactics() {
    if (!(this.isSBC() || this.isTOTW() || this.isShowOff())) {
      var i = this.getTacticMentalities(),
        e = this._squadDAO.saveTacticMentalities(this.getId(), i);
      return (
        e.observe(this, function _onSaveTacticMentalitiesComplete(e, t) {
          e.unobserve(this),
            t.success &&
              i.forEach(function(e) {
                e.isModified() && ((e._modified = !1), (e._customized = !0));
              });
        }),
        e
      );
    }
  }),
  (entities.Squad.prototype.hasModifiedTactics = function hasModifiedTactics() {
    return (
      0 <
      this.getTacticMentalities().filter(function(e) {
        return e.isModified();
      }).length
    );
  }),
  (entities.Squad.prototype._eMentalityDataUpdated = function _eMentalityDataUpdated(
    e,
    t,
    i
  ) {
    var s = {
      tactics: {
        mentality: t
      }
    };
    i.offensiveStyle && (s.tactics.offensiveStyle = i.offensiveStyle),
      i.offensiveWidth && (s.tactics.offensiveWidth = i.offensiveWidth),
      i.offensivePlayersInBox &&
        (s.tactics.offensivePlayersInBox = i.offensivePlayersInBox),
      i.cornerPlayersInBox &&
        (s.tactics.cornerPlayersInBox = i.cornerPlayersInBox),
      i.freeKickPlayersInBox &&
        (s.tactics.freeKickPlayersInBox = i.freeKickPlayersInBox),
      i.defensiveStyle && (s.tactics.defensiveStyle = i.defensiveStyle),
      i.defensiveWidth && (s.tactics.defensiveWidth = i.defensiveWidth),
      i.defensiveDepth && (s.tactics.defensiveDepth = i.defensiveDepth),
      i.instructions && (s.tactics.instructions = i.instructions),
      i.formation && (s.tactics.formation = i.formation),
      t.getId() === UTSquadMentalityEntity.TYPE.BALANCED &&
        this._formation.getId() !== t.getFormation().getId() &&
        ((this._modified = !0),
        (this._formation = t.getFormation()),
        this._mentalities.forEach(function(e) {
          e.isCustomized() ||
            e.isModified() ||
            e.getId() === UTSquadMentalityEntity.TYPE.BALANCED ||
            (e._formation = t.getFormation());
        }),
        this._players.forEach(function(e) {
          e.setPosition(this._formation.getPosition(e.getIndex()));
        }, this),
        this.updateChemistry(),
        (s.formation = this._formation)),
      this.onDataUpdated.notify(s);
  }),
  (entities.Squad.prototype._eSlotDataUpdated = function _eSlotDataUpdated(
    e,
    t,
    i
  ) {
    var s = t.getIndex();
    (s < entities.Squad.FIELD_PLAYERS ||
      s === entities.Squad.MANAGER_SLOT_INDEX) &&
      this.updateChemistry(),
      s < entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS &&
        this._calculateRating(),
      this._updateType(),
      (this._modified = !0),
      this.onDataUpdated.notify({
        slots: [t],
        chemistry: this.getChemistry(),
        rating: this.getRating(),
        type: this.getType()
      });
  }),
  utils.JS.inherits(UTPlayerInstructionsVO, UTObject),
  (UTPlayerInstructionsVO.INSTRUCTION = {
    NO_INSTRUCTION: 0,
    JOIN_THE_ATTACK: 1,
    PLAY_AS_STRIKER: 2,
    OVERLAP_RUN: 3,
    MIXED_ATTACK: 4,
    STAY_BACK_WHILE_ATTACKING: 5,
    CUT_PASSING_LANES: 6,
    VARIED_DEFENSE: 7,
    MAN_MARK: 8,
    VARIED_ATTACK: 9,
    GET_FORWARD: 10,
    GET_INTO_THE_BOX_FOR_CROSS: 11,
    MIXED_ATTACK_FOR_CROSS: 12,
    STAY_ON_EDGE_OF_BOX_FOR_CROSS: 13,
    FREE_ROAM: 14,
    COME_BACK_ON_DEFENSE: 15,
    MIXED_DEFENSE: 16,
    STAY_FORWARD: 17,
    CUT_INSIDE: 18,
    VARIED_WIDTH: 19,
    STAY_WIDE: 20,
    GET_IN_BEHIND: 21,
    MIXED_SUPPORT: 22,
    COME_SHORT: 23,
    PRESS_BACK_LINE: 24,
    DRIFT_WIDE: 25,
    STAY_CENTRAL: 26,
    TARGET_MAN: 27,
    STICK_TO_POSITION: 28,
    FALSE_9: 29,
    GK_RUSH_CONSERVATIVE: 30,
    GK_RUSH_NORMAL: 31,
    GK_RUSH_SWEEPER: 32,
    INTERCEPTION_LOW: 33,
    INTERCEPTION_NORMAL: 34,
    INTERCEPTION_AGGRESSIVE: 35,
    INVERTED_RUN: 36,
    COVER_WING: 37,
    ALWAYS_COVER_CENTER: 38,
    GK_SAVE_ON_CROSSES_NORMAL: 39,
    GK_SAVE_ON_CROSSES_COMES_FOR_CROSSES: 40,
    GK_SAVE_ON_CROSSES_CAUTIOUS_WITH_CROSSES: 41,
    GK_OUTSIDE_BOX_NORMAL: 42,
    GK_OUTSIDE_BOX_SWEEPER: 43,
    DROP_BACK_BETWEEN_DEFENDERS: 44
  }),
  (UTPlayerInstructionsVO.prototype.getPositionId = function getPositionId() {
    return this._positionId;
  }),
  (UTPlayerInstructionsVO.prototype.getInstructions = function getInstructions() {
    return this._instructions;
  }),
  (UTPlayerInstructionsVO.prototype.setInstructions = function setInstructions(
    e
  ) {
    var t = Array.isArray(e) && !e.some(isNaN);
    utils.Debug.Assert(
      t,
      'Unable to assign instructions. Expected a numeric array.'
    ),
      t && (this._instructions = e.slice());
  }),
  (UTPlayerInstructionsVO.prototype.setInstructionsFromBitwiseIntegers = function setInstructionsFromBitwiseIntegers(
    e
  ) {
    var t = utils.JS.isNumber(e[0]),
      i = utils.JS.isNumber(e[1]);
    if (
      ((this._instructions = []),
      utils.Debug.Assert(
        t,
        'Expected a 32-bit integer when assigning instructions to UTPlayerInstructionsVO.'
      ),
      utils.Debug.Assert(
        i,
        'Expected a 32-bit integer when assigning instructions to UTPlayerInstructionsVO.'
      ),
      t && i && (0 !== e[0] || 0 !== e[1]))
    )
      for (var s in UTPlayerInstructionsVO.INSTRUCTION)
        if (UTPlayerInstructionsVO.INSTRUCTION.hasOwnProperty(s)) {
          var n = UTPlayerInstructionsVO.INSTRUCTION[s];
          if (n <= 0) continue;
          var o = Math.floor((n - 1) / 30),
            a = n - 30 * o;
          e[o] & (1 << (a - 1)) && this._instructions.push(n);
        }
  }),
  (UTPlayerInstructionsVO.prototype.toBitwiseIntegers = function toBitwiseIntegers() {
    var s = [0, 0];
    return (
      this._instructions.forEach(function(e) {
        if (
          (utils.Debug.Assert(
            0 < e,
            'Encountered an invalid instruction for position ID: ' +
              this._positionId
          ),
          !(e <= 0))
        ) {
          var t = Math.floor((e - 1) / 30),
            i = e - 30 * t;
          s[t] |= 1 << (i - 1);
        }
      }),
      s
    );
  }),
  (UTPlayerInstructionsVO.prototype.equals = function equals(e) {
    if (!(e instanceof UTPlayerInstructionsVO)) return !1;
    var t = this.getInstructions(),
      i = e.getInstructions();
    if (t.length !== i.length) return !1;
    for (var s = 0, n = t.length; s < n; s++) if (t[s] !== i[s]) return !1;
    return this.getPositionId() === e.getPositionId();
  }),
  utils.JS.inherits(UTPlayerInstructionGroupEntity, UTObject),
  (UTPlayerInstructionGroupEntity.prototype.getId = function getId() {
    return this._id;
  }),
  (UTPlayerInstructionGroupEntity.prototype.addInstruction = function addInstruction(
    e
  ) {
    var t = utils.JS.isNumber(e),
      i = this._instructions.indexOf(e) < 0;
    utils.Debug.Assert(t, 'Expected a numeric instruction ID.'),
      utils.Debug.Assert(
        i,
        'Instruction is already assigned to the group. Ignoring request.'
      ),
      t && i && this._instructions.push(e);
  }),
  (UTPlayerInstructionGroupEntity.prototype.setSelectedInstruction = function setSelectedInstruction(
    t,
    e
  ) {
    utils.Debug.Assert(
      Array.isArray(t) && !t.some(isNaN),
      'Expected an array of numbers to search against.'
    ),
      utils.Debug.Assert(
        utils.JS.isNumber(e),
        'Expected a numeric instruction ID.'
      );
    var i = utils.JS.find(this._instructions, function(e) {
      return 0 <= t.indexOf(e);
    });
    utils.JS.isNumber(i)
      ? (this._selectedInstruction = i)
      : 0 <= this._instructions.indexOf(e) && (this._selectedInstruction = e);
  }),
  (UTPlayerInstructionGroupEntity.prototype.getInstructions = function getInstructions() {
    return this._instructions;
  }),
  (UTPlayerInstructionGroupEntity.prototype.getSelectedInstruction = function getSelectedInstruction() {
    return this._selectedInstruction;
  }),
  utils.JS.inherits(UTSquadMentalityEntity, UTObject),
  (UTSquadMentalityEntity.TYPE = {
    ULTRA_DEFENSIVE: 0,
    DEFENSIVE: 1,
    BALANCED: 2,
    ATTACKING: 3,
    ULTRA_ATTACKING: 4
  }),
  (UTSquadMentalityEntity.STYLE = {
    OFFENSIVE_STYLE: 0,
    OFFENSIVE_WIDTH: 1,
    OFFENSIVE_PLAYERS_IN_BOX: 2,
    DEFENSIVE_STYLE: 3,
    DEFENSIVE_WIDTH: 4,
    DEFENSIVE_DEPTH: 5,
    CORNER_PLAYERS_IN_BOX: 6,
    FREE_KICK_PLAYERS_IN_BOX: 7
  }),
  (UTSquadMentalityEntity.OFFENSIVE_STYLE = {
    POSSESSION: 0,
    BALANCED: 1,
    LONG_BALL: 2,
    FAST_BUILD_UP: 3
  }),
  (UTSquadMentalityEntity.DEFENSIVE_STYLE = {
    DROP_BACK: 0,
    BALANCED: 1,
    PRESSURE_ON_HEAVY_TOUCH: 2,
    PRESS_AFTER_POSSESSION_LOSS: 3,
    CONSTANT_PRESSURE: 4
  }),
  (UTSquadMentalityEntity.MIN_OFFENSIVE_WIDTH = 1),
  (UTSquadMentalityEntity.MAX_OFFENSIVE_WIDTH = 10),
  (UTSquadMentalityEntity.MIN_OFFENSIVE_PLAYERS_IN_BOX = 1),
  (UTSquadMentalityEntity.MAX_OFFENSIVE_PLAYERS_IN_BOX = 10),
  (UTSquadMentalityEntity.MIN_CORNER_PLAYERS_IN_BOX = 1),
  (UTSquadMentalityEntity.MAX_CORNER_PLAYERS_IN_BOX = 5),
  (UTSquadMentalityEntity.MIN_FREEKICK_PLAYERS_IN_BOX = 1),
  (UTSquadMentalityEntity.MAX_FREEKICK_PLAYERS_IN_BOX = 5),
  (UTSquadMentalityEntity.MIN_DEFENSIVE_WIDTH = 1),
  (UTSquadMentalityEntity.MAX_DEFENSIVE_WIDTH = 10),
  (UTSquadMentalityEntity.MIN_DEFENSIVE_DEPTH = 1),
  (UTSquadMentalityEntity.MAX_DEFENSIVE_DEPTH = 10),
  (UTSquadMentalityEntity.prototype.getId = function getId() {
    return this._id;
  }),
  (UTSquadMentalityEntity.prototype.getSquadId = function getSquadId() {
    return this._squadId;
  }),
  (UTSquadMentalityEntity.prototype.getFormation = function getFormation() {
    return this._formation;
  }),
  (UTSquadMentalityEntity.prototype.setFormation = function setFormation(e) {
    (this._formation && this._formation.getId() === e.getId()) ||
      ((this._formation = e),
      this._resetInstructions(),
      this._resetPositions(),
      (this._modified = !0),
      this.onDataUpdated.notify(this, {
        formation: this._formation,
        instructions: this._instructions.values(),
        positions: this._positions
      }));
  }),
  (UTSquadMentalityEntity.prototype.getPositions = function getPositions() {
    return this._positions.slice();
  }),
  (UTSquadMentalityEntity.prototype.swapPositionsByIndex = function swapPositionsByIndex(
    e,
    t
  ) {
    var i = utils.JS.isNumber(e) && 0 <= e && e <= 10,
      s = utils.JS.isNumber(t) && 0 <= t && t <= 10;
    if (
      (utils.Debug.Assert(
        i && s,
        'Expected a numeric index representing a slot position.'
      ),
      i && s)
    ) {
      var n = this._positions[e],
        o = this._positions[t];
      (this._positions[e] = o),
        (this._positions[t] = n),
        (this._modified = !0),
        this.onDataUpdated.notify(this, {
          positions: this._positions
        });
    }
  }),
  (UTSquadMentalityEntity.prototype._resetPositions = function _resetPositions() {
    this._positions = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  }),
  (UTSquadMentalityEntity.prototype.setOffensiveStyle = function setOffensiveStyle(
    e
  ) {
    utils.JS.isNumber(e) &&
      e !== this._offensiveStyle &&
      e >= UTSquadMentalityEntity.OFFENSIVE_STYLE.POSSESSION &&
      e <= UTSquadMentalityEntity.OFFENSIVE_STYLE.FAST_BUILD_UP &&
      ((this._offensiveStyle = e),
      (this._modified = !0),
      this.onDataUpdated.notify(this, {
        offensiveStyle: this._offensiveStyle
      }));
  }),
  (UTSquadMentalityEntity.prototype.getOffensiveStyle = function getOffensiveStyle() {
    return this._offensiveStyle;
  }),
  (UTSquadMentalityEntity.prototype.setOffensiveWidth = function setOffensiveWidth(
    e
  ) {
    if (utils.JS.isNumber(e)) {
      var t = Math.min(Math.max(Math.round(e), 1), 10);
      this._offensiveWidth !== t &&
        ((this._offensiveWidth = t),
        (this._modified = !0),
        this.onDataUpdated.notify(this, {
          offensiveWidth: this._offensiveWidth
        }));
    }
  }),
  (UTSquadMentalityEntity.prototype.getOffensiveWidth = function getOffensiveWidth() {
    return this._offensiveWidth;
  }),
  (UTSquadMentalityEntity.prototype.setOffensivePlayersInBox = function setOffensivePlayersInBox(
    e
  ) {
    if (utils.JS.isNumber(e)) {
      var t = Math.min(Math.max(Math.round(e), 1), 10);
      this._offensivePlayersInBox !== t &&
        ((this._offensivePlayersInBox = t),
        (this._modified = !0),
        this.onDataUpdated.notify(this, {
          offensivePlayersInBox: this._offensivePlayersInBox
        }));
    }
  }),
  (UTSquadMentalityEntity.prototype.getOffensivePlayersInBox = function getOffensivePlayersInBox() {
    return this._offensivePlayersInBox;
  }),
  (UTSquadMentalityEntity.prototype.setCornerPlayersInBox = function setCornerPlayersInBox(
    e
  ) {
    if (utils.JS.isNumber(e)) {
      var t = Math.min(Math.max(Math.round(e), 1), 5);
      this._cornerPlayersInBox !== t &&
        ((this._cornerPlayersInBox = t),
        (this._modified = !0),
        this.onDataUpdated.notify(this, {
          cornerPlayersInBox: this._cornerPlayersInBox
        }));
    }
  }),
  (UTSquadMentalityEntity.prototype.getCornerPlayersInBox = function getCornerPlayersInBox() {
    return this._cornerPlayersInBox;
  }),
  (UTSquadMentalityEntity.prototype.setFreeKickPlayersInBox = function setFreeKickPlayersInBox(
    e
  ) {
    if (utils.JS.isNumber(e)) {
      var t = Math.min(Math.max(Math.round(e), 1), 5);
      this._freeKickPlayersInBox !== t &&
        ((this._freeKickPlayersInBox = t),
        (this._modified = !0),
        this.onDataUpdated.notify(this, {
          freeKickPlayersInBox: this._freeKickPlayersInBox
        }));
    }
  }),
  (UTSquadMentalityEntity.prototype.getFreeKickPlayersInBox = function getFreeKickPlayersInBox() {
    return this._freeKickPlayersInBox;
  }),
  (UTSquadMentalityEntity.prototype.setDefensiveStyle = function setDefensiveStyle(
    e
  ) {
    utils.JS.isNumber(e) &&
      e !== this._defensiveStyle &&
      e >= UTSquadMentalityEntity.DEFENSIVE_STYLE.DROP_BACK &&
      e <= UTSquadMentalityEntity.DEFENSIVE_STYLE.CONSTANT_PRESSURE &&
      ((this._defensiveStyle = e),
      (this._modified = !0),
      this.onDataUpdated.notify(this, {
        defensiveStyle: this._defensiveStyle
      }));
  }),
  (UTSquadMentalityEntity.prototype.getDefensiveStyle = function getDefensiveStyle() {
    return this._defensiveStyle;
  }),
  (UTSquadMentalityEntity.prototype.setDefensiveWidth = function setDefensiveWidth(
    e
  ) {
    if (utils.JS.isNumber(e)) {
      var t = Math.min(Math.max(Math.round(e), 1), 10);
      this._defensiveWidth !== t &&
        ((this._defensiveWidth = t),
        (this._modified = !0),
        this.onDataUpdated.notify(this, {
          defensiveWidth: this._defensiveWidth
        }));
    }
  }),
  (UTSquadMentalityEntity.prototype.getDefensiveWidth = function getDefensiveWidth() {
    return this._defensiveWidth;
  }),
  (UTSquadMentalityEntity.prototype.setDefensiveDepth = function setDefensiveDepth(
    e
  ) {
    if (utils.JS.isNumber(e)) {
      var t = Math.min(Math.max(Math.round(e), 1), 10);
      this._defensiveDepth !== t &&
        ((this._defensiveDepth = t),
        (this._modified = !0),
        this.onDataUpdated.notify(this, {
          defensiveDepth: this._defensiveDepth
        }));
    }
  }),
  (UTSquadMentalityEntity.prototype.getDefensiveDepth = function getDefensiveDepth() {
    return this._defensiveDepth;
  }),
  (UTSquadMentalityEntity.prototype.setInstructionsByPositionId = function setInstructionsByPositionId(
    e,
    t
  ) {
    var i = this._instructions.get(e),
      s = !1;
    i ||
      ((i = new UTPlayerInstructionsVO(e)),
      this._instructions.set(e, i),
      (s = !0));
    var n = i.getInstructions();
    if ((s || (s = n.length !== t.length), !s))
      for (var o = 0, a = n.length; o < a; o++)
        if (n[o] !== t[o]) {
          s = !0;
          break;
        }
    s &&
      (i.setInstructions(t),
      (this._modified = !0),
      this.onDataUpdated.notify(this, {
        instructions: [i]
      }));
  }),
  (UTSquadMentalityEntity.prototype.getInstructionsByPositionId = function getInstructionsByPositionId(
    e
  ) {
    var t = this._instructions.get(e);
    return (
      utils.Debug.Assert(
        utils.JS.isValid(t),
        'Cannot find player instructions for position ID: ' + e
      ),
      t ? t.getInstructions() : []
    );
  }),
  (UTSquadMentalityEntity.prototype.getInstructionGroupsByPositionId = function getInstructionGroupsByPositionId(
    e
  ) {
    var t,
      i = this.getInstructionsByPositionId(e),
      s = [
        enums.PlayerPositionsAsInts.SW,
        enums.PlayerPositionsAsInts.RWB,
        enums.PlayerPositionsAsInts.RB,
        enums.PlayerPositionsAsInts.RCB,
        enums.PlayerPositionsAsInts.CB,
        enums.PlayerPositionsAsInts.LCB,
        enums.PlayerPositionsAsInts.LB,
        enums.PlayerPositionsAsInts.LWB
      ],
      n =
        4 ===
        this._formation.getPositions().reduce(function(e, t) {
          return 0 <= s.indexOf(t.getId()) ? ++e : e;
        }, 0),
      o = [];
    switch (e) {
      case enums.PlayerPositionsAsInts.GK:
        (t = new UTPlayerInstructionGroupEntity(28)).addInstruction(
          UTPlayerInstructionsVO.INSTRUCTION
            .GK_SAVE_ON_CROSSES_COMES_FOR_CROSSES
        ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.GK_SAVE_ON_CROSSES_NORMAL
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION
              .GK_SAVE_ON_CROSSES_CAUTIOUS_WITH_CROSSES
          ),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.GK_SAVE_ON_CROSSES_NORMAL
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(29)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.GK_OUTSIDE_BOX_SWEEPER
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.GK_OUTSIDE_BOX_NORMAL
          ),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.GK_OUTSIDE_BOX_NORMAL
          ),
          o.push(t);
        break;
      case enums.PlayerPositionsAsInts.SW:
      case enums.PlayerPositionsAsInts.RCB:
      case enums.PlayerPositionsAsInts.CB:
      case enums.PlayerPositionsAsInts.LCB:
        (t = new UTPlayerInstructionGroupEntity(0)).addInstruction(
          UTPlayerInstructionsVO.INSTRUCTION.JOIN_THE_ATTACK
        ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.STAY_BACK_WHILE_ATTACKING
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.PLAY_AS_STRIKER),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.STAY_BACK_WHILE_ATTACKING
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(18)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_AGGRESSIVE
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_LOW),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          o.push(t);
        break;
      case enums.PlayerPositionsAsInts.RWB:
      case enums.PlayerPositionsAsInts.RB:
      case enums.PlayerPositionsAsInts.LB:
      case enums.PlayerPositionsAsInts.LWB:
        (t = new UTPlayerInstructionGroupEntity(1)).addInstruction(
          UTPlayerInstructionsVO.INSTRUCTION.JOIN_THE_ATTACK
        ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.VARIED_ATTACK),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.STAY_BACK_WHILE_ATTACKING
          ),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.VARIED_ATTACK
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(19)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_AGGRESSIVE
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_LOW),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(25)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INVERTED_RUN
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.MIXED_ATTACK),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.OVERLAP_RUN),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.MIXED_ATTACK
          ),
          o.push(t);
        break;
      case enums.PlayerPositionsAsInts.RDM:
      case enums.PlayerPositionsAsInts.CDM:
      case enums.PlayerPositionsAsInts.LDM:
        (t = new UTPlayerInstructionGroupEntity(2)).addInstruction(
          UTPlayerInstructionsVO.INSTRUCTION.CUT_PASSING_LANES
        ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.VARIED_DEFENSE),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.MAN_MARK),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.VARIED_DEFENSE
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(3)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.STAY_BACK_WHILE_ATTACKING
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.VARIED_ATTACK),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.GET_FORWARD),
          n &&
            t.addInstruction(
              UTPlayerInstructionsVO.INSTRUCTION.DROP_BACK_BETWEEN_DEFENDERS
            ),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.VARIED_ATTACK
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(20)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_AGGRESSIVE
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_LOW),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(26)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.ALWAYS_COVER_CENTER
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.COVER_WING),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.COVER_WING
          ),
          o.push(t);
        break;
      case enums.PlayerPositionsAsInts.RCM:
      case enums.PlayerPositionsAsInts.CM:
      case enums.PlayerPositionsAsInts.LCM:
        (t = new UTPlayerInstructionGroupEntity(4)).addInstruction(
          UTPlayerInstructionsVO.INSTRUCTION.STAY_BACK_WHILE_ATTACKING
        ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.VARIED_ATTACK),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.GET_FORWARD),
          n &&
            t.addInstruction(
              UTPlayerInstructionsVO.INSTRUCTION.DROP_BACK_BETWEEN_DEFENDERS
            ),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.VARIED_ATTACK
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(5)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.GET_INTO_THE_BOX_FOR_CROSS
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.MIXED_ATTACK_FOR_CROSS
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.STAY_ON_EDGE_OF_BOX_FOR_CROSS
          ),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.MIXED_ATTACK_FOR_CROSS
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(21)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_AGGRESSIVE
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_LOW),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(6)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.FREE_ROAM
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.STICK_TO_POSITION
          ),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.STICK_TO_POSITION
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(27)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.ALWAYS_COVER_CENTER
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.COVER_WING),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.COVER_WING
          ),
          o.push(t);
        break;
      case enums.PlayerPositionsAsInts.RAM:
      case enums.PlayerPositionsAsInts.CAM:
      case enums.PlayerPositionsAsInts.LAM:
        (t = new UTPlayerInstructionGroupEntity(7)).addInstruction(
          UTPlayerInstructionsVO.INSTRUCTION.COME_BACK_ON_DEFENSE
        ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.MIXED_DEFENSE),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.STAY_FORWARD),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.MIXED_DEFENSE
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(8)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.GET_INTO_THE_BOX_FOR_CROSS
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.MIXED_ATTACK_FOR_CROSS
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.STAY_ON_EDGE_OF_BOX_FOR_CROSS
          ),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.MIXED_ATTACK_FOR_CROSS
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(9)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.FREE_ROAM
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.STICK_TO_POSITION
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.DRIFT_WIDE),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.STICK_TO_POSITION
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(22)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_AGGRESSIVE
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_LOW),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          o.push(t);
        break;
      case enums.PlayerPositionsAsInts.RM:
      case enums.PlayerPositionsAsInts.LM:
      case enums.PlayerPositionsAsInts.RW:
      case enums.PlayerPositionsAsInts.LW:
        var a = utils.JS.isValid(
            this._formation.getPosition(enums.PlayerPositionsAsInts.RW)
          ),
          r = utils.JS.isValid(
            this._formation.getPosition(enums.PlayerPositionsAsInts.LW)
          ),
          l =
            e === enums.PlayerPositionsAsInts.RW ||
            e === enums.PlayerPositionsAsInts.LW ||
            (e === enums.PlayerPositionsAsInts.RM && !a) ||
            (e === enums.PlayerPositionsAsInts.LM && !r);
        l &&
          ((t = new UTPlayerInstructionGroupEntity(10)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.COME_BACK_ON_DEFENSE
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.MIXED_DEFENSE),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.STAY_FORWARD),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.MIXED_DEFENSE
          ),
          o.push(t)),
          (t = new UTPlayerInstructionGroupEntity(11)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.CUT_INSIDE
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.VARIED_WIDTH),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.STAY_WIDE),
          l && t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.FREE_ROAM),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.VARIED_WIDTH
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(12)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.GET_IN_BEHIND
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.MIXED_SUPPORT),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.COME_SHORT),
          l && t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.TARGET_MAN),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.MIXED_SUPPORT
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(13)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.GET_INTO_THE_BOX_FOR_CROSS
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.MIXED_ATTACK_FOR_CROSS
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.STAY_ON_EDGE_OF_BOX_FOR_CROSS
          ),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.MIXED_ATTACK_FOR_CROSS
          ),
          o.push(t),
          ((e === enums.PlayerPositionsAsInts.RM && a) ||
            (e === enums.PlayerPositionsAsInts.LM && r)) &&
            ((t = new UTPlayerInstructionGroupEntity(14)).addInstruction(
              UTPlayerInstructionsVO.INSTRUCTION.FREE_ROAM
            ),
            t.addInstruction(
              UTPlayerInstructionsVO.INSTRUCTION.STICK_TO_POSITION
            ),
            t.setSelectedInstruction(
              i,
              UTPlayerInstructionsVO.INSTRUCTION.STICK_TO_POSITION
            ),
            o.push(t)),
          (t = new UTPlayerInstructionGroupEntity(23)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_AGGRESSIVE
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_LOW),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          o.push(t);
        break;
      case enums.PlayerPositionsAsInts.RF:
      case enums.PlayerPositionsAsInts.CF:
      case enums.PlayerPositionsAsInts.LF:
      case enums.PlayerPositionsAsInts.RS:
      case enums.PlayerPositionsAsInts.ST:
      case enums.PlayerPositionsAsInts.LS:
        (t = new UTPlayerInstructionGroupEntity(16)).addInstruction(
          UTPlayerInstructionsVO.INSTRUCTION.DRIFT_WIDE
        ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.VARIED_WIDTH),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.STAY_CENTRAL),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.VARIED_WIDTH
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(17)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.GET_IN_BEHIND
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.MIXED_ATTACK),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.TARGET_MAN),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.FALSE_9),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.MIXED_ATTACK
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(24)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_AGGRESSIVE
          ),
          t.addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_LOW),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.INTERCEPTION_NORMAL
          ),
          o.push(t),
          (t = new UTPlayerInstructionGroupEntity(15)).addInstruction(
            UTPlayerInstructionsVO.INSTRUCTION.COME_BACK_ON_DEFENSE
          ),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.MIXED_DEFENSE),
          t.addInstruction(UTPlayerInstructionsVO.INSTRUCTION.STAY_FORWARD),
          t.setSelectedInstruction(
            i,
            UTPlayerInstructionsVO.INSTRUCTION.MIXED_DEFENSE
          ),
          o.push(t);
    }
    return o;
  }),
  (UTSquadMentalityEntity.prototype.isModified = function isModified() {
    return this._modified;
  }),
  (UTSquadMentalityEntity.prototype.isCustomized = function isCustomized() {
    return this._customized;
  }),
  (UTSquadMentalityEntity.prototype.toUtasObject = function toUtasObject() {
    var e;
    switch (this.getId()) {
      case UTSquadMentalityEntity.TYPE.ATTACKING:
        e = 'ATTACKING';
        break;
      case UTSquadMentalityEntity.TYPE.BALANCED:
        e = 'BALANCED';
        break;
      case UTSquadMentalityEntity.TYPE.DEFENSIVE:
        e = 'DEFENSIVE';
        break;
      case UTSquadMentalityEntity.TYPE.ULTRA_ATTACKING:
        e = 'ULTRA_ATTACKING';
        break;
      case UTSquadMentalityEntity.TYPE.ULTRA_DEFENSIVE:
        e = 'ULTRA_DEFENSIVE';
        break;
      default:
        e = 'INVALID';
    }
    utils.Debug.Assert(
      'INVALID' !== e,
      'Invalid mentality ID. Expected an ID of type UTSquadMentalityEntity.TYPE'
    );
    var n = [],
      t = this._formation.getPositions(),
      o = t.length;
    return (
      t.forEach(function(e, t) {
        var i = this._instructions.get(e.getId());
        if (
          (utils.Debug.Assert(
            utils.JS.isValid(i),
            'Unable to find player instructions for formation position: ' + t
          ),
          i)
        ) {
          var s = i.toBitwiseIntegers();
          n.push({
            index: t,
            value: s[0]
          }),
            n.push({
              index: t + o,
              value: s[1]
            });
        }
      }, this),
      {
        squadId: this.getSquadId(),
        tactic: e,
        formation: this.getFormation().getName(),
        positions: this._positions.map(function(e, t) {
          return {
            index: t,
            value: e
          };
        }),
        instructions: n,
        styles: [
          {
            index: UTSquadMentalityEntity.STYLE.OFFENSIVE_STYLE,
            value: this._offensiveStyle
          },
          {
            index: UTSquadMentalityEntity.STYLE.OFFENSIVE_WIDTH,
            value: this._offensiveWidth
          },
          {
            index: UTSquadMentalityEntity.STYLE.OFFENSIVE_PLAYERS_IN_BOX,
            value: this._offensivePlayersInBox
          },
          {
            index: UTSquadMentalityEntity.STYLE.DEFENSIVE_STYLE,
            value: this._defensiveStyle
          },
          {
            index: UTSquadMentalityEntity.STYLE.DEFENSIVE_WIDTH,
            value: this._defensiveWidth
          },
          {
            index: UTSquadMentalityEntity.STYLE.DEFENSIVE_DEPTH,
            value: this._defensiveDepth
          },
          {
            index: UTSquadMentalityEntity.STYLE.CORNER_PLAYERS_IN_BOX,
            value: this._cornerPlayersInBox
          },
          {
            index: UTSquadMentalityEntity.STYLE.FREE_KICK_PLAYERS_IN_BOX,
            value: this._freeKickPlayersInBox
          }
        ]
      }
    );
  }),
  (UTSquadMentalityEntity.prototype.save = function save() {
    var e = this._squadDAO.saveTacticMentalities(this.getSquadId(), [this]);
    return (
      e.observe(this, function _onSaveTacticMentalityComplete(e, t) {
        e.unobserve(this),
          t.success && ((this._modified = !1), (this._customized = !0));
      }),
      e
    );
  }),
  (UTSquadMentalityEntity.prototype._resetInstructions = function _resetInstructions() {
    this._instructions.clear(),
      this._formation.getPositions().forEach(function(e) {
        var t = e.getId(),
          i = new UTPlayerInstructionsVO(t);
        this._instructions.set(t, i);
      }, this);
  }),
  (UTSquadMentalityEntity.prototype.resetInstructions = function resetInstructions() {
    this._resetInstructions(),
      (this._modified = !0),
      this.onDataUpdated.notify(this, {
        instructions: this._instructions.values()
      });
  }),
  utils.JS.inherits(UTSquadMentalityEntityFactory, UTObject),
  (UTSquadMentalityEntityFactory.prototype.createDefaultMentality = function createDefaultMentality(
    e,
    t
  ) {
    var s = new UTSquadMentalityEntity(e, this._squadDAO);
    switch (((s._squadId = t.getId()), (s._formation = t.getFormation()), e)) {
      case UTSquadMentalityEntity.TYPE.ULTRA_DEFENSIVE:
        (s._offensiveStyle = UTSquadMentalityEntity.OFFENSIVE_STYLE.LONG_BALL),
          (s._defensiveStyle =
            UTSquadMentalityEntity.DEFENSIVE_STYLE.DROP_BACK),
          (s._offensivePlayersInBox -= 2),
          (s._defensiveDepth -= 2),
          (s._cornerPlayersInBox -= 2),
          (s._freeKickPlayersInBox -= 2);
        break;
      case UTSquadMentalityEntity.TYPE.DEFENSIVE:
        (s._offensiveStyle = UTSquadMentalityEntity.OFFENSIVE_STYLE.POSSESSION),
          (s._defensiveStyle =
            UTSquadMentalityEntity.DEFENSIVE_STYLE.DROP_BACK),
          (s._offensivePlayersInBox -= 1),
          (s._defensiveDepth -= 1),
          (s._cornerPlayersInBox -= 1),
          (s._freeKickPlayersInBox -= 1);
        break;
      case UTSquadMentalityEntity.TYPE.ATTACKING:
        (s._offensiveStyle =
          UTSquadMentalityEntity.OFFENSIVE_STYLE.FAST_BUILD_UP),
          (s._defensiveStyle =
            UTSquadMentalityEntity.DEFENSIVE_STYLE.PRESS_AFTER_POSSESSION_LOSS),
          (s._offensivePlayersInBox += 1),
          (s._defensiveDepth += 1),
          (s._cornerPlayersInBox += 1),
          (s._freeKickPlayersInBox += 1);
        break;
      case UTSquadMentalityEntity.TYPE.ULTRA_ATTACKING:
        (s._offensiveStyle =
          UTSquadMentalityEntity.OFFENSIVE_STYLE.FAST_BUILD_UP),
          (s._defensiveStyle =
            UTSquadMentalityEntity.DEFENSIVE_STYLE.CONSTANT_PRESSURE),
          (s._offensivePlayersInBox += 2),
          (s._defensiveDepth += 2),
          (s._cornerPlayersInBox += 2),
          (s._freeKickPlayersInBox += 2);
    }
    return (
      s._formation.getPositions().forEach(function(e) {
        var t = e.getId(),
          i = new UTPlayerInstructionsVO(t);
        s._instructions.set(t, i);
      }),
      s
    );
  }),
  (UTSquadMentalityEntityFactory.prototype.createMentality = function createMentality(
    e,
    t
  ) {
    var n = new UTSquadMentalityEntity(
      UTSquadMentalityEntity.TYPE[e.tactic] ||
        UTSquadMentalityEntity.TYPE.BALANCED,
      this._squadDAO
    );
    utils.Debug.Assert(
      e.squadId === t.getId(),
      'Associating squad/mentality with mismatched squad IDs.'
    ),
      (n._squadId = e.squadId),
      (n._formation = repositories.Squad.getFormation(e.formation)),
      (n._customized = !0),
      e.styles.forEach(function(e) {
        switch (e.index) {
          case UTSquadMentalityEntity.STYLE.OFFENSIVE_STYLE:
            n._offensiveStyle = e.value;
            break;
          case UTSquadMentalityEntity.STYLE.OFFENSIVE_WIDTH:
            n._offensiveWidth = e.value;
            break;
          case UTSquadMentalityEntity.STYLE.OFFENSIVE_PLAYERS_IN_BOX:
            n._offensivePlayersInBox = e.value;
            break;
          case UTSquadMentalityEntity.STYLE.DEFENSIVE_STYLE:
            n._defensiveStyle = e.value;
            break;
          case UTSquadMentalityEntity.STYLE.DEFENSIVE_WIDTH:
            n._defensiveWidth = e.value;
            break;
          case UTSquadMentalityEntity.STYLE.DEFENSIVE_DEPTH:
            n._defensiveDepth = e.value;
            break;
          case UTSquadMentalityEntity.STYLE.CORNER_PLAYERS_IN_BOX:
            n._cornerPlayersInBox = e.value;
            break;
          case UTSquadMentalityEntity.STYLE.FREE_KICK_PLAYERS_IN_BOX:
            n._freeKickPlayersInBox = e.value;
        }
      });
    var o = [];
    return (
      e.instructions.forEach(function(e, t) {
        var i =
          t >= entities.Squad.FIELD_PLAYERS
            ? t - entities.Squad.FIELD_PLAYERS
            : t;
        o[i] || (o[i] = []), o[i].push(e.value);
      }),
      n._formation.getPositions().forEach(function(e, t) {
        var i = e.getId(),
          s = n._instructions.get(i);
        s || ((s = new UTPlayerInstructionsVO(i)), n._instructions.set(i, s)),
          s.setInstructionsFromBitwiseIntegers(o[t] || []);
      }),
      e.positions.forEach(function(e) {
        n._positions[e.index] = e.value;
      }),
      n
    );
  }),
  utils.JS.inherits(UTSquadEntityFactory, UTObject),
  (UTSquadEntityFactory.prototype._normalizePayload = function _normalizePayload(
    e
  ) {
    return (
      utils.JS.isNumber(e.starRating) &&
        ((e.rating = e.starRating), delete e.starRating),
      utils.JS.isString(e.squadName) || (e.squadName = ''),
      Array.isArray(e.manager) &&
        (e.manager = 0 < e.manager.length ? e.manager[0] : null),
      e
    );
  }),
  (UTSquadEntityFactory.prototype.createSquad = function createSquad(e) {
    e = this._normalizePayload(e);
    var t = new entities.Squad(this._squadDAO);
    return _parseSquadPayload.call(this, t, e), t;
  }),
  (UTSquadEntityFactory.prototype.createSBCSquad = function createSquad(
    e,
    t,
    i
  ) {
    e = this._normalizePayload(e);
    var s = new entities.Squad(this._squadDAO);
    return s.setSBC(!0), _parseSBCSquadPayload(s, e, t, i), s;
  }),
  utils.JS.inherits(UTItemRepository, UTHashTable),
  (UTItemRepository.prototype.isCacheExpired = function isCacheExpired() {
    return this._expiryTimestamp < Date.now();
  }),
  (UTItemRepository.prototype.reset = function reset() {
    this.clear(),
      this._resetCount(),
      (this.endOfList = !1),
      (this._expiryTimestamp = 0);
  }),
  (UTItemRepository.prototype.isCountSet = function isCountSet() {
    return -1 < this.count;
  }),
  (UTItemRepository.prototype._resetCount = function _resetCount() {
    this.count = -1;
  }),
  (UTItemRepository.prototype.set = function set(e, t) {
    var i = this.has(e) ? this._collection[e] : null;
    return (
      (this._collection[e] = t),
      this.isCountSet() &&
        (this.endOfList ? (this.count = this.length) : i || this._resetCount()),
      i
    );
  }),
  (UTItemRepository.prototype.remove = function remove(e) {
    var t = null;
    return (
      this.has(e) && ((t = this._collection[e]), delete this._collection[e]),
      this.isCountSet() &&
        (this.endOfList ? (this.count = this.length) : t && this._resetCount()),
      t
    );
  }),
  (UTItemRepository.prototype.search = function search(i) {
    return this.values().filter(function(e) {
      if (
        (i.untradeables === enums.SearchUntradeables.ONLY && !e.untradeable) ||
        (i.untradeables === enums.SearchUntradeables.EXCLUDE && e.untradeable)
      )
        return !1;
      if (i.type === enums.SearchType.PLAYER) {
        if (
          i.position !== enums.SearchType.ANY &&
          repositories.Squad.getPositionByUniqueName(i.position).getId() !==
            e.preferredPosition
        )
          return !1;
        if (i.zone !== enums.SearchType.ANY) {
          var t = utils.JS.find(POSITION_ZONE_LOOKUP, function(e) {
            return e.value === i.zone;
          });
          if (
            t.minPosId > e.preferredPosition ||
            t.maxPosId < e.preferredPosition
          )
            return !1;
        }
        if (-1 !== i.playStyle && e.playStyle !== i.playStyle) return !1;
        if (
          0 < i.excludeDefIds.length &&
          -1 < i.excludeDefIds.indexOf(e.getDefId())
        )
          return !1;
      } else if (i.type === enums.SearchType.STAFF && i.category !== enums.SearchCategory.ANY && ((e.isManager() && i.category !== enums.SearchCategory.MANAGER) || (e.isHeadCoach() && i.category !== enums.SearchCategory.COACH_HEAD) || (e.isFitnessCoach() && i.category !== enums.SearchCategory.COACH_FITNESS) || (e.isGKCoach() && i.category !== enums.SearchCategory.COACH_GK) || (e.isPhysio() && i.category !== enums.SearchCategory.PHYSIO))) return !1;
      if (
        i.type !== enums.SearchType.CONSUMABLES_DEVELOPMENT &&
        i.type !== enums.SearchType.CONSUMABLES_TRAINING
      ) {
        if (
          i.level !== enums.SearchType.ANY &&
          ((!e.hasQualityTiers() && i.level !== enums.SearchLevel.SPECIAL) ||
            (e.getTier() === enums.ItemRatingTier.BRONZE &&
              i.level !== enums.SearchLevel.BRONZE) ||
            (e.getTier() === enums.ItemRatingTier.SILVER &&
              i.level !== enums.SearchLevel.SILVER) ||
            (e.getTier() === enums.ItemRatingTier.GOLD &&
              i.level !== enums.SearchLevel.GOLD))
        )
          return !1;
        if (
          (-1 !== i.nation && i.nation !== e.nationId) ||
          (-1 !== i.league && i.league !== e.leagueId) ||
          (-1 !== i.club && i.club !== e.teamId)
        )
          return !1;
      }
      return !0;
    });
  }),
  (UTItemRepository.prototype.setCacheTimestamp = function setCacheTimestamp(
    e,
    t
  ) {
    this._expiryTimestamp =
      e + (utils.JS.isNumber(t) ? t * MS_PER_SECOND : 3e5);
  }),
  utils.JS.inherits(UTClubRepository, UTObject),
  (UTClubRepository.prototype.reset = function reset() {
    this._players.reset(),
      this._staff.reset(),
      this._consumables.reset(),
      this._badges.reset(),
      this._balls.reset(),
      this._kits.reset(),
      this._stadiums.reset(),
      this._banners.reset(),
      this._celebrations.reset(),
      this._tifos.reset(),
      this._activeItems.clear(),
      (this._cacheTimestamp = 0);
  }),
  (UTClubRepository.prototype._getActiveItems = function _getActiveItems() {
    var i = [];
    return (
      this._activeItems.keys().forEach(function(e) {
        var t = this._activeItems.get(e);
        switch (e) {
          case enums.ItemState.ACTIVE_BADGE:
            i.push(this._badges.get(t));
            break;
          case enums.ItemState.ACTIVE_BALL:
            i.push(this._balls.get(t));
            break;
          case enums.ItemState.ACTIVE_AWAY_KIT:
          case enums.ItemState.ACTIVE_HOME_KIT:
            i.push(this._kits.get(t));
            break;
          case enums.ItemState.ACTIVE_STADIUM:
            i.push(this._stadiums.get(t));
            break;
          case enums.ItemState.ACTIVE_BANNER:
            i.push(this._banners.get(t));
            break;
          case enums.ItemState.ACTIVE_CELEBRATION:
            i.push(this._celebrations.get(t));
            break;
          case enums.ItemState.ACTIVE_TIFO:
            i.push(this._tifos.get(t));
        }
      }, this),
      i
    );
  }),
  (UTClubRepository.prototype.getActiveItems = function getActiveItems(t) {
    var e = this._getActiveItems();
    return t
      ? utils.JS.find(e, function(e) {
          return e.state === t;
        })
      : e;
  }),
  (UTClubRepository.prototype.setActiveItem = function setActiveItem(e) {
    if (e.isActiveClubItem()) {
      var t = this.getActiveItems(e.state);
      utils.JS.isValid(t) && t.id !== e.id && (t.state = enums.ItemState.FREE),
        this._activeItems.set(e.state, e.id);
    }
  }),
  (UTClubRepository.prototype._addClubItem = function _addClubItem(e) {
    e.isBadge()
      ? this._badges.set(e.id, e)
      : e.isBall()
      ? this._balls.set(e.id, e)
      : e.isKit()
      ? this._kits.set(e.id, e)
      : e.isStadium()
      ? this._stadiums.set(e.id, e)
      : e.isBanner()
      ? this._banners.set(e.id, e)
      : e.isCelebration()
      ? this._celebrations.set(e.id, e)
      : e.isTifo() && this._tifos.set(e.id, e),
      this.setActiveItem(e);
  }),
  (UTClubRepository.prototype._removeClubItem = function _removeClubItem(e) {
    e.isActiveClubItem()
      ? utils.Debug.Assert(
          !1,
          "[UTClubRepository::_removeClubItem] Can't remove an active club item."
        )
      : e.isBadge()
      ? this._badges.remove(e.id)
      : e.isBall()
      ? this._balls.remove(e.id)
      : e.isKit()
      ? this._kits.remove(e.id)
      : e.isStadium()
      ? this._stadiums.remove(e.id)
      : e.isBanner()
      ? this._banners.remove(e.id)
      : e.isCelebration()
      ? this._celebrations.remove(e.id)
      : e.isTifo() && this._tifos.remove(e.id);
  }),
  (UTClubRepository.prototype._addConsumable = function _addConsumable(e) {
    this._consumables.has(e.resourceId)
      ? this._consumables.get(e.resourceId).increaseStackCount()
      : this._consumables.set(e.resourceId, e);
  }),
  (UTClubRepository.prototype._removeConsumable = function _removeConsumable(
    e
  ) {
    0 === this._consumables.get(e).stackCount && this._consumables.remove(e);
  }),
  (UTClubRepository.prototype.add = function add(e) {
    function _add(e) {
      e.isPlayer()
        ? this._players.set(e.id, e)
        : e.isStaff()
        ? this._staff.set(e.id, e)
        : e.isClubItem()
        ? this._addClubItem(e)
        : e.isConsumable() && this._addConsumable(e);
    }
    Array.isArray(e)
      ? e.forEach(function(e) {
          _add.call(this, e);
        }, this)
      : _add.call(this, e);
  }),
  (UTClubRepository.prototype.remove = function remove(t) {
    function _remove(e) {
      e.isPlayer()
        ? this._players.remove(e.id)
        : t.isStaff()
        ? this._staff.remove(e.id)
        : t.isClubItem()
        ? this._removeClubItem(e)
        : t.isConsumable() && this._removeConsumable(e.resourceId);
    }
    Array.isArray(t)
      ? t.forEach(function(e) {
          _remove.call(this, e);
        }, this)
      : _remove.call(this, t);
  }),
  (UTClubRepository.prototype.update = function update(e) {
    e.isPlayer() && this._players.has(e.id) && this._players.set(e.id, e);
  }),
  (UTClubRepository.prototype.hasStats = function hasStats() {
    return (
      this._players.isCountSet() &&
      this._staff.isCountSet() &&
      this._kits.isCountSet() &&
      this._balls.isCountSet() &&
      this._stadiums.isCountSet() &&
      this._banners.isCountSet() &&
      this._celebrations.isCountSet() &&
      this._tifos.isCountSet()
    );
  }),
  (UTClubRepository.prototype.getStats = function getStats() {
    return [
      new transferobjects.ClubStat({
        type: enums.ClubItemType.PLAYERS,
        typeValue: this._players.count
      }),
      new transferobjects.ClubStat({
        type: enums.ClubItemType.STAFF,
        typeValue: this._staff.count
      }),
      new transferobjects.ClubStat({
        type: enums.ClubItemType.KITS,
        typeValue: this._kits.count
      }),
      new transferobjects.ClubStat({
        type: enums.ClubItemType.BALLS,
        typeValue: this._balls.count
      }),
      new transferobjects.ClubStat({
        type: enums.ClubItemType.STADIA,
        typeValue: this._stadiums.count
      }),
      new transferobjects.ClubStat({
        type: enums.ClubItemType.BANNERS,
        typeValue: this._banners.count
      }),
      new transferobjects.ClubStat({
        type: enums.ClubItemType.CELEBRATIONS,
        typeValue: this._celebrations.count
      }),
      new transferobjects.ClubStat({
        type: enums.ClubItemType.TIFOS,
        typeValue: this._tifos.count
      })
    ];
  }),
  (UTClubRepository.prototype.setStats = function setStats(e) {
    e.forEach(function(e) {
      this.getCollectionByClubItemType(e.type).count = e.count;
    }, this);
  }),
  (UTClubRepository.prototype.getCollectionBySearchCriteria = function getCollectionBySearchCriteria(
    e
  ) {
    switch (e.type) {
      case enums.SearchType.PLAYER:
        return this._players;
      case enums.SearchType.STAFF:
        return this._staff;
      case enums.SearchType.CONSUMABLES_DEVELOPMENT:
      case enums.SearchType.CONSUMABLES_TRAINING:
        return this._consumables;
      case enums.SearchType.CLUB_INFO:
        if (e.category === enums.SearchCategory.BADGE) return this._badges;
        if (e.category === enums.SearchCategory.KIT) return this._kits;
        break;
      case enums.SearchType.BALL:
        return this._balls;
      case enums.SearchType.STADIUM:
        return this._stadiums;
      case enums.SearchType.BANNER:
        return this._banners;
      case enums.SearchType.CELEBRATION:
        return this._celebrations;
      case enums.SearchType.TIFO:
        return this._tifos;
      default:
        return (
          utils.Debug.Assert(
            !1,
            '[UTClubRepository::getCollectionBySearchCriteria] No club collection associated to search type: ' +
              searchType
          ),
          null
        );
    }
  }),
  (UTClubRepository.prototype.getCollectionByClubItemType = function getCollectionByClubItemType(
    e
  ) {
    switch (e) {
      case enums.ClubItemType.PLAYERS:
        return this._players;
      case enums.ClubItemType.STAFF:
        return this._staff;
      case enums.ClubItemType.KITS:
        return this._kits;
      case enums.ClubItemType.BALLS:
        return this._balls;
      case enums.ClubItemType.STADIA:
        return this._stadiums;
      case enums.ClubItemType.BANNERS:
        return this._banners;
      case enums.ClubItemType.CELEBRATIONS:
        return this._celebrations;
      case enums.ClubItemType.TIFOS:
        return this._tifos;
      default:
        return (
          utils.Debug.Assert(
            !1,
            '[UTClubRepository::getCollectionByClubItemType] No club collection associated to club item type: ' +
              e
          ),
          null
        );
    }
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.StaticPlayerData = function UTStaticPlayerDataDTO(e) {
    (this.id = e.id),
      Object.defineProperty(this, 'id', {
        writable: !1
      }),
      (this.firstName = e.f),
      Object.defineProperty(this, 'firstName', {
        writable: !1
      }),
      (this.lastName = e.l),
      Object.defineProperty(this, 'lastName', {
        writable: !1
      }),
      (this.commonName = e.c || null),
      Object.defineProperty(this, 'commonName', {
        writable: !1
      }),
      (this.name = ''),
      Object.defineProperty(this, 'name', {
        get: function() {
          return this.commonName || this.firstName + ' ' + this.lastName;
        }
      }),
      (this.rating = e.r),
      Object.defineProperty(this, 'rating', {
        writable: !1
      }),
      (this.nationId = e.n),
      Object.defineProperty(this, 'nationId', {
        writable: !1
      });
  }),
  NamespaceManager.Register('repositories'),
  (repositories.Item = (function() {
    var i = new UTHashTable();

    function ItemDomainRepository() {
      var t;
      Object.defineProperty(this, 'cachedDurationIndex', {
        get: function() {
          return t;
        },
        set: function(e) {
          utils.JS.isNumber(e) && (t = e);
        }
      }),
        (this._pileSizes = new UTHashTable()),
        (this._unassigned = new UTItemRepository()),
        (this._transfer = new UTItemRepository()),
        (this._inbox = new UTItemRepository()),
        (this._club = new UTClubRepository()),
        (this.cachedDurationIndex = 0),
        this._pileSizes.set(enums.FUTItemPile.PURCHASED, 5),
        this._pileSizes.set(enums.FUTItemPile.TRANSFER, 30),
        this._pileSizes.set(enums.FUTItemPile.INBOX, 30);
    }
    return (
      (ItemDomainRepository.prototype.reset = function reset() {
        this._unassigned.reset(),
          this._transfer.reset(),
          this._inbox.reset(),
          this._club.reset();
      }),
      (ItemDomainRepository.prototype.setCacheTimestamp = function setCacheTimestamp(
        e,
        t,
        i
      ) {
        switch (e) {
          case enums.FUTItemPile.PURCHASED:
            this._unassigned.setCacheTimestamp(t, i);
            break;
          case enums.FUTItemPile.TRANSFER:
            this._transfer.setCacheTimestamp(t, i);
            break;
          case enums.FUTItemPile.INBOX:
            this._inbox.setCacheTimestamp(t, i);
        }
      }),
      (ItemDomainRepository.prototype.setDirty = function setDirty(e) {
        utils.JS.isValid(e)
          ? this.setCacheTimestamp(e, 0, 0)
          : (this._unassigned.setCacheTimestamp(0, 0),
            this._transfer.setCacheTimestamp(0, 0),
            this._inbox.setCacheTimestamp(0, 0));
      }),
      (ItemDomainRepository.prototype.isDirty = function isDirty(e) {
        switch (e) {
          case enums.FUTItemPile.PURCHASED:
            return this._unassigned.isCacheExpired();
          case enums.FUTItemPile.TRANSFER:
            return this._transfer.isCacheExpired();
          case enums.FUTItemPile.INBOX:
            return this._inbox.isCacheExpired();
        }
        return !0;
      }),
      (ItemDomainRepository.prototype.getClub = function getClub() {
        return this._club;
      }),
      (ItemDomainRepository.prototype.setPileSize = function setPileSize(e, t) {
        this._pileSizes.set(e, t);
      }),
      (ItemDomainRepository.prototype.getPileSize = function getPileSize(e) {
        return (
          utils.Debug.Assert(
            this._pileSizes.has(e),
            '[ItemDomainRepository::getPileSize] Unsupported pile requested.'
          ),
          this._pileSizes.get(e) || 0
        );
      }),
      (ItemDomainRepository.prototype.isPileFull = function isPileFull(e) {
        var t = 0,
          i = this._pileSizes.has(e) ? this._pileSizes.get(e) : 0;
        switch (e) {
          case enums.FUTItemPile.PURCHASED:
            t = this._unassigned.length;
            break;
          case enums.FUTItemPile.TRANSFER:
            t = this._transfer.length;
            break;
          case enums.FUTItemPile.INBOX:
            t = this._inbox.length;
            break;
          case enums.FUTItemPile.CLUB:
            return !1;
        }
        return i <= t;
      }),
      (ItemDomainRepository.prototype.numItemsInCache = function numItemsInCache(
        e
      ) {
        switch (e) {
          case enums.FUTItemPile.PURCHASED:
            return this._unassigned.length;
          case enums.FUTItemPile.TRANSFER:
            return this._transfer.length;
          case enums.FUTItemPile.INBOX:
            return this._inbox.length;
          default:
            return utils.Debug.Assert(!1, 'Unsupported item pile: ' + e), 0;
        }
      }),
      (ItemDomainRepository.prototype.hasStaticData = function hasStaticData() {
        return 0 < i.length;
      }),
      (ItemDomainRepository.prototype.setStaticData = function setStaticData(
        e
      ) {
        i.clear(),
          e.forEach(function(e) {
            var t = new transferobjects.StaticPlayerData(e);
            i.set(t.id, t);
          });
      }),
      (ItemDomainRepository.prototype.getStaticDataByDefId = function getStaticDataByDefId(
        e
      ) {
        return i.get(e);
      }),
      (ItemDomainRepository.prototype.getStaticData = function getStaticData() {
        return i.values();
      }),
      (ItemDomainRepository.prototype.getWatchedItems = function getWatchedItems() {
        return this._inbox.values();
      }),
      (ItemDomainRepository.prototype.setWatchedItems = function setWatchedItems(
        e
      ) {
        this._inbox.clear(),
          e.forEach(function(e) {
            this._inbox.set(e.id, e);
          }, this),
          (this._inbox.endOfList = !0);
      }),
      (ItemDomainRepository.prototype.getTransferItems = function getTransferItems() {
        return this._transfer.values();
      }),
      (ItemDomainRepository.prototype.setTransferItems = function setTransferItems(
        e
      ) {
        this._transfer.clear(),
          e.forEach(function(e) {
            this._transfer.set(e.id, e);
          }, this),
          (this._transfer.endOfList = !0);
      }),
      (ItemDomainRepository.prototype.getUnassignedItems = function getUnassignedItems() {
        return this._unassigned.values();
      }),
      (ItemDomainRepository.prototype.setUnassignedItems = function setUnassignedItems(
        e
      ) {
        this._unassigned.clear(),
          e.forEach(function(e) {
            this._unassigned.set(e.id, e);
          }, this),
          (this._unassigned.endOfList = !0);
      }),
      (ItemDomainRepository.prototype.add = function add(e) {
        var i = [];

        function _add(e) {
          var t = e.getAuctionData();
          if (t.watched && !t.tradeOwner) {
            if (this.isPileFull(enums.FUTItemPile.INBOX)) return;
            this._inbox.set(e.id, e);
          } else {
            if (this.isPileFull(e.pile)) return;
            switch (e.pile) {
              case enums.FUTItemPile.PURCHASED:
                this._unassigned.set(e.id, e);
                break;
              case enums.FUTItemPile.TRANSFER:
                this._transfer.set(e.id, e);
                break;
              case enums.FUTItemPile.INBOX:
                this._inbox.set(e.id, e);
                break;
              case enums.FUTItemPile.CLUB:
                this._club.add(e);
            }
          }
          i.push(e);
        }
        return Array.isArray(e) ? e.forEach(_add, this) : _add.call(this, e), i;
      }),
      (ItemDomainRepository.prototype.remove = function remove(e) {
        function _remove(e) {
          var t = e.getAuctionData();
          if (!t.watched || t.tradeOwner)
            switch (e.pile) {
              case enums.FUTItemPile.PURCHASED:
                this._unassigned.remove(e.id);
                break;
              case enums.FUTItemPile.TRANSFER:
                this._transfer.remove(e.id);
                break;
              case enums.FUTItemPile.INBOX:
                this._inbox.remove(e.id);
                break;
              case enums.FUTItemPile.CLUB:
                this._club.remove(e);
            }
          else this._inbox.remove(e.id);
        }
        Array.isArray(e) ? e.forEach(_remove, this) : _remove.call(this, e);
      }),
      (ItemDomainRepository.prototype.update = function update(e) {
        function _update(e) {
          switch (e.pile) {
            case enums.FUTItemPile.CLUB:
              this._club.update(e);
              break;
            default:
              utils.Debug.Assert(
                !1,
                'ItemDomainRepository::update. This pile does not support updating items.'
              );
          }
        }
        Array.isArray(e) ? e.forEach(_update, this) : _update.call(this, e);
      }),
      new ItemDomainRepository()
    );
  })()),
  NamespaceManager.Register('repositories'),
  (repositories.UTNimbleMTXItem = (function() {
    function UTNimbleMTXItemRepository(e) {
      (this._mtxItems = new UTHashTable()),
        Object.defineProperty(this, '_mtxItems', {
          writable: !1,
          enumerable: !1
        }),
        utils.JS.isValid(e) && this.add(e);
    }
    return (
      (UTNimbleMTXItemRepository.prototype.add = function add(e) {
        Array.isArray(e)
          ? e.forEach(function(e) {
              this._mtxItems.set(e.sku, e);
            }, this)
          : this._mtxItems.set(e.sku, e);
      }),
      (UTNimbleMTXItemRepository.prototype.get = function get(e) {
        return this._mtxItems.get(e);
      }),
      (UTNimbleMTXItemRepository.prototype.values = function values() {
        return this._mtxItems.values();
      }),
      (UTNimbleMTXItemRepository.prototype.isEmpty = function isEmpty() {
        return this._mtxItems.length < 1;
      }),
      (UTNimbleMTXItemRepository.prototype.reset = function reset() {
        this._mtxItems.clear();
      }),
      new UTNimbleMTXItemRepository()
    );
  })()),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.PlayStyle = function PlayStyleDTO(e) {
    (this.statBonus = e.statBonus || [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      Object.defineProperty(this, 'statBonus', {
        writable: !1,
        enumerable: !0
      }),
      (this.style = e.style || 0),
      Object.defineProperty(this, 'style', {
        writable: !1,
        enumerable: !0
      }),
      (this.styleId = e.styleId || 0),
      Object.defineProperty(this, 'styleId', {
        writable: !1,
        enumerable: !0
      }),
      (this.styleType = e.styleType || 0),
      Object.defineProperty(this, 'styleType', {
        writable: !1,
        enumerable: !0
      });
  }),
  NamespaceManager.Register('repositories'),
  (repositories.PlayStyle = (function() {
    function PlayStyleRepository() {
      (this._playstyles = new UTHashTable()),
        Object.defineProperty(this, '_playstyles', {
          writable: !1,
          enumerable: !1
        });
    }
    return (
      (PlayStyleRepository.prototype.setPlayStyles = function setPlayStyles(e) {
        e.forEach(function(e) {
          var t = new transferobjects.PlayStyle(e);
          this._playstyles.set(t.styleId, t);
        }, this);
      }),
      (PlayStyleRepository.prototype.getPlayStyles = function getPlayStyles() {
        return this._playstyles.values();
      }),
      (PlayStyleRepository.prototype.getPlayStyleById = function getPlayStyleById(
        e
      ) {
        return this._playstyles.get(e);
      }),
      (PlayStyleRepository.prototype.getPlayStyleBonusById = function getPlayStyleBonusById(
        e,
        t
      ) {
        var i = this.getPlayStyleById(e);
        return i
          ? t
            ? i.statBonus.slice(6)
            : i.statBonus.slice(0, 6)
          : [0, 0, 0, 0, 0, 0];
      }),
      new PlayStyleRepository()
    );
  })()),
  NamespaceManager.Register('repositories'),
  (repositories.Rarity = (function() {
    function UTItemRarityRepository() {
      UTHashTable.call(this, {}), (this._expiryTimestamp = 0);
    }
    return (
      utils.JS.inherits(UTItemRarityRepository, UTHashTable),
      (UTItemRarityRepository.prototype.add = function add(e, t) {
        this.has(t) || this.set(t, new UTHashTable());
        var i = this.get(t);
        Array.isArray(e)
          ? e.forEach(function(e) {
              i.set(e.id, e);
            })
          : i.set(e.id, e);
      }),
      (UTItemRarityRepository.prototype.getRarity = function getRarity(e, t) {
        t = t || enums.Year.ASSET;
        var i = this.get(t);
        return (
          utils.Debug.Assert(
            utils.JS.isValid(i),
            'Rarity asset year not found: ' + t
          ),
          i && i.has(e) ? i.get(e) : new UTItemRarityDTO()
        );
      }),
      (UTItemRarityRepository.prototype.yearValues = function yearValues(e) {
        var t = this.get(e);
        return t ? t.values() : [];
      }),
      (UTItemRarityRepository.prototype.isCacheExpired = function isCacheExpired() {
        return this._expiryTimestamp < Date.now();
      }),
      (UTItemRarityRepository.prototype.isEmpty = function isEmpty() {
        return this.length < 1;
      }),
      (UTItemRarityRepository.prototype.isYearEmpty = function isYearEmpty(e) {
        var t = this.get(e);
        return !t || t.length < 1;
      }),
      (UTItemRarityRepository.prototype.reset = function reset() {
        this.clear(), (this._expiryTimestamp = 0);
      }),
      (UTItemRarityRepository.prototype.resetYear = function resetYear(e) {
        var t = this.get(e);
        t && t.clear(), e === enums.Year.ASSET && (this._expiryTimestamp = 0);
      }),
      (UTItemRarityRepository.prototype.setCacheTimestamp = function setCacheTimestamp(
        e,
        t
      ) {
        this._expiryTimestamp =
          e + (utils.JS.isNumber(t) ? t * MS_PER_SECOND : 36e5);
      }),
      new UTItemRarityRepository()
    );
  })()),
  NamespaceManager.Register('repositories'),
  (repositories.Squad = (function() {
    function UTSquadRepository() {
      (this._squads = new UTHashTable()),
        (this._formations = new UTHashTable()),
        (this._positions = new UTHashTable()),
        (this._squadListCacheExpiration = 0);
    }
    return (
      (UTSquadRepository.prototype.reset = function reset() {
        (this._squadListCacheExpiration = 0),
          this._squads.clear(),
          this._formations.clear(),
          this._positions.clear();
      }),
      (UTSquadRepository.prototype.setDirty = function setDirty() {
        this._squads.clear(), (this._squadListCacheExpiration = 0);
      }),
      (UTSquadRepository.prototype.set = function set(e, t) {
        var i = t.getId();
        if (this._squads.has(e))
          if (this._squads.get(e).has(i)) {
            var s = this._squads.get(e).get(i);
            s.update(t), s.setCacheTimestamp(0);
          } else this._squads.get(e).set(i, t);
        else {
          var n = {};
          (n[i] = t), this._squads.set(e, new UTHashTable(n));
        }
      }),
      (UTSquadRepository.prototype.getSquadById = function getSquadById(e, t) {
        return this._squads.has(e) ? this._squads.get(e).get(t) : null;
      }),
      (UTSquadRepository.prototype.getSquads = function getSquads(e) {
        return this._squads.has(e) ? this._squads.get(e).values() : [];
      }),
      (UTSquadRepository.prototype.removeSquads = function removeSquads(e) {
        this._squads.has(e) && this._squads.get(e).clear();
      }),
      (UTSquadRepository.prototype.removeSquad = function removeSquad(e, t) {
        this._squads.has(e) && this._squads.get(e).remove(t);
      }),
      (UTSquadRepository.prototype.getFormation = function getFormation(e) {
        return this._formations.get(e);
      }),
      (UTSquadRepository.prototype.getFormations = function getFormations() {
        return this._formations.values();
      }),
      (UTSquadRepository.prototype.getPosition = function getPosition(e) {
        return this._positions.get(e);
      }),
      (UTSquadRepository.prototype.getPositionByUniqueName = function getPositionByUniqueName(
        t
      ) {
        return utils.JS.find(this._positions.values(), function(e) {
          return e.getName() === t;
        });
      }),
      (UTSquadRepository.prototype.setSquadDataLookup = function setSquadDataLookup(
        o
      ) {
        o.formationData.forEach(function(n) {
          var e = utils.JS.find(o.chemLinks, function(e) {
              return e.formationName === n.name;
            }),
            t = e
              ? e.linkData.map(function(e) {
                  return new transferobjects.SquadLink(e);
                })
              : [],
            i = n.uniquePositionSlots.map(function(e, t) {
              var i = n.generalPositionSlots[t],
                s = o.positionBonusTable[i].map(function(e) {
                  return o.bonusValues.Position[e];
                });
              return new transferobjects.SquadPosition(o.positionData[e], s);
            }),
            s = new transferobjects.SquadFormation(n, o.bonusValues.Team, t, i);
          this._formations.set(s.getName(), s);
        }, this),
          o.positionData.forEach(function(e) {
            var t = new transferobjects.SquadPosition(e, []);
            this._positions.set(e.uniqueId, t);
          }, this);
      }),
      (UTSquadRepository.prototype.isSquadListCacheExpired = function isSquadListCacheExpired() {
        return this._squadListCacheExpiration < Date.now();
      }),
      (UTSquadRepository.prototype.setSquadListCacheTimestamp = function setSquadListCacheTimestamp(
        e,
        t
      ) {
        this._squadListCacheExpiration =
          e + (utils.JS.isNumber(t) ? t * MS_PER_SECOND : 6e5);
      }),
      new UTSquadRepository()
    );
  })()),
  (LeagueRepository.prototype.add = function add(e) {
    Array.isArray(e)
      ? e.forEach(function(e) {
          this._leagues.set(e.id, e);
        }, this)
      : this._leagues.set(e.id, e);
  }),
  (LeagueRepository.prototype.get = function get(e) {
    return this._leagues.get(e);
  }),
  (LeagueRepository.prototype.values = function values() {
    return this._leagues.values();
  }),
  (NationRepository.prototype.add = function add(e) {
    Array.isArray(e)
      ? e.forEach(function(e) {
          this._nations.set(e.id, e);
        }, this)
      : this._nations.set(e.id, e);
  }),
  (NationRepository.prototype.get = function get(e) {
    return this._nations.get(e);
  }),
  (NationRepository.prototype.values = function values() {
    return this._nations.values();
  }),
  (TeamRepository.prototype.add = function add(e) {
    Array.isArray(e)
      ? e.forEach(function(e) {
          this._teams.set(e.id, e);
        }, this)
      : this._teams.set(e.id, e);
  }),
  (TeamRepository.prototype.get = function get(e) {
    return this._teams.get(e);
  }),
  (TeamRepository.prototype.values = function values() {
    return this._teams.values();
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.League = function UTLeagueDTO(e, t, i) {
    (this.id = e.LeagueId),
      Object.defineProperty(this, 'id', {
        writable: !1,
        enumerable: !0
      }),
      (this.nation = e.NationId),
      Object.defineProperty(this, 'nation', {
        writable: !1,
        enumerable: !0
      }),
      (this.name = utils.FUTLocalization.getLeagueNameByID(
        this.id,
        t || enums.Year.ASSET
      )),
      Object.defineProperty(this, 'name', {
        writable: !1,
        enumerable: !0
      }),
      (this.abbreviation = utils.FUTLocalization.getLeagueAbbr5ByID(
        this.id,
        t || enums.Year.ASSET
      )),
      Object.defineProperty(this, 'abbreviation', {
        writable: !1,
        enumerable: !0
      }),
      (this.sortName = utils.TextUtils.stripSpecialCharacters(
        this.name
      ).toLowerCase()),
      Object.defineProperty(this, 'sortName', {
        writable: !1,
        enumerable: !0
      }),
      (this.legend = i || !1),
      Object.defineProperty(this, 'legend', {
        writable: !1,
        enumerable: !0
      });
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.Nation = function UTNationDTO(e) {
    (this.id = e),
      Object.defineProperty(this, 'id', {
        writable: !1,
        enumerable: !0
      }),
      (this.name = utils.FUTLocalization.getNationAbb12ById(e)),
      Object.defineProperty(this, 'name', {
        writable: !1,
        enumerable: !0
      }),
      (this.sortName = utils.TextUtils.stripSpecialCharacters(
        this.name
      ).toLowerCase()),
      Object.defineProperty(this, 'sortName', {
        writable: !1,
        enumerable: !0
      });
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.TeamKit = function TeamKitDTO(e) {
    (this.localized = e.L || !1),
      Object.defineProperty(this, 'localized', {
        writable: !1,
        enumerable: !0
      }),
      (this.year = e.Y || 0),
      Object.defineProperty(this, 'year', {
        writable: !1,
        enumerable: !0
      }),
      (this.type = e.type || 0),
      Object.defineProperty(this, 'type', {
        writable: !1,
        enumerable: !0
      }),
      (this.V2 = e.V2 || !1),
      Object.defineProperty(this, 'V2', {
        writable: !1,
        enumerable: !1
      }),
      (this.V4 = e.V4 || !1),
      Object.defineProperty(this, 'V4', {
        writable: !1,
        enumerable: !1
      }),
      (this.V6 = e.V6 || !1),
      Object.defineProperty(this, 'V6', {
        writable: !1,
        enumerable: !1
      });
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.Team = function TeamDTO(e, t, i) {
    (this.id = e.TeamId),
      Object.defineProperty(this, 'id', {
        writable: !1,
        enumerable: !0
      }),
      (this.league = e.LeagueId),
      Object.defineProperty(this, 'league', {
        writable: !1,
        enumerable: !0
      }),
      (this.kits = Array.isArray(e.Kit)
        ? e.Kit.map(function(e) {
            return new transferobjects.TeamKit(e);
          })
        : []),
      Object.defineProperty(this, 'kits', {
        writable: !1,
        enumerable: !0
      }),
      (this.name = utils.FUTLocalization.getTeamAbb15ByID(
        e.TeamId,
        t || enums.Year.ASSET
      )),
      Object.defineProperty(this, 'name', {
        writable: !1,
        enumerable: !0
      }),
      (this.sortName = utils.TextUtils.stripSpecialCharacters(
        this.name
      ).toLowerCase()),
      Object.defineProperty(this, 'sortName', {
        writable: !1,
        enumerable: !0
      }),
      (this.legend = i || !1),
      Object.defineProperty(this, 'legend', {
        writable: !1,
        enumerable: !0
      });
  }),
  NamespaceManager.Register('repositories'),
  (repositories.TeamConfig = (function() {
    function _sortByName(e, t) {
      return services.Localization.isLatinAlphabet()
        ? utils.JS.sortCompare(e.sortName, t.sortName)
        : e.name.localeCompare(
            t.name,
            services.Localization.getLocale().toBCPString(),
            {
              sensitivity: 'accent'
            }
          );
    }

    function TeamConfigRepository() {
      (this._nations = new UTHashTable()),
        Object.defineProperty(this, '_nations', {
          writable: !1,
          enumerable: !1
        }),
        (this._leagues = new UTHashTable()),
        Object.defineProperty(this, '_leagues', {
          writable: !1,
          enumerable: !1
        }),
        (this._teams = new UTHashTable()),
        Object.defineProperty(this, '_teams', {
          writable: !1,
          enumerable: !1
        }),
        (this._customTeams = new UTHashTable()),
        Object.defineProperty(this, '_customTeams', {
          writable: !1,
          enumerable: !1
        });
    }
    return (
      (TeamConfigRepository.prototype.reset = function reset() {
        this._nations.clear(),
          this._leagues.clear(),
          this._teams.clear(),
          this._customTeams.clear();
      }),
      (TeamConfigRepository.prototype.addNations = function addNations(e, t) {
        var i = e.map(function(e) {
          return new transferobjects.Nation(e);
        });
        this._nations.has(t)
          ? this._nations.get(t).add(i)
          : this._nations.set(t, new NationRepository(i));
      }),
      (TeamConfigRepository.prototype.getNation = function getNation(e, t) {
        return (
          t || (t = enums.Year.ASSET),
          this._nations.has(t) ? this._nations.get(t).get(e) : null
        );
      }),
      (TeamConfigRepository.prototype.getNationsByYear = function getNationsByYear(
        e
      ) {
        return this._nations.has(e)
          ? this._nations
              .get(e)
              .values()
              .sort(_sortByName)
          : [];
      }),
      (TeamConfigRepository.prototype.addLeagues = function addLeagues(
        e,
        t,
        i
      ) {
        var s = e.map(function(e) {
          return new transferobjects.League(e, t, i);
        });
        this._leagues.has(t)
          ? this._leagues.get(t).add(s)
          : this._leagues.set(t, new LeagueRepository(s));
      }),
      (TeamConfigRepository.prototype.getLeague = function getLeague(e, t) {
        return (
          t || (t = enums.Year.ASSET),
          this._leagues.has(t) ? this._leagues.get(t).get(e) : null
        );
      }),
      (TeamConfigRepository.prototype.getLeaguesByYear = function getLeaguesByYear(
        e,
        t
      ) {
        if (this._leagues.has(e)) {
          var i = this._leagues.get(e).values();
          return (
            t &&
              (i = i.filter(function(e) {
                return !e.legend;
              })),
            i.sort(_sortByName)
          );
        }
        return [];
      }),
      (TeamConfigRepository.prototype.addTeams = function addTeams(e, t, i) {
        var s = e.map(function(e) {
          return new transferobjects.Team(e, t, i);
        });
        this._teams.has(t)
          ? this._teams.get(t).add(s)
          : this._teams.set(t, new TeamRepository(s));
      }),
      (TeamConfigRepository.prototype.addCustomTeams = function addCustomTeams(
        e,
        t
      ) {
        var i = e.map(function(e) {
          return new transferobjects.Team(e, t);
        });
        this._customTeams.has(t)
          ? this._customTeams.get(t).add(i)
          : this._customTeams.set(t, new TeamRepository(i));
      }),
      (TeamConfigRepository.prototype.getTeam = function getTeam(e, t) {
        return (
          t || (t = enums.Year.ASSET),
          this._teams.has(t) ? this._teams.get(t).get(e) : null
        );
      }),
      (TeamConfigRepository.prototype.getCustomTeam = function getCustomTeam(
        e,
        t
      ) {
        return (
          t || (t = enums.Year.ASSET),
          this._customTeams.has(t) ? this._customTeams.get(t).get(e) : null
        );
      }),
      (TeamConfigRepository.prototype.getTeamsByYear = function getTeamsByYear(
        e,
        t
      ) {
        if (this._teams.has(e)) {
          var i = this._teams.get(e).values();
          return (
            t &&
              (i = i.filter(function(e) {
                return !e.legend;
              })),
            i.sort(_sortByName)
          );
        }
        return [];
      }),
      (TeamConfigRepository.prototype.getCustomTeamsByYear = function getCustomTeamsByYear(
        e
      ) {
        return this._customTeams.has(e)
          ? this._customTeams
              .get(e)
              .values()
              .sort(_sortByName)
          : [];
      }),
      new TeamConfigRepository()
    );
  })()),
  utils.JS.inherits(UTNavigationButtonControl, UTButtonControl),
  (UTNavigationButtonControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      e.classList.add('ut-navigation-button-control'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTNavigationButtonControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTNavigationButtonControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTNavigationButtonControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  NamespaceManager.Register('views'),
  (views.NavigationBar = function FUINavigationBar() {
    UTTargetActionView.call(this),
      (this._visible = !0),
      Object.defineProperty(this, '_visible', {
        writable: !0,
        enumerable: !1
      }),
      (this._primaryButton = null),
      Object.defineProperty(this, '_primaryButton', {
        writable: !0,
        enumerable: !1
      }),
      (this._secondaryButton = null),
      Object.defineProperty(this, '_secondaryButton', {
        writable: !0,
        enumerable: !1
      }),
      (this._currentStyle = enums.UINavigationBarStyle.DEFAULT),
      Object.defineProperty(this, '_currentStyle', {
        writable: !0,
        enumerable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.NavigationBar, UTTargetActionView),
  (views.NavigationBar.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-navigation-bar-view'),
        (this.__title = document.createElement('h1')),
        this.__title.classList.add('title'),
        e.appendChild(this.__title),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.NavigationBar.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null);
  }),
  (views.NavigationBar.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.NavigationBar.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.NavigationBar.prototype.dealloc = function dealloc() {
    this._secondaryButton &&
      this._secondaryButton.removeClass('btn-navigation-secondary'),
      (this._primaryButton = null),
      (this._secondaryButton = null),
      this.superclass();
  }),
  (views.NavigationBar.prototype.layoutSubviews = function layoutSubviews() {
    var e = this.getRootElement();
    this._primaryButton &&
      DOMKit.insertBefore(this._primaryButton.getRootElement(), e.firstChild),
      this._secondaryButton &&
        e.appendChild(this._secondaryButton.getRootElement()),
      this._subviews.forEach(function(e) {
        e.view !== this._primaryButton &&
          e.view !== this._secondaryButton &&
          e.container.appendChild(e.view.getRootElement());
      }, this);
  }),
  (views.NavigationBar.prototype.setPrimaryButton = function setPrimaryButton(
    e
  ) {
    this._primaryButton && this._primaryButton.removeFromSuperview(),
      e && this.addSubview(e),
      (this._primaryButton = e);
  }),
  (views.NavigationBar.prototype.setSecondaryButton = function setSecondaryButton(
    e
  ) {
    this._secondaryButton &&
      (this._secondaryButton.removeFromSuperview(),
      this._secondaryButton.removeClass('btn-navigation-secondary')),
      e && (e.addClass('btn-navigation-secondary'), this.addSubview(e)),
      (this._secondaryButton = e);
  }),
  (views.NavigationBar.prototype.setButtons = function setButtons(e, t) {
    this.setPrimaryButton(e), this.setSecondaryButton(t), this.layoutSubviews();
  }),
  (views.NavigationBar.prototype.setHeader = function setHeader(e) {
    this.__title.textContent = e;
  }),
  (views.NavigationBar.prototype.setStyle = function setStyle(e) {
    this._currentStyle !== e &&
      (this.removeClass(this._currentStyle),
      this.addClass(e),
      (this._currentStyle = e));
  }),
  (views.NavigationBar.prototype.setVisible = function setVisible(e, t, i) {
    if (((e = !!e), this._visible !== e)) {
      if (t) {
        var s = this._visible
          ? enums.UIAnimation.FADE_OUT
          : enums.UIAnimation.FADE_IN;
        e && this.setVisibility(!0),
          this.perform(
            s,
            function() {
              e || this.setVisibility(!1), utils.JS.isFunction(i) && i();
            }.bind(this)
          );
      } else this.setVisibility(e), utils.JS.isFunction(i) && i();
      this._visible = e;
    }
  }),
  (views.NavigationContainer = function FUINavigationContainer() {
    UTView.call(this),
      (this._navbar = null),
      (this._toolbar = null),
      this._generate();
  }),
  utils.JS.inherits(views.NavigationContainer, UTView),
  (views.NavigationContainer.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('ut-navigation-container-view'),
        (this.__content = document.createElement('div')),
        this.__content.classList.add('ut-navigation-container-view--content'),
        e.appendChild(this.__content),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.NavigationContainer.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__content = null);
  }),
  (views.NavigationContainer.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.NavigationContainer.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.NavigationContainer.prototype.dealloc = function dealloc() {
    (this._navbar = null), (this._toolbar = null), this.superclass();
  }),
  (views.NavigationContainer.prototype.layoutSubviews = function layoutSubviews() {
    this._subviews.forEach(function(e) {
      e.view !== this._navbar &&
        e.view !== this._toolbar &&
        e.container.appendChild(e.view.getRootElement());
    });
    var e = this.getRootElement();
    this._navbar &&
      DOMKit.insertBefore(this._navbar.getRootElement(), e.firstChild),
      this._toolbar && e.appendChild(this._toolbar.getRootElement());
  }),
  (views.NavigationContainer.prototype.getContentContainer = function getContentContainer() {
    return this.__content;
  }),
  (views.NavigationContainer.prototype.hasNavigationBar = function hasNavigationBar() {
    return this._navbar instanceof views.NavigationBar;
  }),
  (views.NavigationContainer.prototype.hasToolbar = function hasToolbar() {
    return this._toolbar instanceof views.Toolbar;
  }),
  (views.NavigationContainer.prototype.appendNavigationBar = function appendNavigationBar(
    e
  ) {
    this._navbar ||
      (this.addSubview(e), (this._navbar = e), this.layoutSubviews());
  }),
  (views.NavigationContainer.prototype.removeNavigationBar = function removeNavigationBar(
    e
  ) {
    this._navbar &&
      (this._navbar.removeFromSuperview(e), (this._navbar = null));
  }),
  (views.NavigationContainer.prototype.appendToolbar = function appendToolbar(
    e
  ) {
    this._toolbar ||
      (this.addSubview(e), (this._toolbar = e), this.layoutSubviews());
  }),
  (views.NavigationContainer.prototype.setNavigationContext = function setNavigationContext(
    e
  ) {
    var t = this.getContentContainer();
    this.addSubview(e, t), t.appendChild(e.getRootElement());
  }),
  (views.NavigationContainer.prototype.removeToolbar = function removeToolbar(
    e
  ) {
    this._toolbar &&
      (this._toolbar.removeFromSuperview(e), (this._toolbar = null));
  }),
  (views.NavigationContainer.prototype._applyBarDisplayAnimation = function _applyBarDisplayAnimation(
    e
  ) {
    (e.style.transition = 'top 0.3s, bottom 0.3s'),
      this._addListener(
        enums.Event.TRANSITIONEND,
        e,
        function _onBarAnimateComplete() {
          (e.style.transition = ''), this._removeListenersByNS('barAnimate');
        }.bind(this),
        'barAnimate'
      );
  }),
  (views.NavigationContainer.prototype.showNavigationBar = function showNavigationBar(
    e
  ) {
    requestAnimationFrame(
      function _showNavigationBar() {
        this._navbar &&
          (e && this._applyBarDisplayAnimation(this.__content),
          (this.__content.style.top =
            this._navbar.getRootElement().offsetHeight + 'px'),
          this._navbar.setVisible(!0, e));
      }.bind(this)
    );
  }),
  (views.NavigationContainer.prototype.hideNavigationBar = function hideNavigationBar(
    e
  ) {
    requestAnimationFrame(
      function _hideNavigationBar() {
        this._navbar &&
          (e && this._applyBarDisplayAnimation(this.__content),
          (this.__content.style.top = ''),
          this._navbar.setVisible(!1, e));
      }.bind(this)
    );
  }),
  (views.NavigationContainer.prototype.showToolbar = function showToolbar(t) {
    requestAnimationFrame(
      function _showToolbar() {
        if (this._toolbar) {
          var e = this._toolbar.getRootElement().offsetHeight + 'px';
          t && this._applyBarDisplayAnimation(this.__content),
            (this.__content.style.bottom = e),
            this._toolbar.setVisible(!0, t);
        }
      }.bind(this)
    );
  }),
  (views.NavigationContainer.prototype.hideToolbar = function hideToolbar(e) {
    requestAnimationFrame(
      function _hideToolbar() {
        this._toolbar &&
          (e && this._applyBarDisplayAnimation(this.__content),
          (this.__content.style.bottom = ''),
          this._toolbar.setVisible(!1, e));
      }.bind(this)
    );
  }),
  utils.JS.inherits(UTToolbarButtonControl, UTButtonControl),
  (UTToolbarButtonControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      e.classList.add('ut-toolbar-button-control'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTToolbarButtonControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTToolbarButtonControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTToolbarButtonControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.Toolbar = function FUIToolbar() {
    UTView.call(this),
      (this._visible = !0),
      Object.defineProperty(this, '_visible', {
        writable: !0,
        enumerable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.Toolbar, UTView),
  (views.Toolbar.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('nav');
      e.classList.add('ut-toolbar-view'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.Toolbar.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (views.Toolbar.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.Toolbar.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.Toolbar.prototype.setButtons = function setButtons(e) {
    this.removeSubviews(),
      e.forEach(function(e) {
        this.addSubview(e);
      }, this),
      this.layoutSubviews();
  }),
  (views.Toolbar.prototype.setVisible = function setVisible(e, t, i) {
    if (((e = !!e), this._visible !== e)) {
      if (t) {
        var s = this._visible
          ? enums.UIAnimation.FADE_OUT
          : enums.UIAnimation.FADE_IN;
        e && this.setVisibility(!0),
          this.perform(
            s,
            function() {
              e || this.setVisibility(!1), utils.JS.isFunction(i) && i();
            }.bind(this)
          );
      } else this.setVisibility(e), utils.JS.isFunction(i) && i();
      this._visible = e;
    }
  }),
  utils.JS.inherits(UTNavigationController, UTViewController),
  (UTNavigationController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getRootController();
      e.initialized || e.init();
      var t = this.getPrimaryNavigationItem();
      t.init(),
        t.addTarget(this, this._eBackButtonTapped, enums.Event.TAP),
        this._navigationBar.init(),
        this._toolbar.init();
    }
  }),
  (UTNavigationController.prototype.initWithRootController = function initWithRootController(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e.conforms(UTViewController),
        'Initialization expected an instance of UTViewController.'
      ),
      (this._rootController = e),
      this.init(),
      this.addChildViewController(e));
  }),
  (UTNavigationController.prototype.dealloc = function dealloc() {
    this._navigationBar &&
      (this._navigationBar.dealloc(), (this._navigationBar = null)),
      this._toolbar && (this._toolbar.dealloc(), (this._toolbar = null)),
      this.getPrimaryNavigationItem().dealloc(),
      (this._rootController = null),
      (this._currentController = null),
      (this._currentView = null),
      this._childViewControllers.forEach(function(e) {
        e.dealloc();
      }),
      this.superclass();
  }),
  (UTNavigationController.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new UTViewController();
  }),
  (UTNavigationController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.NavigationContainer();
  }),
  (UTNavigationController.prototype.viewWillAppear = function viewWillAppear() {
    this.superclass(),
      this._currentController && this._currentController.viewWillAppear();
  }),
  (UTNavigationController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      this._currentController && this._currentController.viewWillDisappear();
  }),
  (UTNavigationController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      !this._currentController && this._rootController
        ? (this._showController(this._rootController, !0),
          this._navigationBar.setPrimaryButton(
            this.getRootPrimaryNavigationItem()
          ),
          this._navigationBar.layoutSubviews())
        : this._currentController && this._currentController.viewDidAppear();
  }),
  (UTNavigationController.prototype.viewDidDisappear = function viewDidDisappear() {
    this.superclass(),
      this._currentController && this._currentController.viewDidDisappear();
  }),
  (UTNavigationController.prototype.setNavigationTitle = function setNavigationTitle(
    e
  ) {
    this._navigationBar.setHeader(e);
  }),
  (UTNavigationController.prototype.setNavigationStyle = function setNavigationStyle(
    e
  ) {
    this._navigationBar.setStyle(e);
  }),
  (UTNavigationController.prototype.setNavigationVisibility = function setNavigationVisibility(
    e,
    t
  ) {
    if (((e = !!e), this.isNavVisible !== e)) {
      var i = this.getView();
      (this.isNavVisible = e),
        i.hasNavigationBar() || i.appendNavigationBar(this._navigationBar),
        this.isNavVisible ? i.showNavigationBar(t) : i.hideNavigationBar(t);
    }
  }),
  (UTNavigationController.prototype.setToolbarVisibility = function setToolbarVisibility(
    e,
    t
  ) {
    if (((e = !!e), this.isToolbarVisible !== e)) {
      var i = this.getView();
      (this.isToolbarVisible = e),
        i.hasToolbar() || i.appendToolbar(this._toolbar),
        this.isToolbarVisible ? i.showToolbar(t) : i.hideToolbar(t);
    }
  }),
  (UTNavigationController.prototype.getRootController = function getRootController() {
    return (
      this._rootController ||
        ((this._rootController = this._getRootControllerInstance()),
        this.addChildViewController(this._rootController)),
      this._rootController
    );
  }),
  (UTNavigationController.prototype.getPreviousController = function getPreviousController(
    e
  ) {
    return (
      (!utils.JS.isNumber(e) || e < 1) && (e = 1),
      this._childViewControllers[
        this._childViewControllers.indexOf(this._currentController) - e
      ] || null
    );
  }),
  (UTNavigationController.prototype.getCurrentController = function getCurrentController() {
    return this._currentController;
  }),
  (UTNavigationController.prototype.getCurrentView = function getCurrentView() {
    return this._currentView;
  }),
  (UTNavigationController.prototype.getToolbarItems = function getToolbarItems() {
    return [];
  }),
  (UTNavigationController.prototype.getPrimaryNavigationItem = function getPrimaryNavigationItem() {
    return this._backButton;
  }),
  (UTNavigationController.prototype.getRootPrimaryNavigationItem = function getRootPrimaryNavigationItem() {
    return null;
  }),
  (UTNavigationController.prototype.getSecondaryNavigationItem = function getSecondaryNavigationItem() {
    return this._currentController
      ? this._currentController.getNavigationItem()
      : null;
  }),
  (UTNavigationController.prototype._showController = function _showController(
    e,
    t
  ) {
    if (this._currentController !== e) {
      gClickShield.showShield(components.ClickShield.SHIELD.INTERACTION),
        this._navigationBar.setInteractionState(!1),
        this._toolbar.setInteractionState(!1);
      var i = this._currentController;
      if (
        ((this._currentController = e), (this._currentView = e.getView()), i)
      ) {
        i.viewWillDisappear();
        var s = i.getView();
        s && s.removeFromSuperview(t);
      }
      this._currentController.viewWillAppear(),
        this._navigationBar.setHeader(this.getNavigationTitle()),
        this._navigationBar.setSecondaryButton(
          this.getSecondaryNavigationItem()
        ),
        this._navigationBar.layoutSubviews(),
        this._toolbar.setButtons(this._currentController.getToolbarItems());
      var n = this.getView();
      this._currentView.getSuperview() !== n &&
        (this.willPush(this._currentController),
        n.setNavigationContext(this._currentView),
        this.didPush(this._currentController)),
        this._navigationBar.setInteractionState(!0),
        this._toolbar.setInteractionState(!0),
        i &&
          (i.viewDidDisappear(),
          this._childViewControllers.indexOf(i) < 0 && i.dealloc()),
        this._currentController.viewDidAppear(),
        setTimeout(
          function() {
            gClickShield.hideShield(components.ClickShield.SHIELD.INTERACTION);
          }.bind(this),
          300
        );
    }
  }),
  (UTNavigationController.prototype.pushViewController = function pushViewController(
    e,
    t
  ) {
    this._isTransitioning ||
      0 <= this._childViewControllers.indexOf(e) ||
      ((this._isTransitioning = !0),
      1 === this._childViewControllers.length &&
        (this._navigationBar.setPrimaryButton(this.getPrimaryNavigationItem()),
        this._navigationBar.layoutSubviews()),
      this.addChildViewController(e),
      this._showController(e, t),
      (this._isTransitioning = !1));
  }),
  (UTNavigationController.prototype.popViewController = function popViewController(
    e
  ) {
    if (this._isTransitioning) return null;
    var t = this._childViewControllers.length - 1,
      i = this._childViewControllers[t],
      s = this._childViewControllers[t - 1];
    return i && s
      ? ((this._isTransitioning = !0),
        this._showController(s, e),
        this.removeChildViewController(i),
        i.dealloc(),
        this._childViewControllers.length <= 1 &&
          (this._navigationBar.setPrimaryButton(
            this.getRootPrimaryNavigationItem()
          ),
          this._navigationBar.layoutSubviews()),
        (this._isTransitioning = !1),
        i)
      : (utils.Debug.Assert(
          !1,
          'Expected the stack to not be empty or at the root already'
        ),
        null);
  }),
  (UTNavigationController.prototype.popToViewController = function popToViewController(
    e,
    t
  ) {
    if (
      this._isTransitioning ||
      !this._currentController ||
      e === this._currentController
    )
      return null;
    var i = null;
    for (
      this._isTransitioning = !0;
      1 <= this._childViewControllers.length &&
      (i = this._childViewControllers[
        this._childViewControllers.length - 1
      ]) !== e;

    )
      (i._parentViewController = null),
        this._childViewControllers.pop(),
        i !== this._currentController && i.dealloc();
    return (
      utils.Debug.Assert(
        1 <= this._childViewControllers.length,
        'View controller not found in navigation stack; stack is now empty.'
      ),
      this._childViewControllers.length <= 1 &&
        this._navigationBar.setPrimaryButton(
          this.getRootPrimaryNavigationItem()
        ),
      this._showController(
        this._childViewControllers[this._childViewControllers.length - 1],
        t
      ),
      (this._isTransitioning = !1),
      i
    );
  }),
  (UTNavigationController.prototype.popToRootViewController = function popToRootViewController(
    e
  ) {
    return 0 < this._childViewControllers.length
      ? this.popToViewController(this._childViewControllers[0], e)
      : null;
  }),
  (UTNavigationController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._currentController
      ? this._currentController.getNavigationTitle()
      : this._rootController
      ? this._rootController.getNavigationTitle()
      : '';
  }),
  (UTNavigationController.prototype.willPush = function willPush(e) {}),
  (UTNavigationController.prototype.didPush = function didPush(e) {}),
  (UTNavigationController.prototype._eBackButtonTapped = function _eBackButtonTapped(
    e,
    t,
    i
  ) {
    this.popViewController(!0);
  }),
  utils.JS.inherits(UTKeyboardEventController, UTObject),
  (UTKeyboardEventController.PRIORITY = {
    POPUP: 0,
    ACTIVE_ELEMENT: 1,
    VIEW: 2
  }),
  (UTKeyboardEventController.prototype.init = function init() {
    this.superclass(),
      isWeb() &&
        (this._eventDelegates.set(UTKeyboardEventController.PRIORITY.POPUP, []),
        this._eventDelegates.set(
          UTKeyboardEventController.PRIORITY.ACTIVE_ELEMENT,
          []
        ),
        this._eventDelegates.set(UTKeyboardEventController.PRIORITY.VIEW, []),
        document.addEventListener(enums.Event.KEYUP, this._keyupHandler, !1));
  }),
  (UTKeyboardEventController.prototype.dealloc = function dealloc() {
    this.superclass(),
      isWeb() &&
        document.removeEventListener(enums.Event.KEYUP, this._keyupHandler, !1);
  }),
  (UTKeyboardEventController.prototype.registerDelegate = function registerDelegate(
    e,
    t
  ) {
    if (isWeb()) {
      var i = e.conforms(interfaces.KeyboardEventDelegate);
      if (
        (utils.Debug.Assert(
          i,
          'Expected an object that conforms to the KeyboardEventDelegate interface'
        ),
        i)
      ) {
        var s = this._eventDelegates.get(t);
        s && s.indexOf(e) < 0 && s.push(e);
      }
    }
  }),
  (UTKeyboardEventController.prototype.unregisterDelegate = function unregisterDelegate(
    e,
    t
  ) {
    if (isWeb()) {
      var i = this._eventDelegates.get(t);
      if (i) {
        var s = i.indexOf(e);
        0 <= s && i.splice(s, 1);
      }
    }
  }),
  (UTKeyboardEventController.prototype._eHandleKeyUpEvent = function _eHandleKeyUpEvent(
    t
  ) {
    var e = this._eventDelegates.get(UTKeyboardEventController.PRIORITY.POPUP),
      i = this._eventDelegates.get(
        UTKeyboardEventController.PRIORITY.ACTIVE_ELEMENT
      ),
      s = this._eventDelegates.get(UTKeyboardEventController.PRIORITY.VIEW);
    e && 0 < e.length
      ? e.forEach(function(e) {
          e.handleKeyUpEvent(t);
        })
      : i && 0 < i.length
      ? i.forEach(function(e) {
          e.handleKeyUpEvent(t);
        })
      : s &&
        0 < s.length &&
        s.forEach(function(e) {
          e.handleKeyUpEvent(t);
        });
  }),
  utils.JS.inherits(UTRootPresentationController, UTPresentationController),
  (UTRootPresentationController.prototype._presentInContainerContext = function _presentInContainerContext() {
    var e = this._presentedViewController.getView(),
      t = e.getRootElement();
    (t.style.width = '100%'),
      (t.style.height = '100%'),
      this._insertView(e, this._presentingViewController.getView());
  }),
  utils.JS.inherits(UTTabBarItemNotificationView, UTView),
  (UTTabBarItemNotificationView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tab-bar-item-notif'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTabBarItemNotificationView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTTabBarItemNotificationView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTabBarItemNotificationView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTabBarItemNotificationView.prototype.setNumber = function setNumber(e) {
    var t = utils.JS.isValid(e) && 0 < e;
    this.getRootElement().textContent = t
      ? services.Localization.localizeNumber(e)
      : '';
  }),
  utils.JS.inherits(UTTabBarItemView, UTButtonControl),
  (UTTabBarItemView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      e.classList.add('ut-tab-bar-item'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTabBarItemView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTTabBarItemView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTabBarItemView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTabBarItemView.prototype.dealloc = function dealloc() {
    this.removeNotificationBubble(), this.superclass();
  }),
  (UTTabBarItemView.prototype.setTag = function setTag(e) {
    this._tag = e;
  }),
  (UTTabBarItemView.prototype.getTag = function getTag() {
    return this._tag;
  }),
  (UTTabBarItemView.prototype.removeNotificationBubble = function removeNotificationBubble() {
    utils.JS.isValid(this._notifBubble) &&
      (this._notifBubble.dealloc(), (this._notifBubble = null));
  }),
  (UTTabBarItemView.prototype.addNotificationBubble = function addNotificationBubble() {
    utils.JS.isValid(this._notifBubble) ||
      ((this._notifBubble = new UTTabBarItemNotificationView()),
      this.addSubview(this._notifBubble),
      this.layoutSubviews());
  }),
  utils.JS.inherits(UTTabBarView, UTTargetActionView),
  (UTTabBarView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('ut-tab-bar-view'),
        (this.__navTabBar = document.createElement('nav')),
        this.__navTabBar.classList.add('ut-tab-bar'),
        e.appendChild(this.__navTabBar),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTabBarView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__navTabBar = null);
  }),
  (UTTabBarView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTabBarView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTabBarView.Event = {
    TAB_SELECTED: 'UTTabBarView.Event.TAB_SELECTED'
  }),
  (UTTabBarView.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._tabItems.forEach(function(e) {
        e.removeTarget(this, this._eTabSelected, enums.Event.TAP);
      }, this);
  }),
  (UTTabBarView.prototype.layoutSubviews = function layoutSubviews() {
    this._subviews.forEach(function(e) {
      var t = e.view.getRootElement();
      e.container === this.getRootElement()
        ? e.container.insertBefore(t, this.__navTabBar)
        : e.container.appendChild(t);
    }, this);
  }),
  (UTTabBarView.prototype.setTabItems = function setTabItems(e) {
    this._tabItems.forEach(function(e) {
      e.removeFromSuperview();
    }, this),
      (this._tabItems = e.slice()),
      this._tabItems.forEach(function(e) {
        e.addTarget(this, this._eTabSelected, enums.Event.TAP),
          this.addSubview(e, this.__navTabBar);
      }, this);
  }),
  (UTTabBarView.prototype.setSelectedIndex = function setSelectedIndex(i) {
    this._tabItems[i] &&
      this._tabItems.forEach(function(e, t) {
        e.toggleClass(enums.UIState.SELECTED, t === i);
      });
  }),
  (UTTabBarView.prototype.toggleItemNotification = function toggleItemNotification(
    e,
    t
  ) {
    var i = this._tabItems[e];
    i && (t ? i.addNotificationBubble() : i.removeNotificationBubble());
  }),
  (UTTabBarView.prototype._eTabSelected = function _eTabSelected(e, t, i) {
    if (this.isInteractionEnabled()) {
      var s = this._tabItems.indexOf(e);
      this._triggerActions(UTTabBarView.Event.TAB_SELECTED, {
        index: s,
        tag: e.getTag()
      });
    }
  }),
  utils.JS.inherits(UTTabBarController, UTViewController),
  (UTTabBarController.prototype.initWithViewControllers = function initWithViewControllers(
    e
  ) {
    if (!this.initialized) {
      var t = [];
      e.forEach(function(e) {
        this.addChildViewController(e),
          e.tabBarItem ||
            ((e.tabBarItem = new UTTabBarItemView()),
            e.tabBarItem.init(),
            e.tabBarItem.setText(e.getNavigationTitle())),
          t.push(e.tabBarItem);
      }, this);
      var i = this.getView();
      i.setTabItems(t),
        i.addTarget(this, this._eTabSelected, UTTabBarView.Event.TAB_SELECTED),
        this.init();
    }
  }),
  (UTTabBarController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTabBarView();
  }),
  (UTTabBarController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      !this._currentController &&
        0 < this._childViewControllers.length &&
        (this._showController(this._childViewControllers[0]),
        this.getView().setSelectedIndex(0));
  }),
  (UTTabBarController.prototype.getCurrentViewController = function getCurrentViewController() {
    return this._currentController;
  }),
  (UTTabBarController.prototype.setSelectedIndex = function setSelectedIndex(
    e
  ) {
    var t = this._childViewControllers[e];
    t instanceof UTViewController &&
      (this.getView().setSelectedIndex(e), this._showController(t));
  }),
  (UTTabBarController.prototype._getIndexOfTabBarItemByTag = function _getIndexOfTabBarItemByTag(
    e
  ) {
    var t,
      i = -1,
      s = this._childViewControllers.length;
    for (t = 0; t < s; t++) {
      var n = this._childViewControllers[t].tabBarItem;
      if (n && n.getTag() === e) {
        i = t;
        break;
      }
    }
    return i;
  }),
  (UTTabBarController.prototype.setSelectedIndexByTag = function setSelectedIndexByTag(
    e
  ) {
    var t = this._getIndexOfTabBarItemByTag(e);
    0 <= t && this.setSelectedIndex(t);
  }),
  (UTTabBarController.prototype._showController = function _showController(
    e,
    t
  ) {
    if (this._currentController !== e) {
      var i = this.getView();
      gClickShield.showShield(components.ClickShield.SHIELD.INTERACTION),
        i.setInteractionState(!1);
      var s = this._currentController;
      if (
        ((this._currentController = e), (this._currentView = e.getView()), s)
      ) {
        s.viewWillDisappear();
        var n = s.getView();
        n && n.removeFromSuperview(t);
      }
      this._currentController.viewWillAppear(),
        this._currentView.getSuperview() !== i &&
          (i.addSubview(this._currentView), i.layoutSubviews()),
        i.setInteractionState(!0),
        s && s.viewDidDisappear(),
        this._currentController.viewDidAppear(),
        setTimeout(function() {
          gClickShield.hideShield(components.ClickShield.SHIELD.INTERACTION);
        }, 300);
    }
  }),
  (UTTabBarController.prototype._eTabSelected = function _eTabSelected(
    e,
    t,
    i
  ) {
    var s = (i && i.index) || 0,
      n = this._childViewControllers[s];
    n instanceof UTViewController &&
      (this.getView().setSelectedIndex(s), this._showController(n));
  }),
  utils.JS.inherits(UTGameTabBarController, UTTabBarController),
  (UTGameTabBarController.TabTag = {
    HOME: 0,
    SQUADS: 1,
    SBC: 2,
    TRANSFERS: 3,
    STORE: 4,
    CLUB: 5,
    SETTINGS: 6,
    LEADERBOARDS: 7
  }),
  (UTGameTabBarController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._toggleStoreNotificationBubble(
        0 < services.User.getUser().getNumUnopenedPacks()
      ),
      getDefaultDispatcher().addObserver(
        enums.Notification.STORE_PACK_COUNT_CHANGE,
        this,
        this._nStorePackChange
      );
  }),
  (UTGameTabBarController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      getDefaultDispatcher().removeObserver(
        enums.Notification.STORE_PACK_COUNT_CHANGE,
        this
      );
  }),
  (UTGameTabBarController.prototype._toggleStoreNotificationBubble = function _toggleStoreNotificationBubble(
    e
  ) {
    var t = this._getIndexOfTabBarItemByTag(
      UTGameTabBarController.TabTag.STORE
    );
    0 <= t && this.getView().toggleItemNotification(t, e);
  }),
  (UTGameTabBarController.prototype._eTabSelected = function _eTabSelected(
    e,
    t,
    i
  ) {
    i.tag !== UTGameTabBarController.TabTag.LEADERBOARDS ||
    services.Configuration.checkFeatureEnabled(
      enums.ServerFeature.LEADERBOARDS_ENABLED
    )
      ? (this.superclass(e, t, i),
        this._currentController instanceof UTNavigationController &&
          this._currentController.popToRootViewController())
      : services.Notification.queue([
          services.Localization.localize('popup.error.LeaderboardsDown'),
          enums.UINotificationType.NEGATIVE
        ]);
  }),
  (UTGameTabBarController.prototype._nStorePackChange = function _nStorePackChange(
    e,
    t,
    i
  ) {
    this._toggleStoreNotificationBubble(0 < i.unopenedPacks);
  }),
  NamespaceManager.Register('interfaces'),
  (interfaces.ListDataComponent = function() {}),
  (interfaces.ListDataComponent.prototype.render = function(e) {}),
  (interfaces.ListDataComponent.prototype.update = function(e) {}),
  NamespaceManager.Register('interfaces'),
  (interfaces.ListRow = function() {}),
  (interfaces.ListRow.prototype.setData = function(e) {}),
  (interfaces.ListRow.prototype.getData = function() {}),
  (interfaces.ListRow.prototype.render = function() {}),
  (interfaces.ListRow.prototype.setDataComponent = function(e) {}),
  (interfaces.ListRow.prototype.setAction = function(e, t) {}),
  (interfaces.ListRow.prototype.setTapCallback = function(e) {}),
  NamespaceManager.Register('components'),
  (components.ListRowPersona = function() {
    UTTargetActionView.call(this),
      (this._data = {
        persona: null,
        club: null
      }),
      (this._tapCallback = null),
      this._generate();
  }),
  utils.JS.inherits(components.ListRowPersona, UTTargetActionView),
  (components.ListRowPersona.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      e.classList.add('ut-persona-selector-item'),
        e.classList.add('ut-group-button');
      var t = document.createElement('div');
      t.classList.add('ut-persona-selector-item-details'),
        (this.__personaIcon = document.createElement('div')),
        this.__personaIcon.classList.add('btn-icon'),
        t.appendChild(this.__personaIcon),
        (this.__personaName = document.createElement('span')),
        this.__personaName.classList.add('btn-text'),
        t.appendChild(this.__personaName),
        (this.__clubName = document.createElement('span')),
        this.__clubName.classList.add('btn-subtext'),
        t.appendChild(this.__clubName),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ListRowPersona.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__personaIcon = null),
      (this.__personaName = null),
      (this.__clubName = null);
  }),
  (components.ListRowPersona.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ListRowPersona.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ListRowPersona.prototype.dealloc = function dealloc() {
    (this._data = null), (this._tapCallback = null), this.superclass();
  }),
  (components.ListRowPersona.prototype.setData = function(e) {
    this._data = e;
  });

function UTListDataPlayerStatsView() {
  UTView.call(this),
    (this.slotData = null),
    (this.comparisonData = null),
    (this._zoneClasses = [
      {
        zone: enums.PlayerZone.ATTACKERS,
        zoneClass: 'zone-att'
      },
      {
        zone: enums.PlayerZone.DEFENDERS,
        zoneClass: 'zone-def'
      },
      {
        zone: enums.PlayerZone.MIDFIELDERS,
        zoneClass: 'zone-mid'
      },
      {
        zone: enums.PlayerZone.GOALKEEPERS,
        zoneClass: 'zone-gk'
      }
    ]);
}

function UTListDataFitnessView() {
  UTView.call(this), (this._comparisonData = null);
}

function UTListActiveTagView() {
  UTView.call(this),
    (this._string = ''),
    (this._iconClass = ''),
    this._generate();
}

function UTToggleControl() {
  UTControl.call(this),
    (this._toggled = !1),
    Object.defineProperty(this, '_toggled', {
      writable: !0,
      enumerable: !1
    });
}

function UTToggleCellView() {
  UTTargetActionView.call(this);
}

function UTToggleControlGroupView() {
  UTTargetActionView.call(this), (this._toggles = new UTHashTable());
}

function UTMyClubSearchFiltersViewController() {
  UTViewController.call(this),
    (this._searchViewmodel = new viewmodels.ItemSearch()),
    (this._clubViewmodel = null),
    (this._searchCriteria = null),
    (this._consumable = null);
}

function UTListNoResultsView() {
  UTView.call(this);
}

function UTSplitView() {
  UTView.call(this),
    (this._lView = null),
    Object.defineProperty(this, '_lView', {
      enumerable: !1,
      writable: !0
    }),
    (this._rView = null),
    Object.defineProperty(this, '_rView', {
      enumerable: !1,
      writable: !0
    });
}

function UTSplitViewController() {
  UTViewController.call(this),
    (this._leftController = null),
    Object.defineProperty(this, '_leftController', {
      enumerable: !1,
      writable: !0
    }),
    (this._rightController = null),
    Object.defineProperty(this, '_rightController', {
      enumerable: !1,
      writable: !0
    }),
    (this._layout = UTSplitViewController.Layout.SIDEBAR_RIGHT),
    Object.defineProperty(this, '_layout', {
      enumerable: !1,
      writable: !0
    });
}

function UTPseudoTableView() {
  UTView.call(this), (this._rowGroups = []);
}

function UTProgressBarView() {
  UTView.call(this),
    (this._progress = 0),
    Object.defineProperty(this, '_progress', {
      writable: !0,
      enumerable: !1
    });
}

function UTCompareActionPanelViewController() {
  UTViewController.call(this),
    (this._btnSwap = null),
    (this.onSwap = new UTObservable());
}

function UTPlayerBioView() {
  UTView.call(this),
    (this._tables = []),
    (this._headers = []),
    (this._pinnedRow = null);
}

function UTPlayerBioViewController() {
  UTViewController.call(this),
    (this._pinnedItem = null),
    (this._viewModel = new viewmodels.ItemList([])),
    (this._pinnedItemController = new controllers.views.PinnedListItem());
}

function UTPackGraphicView() {
  UTView.call(this);
}

function TNSPropertiesDTO() {
  (this.nav = !1),
    (this.controls = !0),
    (this.loop = !1),
    (this.textDirection = services.Localization.isRTL() ? 'rtl' : 'ltr'),
    (this.touch = !0),
    (this.mouseDrag = !0),
    (this.startIndex = 0),
    (this.speed = 300),
    (this.autoplay = !1),
    (this.autoplaySpeed = 5e3),
    (this.prevButton = !1),
    (this.nextButton = !1),
    (this.controlsText = ['', '']),
    (this.autoplayText = ['', '']),
    (this.items = 1),
    (this.navPosition = 'bottom'),
    (this.container = '.slider'),
    (this.preventActionWhenRunning = !1);
}

function TNSContainerView() {
  UTView.call(this),
    (this.properties = null),
    Object.defineProperty(this, 'properties', {
      writable: !0
    }),
    (this.slider = null),
    Object.defineProperty(this, 'slider', {
      writable: !0
    }),
    (this._eventHandler = this._handleSliderEvent.bind(this)),
    Object.defineProperty(this, '_eventHandler', {
      enumerable: !1,
      writable: !1
    }),
    (this._afterChangeCallback = null),
    Object.defineProperty(this, '_afterChangeCallback', {
      enumerable: !1,
      writable: !0
    });
}

function UTRewardsCarouselView() {
  UTView.call(this),
    (this._mobileTitle = ''),
    (this._visibleItems = 1),
    (this._numOfRewards = 0),
    (this._playerItems = []),
    (this._packs = []),
    (this._afterChangeFn = null);
}

function UTPlayerPickRewardsController(e) {
  controllers.views.popups.InGameRewards.call(this),
    (this._rewards = [
      new transferobjects.Reward(
        {
          count: 1
        },
        e
      )
    ]);
}

function UTPlayerPickOptionView() {
  UTTargetActionView.call(this), (this._itemView = null), this._generate();
}

function UTPlayerPicksView() {
  UTTargetActionView.call(this),
    (this._playerPickViews = []),
    (this._phoneLargeItem = null),
    this._generate();
}

function UTPlayerPicksViewController() {
  UTViewController.call(this),
    (this._index = 0),
    (this._picks = []),
    (this._ownership = []),
    (this._isPendingSelection = !1),
    (this._itemInfoStateViewModel = new UTItemInfoStateViewModel(
      gUserSettingsModel
    ));
}

function UTEmptySectionMessageView() {
  UTView.call(this);
}

function UTSectionedSlotList() {
  views.lists.SectionedItemList.call(this), this._generate();
}
(components.ListRowPersona.prototype.getData = function() {
  return this._data;
}),
  (components.ListRowPersona.prototype.render = function() {
    var e = '';
    switch (this._data.club.platform) {
      case enums.Platform.XBO:
        e = enums.UIPlatform.XBO;
        break;
      case enums.Platform.XBX:
        e = enums.UIPlatform.XBX;
        break;
      case enums.Platform.PS4:
        e = enums.UIPlatform.PS4;
        break;
      case enums.Platform.PS3:
        e = enums.UIPlatform.PS3;
        break;
      case enums.Platform.PC:
        e = enums.UIPlatform.PC;
        break;
      case enums.Platform.SWI:
        e = enums.UIPlatform.SWI;
        break;
      default:
        utils.Debug.Assert(
          !1,
          '[components.ListRowPersona] Unrecognized gameSku.'
        );
    }
    (this.__clubName.textContent = this._data.club.name),
      (this.__personaName.textContent = this._data.persona.name),
      this.addClass(e);
  }),
  (components.ListRowPersona.prototype.setDataComponent = function(e) {}),
  (components.ListRowPersona.prototype.setAction = function(e, t) {}),
  (components.ListRowPersona.prototype.setTapCallback = function setTapCallback(
    e
  ) {
    (this._tapCallback = e), this.addClass(enums.UIRowActionClass.MORE);
  }),
  (components.ListRowPersona.prototype._touchStarted = function _touchStarted(
    e
  ) {
    this.superclass(), this.addClass(enums.UIState.ACTIVE);
  }),
  (components.ListRowPersona.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE);
  }),
  (components.ListRowPersona.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE);
  }),
  (components.ListRowPersona.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(),
      utils.JS.isFunction(this._tapCallback) && this._tapCallback(this._data);
  }),
  utils.JS.inherits(UTPersonaSelectorView, UTTargetActionView),
  (UTPersonaSelectorView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-persona-selector'),
        e.classList.add('ut-content-container');
      var t = document.createElement('div');
      t.classList.add('ut-content');
      var i = document.createElement('section'),
        s = document.createElement('header');
      (this.__currentPersonaTitle = document.createElement('h1')),
        s.appendChild(this.__currentPersonaTitle),
        i.appendChild(s);
      var n = document.createElement('div');
      n.classList.add('ut-button-group'),
        (this._selectedPersona = new components.ListRowPersona()),
        n.appendChild(this._selectedPersona.getRootElement()),
        (this.__helpText = document.createElement('p')),
        n.appendChild(this.__helpText),
        i.appendChild(n),
        t.appendChild(i);
      var o = document.createElement('section'),
        a = document.createElement('header');
      (this.__changePersonaTitle = document.createElement('h1')),
        a.appendChild(this.__changePersonaTitle),
        o.appendChild(a),
        (this.__personaList = document.createElement('div')),
        this.__personaList.classList.add('ut-button-group'),
        o.appendChild(this.__personaList),
        t.appendChild(o),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTPersonaSelectorView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__currentPersonaTitle = null),
      this._selectedPersona.destroy(),
      (this.__helpText = null),
      (this.__changePersonaTitle = null),
      (this.__personaList = null);
  }),
  (UTPersonaSelectorView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPersonaSelectorView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPersonaSelectorView.prototype.init = function init() {
    this.superclass(),
      (this.__currentPersonaTitle.textContent = services.Localization.localize(
        'title.selectedpersona'
      )),
      (this.__changePersonaTitle.textContent = services.Localization.localize(
        'title.personaselector'
      )),
      (this.__helpText.textContent = services.Localization.localize(
        'persona.helptext'
      ));
  }),
  (UTPersonaSelectorView.prototype.dealloc = function dealloc() {
    this._clearPersonaRows(), this.superclass();
  }),
  (UTPersonaSelectorView.prototype._clearPersonaRows = function _clearPersonaRows() {
    this._personaRows.forEach(function(e) {
      e.destroy();
    }),
      (this._personaRows = []);
  }),
  (UTPersonaSelectorView.prototype.setSelectedPersona = function setSelectedPersona(
    e
  ) {
    this._selectedPersona.setData({
      persona: e,
      club: e.getCurrentClub()
    }),
      this._selectedPersona.render();
  }),
  (UTPersonaSelectorView.prototype.setSelectablePersonas = function setSelectablePersonas(
    e
  ) {
    this._clearPersonaRows(),
      DOMKit.empty(this.__personaList),
      e.forEach(function(i) {
        i.getValidClubs().forEach(function(e) {
          var t = new components.ListRowPersona();
          t.setData({
            persona: i,
            club: e
          }),
            t.render(),
            t.setTapCallback(this._onPersonaSelect.bind(this)),
            t.setInteractionState(!0),
            this._personaRows.push(t),
            this.__personaList.appendChild(t.getRootElement());
        }, this);
      }, this);
  }),
  (UTPersonaSelectorView.prototype._onPersonaSelect = function _onPersonaSelect(
    e
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.MISC,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Change Persona'
    ),
      this._triggerActions(enums.Event.TAP, e);
  }),
  utils.JS.inherits(UTPersonaSelectorViewController, UTViewController),
  (UTPersonaSelectorViewController.prototype.init = function init() {
    this.superclass(),
      this.getView().addTarget(this, this._ePersonaSelected, enums.Event.TAP);
  }),
  (UTPersonaSelectorViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTPersonaSelectorView();
  }),
  (UTPersonaSelectorViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Settings - Persona Selector';
  }),
  (UTPersonaSelectorViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.personaselector');
  }),
  (UTPersonaSelectorViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.HOME,
        'Persona Selector'
      );
    var e = this.getView(),
      t = services.User.getUser();
    e.setSelectedPersona(t.getSelectedPersona()),
      e.setSelectablePersonas(t.getPersonas(!0));
  }),
  (UTPersonaSelectorViewController.prototype._changePersona = function _changePersona(
    e,
    t
  ) {
    hasConnection()
      ? ((e.sku = t),
        getAppMain()
          .getLoginController()
          .switchPersona(e))
      : (utils.PopupManager.showNoInternetConnectionPopup(),
        this.getView().setInteractionState(!0));
  }),
  (UTPersonaSelectorViewController.prototype._ePersonaSelected = function _ePersonaSelected(
    e,
    t,
    i
  ) {
    var s = this.getView();
    s.setInteractionState(!1),
      utils.PopupManager.ShowConfirmation(
        utils.PopupManager.Confirmations.CHANGE_PERSONA,
        null,
        this._changePersona.bind(this, i.persona, i.club.sku),
        function() {
          s.setInteractionState(!0);
        }.bind(this)
      );
  }),
  utils.JS.inherits(UTFlatButtonControl, UTButtonControl),
  (UTFlatButtonControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      e.classList.add('flat'), (this.__root = e), (this._generated = !0);
    }
  }),
  (UTFlatButtonControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTFlatButtonControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTFlatButtonControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.PersonaClub = function UTPersonaClubDTO(e) {
    (this.abbr = e.clubAbbr),
      Object.defineProperty(this, 'abbr', {
        writable: !1,
        enumerable: !0
      }),
      (this.name = e.clubName),
      Object.defineProperty(this, 'name', {
        writable: !1,
        enumerable: !0
      }),
      (this.established = e.established),
      Object.defineProperty(this, 'established', {
        writable: !1,
        enumerable: !0
      }),
      (this.lastAccessTime = e.lastAccessTime),
      Object.defineProperty(this, 'lastAccessTime', {
        writable: !1,
        enumerable: !0
      }),
      (this.assetId = e.assetId),
      Object.defineProperty(this, 'assetId', {
        writable: !0,
        enumerable: !0
      }),
      (this.sku = e.sku),
      Object.defineProperty(this, 'sku', {
        writable: !1,
        enumerable: !0
      }),
      (this.platform = utils.FUTData.mapSkuToPlatform(this.sku)),
      Object.defineProperty(this, 'platform', {
        writable: !1,
        enumerable: !0
      }),
      (this.year = e.year),
      Object.defineProperty(this, 'year', {
        writable: !1,
        enumerable: !0
      }),
      (this.isXbox =
        this.platform === enums.Platform.XBX ||
        this.platform === enums.Platform.XBO),
      Object.defineProperty(this, 'isXbox', {
        writable: !1,
        enumerable: !0
      }),
      (this.isPlaystation =
        this.platform === enums.Platform.PS3 ||
        this.platform === enums.Platform.PS4),
      Object.defineProperty(this, 'isPlaystation', {
        writable: !1,
        enumerable: !0
      }),
      (this.isPC = this.platform === enums.Platform.PC),
      Object.defineProperty(this, 'isPC', {
        writable: !1,
        enumerable: !0
      }),
      (this.isSwitch = this.platform === enums.Platform.SWI),
      Object.defineProperty(this, 'isSwitch', {
        writable: !1,
        enumerable: !0
      }),
      (this.isGen3 =
        this.platform === enums.Platform.PS3 ||
        this.platform === enums.Platform.XBX),
      Object.defineProperty(this, 'isGen3', {
        writable: !1,
        enumerable: !0
      });
  }),
  (transferobjects.PersonaClub.prototype.setAssetId = function setAssetId(e) {
    this.assetId = e;
  }),
  NamespaceManager.Register('entities'),
  (entities.Persona = function UTPersonaEntity(e) {
    var t;
    Object.defineProperty(this, 'sku', {
      get: function() {
        return t;
      },
      set: function(e) {
        this.clubs.has(e) && (t = e);
      }
    }),
      (this.id = e.personaId),
      Object.defineProperty(this, 'id', {
        writable: !1
      }),
      (this.name = e.personaName),
      Object.defineProperty(this, 'name', {
        writable: !1
      }),
      (this.isReturningUser = 1 === e.returningUser),
      Object.defineProperty(this, 'isReturningUser', {
        writable: !1
      }),
      (this.isFreeTrial = e.trialFree),
      Object.defineProperty(this, 'isFreeTrial', {
        writable: !1
      }),
      (this.isAccessTrial = e.trial),
      Object.defineProperty(this, 'isAccessTrial', {
        writable: !1
      }),
      (this.state = e.userState || enums.UserState.NONE),
      Object.defineProperty(this, 'state', {
        writable: !1
      }),
      (this.clubs = new UTHashTable()),
      (this.sku = enums.SKU.NONE);
    var r = 0;
    e.userClubList.forEach(function(e) {
      var t = parseInt(APP_YEAR, 10),
        i = t - 1,
        s = parseInt(e.year, 10);
      if ((s === t || s === i) && (this.isReturningUser || s !== i)) {
        var n = enums.SKU.NONE;
        if (utils.JS.isValid(e.skuAccessList)) {
          var o;
          for (o in e.skuAccessList)
            if (
              e.skuAccessList.hasOwnProperty(o) &&
              e.skuAccessList[o] === e.lastAccessTime
            ) {
              n = o;
              break;
            }
          var a = new transferobjects.PersonaClub({
            clubAbbr: e.clubAbbr,
            clubName: e.clubName,
            established: e.established,
            lastAccessTime: e.lastAccessTime,
            assetId: e.assetId,
            platform: e.platform,
            sku: n,
            year: e.year
          });
          this.clubs.set(a.sku, a),
            a.lastAccessTime > r &&
              ((r = a.lastAccessTime), (this.sku = a.sku));
        }
      }
    }, this),
      utils.Debug.Assert(
        this.sku !== enums.SKU.NONE,
        'this account has no sku'
      ),
      (this.hasFUT = 0 < this.clubs.length),
      Object.defineProperty(this, 'hasFUT', {
        writable: !1
      }),
      (this.hasClubForCurrentYear = !1),
      Object.defineProperty(this, 'hasClubForCurrentYear', {
        get: function() {
          return utils.JS.isValid(
            this.clubs.find(function(e) {
              return e.year === APP_YEAR.toString();
            })
          );
        }
      }),
      (this.hasFullAccess =
        !this.isAccessTrial && !this.isFreeTrial && this.hasClubForCurrentYear),
      Object.defineProperty(this, 'hasFullAccess', {
        writable: !1
      }),
      (this.hasOriginAccess = !1),
      Object.defineProperty(this, 'hasOriginAccess', {
        writable: !0
      }),
      (this.isEligibleForMobileStart = !1),
      Object.defineProperty(this, 'isEligibleForMobileStart', {
        get: function() {
          return (
            !!this.isReturningUser &&
            (!this.hasClubForCurrentYear ||
              ((this.sku === enums.SKU.PREV_XBO &&
                !this.clubs.has(enums.SKU.XBO)) ||
                (this.sku === enums.SKU.PREV_PS4 &&
                  !this.clubs.has(enums.SKU.PS4)) ||
                (this.sku === enums.SKU.PREV_PC &&
                  !this.clubs.has(enums.SKU.PC))))
          );
        }
      }),
      (this.platform = enums.Platform.NONE),
      Object.defineProperty(this, 'platform', {
        get: function() {
          return this.clubs.has(this.sku)
            ? this.clubs.get(this.sku).platform
            : enums.Platform.NONE;
        }
      }),
      (this.isXbox = !1),
      Object.defineProperty(this, 'isXbox', {
        get: function() {
          return !!this.clubs.has(this.sku) && this.clubs.get(this.sku).isXbox;
        }
      }),
      (this.isPlaystation = !1),
      Object.defineProperty(this, 'isPlaystation', {
        get: function() {
          return (
            !!this.clubs.has(this.sku) && this.clubs.get(this.sku).isPlaystation
          );
        }
      }),
      (this.isPC = !1),
      Object.defineProperty(this, 'isPC', {
        get: function() {
          return !!this.clubs.has(this.sku) && this.clubs.get(this.sku).isPC;
        }
      }),
      (this.isSwitch = !1),
      Object.defineProperty(this, 'isSwitch', {
        get: function() {
          return (
            !!this.clubs.has(this.sku) && this.clubs.get(this.sku).isSwitch
          );
        }
      }),
      (this.isGen3 = !1),
      Object.defineProperty(this, 'isGen3', {
        get: function() {
          return !!this.clubs.has(this.sku) && this.clubs.get(this.sku).isGen3;
        }
      }),
      (this.lastAccessTime = 0),
      Object.defineProperty(this, 'lastAccessTime', {
        get: function() {
          return this.clubs.has(this.sku)
            ? this.clubs.get(this.sku).lastAccessTime
            : 0;
        }
      }),
      (this._loyaltyRewards = []),
      Object.defineProperty(this, '_loyaltyRewards', {
        writable: !0
      });
  }),
  (entities.Persona.prototype.getValidClubs = function getValidClubs() {
    return this.clubs.filter(function _checkValidClub(e) {
      var t = parseInt(APP_YEAR, 10),
        i = t - 1,
        s = parseInt(e.year, 10),
        n =
          !this.hasClubForCurrentYear &&
          this.isReturningUser &&
          this.state !== enums.UserState.RETURNING_USER_EXPIRED &&
          s === i;
      return s === t || n;
    }, this);
  }),
  (entities.Persona.prototype.getCurrentClub = function getCurrentClub() {
    return this.clubs.get(this.sku);
  }),
  (entities.Persona.prototype.createClub = function createClub(e, t, i) {
    var u = new UTObservable();
    if (
      this.hasClubForCurrentYear ||
      !this.isReturningUser ||
      this.state === enums.UserState.RETURNING_USER_EXPIRED
    )
      return (
        u.notify({
          success: !1,
          status: enums.HTTPStatusCode.FORBIDDEN,
          data: null
        }),
        u
      );
    return (
      accessobjects.Onboarding.createClub(e, t, i).observe(
        this,
        function _onCreateClubComplete(e, t) {
          if ((e.unobserve(this), t.success)) {
            var i = t.response,
              s = utils.FUTData.mapSkuToCurrentYear(this.sku),
              n = utils.JS.find(i.login.actives, function(e) {
                return e.header && 'Badge' === e.header;
              }),
              o = utils.JS.isValid(n) ? n.assetId : -1,
              a = new transferobjects.PersonaClub({
                clubAbbr: i.login.clubAbbr,
                clubName: i.login.clubName,
                established: parseInt(i.login.established, 10),
                lastAccessTime: parseInt(i.login.established, 10),
                assetId: o,
                platform: this.platform,
                sku: s,
                year: APP_YEAR.toString()
              });
            this.clubs.set(a.sku, a), (this.sku = a.sku);
            var r = i.starterPack.map(function(e) {
                return factories.Item.createItem(e);
              }),
              l = null,
              c = r.filter(function(e) {
                return e.isPlayer();
              });
            0 < c.length
              ? c.forEach(function(e) {
                  (!utils.JS.isValid(l) || l.rating < e.rating) && (l = e);
                })
              : r.forEach(function(e) {
                  (!utils.JS.isValid(l) || l.discardValue < e.discardValue) &&
                    (l = e);
                }),
              u.notify({
                success: !0,
                status: t.status,
                data: {
                  items: r,
                  highestRated: l
                }
              });
          } else
            u.notify({
              success: !1,
              status: t.status,
              data: null
            });
        }
      ),
      u
    );
  }),
  (entities.Persona.prototype.setLoyaltyRewards = function setLoyaltyRewards(
    e
  ) {
    this._loyaltyRewards = e;
  }),
  (entities.Persona.prototype.getLoyaltyRewards = function getLoyaltyRewards() {
    return this._loyaltyRewards;
  }),
  NamespaceManager.Register('views'),
  (views.Persona = function PersonaView() {
    UTView.call(this),
      (this._currentPlatform = enums.UIPlatform.NONE),
      this._generate();
  }),
  utils.JS.inherits(views.Persona, UTView),
  (views.Persona.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('persona'),
        (this.__userInfo = document.createElement('div')),
        this.__userInfo.classList.add('user-info'),
        (this._imgBadge = new UTImageView()),
        this.__userInfo.appendChild(this._imgBadge.getRootElement());
      var t = document.createElement('div');
      t.classList.add('user-data-container'),
        (this.__userName = document.createElement('h1')),
        t.appendChild(this.__userName),
        (this.__established = document.createElement('h2')),
        t.appendChild(this.__established),
        this.__userInfo.appendChild(t),
        e.appendChild(this.__userInfo),
        (this.__platform = document.createElement('div')),
        this.__platform.classList.add('platform'),
        (this._actionBtn = new UTFlatButtonControl()),
        this._actionBtn.getRootElement().classList.add('alt'),
        this.__platform.appendChild(this._actionBtn.getRootElement()),
        e.appendChild(this.__platform),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.Persona.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__userInfo = null),
      this._imgBadge.destroy(),
      (this.__userName = null),
      (this.__established = null),
      (this.__platform = null),
      this._actionBtn.destroy();
  }),
  (views.Persona.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.Persona.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.Persona.prototype.init = function init() {
    this.superclass(),
      this._actionBtn.setText(services.Localization.localize('more.persona')),
      this._actionBtn.init(),
      this._actionBtn.getRoot().hide();
  }),
  (views.Persona.prototype.setClubBadge = function setClubBadge(e) {
    this._imgBadge.setResource(
      utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_BADGE_DARK,
        enums.Year.ASSET,
        e
      )
    ),
      this._imgBadge.addClass('iconActive');
  }),
  (views.Persona.prototype.setUsername = function setUsername(e) {
    this.__userName.textContent = e;
  }),
  (views.Persona.prototype.setEstablishedDate = function setEstablishedDate(e) {
    this.__established.textContent = services.Localization.localizeEstablishedDate(
      new Date(1e3 * e)
    );
  }),
  (views.Persona.prototype.setPlatform = function setPlatform(e) {
    if (this._currentPlatform !== e) {
      switch (
        (this._currentPlatform !== enums.UIPlatform.NONE &&
          this.__platform.classList.remove(this._currentPlatform),
        e)
      ) {
        case enums.Platform.XBO:
          this._currentPlatform = enums.UIPlatform.XBO;
          break;
        case enums.Platform.XBX:
          this._currentPlatform = enums.UIPlatform.XBX;
          break;
        case enums.Platform.PS4:
          this._currentPlatform = enums.UIPlatform.PS4;
          break;
        case enums.Platform.PS3:
          this._currentPlatform = enums.UIPlatform.PS3;
          break;
        case enums.Platform.PC:
          this._currentPlatform = enums.UIPlatform.PC;
          break;
        case enums.Platform.SWI:
          this._currentPlatform = enums.UIPlatform.SWI;
          break;
        default:
          utils.Debug.Assert(!1, 'Encountered an unsupported SKU');
      }
      this.__platform.classList.add(this._currentPlatform);
    }
  }),
  (views.Persona.prototype.getActionButton = function getActionButton() {
    return this._actionBtn;
  }),
  (views.Persona.prototype.setBtnText = function setBtnText(e) {
    this._actionBtn.setText(e);
  }),
  (views.Persona.prototype.setBtnVisibility = function setBtnVisibility(e) {
    this._actionBtn.setDisplay(e);
  }),
  NamespaceManager.Register('viewmodels'),
  (viewmodels.ItemList = function ItemList(e) {
    UTIterator.call(this, e),
      (this.dataUpdated = new UTObservable()),
      Object.defineProperty(this, 'dataUpdated', {
        writable: !1
      }),
      (this._auctionUpdateArray = []),
      (this._auctionUpdateTimer = null),
      (this._auctionObservable = null),
      (this._updateIntervals = [
        {
          expires: 30,
          interval: 1
        },
        {
          expires: 60,
          interval: 5
        },
        {
          expires: 600,
          interval: 120
        },
        {
          expires: 3600,
          interval: 600
        },
        {
          expires: 432e3,
          interval: 43200
        }
      ]),
      (this._pendingExpiryUpdateInterval = 5e3),
      (this.sortByRecency = !1),
      (this.sort = enums.SearchSort.DESCENDING),
      (this._pinnedItem = null);
  }),
  utils.JS.inherits(viewmodels.ItemList, UTIterator),
  (viewmodels.ItemList.prototype.add = function add(e, t) {
    this.superclass(e, t), utils.JS.isNumber(t) || this._organizeItems();
  }),
  (viewmodels.ItemList.prototype.addArray = function addArray(e) {
    var t = this.length;
    e.forEach(function(e) {
      this.add(e, t), t++;
    }, this),
      this._organizeItems();
  }),
  (viewmodels.ItemList.prototype.removeArray = function removeArray(i) {
    var t = [];
    this._collection.forEach(function(e) {
      (function isInArray(t) {
        return !!utils.JS.find(i, function(e) {
          return t.id === e.id;
        });
      })(e) || t.push(e);
    }),
      (this._collection = t),
      this._organizeItems();
  }),
  (viewmodels.ItemList.prototype.getItemList = function getItemList() {
    return this.values();
  }),
  (viewmodels.ItemList.prototype.getPinnedItem = function getPinnedItem() {
    return this._pinnedItem;
  }),
  (viewmodels.ItemList.prototype.setPinnedItem = function setPinnedItem(e) {
    utils.JS.isValid(e) && (this._pinnedItem = e);
  }),
  (viewmodels.ItemList.prototype._organizeItems = function _organizeItems() {
    if (0 !== this.length) {
      var e = this.values().sort(this.sortByType.bind(this));
      this.resetCollection(e);
    }
  }),
  (viewmodels.ItemList.prototype._startAuctionUpdateTimer = function _startAuctionUpdateTimer() {
    this._auctionUpdateTimer
      ? (this._auctionUpdateTimer.reset(),
        this._auctionUpdateTimer.setInterval(1e3),
        this._auctionUpdateTimer.setWorkFunc(
          this.startAuctionUpdates.bind(this)
        ))
      : (this._auctionUpdateTimer = new utils.UTTimer(
          1e3,
          this.startAuctionUpdates.bind(this)
        )),
      this._auctionUpdateTimer.start();
  }),
  (viewmodels.ItemList.prototype.startAuctionUpdates = function startAuctionUpdates(
    e
  ) {
    this.stopAuctionUpdates(), (e = !!e);
    var t = this._auctionUpdateArray.slice(),
      i = utils.JS.isValid(this._pinnedItem)
        ? this.values().concat([this._pinnedItem])
        : this.values();
    (this._auctionUpdateArray = i.filter(function(e) {
      var t = e.getAuctionData();
      if (!t.isUpdating && t.isActiveTrade()) {
        if (
          (t.expires <= 0 || t.getSecondsRemaining() <= 0) &&
          t.getAge() < this._pendingExpiryUpdateInterval
        )
          return !1;
        for (var i = this._updateIntervals.length; 0 < i--; ) {
          var s = this._updateIntervals[i];
          if (
            t.isStale() ||
            (t.getSecondsRemaining() <= s.expires &&
              t.getAgeInSeconds() >= s.interval)
          )
            return !0;
        }
      }
      return !1;
    }, this)),
      0 < this._auctionUpdateArray.length
        ? ((this._auctionObservable = services.Item.refreshAuctions(
            this._auctionUpdateArray,
            e
          )),
          this._auctionObservable.observe(this, function(e, t) {
            e.unobserve(this),
              this.dataUpdated.notify(),
              (this._auctionObservable = null),
              this._startAuctionUpdateTimer();
          }))
        : (0 < t.length && this.dataUpdated.notify(),
          this._startAuctionUpdateTimer());
  }),
  (viewmodels.ItemList.prototype.stopAuctionUpdates = function stopAuctionUpdates() {
    this._auctionUpdateTimer && this._auctionUpdateTimer.reset(),
      this._auctionObservable &&
        (this._auctionObservable.unobserve(this),
        (this._auctionObservable = null));
  }),
  (viewmodels.ItemList.prototype.sortByType = function sortByType(e, t) {
    var i,
      s = {
        RECENCY: 0,
        EXPIRY: 1,
        LOAN: 2,
        UNTRADEABLE: 3,
        DISCARD: 4,
        TYPE: 5,
        LEGEND: 6,
        SPECIAL: 7,
        TIER: 8,
        RARITY: 9,
        RATING: 10,
        RESOURCE: 11,
        PLAYERPICK: 12
      },
      n = [
        enums.ItemType.PLAYER,
        enums.ItemType.MANAGER,
        enums.ItemType.HEAD_COACH,
        enums.ItemType.FITNESS_COACH,
        enums.ItemType.PHYSIO,
        enums.ItemType.GK_COACH,
        enums.ItemType.CONTRACT,
        enums.ItemType.HEALTH,
        enums.ItemType.TRAINING,
        enums.ItemType.BADGE,
        enums.ItemType.KIT,
        enums.ItemType.BALL,
        enums.ItemType.STADIUM,
        enums.ItemType.MISC
      ];

    function getCompareVal(e, t, i) {
      switch (e) {
        case s.RECENCY:
          return utils.JS.sortCompare(
            t.timestamp,
            i.timestamp,
            this.sort === enums.SearchSort.DESCENDING
          );
        case s.EXPIRY:
          return utils.JS.sortCompare(
            t.getAuctionData().getSecondsRemaining(),
            i.getAuctionData().getSecondsRemaining(),
            !1
          );
        case s.LOAN:
          return utils.JS.sortCompare(
            t.isLoaned(),
            i.isLoaned(),
            this.sort === enums.SearchSort.DESCENDING
          );
        case s.UNTRADEABLE:
          return utils.JS.sortCompare(t.untradeable, i.untradeable, !1);
        case s.DISCARD:
          return utils.JS.sortCompare(
            t.discardValue,
            i.discardValue,
            this.sort === enums.SearchSort.DESCENDING
          );
        case s.TYPE:
          return utils.JS.sortCompare(n.indexOf(t.type), n.indexOf(i.type), !1);
        case s.LEGEND:
          return utils.JS.sortCompare(t.isLegend(), i.isLegend(), !0);
        case s.SPECIAL:
          return utils.JS.sortCompare(t.isSpecial(), i.isSpecial(), !0);
        case s.TIER:
          return utils.JS.sortCompare(t.getTier(), i.getTier(), !0);
        case s.RARITY:
          return utils.JS.sortCompare(t.rareflag, i.rareflag, !1);
        case s.RATING:
          return utils.JS.sortCompare(
            t.rating,
            i.rating,
            this.sort === enums.SearchSort.DESCENDING
          );
        case s.RESOURCE:
          return utils.JS.sortCompare(t.resourceId, i.resourceId, !1);
        case s.PLAYERPICK:
          return utils.JS.sortCompare(
            t.isPlayerPickItem(),
            i.isPlayerPickItem(),
            !0
          );
      }
      return 0;
    }
    i =
      e.getAuctionData().isActiveTrade() && t.getAuctionData().isActiveTrade()
        ? [
            s.RECENCY,
            s.EXPIRY,
            s.DISCARD,
            s.TYPE,
            s.LEGEND,
            s.SPECIAL,
            s.TIER,
            s.RATING,
            s.RARITY,
            s.RESOURCE
          ]
        : this.sort === enums.SearchSort.ASCENDING
        ? [s.RECENCY, s.PLAYERPICK, s.DISCARD, s.LOAN, s.RATING, s.RESOURCE]
        : e.concept && t.concept
        ? [s.TIER, s.RATING, s.SPECIAL, s.RARITY, s.RESOURCE]
        : [
            s.RECENCY,
            s.PLAYERPICK,
            s.LOAN,
            s.UNTRADEABLE,
            s.DISCARD,
            s.TYPE,
            s.LEGEND,
            s.SPECIAL,
            s.TIER,
            s.RATING,
            s.RARITY,
            s.RESOURCE
          ];
    for (var o = this.sortByRecency ? 0 : 1, a = 0; 0 === a && o !== i.length; )
      (a = getCompareVal.call(this, i[o], e, t)), o++;
    return a;
  }),
  NamespaceManager.Register('viewmodels'),
  (viewmodels.PaginatedItemList = function(e, t) {
    viewmodels.ItemList.call(this, e),
      (this.numItemsPerPage = utils.JS.isNumber(t) && 0 < t ? t : 15),
      (this.isFull = !1);
  }),
  utils.JS.inherits(viewmodels.PaginatedItemList, viewmodels.ItemList),
  (viewmodels.PaginatedItemList.prototype.resetCollection = function resetCollection(
    e
  ) {
    this.superclass(e), (this.isFull = !1);
  }),
  (viewmodels.PaginatedItemList.prototype.getCurrentPage = function getCurrentPage() {
    return Math.max(Math.ceil((this.getIndex() + 1) / this.numItemsPerPage), 1);
  }),
  (viewmodels.PaginatedItemList.prototype.getNumPages = function getNumPages() {
    return Math.max(Math.ceil(this.length / this.numItemsPerPage), 1);
  }),
  (viewmodels.PaginatedItemList.prototype.getPageIndex = function getPageIndex() {
    return this.getIndex() % this.numItemsPerPage;
  }),
  (viewmodels.PaginatedItemList.prototype._getPageStartIndex = function _getPageStartIndex(
    e
  ) {
    return 1 <= e ? (e - 1) * this.numItemsPerPage : 0;
  }),
  (viewmodels.PaginatedItemList.prototype.getPageItems = function getPageItems() {
    var e = this._getPageStartIndex(this.getCurrentPage());
    return this.values().slice(e, e + this.numItemsPerPage);
  }),
  (viewmodels.PaginatedItemList.prototype.hasPreviousPage = function hasPreviousPage() {
    return 1 < this.getCurrentPage();
  }),
  (viewmodels.PaginatedItemList.prototype.hasNextPage = function hasNextPage() {
    return this.getCurrentPage() < this.getNumPages();
  }),
  (viewmodels.PaginatedItemList.prototype.canShowPage = function canShowPage(
    e
  ) {
    if (
      ((e = utils.JS.isNumber(e) ? e : this.getCurrentPage()),
      utils.Debug.Assert(
        0 < e && e <= this.getNumPages(),
        'viewmodels.PaginatedItemList::canShowPage. Page number out of bounds.'
      ),
      this.isFull)
    )
      return !0;
    var t = this._getPageStartIndex(e);
    return (
      this.values().slice(t, t + this.numItemsPerPage).length ===
      this.numItemsPerPage
    );
  }),
  (viewmodels.PaginatedItemList.prototype.previousPage = function previousPage() {
    return (
      this.hasPreviousPage() &&
        this.setIndex(this._getPageStartIndex(this.getCurrentPage() - 1)),
      this.getPageItems()
    );
  }),
  (viewmodels.PaginatedItemList.prototype.nextPage = function nextPage() {
    return (
      this.hasNextPage() &&
        this.setIndex(this._getPageStartIndex(this.getCurrentPage() + 1)),
      this.getPageItems()
    );
  }),
  NamespaceManager.Register('viewmodels'),
  (viewmodels.Club = function ClubViewModel(e) {
    var t = gConfigurationModel.getConfigObject(
        models.ConfigurationModel.KEY_ITEMS_PER_PAGE
      ),
      i = utils.JS.isValid(t)
        ? t[models.ConfigurationModel.ITEMS_PER_PAGE.CLUB]
        : 20;
    viewmodels.PaginatedItemList.call(this, e, i);
  }),
  utils.JS.inherits(viewmodels.Club, viewmodels.PaginatedItemList),
  (viewmodels.Club.prototype.shouldRequestItems = function shouldRequestItems() {
    return (
      !this.isFull &&
      this.length <= this.numItemsPerPage * this.getCurrentPage()
    );
  }),
  (viewmodels.Club.prototype.removeEmptyConsumables = function removeEmptyConsumables() {
    var e = this.getIndex(),
      t = this.values(),
      i = this.isFull;
    (t = t.filter(function(e) {
      return 0 < e.stackCount;
    })),
      this.resetCollection(t),
      (this.isFull = i),
      this.setIndex(0 < t.length ? Math.min(e, t.length - 1) : 0);
  }),
  (viewmodels.Club.prototype.getActiveItemsURLs = function getActiveItemsURLs() {
    return this._getItemsURLs();
  }),
  (viewmodels.Club.prototype.getActiveItemURL = function getActiveItemURL(e) {
    return this._getItemsURLs(e);
  }),
  (viewmodels.Club.prototype.getActiveItemsImgs = function getActiveItemsImgs() {
    var e,
      t = {},
      i = this._getItemsURLs();
    for (e in i)
      if (i.hasOwnProperty(e)) {
        var s = parseInt(e, 10),
          n = this._getImageLoadListener(s),
          o = new UTImageView();
        o.setResource(i[s], !0).observe(this, n), (t[s] = o);
      }
    return t;
  }),
  (viewmodels.Club.prototype.getActiveItemImg = function getActiveItemImg(e) {
    var t = new UTImageView(),
      i = this._getImageLoadListener(e);
    return t.setResource(this.getActiveItemURL(e), !0).observe(this, i), t;
  }),
  (viewmodels.Club.prototype._getImageLoadListener = function _getImageLoadListener(
    e
  ) {
    var t;
    switch (e) {
      case enums.UIActiveItemImgType.HOME_KIT:
      case enums.UIActiveItemImgType.AWAY_KIT:
        t = this._onKitLoad;
        break;
      case enums.UIActiveItemImgType.BADGE_NORMAL:
      case enums.UIActiveItemImgType.BADGE_DARK:
        t = this._onBadgeLoad;
        break;
      case enums.UIActiveItemImgType.BALL:
        t = this._onBallLoad;
        break;
      case enums.UIActiveItemImgType.STADIUM:
        t = this._onStadiumLoad;
        break;
      default:
        t = this._onKitLoad;
    }
    return t;
  }),
  (viewmodels.Club.prototype._onKitLoad = function _onKitLoad(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(
            /j(\d+)_\d+_\d+\.png/,
            'j$1_' +
              enums.PlaceholderAssetId.TEAM +
              '_' +
              enums.PlaceholderAssetId.KIT +
              '.png'
          )
        );
  }),
  (viewmodels.Club.prototype._onBadgeLoad = function _onBadgeLoad(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.TEAM + '.png')
        );
  }),
  (viewmodels.Club.prototype._onBallLoad = function _onBallLoad(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.BALL + '.png')
        );
  }),
  (viewmodels.Club.prototype._onStadiumLoad = function _onStadiumLoad(
    e,
    t,
    i,
    s
  ) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.STADIUM + '.png')
        );
  }),
  (viewmodels.Club.prototype._getItemsURLs = function _getItemsURLs(a) {
    var e,
      r = {},
      l = utils.JS.isValid(a);
    if (l)
      switch (a) {
        case enums.UIActiveItemImgType.BADGE_NORMAL:
        case enums.UIActiveItemImgType.BADGE_DARK:
          e = enums.ItemState.ACTIVE_BADGE;
          break;
        case enums.UIActiveItemImgType.BALL:
          e = enums.ItemState.ACTIVE_BALL;
          break;
        case enums.UIActiveItemImgType.STADIUM:
          e = enums.ItemState.ACTIVE_STADIUM;
          break;
        case enums.UIActiveItemImgType.HOME_KIT:
          e = enums.ItemState.ACTIVE_HOME_KIT;
          break;
        case enums.UIActiveItemImgType.AWAY_KIT:
          e = enums.ItemState.ACTIVE_AWAY_KIT;
          break;
        case enums.UIActiveItemImgType.BANNER:
          e = enums.ItemState.ACTIVE_BANNER;
          break;
        case enums.UIActiveItemImgType.CELEBRATION:
          e = enums.ItemState.ACTIVE_CELEBRATION;
          break;
        case enums.UIActiveItemImgType.TIFO:
          e = enums.ItemState.ACTIVE_TIFO;
          break;
        default:
          utils.Debug.Assert(
            !1,
            'viewmodels.Club:_getItemsURLs. Expected an enums.UIActiveItemImgType.<number>'
          );
      }
    return (
      utils.JS.valToArray(services.Item.getActiveClubItems(e)).forEach(function(
        e
      ) {
        if (utils.JS.isValid(e)) {
          var t,
            i = e.getStaticData(),
            s = e.getYear(),
            n = '';
          switch (e.state) {
            case enums.ItemState.ACTIVE_BADGE:
              if (
                ((l && a !== enums.UIActiveItemImgType.BADGE_NORMAL) ||
                  ((n = utils.AssetLocator.getImage(
                    utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT,
                    s,
                    e.teamId
                  )),
                  utils.AssetLocator.hasPlaceholder(
                    enums.PlaceholderAssetKey.CREST,
                    e.teamId.toString(),
                    s,
                    enums.PlaceholderAssetKey.CREST_LIGHT
                  ) &&
                    (n = utils.AssetLocator.getImage(
                      utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT,
                      s
                    )),
                  (t = enums.UIActiveItemImgType.BADGE_NORMAL)),
                !l || a === enums.UIActiveItemImgType.BADGE_DARK)
              ) {
                var o = utils.AssetLocator.getImage(
                  utils.AssetLocator.IMAGE_TYPE_BADGE_DARK,
                  s,
                  e.teamId
                );
                utils.AssetLocator.hasPlaceholder(
                  enums.PlaceholderAssetKey.CREST,
                  e.teamId.toString(),
                  s,
                  enums.PlaceholderAssetKey.CREST_DARK
                ) &&
                  (o = utils.AssetLocator.getImage(
                    utils.AssetLocator.IMAGE_TYPE_BADGE_DARK,
                    s
                  )),
                  (r[enums.UIActiveItemImgType.BADGE_DARK] = o);
              }
              break;
            case enums.ItemState.ACTIVE_BALL:
              (n = utils.AssetLocator.getImage(
                utils.AssetLocator.IMAGE_TYPE_BALL,
                s,
                i.assetId
              )),
                utils.AssetLocator.hasPlaceholder(
                  enums.PlaceholderAssetKey.BALLS,
                  i.assetId,
                  s
                ) &&
                  (n = utils.AssetLocator.getImage(
                    utils.AssetLocator.IMAGE_TYPE_BALL,
                    s
                  )),
                (t = enums.UIActiveItemImgType.BALL);
              break;
            case enums.ItemState.ACTIVE_STADIUM:
              (n = utils.AssetLocator.getImage(
                utils.AssetLocator.IMAGE_TYPE_STADIUM_FULL,
                s,
                i.assetId
              )),
                (t = enums.UIActiveItemImgType.STADIUM);
              break;
            case enums.ItemState.ACTIVE_HOME_KIT:
              (n = utils.AssetLocator.getImage(
                i.assetType,
                s,
                e.teamId,
                i.assetYear
              )),
                utils.AssetLocator.hasPlaceholderKit(n, s) &&
                  (n = utils.AssetLocator.getImage(i.assetType, s)),
                (t = enums.UIActiveItemImgType.HOME_KIT);
              break;
            case enums.ItemState.ACTIVE_AWAY_KIT:
              (n = utils.AssetLocator.getImage(
                i.assetType,
                s,
                e.teamId,
                i.assetYear
              )),
                utils.AssetLocator.hasPlaceholderKit(n, s) &&
                  (n = utils.AssetLocator.getImage(i.assetType, s)),
                (t = enums.UIActiveItemImgType.AWAY_KIT);
              break;
            case enums.ItemState.ACTIVE_TIFO:
              (n = utils.AssetLocator.getImage(
                utils.AssetLocator.IMAGE_TYPE_TIFO,
                s,
                e.resourceId,
                i.assetYear
              )),
                utils.AssetLocator.hasPlaceholder(
                  enums.PlaceholderAssetKey.TIFOS,
                  e.resourceId,
                  s
                ) &&
                  (n = utils.AssetLocator.getImage(
                    utils.AssetLocator.IMAGE_TYPE_TIFO,
                    s
                  )),
                (t = enums.UIActiveItemImgType.TIFO);
              break;
            case enums.ItemState.ACTIVE_BANNER:
              (n = utils.AssetLocator.getImage(
                utils.AssetLocator.IMAGE_TYPE_BANNER,
                s,
                e.resourceId,
                i.assetYear
              )),
                utils.AssetLocator.hasPlaceholder(
                  enums.PlaceholderAssetKey.BANNERS,
                  e.resourceId,
                  s
                ) &&
                  (n = utils.AssetLocator.getImage(
                    utils.AssetLocator.IMAGE_TYPE_BANNER,
                    s
                  )),
                (t = enums.UIActiveItemImgType.BANNER);
              break;
            case enums.ItemState.ACTIVE_CELEBRATION:
              (n = utils.AssetLocator.getImage(
                utils.AssetLocator.IMAGE_TYPE_CELEBRATION,
                s,
                i.assetId,
                i.assetYear
              )),
                utils.AssetLocator.hasPlaceholder(
                  enums.PlaceholderAssetKey.CELEBRATIONS,
                  e.resourceId,
                  s
                ) &&
                  (n = utils.AssetLocator.getImage(
                    utils.AssetLocator.IMAGE_TYPE_CELEBRATION,
                    s
                  )),
                (t = enums.UIActiveItemImgType.CELEBRATION);
          }
          utils.JS.isEmpty(n) || (r[t] = n);
        }
      }),
      l ? r[a] : r
    );
  }),
  NamespaceManager.Register('controllers.views'),
  (controllers.views.Persona = function PersonaViewController() {
    UTViewController.call(this), (this.showPersonaChanger = !0);
  }),
  utils.JS.inherits(controllers.views.Persona, UTViewController),
  (controllers.views.Persona.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      this.getView()
        .getActionButton()
        .addTarget(this, this._ePersonaSelectorSelected, enums.Event.TAP));
  }),
  (controllers.views.Persona.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.Persona();
  }),
  (controllers.views.Persona.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView(),
      t = services.User.getUser(),
      i = services.Authentication.getFUTAuthState(),
      s = i !== enums.FUTAuthState.NO_DATA && t;
    if ((e.setDisplay(s), s)) {
      for (
        var n = t.getSelectedPersona(),
          o = n ? n.getCurrentClub() : null,
          a = !1,
          r = t.getPersonas(!0),
          l = 0;
        l < r.length;
        l++
      )
        if (0 < r[l].getValidClubs().length) {
          a = !0;
          break;
        }
      n &&
        (e.setBtnVisibility(this.showPersonaChanger && a),
        e.setPlatform(n.platform)),
        o &&
          (e.setClubBadge(o.assetId),
          e.setEstablishedDate(o.established),
          e.setUsername(
            n.hasFUT && i === enums.FUTAuthState.COMPLETE ? n.name : o.name
          ));
    }
  }),
  (controllers.views.Persona.prototype._ePersonaSelectorSelected = function _ePersonaSelectorSelected(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController();
    if (s) {
      var n = new UTPersonaSelectorViewController();
      n.init(), s.pushViewController(n);
    }
  }),
  utils.JS.inherits(UTStandardButtonControl, UTButtonControl),
  (UTStandardButtonControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      e.classList.add('btn-standard'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTStandardButtonControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTStandardButtonControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTStandardButtonControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTStandardButtonControl.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(), this._triggerActions(enums.Event.TOUCHSTART);
  }),
  (UTStandardButtonControl.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(), this._triggerActions(enums.Event.TOUCHEND);
  }),
  (UTStandardButtonControl.prototype._touchCancelled = function _touchCancelled(
    e
  ) {
    this.superclass(), this._triggerActions(enums.Event.TOUCHCANCEL);
  }),
  utils.JS.inherits(UTTextInputControl, UTControl),
  (UTTextInputControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('input');
      e.setAttribute('type', 'text'),
        e.classList.add('ut-text-input-control'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTextInputControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTTextInputControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTextInputControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTextInputControl.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTTextInputControl.prototype.dealloc = function dealloc() {
    (this._selectionTimeout = clearTimeout(this._selectionTimeout)),
      (this._blurTimeout = clearTimeout(this._blurTimeout)),
      this.superclass();
  }),
  (UTTextInputControl.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    if (this._setInteractionStateFlag(e)) {
      var t = this.getRootElement(),
        i = 'textEvent';
      this.toggleClass(enums.UIState.DISABLED, !this._interactionState),
        this._interactionState
          ? (t.removeAttribute('disabled'),
            this._addListener(
              enums.Event.FOCUS,
              t,
              this._handleFocusEvent.bind(this),
              i
            ),
            this._addListener(
              enums.Event.BLUR,
              t,
              this._handleBlurEvent.bind(this),
              i
            ),
            this._addListener(
              enums.Event.CHANGE,
              t,
              this._handleChangeEvent.bind(this),
              i
            ),
            this._addListener(
              enums.Event.INPUT,
              t,
              this._handleInputEvent.bind(this),
              i
            ),
            this._addListener(
              enums.Event.CUT,
              t,
              this._handleInputEvent.bind(this),
              i
            ),
            this._addListener(
              enums.Event.PASTE,
              t,
              this._handleInputEvent.bind(this),
              i
            ))
          : (this.blur(),
            t.setAttribute('disabled', 'disabled'),
            this._removeListenersByNS(i));
    }
  }),
  (UTTextInputControl.prototype.getValue = function getValue() {
    return this.getRootElement().value;
  }),
  (UTTextInputControl.prototype.setValue = function setValue(e) {
    this.getRootElement().value = e;
  }),
  (UTTextInputControl.prototype.getType = function getType() {
    return this.getRootElement().getAttribute('type');
  }),
  (UTTextInputControl.prototype.setType = function setType(e) {
    for (var t in enums.UIInputType)
      if (
        enums.UIInputType.hasOwnProperty(t) &&
        enums.UIInputType[t] === newType
      )
        return void this.getRootElement().setAttribute('type', e);
    utils.Debug.Assert(!1, 'Invalid type assignment to text input control.');
  }),
  (UTTextInputControl.prototype.setPlaceholder = function setPlaceholder(e) {
    this.getRootElement().setAttribute('placeholder', e);
  }),
  (UTTextInputControl.prototype.setMaxLength = function setMaxLength(e) {
    this.getRootElement().setAttribute('maxlength', e);
  }),
  (UTTextInputControl.prototype.clear = function clear() {
    this.setValue('');
  }),
  (UTTextInputControl.prototype._handleChangeEvent = function _handleChangeEvent(
    e
  ) {
    this._triggerActions(enums.Event.CHANGE, {
      value: this.getValue()
    });
  }),
  (UTTextInputControl.prototype._handleInputEvent = function _handleInputEvent(
    e
  ) {
    this._triggerActions(enums.Event.INPUT, {
      value: this.getValue(),
      keyCode: e.keyCode
    });
  }),
  (UTTextInputControl.prototype._handleFocusEvent = function _handleFocusEvent(
    e
  ) {
    this._selectionTimeout = setTimeout(
      function _setSelectionRange() {
        var e = this.getRootElement();
        e.setSelectionRange(0, e.value.length);
      }.bind(this),
      50
    );
  }),
  (UTTextInputControl.prototype._handleBlurEvent = function _handleBlurEvent(
    e
  ) {
    clearTimeout(this._selectionTimeout), (this._selectionTimeout = 0);
  }),
  NamespaceManager.Register('views.bootFlow'),
  (views.bootFlow.CaptchaRequired = function UTCaptchaRequiredView() {
    UTView.call(this),
      (this.onContinue = new UTObservable()),
      Object.defineProperty(this, 'onContinue', {
        writable: !1
      }),
      (this.onRefresh = new UTObservable()),
      Object.defineProperty(this, 'onRefresh', {
        writable: !1
      }),
      (this.onTextChange = new UTObservable()),
      Object.defineProperty(this, 'onTextChange', {
        writable: !1
      });
  }),
  utils.JS.inherits(views.bootFlow.CaptchaRequired, UTView),
  (views.bootFlow.CaptchaRequired.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.setAttribute('id', 'CaptchaRequired'),
        e.classList.add('sm-ut-content-container'),
        e.classList.add('ut-content-container');
      var t = document.createElement('div');
      t.classList.add('ut-content'),
        (this.__personaSelectorContainer = document.createElement('div')),
        this.__personaSelectorContainer.classList.add(
          'ut-app-settings-persona-selector'
        ),
        t.appendChild(this.__personaSelectorContainer);
      var i = document.createElement('div');
      i.classList.add('ut-captcha-required'),
        i.classList.add('ut-login-generic');
      var s = document.createElement('div');
      s.classList.add('ut-login-generic-content');
      var n = document.createElement('div');
      (this.__infoTitle = document.createElement('h2')),
        this.__infoTitle.classList.add('title'),
        n.appendChild(this.__infoTitle),
        (this.__infoText = document.createElement('p')),
        n.appendChild(this.__infoText),
        (this.__icon = document.createElement('div')),
        this.__icon.setAttribute('id', 'securityIcon'),
        (this.__captchaImageContainer = document.createElement('div')),
        this.__captchaImageContainer.classList.add('captchaImageContainer'),
        (this.__captchaImage = document.createElement('div')),
        this.__captchaImage.classList.add('captchaImage'),
        this.__captchaImageContainer.appendChild(this.__captchaImage),
        this.__icon.appendChild(this.__captchaImageContainer),
        (this._refreshLink = new UTFlatButtonControl()),
        this._refreshLink.getRootElement().classList.add('camel-case'),
        this._refreshLink.getRootElement().classList.add('refreshBtn'),
        this.__icon.appendChild(this._refreshLink.getRootElement()),
        n.appendChild(this.__icon),
        (this.__captchaAnswerContainer = document.createElement('div')),
        (this._textInput = new UTTextInputControl()),
        this.__captchaAnswerContainer.appendChild(
          this._textInput.getRootElement()
        ),
        (this.__errorText = document.createElement('p')),
        this.__errorText.classList.add('errorText'),
        this.__captchaAnswerContainer.appendChild(this.__errorText),
        (this._validateCaptcha = new UTStandardButtonControl()),
        this._validateCaptcha.getRootElement().classList.add('call-to-action'),
        this.__captchaAnswerContainer.appendChild(
          this._validateCaptcha.getRootElement()
        ),
        n.appendChild(this.__captchaAnswerContainer),
        (this.__captchaWaitContainer = document.createElement('div')),
        this.__captchaWaitContainer.classList.add('captchaWaitContainer'),
        (this.__captchaWaitText = document.createElement('p')),
        this.__captchaWaitText.classList.add('captchaWaitText'),
        this.__captchaWaitContainer.appendChild(this.__captchaWaitText);
      var o = document.createElement('div');
      o.classList.add('captchaWaitBox'),
        (this.__captchaWaitTime = document.createElement('p')),
        this.__captchaWaitTime.classList.add('timeRemaining'),
        o.appendChild(this.__captchaWaitTime),
        this.__captchaWaitContainer.appendChild(o),
        n.appendChild(this.__captchaWaitContainer),
        s.appendChild(n),
        i.appendChild(s),
        t.appendChild(i),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.bootFlow.CaptchaRequired.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__personaSelectorContainer = null),
      (this.__infoTitle = null),
      (this.__infoText = null),
      (this.__icon = null),
      (this.__captchaImageContainer = null),
      (this.__captchaImage = null),
      this._refreshLink.destroy(),
      (this.__captchaAnswerContainer = null),
      this._textInput.destroy(),
      (this.__errorText = null),
      this._validateCaptcha.destroy(),
      (this.__captchaWaitContainer = null),
      (this.__captchaWaitText = null),
      (this.__captchaWaitTime = null);
  }),
  (views.bootFlow.CaptchaRequired.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.bootFlow.CaptchaRequired.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.bootFlow.CaptchaRequired.prototype.init = function init() {
    this._validateCaptcha.init(),
      this._validateCaptcha.setText(
        services.Localization.localize('common.dialog.continue')
      ),
      this._validateCaptcha.setInteractionState(!1),
      this._validateCaptcha.addTarget(
        this.onContinue,
        this.onContinue.notify,
        enums.Event.TAP
      ),
      this._textInput.init(),
      this._textInput.setPlaceholder(
        services.Localization.localize('phishing.input.placeholder')
      ),
      this._textInput.setMaxLength(8),
      this._textInput.addTarget(
        this,
        this._handleInputEvents,
        enums.Event.INPUT
      ),
      this._refreshLink.init(),
      this._refreshLink.addTarget(
        this.onRefresh,
        this.onRefresh.notify,
        enums.Event.TAP
      ),
      this._refreshLink.setText(
        services.Localization.localize('captcha.refresh')
      ),
      (this.__infoTitle.textContent = services.Localization.localize(
        'title.securityquestion'
      )),
      (this.__infoText.textContent = services.Localization.localize(
        'captcha.info.body'
      )),
      DOMKit.toggleDisplayStyle(this.__captchaWaitContainer, !1),
      (this.__captchaWaitText.textContent = services.Localization.localize(
        'captcha.info.wait'
      )),
      (this.__errorText.textContent = services.Localization.localize(
        'captcha.error.incorrectanswer'
      )),
      this.superclass();
  }),
  (views.bootFlow.CaptchaRequired.prototype.dealloc = function dealloc() {
    this.onContinue.dealloc(),
      this.onTextChange.dealloc(),
      (this.onContinue = null),
      (this.onTextChange = null),
      this.superclass();
  }),
  (views.bootFlow.CaptchaRequired.prototype.appendPersonaSelector = function appendPersonaSelector(
    e
  ) {
    this.getRoot().addClass('has-persona-selector'),
      this.addSubview(e, this.__personaSelectorContainer);
  }),
  (views.bootFlow.CaptchaRequired.prototype.toggleCaptchaImageDisplay = function toggleCaptchaImageDisplay(
    e
  ) {
    DOMKit.toggleClass(this.__icon, 'iconHidden', e),
      DOMKit.toggleDisplayStyle(this.__captchaImageContainer, e);
  }),
  (views.bootFlow.CaptchaRequired.prototype.showCaptchaImageLoading = function showCaptchaImageLoading() {
    DOMKit.toggleDisplayStyle(this.__captchaAnswerContainer, !0),
      DOMKit.toggleDisplayStyle(this.__captchaWaitContainer, !1),
      this.clearAnswerInput(),
      this.toggleCaptchaImageDisplay(!1),
      this._textInput.setInteractionState(!1);
  }),
  (views.bootFlow.CaptchaRequired.prototype.showCaptchaWait = function showCaptchaWait(
    e
  ) {
    this._refreshLink.hide(),
      DOMKit.toggleDisplayStyle(this.__captchaImageContainer, !1),
      DOMKit.toggleDisplayStyle(this.__captchaAnswerContainer, !1),
      DOMKit.toggleDisplayStyle(this.__captchaWaitContainer, !0);
  }),
  (views.bootFlow.CaptchaRequired.prototype.updateRemainingCaptchaTime = function updateRemainingCaptchaTime(
    e
  ) {
    this.__captchaWaitTime.textContent = services.Localization.localizeTimeRemaining(
      e
    );
  }),
  (views.bootFlow.CaptchaRequired.prototype.toggleInputs = function toggleInputs(
    e
  ) {
    this._validateCaptcha.setInteractionState(e),
      this._textInput.setInteractionState(e);
  }),
  (views.bootFlow.CaptchaRequired.prototype.toggleContinueButton = function toggleContinueButton(
    e
  ) {
    this._validateCaptcha.setInteractionState(e);
  }),
  (views.bootFlow.CaptchaRequired.prototype.setCaptchaImage = function setCaptchaImage(
    e
  ) {
    var t = document.createElement('img');
    (t.src = 'data:image/jpg;base64,' + e),
      this._refreshLink.show(),
      DOMKit.empty(this.__captchaImage),
      this.__captchaImage.appendChild(t),
      this.toggleCaptchaImageDisplay(!0),
      this._textInput.setInteractionState(!0),
      TelemetryManager.trackEvent(
        TelemetryManager.Sections.MISC,
        TelemetryManager.Categories.CAPTCHA,
        'Image Loaded'
      );
  }),
  (views.bootFlow.CaptchaRequired.prototype.clearAnswerInput = function clearAnswerInput() {
    this._textInput.clear();
  }),
  (views.bootFlow.CaptchaRequired.prototype.getInputValue = function getInputValue() {
    return this._textInput.getValue();
  }),
  (views.bootFlow.CaptchaRequired.prototype.errorVisibility = function errorVisibility(
    e
  ) {
    DOMKit.toggleDisplayStyle(this.__errorText, e);
  }),
  (views.bootFlow.CaptchaRequired.prototype._handleInputEvents = function _handleInputEvents(
    e,
    t,
    i
  ) {
    t === enums.Event.INPUT && this.onTextChange.notify(i.keyCode);
  }),
  utils.JS.inherits(UTCaptchaViewController, UTViewController),
  (UTCaptchaViewController.prototype.init = function init() {
    this.superclass();
    var e = this.getView();
    (this._captchaViewModel = new UTCaptchaViewModel(accessobjects.Captcha)),
      this._captchaViewModel.init(),
      (this._personaController = new controllers.views.Persona()),
      this._personaController.init(),
      this.addChildViewController(this._personaController),
      e.appendPersonaSelector(this._personaController.getView()),
      e.layoutSubviews(),
      e.onContinue.observe(this, function() {
        this._requestCaptchaValidation(e.getInputValue());
      }),
      e.onRefresh.observe(this, this._requestCaptchaExchange),
      e.onTextChange.observe(this, this._onTextChange),
      e.errorVisibility(!1),
      this._requestCaptchaExchange(),
      TelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, 'Captcha');
  }),
  (UTCaptchaViewController.prototype.dealloc = function dealloc() {
    (this._timeoutId = clearTimeout(this._timeoutId)),
      this.superclass(),
      this._captchaViewModel &&
        (this._captchaViewModel.dealloc(), (this._captchaViewModel = null)),
      this._personaController &&
        (this._personaController.dealloc(), (this._personaController = null));
  }),
  (UTCaptchaViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.CaptchaRequired();
  }),
  (UTCaptchaViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.captcha');
  }),
  (UTCaptchaViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getNavigationController();
    e && e.setNavigationVisibility(isPhone(), !0),
      this._personaController && this._personaController.viewDidAppear();
  }),
  (UTCaptchaViewController.prototype.onCaptchaCooldown = function onCaptchaCooldown() {
    (this._cooldownSeconds = services.Authentication.getSession(
      enums.AuthEnvironment.UTAS
    ).captchaCooldown),
      this.getView().showCaptchaWait(),
      this.getView().updateRemainingCaptchaTime(this._cooldownSeconds),
      this._cooldownTimer.stop(),
      this._cooldownTimer.setInterval(1e3),
      this._cooldownTimer.setWorkFunc(
        this.updateRemainingCaptchaTime.bind(this)
      ),
      this._cooldownTimer.start(),
      (this._timeoutId = setTimeout(
        function _onTimeoutCaptchaTokenExchange() {
          clearTimeout(this._timeoutId), this._requestCaptchaExchange();
        }.bind(this),
        1e3 * this._cooldownSeconds
      )),
      TelemetryManager.trackEvent(
        TelemetryManager.Sections.MISC,
        TelemetryManager.Categories.CAPTCHA,
        'User Throttled'
      );
  }),
  (UTCaptchaViewController.prototype._requestCaptchaImage = function _requestCaptchaImage() {
    var i = this.getView();
    i.showCaptchaImageLoading(),
      i.toggleInputs(!1),
      this._captchaViewModel
        .requestLegacyImage()
        .observe(this, function _onRequestLegacyImageComplete(e, t) {
          e.unobserve(this),
            t.success
              ? (i.setCaptchaImage(t.response),
                i.toggleInputs(!0),
                this.updateContinueButtonEnabledState())
              : NetworkErrorManager.checkCriticalStatus(t.status)
              ? NetworkErrorManager.handleStatus(t.status)
              : t.status === enums.HTTPStatusCode.SERVICE_UNAVAILABLE_ERROR
              ? (i.clearAnswerInput(), this.onCaptchaCooldown())
              : (i.clearAnswerInput(),
                i.toggleCaptchaImageDisplay(!0),
                i.toggleInputs(!0),
                this.updateContinueButtonEnabledState(),
                i.errorVisibility(!1));
        });
  }),
  (UTCaptchaViewController.prototype._requestCaptchaValidation = function _requestCaptchaValidation(
    e
  ) {
    var i = this.getView();
    this._captchaAttempt ||
      (hideKeyboard(),
      hasConnection()
        ? ((this._captchaAttempt = !0),
          i.errorVisibility(!1),
          i.toggleInputs(!1),
          this._captchaViewModel
            .validateLegacyAnswer(e)
            .observe(this, function _onCaptchaValidateComplete(e, t) {
              e.unobserve(this),
                (this._captchaAttempt = !1),
                t.success
                  ? getAppMain()
                      .getLoginController()
                      .login(!0)
                  : NetworkErrorManager.checkCriticalStatus(t.status)
                  ? NetworkErrorManager.handleStatus(t.status)
                  : t.status === enums.HTTPStatusCode.SERVICE_UNAVAILABLE_ERROR
                  ? (i.clearAnswerInput(), this.onCaptchaCooldown())
                  : t.status === enums.HTTPStatusCode.NO_INTERNET_CONNECTION
                  ? (utils.PopupManager.ShowAlert(
                      utils.PopupManager.Alerts.NO_INTERNET_CONNECTION
                    ),
                    i.toggleInputs(!0))
                  : (i.clearAnswerInput(),
                    i.toggleInputs(!0),
                    i.errorVisibility(!0),
                    this.updateContinueButtonEnabledState(),
                    t.status === enums.HTTPStatusCode.CONFLICT &&
                      this._requestCaptchaImage());
            }))
        : utils.PopupManager.ShowAlert(
            utils.PopupManager.Alerts.NO_INTERNET_CONNECTION
          ));
  }),
  (UTCaptchaViewController.prototype._requestCaptchaExchange = function _requestCaptchaExchange() {
    var i = this.getView();
    i.showCaptchaImageLoading(),
      this._captchaViewModel
        .exchangeLegacyImage()
        .observe(this, function _onLegacyImageExchangeComplete(e, t) {
          e.unobserve(this),
            t.success
              ? (this._requestCaptchaImage(), i.errorVisibility(!1))
              : NetworkErrorManager.checkCriticalStatus(t.status)
              ? NetworkErrorManager.handleStatus(t.status)
              : t.status === enums.HTTPStatusCode.SERVICE_UNAVAILABLE_ERROR
              ? this.onCaptchaCooldown()
              : (i.toggleCaptchaImageDisplay(!0),
                i.toggleInputs(!0),
                i.errorVisibility(!1),
                this.updateContinueButtonEnabledState());
        });
  }),
  (UTCaptchaViewController.prototype.updateRemainingCaptchaTime = function updateRemainingCaptchaTime() {
    var e = --this._cooldownSeconds;
    e <= 0 && (this._cooldownTimer.reset(), (e = 0)),
      this.getView().updateRemainingCaptchaTime(e);
  }),
  (UTCaptchaViewController.prototype._onTextChange = function _onTextChange(
    e,
    t
  ) {
    this.updateContinueButtonEnabledState(),
      this._captchaAttempt ||
        t !== enums.KeyCode.RETURN ||
        this._requestCaptchaValidation(this.getView().getInputValue());
  }),
  (UTCaptchaViewController.prototype.updateContinueButtonEnabledState = function updateContinueButtonEnabledState() {
    this.getView().toggleContinueButton(
      0 < this.getView().getInputValue().length
    );
  }),
  utils.JS.inherits(UTFunCaptchaView, UTView),
  (UTFunCaptchaView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.setAttribute('id', 'FunCaptchaRequired'),
        e.classList.add('sm-ut-content-container'),
        e.classList.add('ut-content-container');
      var t = document.createElement('div');
      t.classList.add('ut-content'),
        (this.__personaSelectorContainer = document.createElement('div')),
        this.__personaSelectorContainer.classList.add(
          'ut-app-settings-persona-selector'
        ),
        t.appendChild(this.__personaSelectorContainer);
      var i = document.createElement('div');
      i.classList.add('ut-fun-captcha-required'),
        i.classList.add('ut-login-generic');
      var s = document.createElement('div');
      s.classList.add('ut-login-generic-content');
      var n = document.createElement('div');
      (this.__infoTitle = document.createElement('h2')),
        this.__infoTitle.classList.add('title'),
        n.appendChild(this.__infoTitle),
        (this.__infoText = document.createElement('p')),
        n.appendChild(this.__infoText),
        s.appendChild(n);
      var o = document.createElement('div');
      o.setAttribute('id', 'funCaptchaDiv'),
        s.appendChild(o),
        i.appendChild(s),
        t.appendChild(i),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTFunCaptchaView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__personaSelectorContainer = null),
      (this.__infoTitle = null),
      (this.__infoText = null);
  }),
  (UTFunCaptchaView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTFunCaptchaView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTFunCaptchaView.prototype.init = function init() {
    this.superclass(),
      (this.__infoTitle.textContent = services.Localization.localize(
        'navbar.label.captcha'
      )),
      (this.__infoText.textContent = services.Localization.localize(
        'captcha.info.body'
      ));
  }),
  (UTFunCaptchaView.prototype.appendPersonaSelector = function appendPersonaSelector(
    e
  ) {
    this.addClass('has-persona-selector'),
      this.addSubview(e, this.__personaSelectorContainer);
  }),
  utils.JS.inherits(UTFunCaptchaViewController, UTViewController),
  (UTFunCaptchaViewController.prototype.init = function init() {
    this.superclass();
    var e = this.getView();
    (this._captchaViewModel = new UTCaptchaViewModel(accessobjects.Captcha)),
      this._captchaViewModel.init(),
      (this._personaController = new controllers.views.Persona()),
      this._personaController.init(),
      this.addChildViewController(this._personaController),
      e.appendPersonaSelector(this._personaController.getView()),
      e.layoutSubviews();
    var t = document.createElement('script');
    (t.id = 'funCaptchaHeaderScript'),
      (t.type = 'text/javascript'),
      (t.async = !0),
      (t.defer = !0),
      (t.src = 'https://ea-api.arkoselabs.com/fc/api/?onload=loadFunCaptcha'),
      document.head.appendChild(t),
      TelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, 'CaptchaV2');
  }),
  (UTFunCaptchaViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._captchaViewModel &&
        (this._captchaViewModel.dealloc(), (this._captchaViewModel = null)),
      this._personaController &&
        (this._personaController.dealloc(), (this._personaController = null));
    var e = document.getElementById('funCaptchaHeaderScript');
    utils.JS.isValid(e) && e.parentNode.removeChild(e);
  }),
  (UTFunCaptchaViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTFunCaptchaView();
  }),
  (UTFunCaptchaViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.captcha');
  }),
  (UTFunCaptchaViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getNavigationController();
    e && e.setNavigationVisibility(isPhone(), !0),
      this._personaController && this._personaController.viewDidAppear(),
      this._loadFunCaptcha();
  }),
  (UTFunCaptchaViewController.prototype._loadFunCaptcha = function _loadFunCaptcha() {
    if (!this._captchaLoaded) {
      var o = document.getElementById('loadFunCaptchaScript');
      this._captchaViewModel
        .requestCaptchaData()
        .observe(this, function _onRequestCaptchaDataComplete(e, t) {
          var i, s;
          e.unobserve(this),
            t.success
              ? ((i =
                  t.response.pk ||
                  gConfigurationModel.getConfigString(
                    models.ConfigurationModel.KEY_FUNCAPTCHA_PK
                  )),
                (s = t.response.blob || null),
                _initCaptcha.call(this, i, s))
              : t.status === enums.HTTPStatusCode.CAPTCHA_REQUIRED
              ? getAppMain()
                  .getRootViewController()
                  .showCaptchaView()
              : ((i = gConfigurationModel.getConfigString(
                  models.ConfigurationModel.KEY_FUNCAPTCHA_PK
                )),
                _initCaptcha.call(this, i, (s = null)));
        });
    }

    function _initCaptcha(e, t) {
      if (!utils.JS.isValid(o)) {
        var i = services.Localization.getLocale().language;
        (o = document.createElement('script')).id = 'loadFunCaptchaScript';
        var s = '';
        null !== t && (s = "'data': {'blob':'" + t + "'},");
        var n =
          "{'public_key': '" +
          e +
          "', " +
          s +
          "'target_html': 'funCaptchaDiv',\t'callback': UTFunCaptchaViewController.captchaCompletedCallback, 'language': '" +
          i +
          "'}";
        (o.innerHTML =
          'var funCaptcha;function loadFunCaptcha() {\tif(!utils.JS.isValid(funCaptcha)){\t\tfunCaptcha = new FunCaptcha(' +
          n +
          ');\t}else{\t\tfunCaptcha.refresh_session();\t}};'),
          document.body.appendChild(o),
          (this._captchaLoaded = !0);
      }
    }
  }),
  (UTFunCaptchaViewController.captchaCompletedCallback = function captchaCompletedCallback() {
    var e = document.getElementById('FunCaptcha-Token').value,
      i = new UTCaptchaViewModel(accessobjects.Captcha);
    i.init(),
      i.validateToken(e).observe(this, function _onValidateTokenComplete(e, t) {
        e.unobserve(this),
          t.success
            ? getAppMain()
                .getLoginController()
                .login(!0)
            : t.status === enums.HTTPStatusCode.CAPTCHA_REQUIRED
            ? getAppMain()
                .getRootViewController()
                .showCaptchaView()
            : getAppMain()
                .getLoginController()
                .logout(),
          i.dealloc();
      });
  }),
  NamespaceManager.Register('views.bootFlow'),
  (views.bootFlow.GettingStarted = function UTGettingStartedView() {
    UTView.call(this), this._generate();
  }),
  utils.JS.inherits(views.bootFlow.GettingStarted, UTView),
  (views.bootFlow.GettingStarted.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('sm-ut-content-container'),
        e.classList.add('ut-content-container');
      var t = document.createElement('div');
      t.classList.add('ut-content'),
        (this.__personaSelectorContainer = document.createElement('div')),
        this.__personaSelectorContainer.classList.add(
          'ut-app-settings-persona-selector'
        ),
        t.appendChild(this.__personaSelectorContainer),
        (this.__bootBox = document.createElement('div')),
        this.__bootBox.classList.add('ut-getting-started');
      var i = document.createElement('div');
      i.classList.add('ut-getting-started-logo'),
        (this._futLogo = new views.bootFlow.FUTLogo()),
        i.appendChild(this._futLogo.getRootElement()),
        this.__bootBox.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('ut-getting-started-content');
      var n = document.createElement('div');
      n.classList.add('ut-getting-started--scrollable'),
        (this.__infoTitle = document.createElement('h2')),
        n.appendChild(this.__infoTitle),
        (this.__description = document.createElement('p')),
        this.__description.classList.add('description'),
        n.appendChild(this.__description),
        (this.__steps = document.createElement('ul')),
        this.__steps.classList.add('isolated-section'),
        this.__steps.classList.add('steps');
      var o = document.createElement('li');
      (this.__step1 = document.createElement('span')),
        o.appendChild(this.__step1),
        this.__steps.appendChild(o);
      var a = document.createElement('li');
      (this.__step2 = document.createElement('span')),
        a.appendChild(this.__step2),
        this.__steps.appendChild(a),
        n.appendChild(this.__steps),
        (this.__joinTheClub = document.createElement('p')),
        n.appendChild(this.__joinTheClub),
        s.appendChild(n),
        (this._learnMore = new UTStandardButtonControl()),
        this._learnMore
          .getRootElement()
          .classList.add('ut-getting-started--button'),
        this._learnMore.getRootElement().classList.add('call-to-action'),
        s.appendChild(this._learnMore.getRootElement()),
        this.__bootBox.appendChild(s),
        t.appendChild(this.__bootBox),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.bootFlow.GettingStarted.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__personaSelectorContainer = null),
      (this.__bootBox = null),
      this._futLogo.destroy(),
      (this.__infoTitle = null),
      (this.__description = null),
      (this.__steps = null),
      (this.__step1 = null),
      (this.__step2 = null),
      (this.__joinTheClub = null),
      this._learnMore.destroy();
  }),
  (views.bootFlow.GettingStarted.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.bootFlow.GettingStarted.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.bootFlow.GettingStarted.prototype.init = function init() {
    this.superclass(),
      this._learnMore.init(),
      this._learnMore.setText(
        services.Localization.localize('gettingstarted.learnmore')
      ),
      this._futLogo.init(),
      this._futLogo.loadImages();
  }),
  (views.bootFlow.GettingStarted.prototype.appendPersonaSelector = function appendPersonaSelector(
    e
  ) {
    this.addClass('has-persona-selector'),
      this.addSubview(e, this.__personaSelectorContainer);
  }),
  (views.bootFlow.GettingStarted.prototype.render = function render(e) {
    var t = '';
    switch (e) {
      case enums.GettingStartedTypes.ACCESS_TRIAL:
        t = 'gettingStartedFifa.contentTrial';
        break;
      case enums.GettingStartedTypes.FREE_TRIAL:
        t = 'gettingStartedFifa.freeTrial';
        break;
      case enums.GettingStartedTypes.FUT:
        t = 'gettingstarted.futcontent1';
        break;
      case enums.GettingStartedTypes.PLATFORM_SWITCH:
        t = 'gettingstarted.switchcontent1';
        break;
      case enums.GettingStartedTypes.PLATFORM_GEN3:
        t = 'gettingstarted.gen3content1';
        break;
      case enums.GettingStartedTypes.WEBSTART_OVER:
        t = 'webstartaccessover.text';
        break;
      default:
        t = 'gettingStartedFifa.content1';
    }
    (this.__description.textContent = services.Localization.localize(t)),
      e === enums.GettingStartedTypes.WEBSTART_OVER
        ? (this.__steps.parentNode.removeChild(this.__steps),
          (this.__infoTitle.textContent = services.Localization.localize(
            'gettingstarted.fifa'
          )),
          (this.__joinTheClub.textContent = services.Localization.localize(
            'gettingstarted.jointheclub'
          )))
        : (DOMKit.toggleDisplayStyle(this.__joinTheClub, !1),
          (this.__infoTitle.textContent = services.Localization.localize(
            'navbar.label.gettingstarted'
          )),
          e === enums.GettingStartedTypes.PLATFORM_SWITCH ||
          e === enums.GettingStartedTypes.PLATFORM_GEN3
            ? this.__steps.parentNode.removeChild(this.__steps)
            : e === enums.GettingStartedTypes.FUT
            ? ((this.__step1.textContent = services.Localization.localize(
                'gettingstarted.futstep1'
              )),
              (this.__step2.textContent = services.Localization.localize(
                'gettingstarted.futstep3'
              )))
            : ((this.__step1.textContent = services.Localization.localize(
                'gettingStartedFifa.content2'
              )),
              (this.__step2.textContent = services.Localization.localize(
                'gettingStartedFifa.content4'
              ))));
  }),
  (views.bootFlow.GettingStarted.prototype.getLearnMoreButton = function getLearnMoreButton() {
    return this._learnMore;
  }),
  utils.JS.inherits(UTGettingStartedViewController, UTViewController),
  (UTGettingStartedViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      this.getView()
        .getLearnMoreButton()
        .addTarget(this, this._eLearnMoreSelected, enums.Event.TAP),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.LOGIN,
        'No FUT Data'
      ));
  }),
  (UTGettingStartedViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      utils.JS.isValid(this._personaController) &&
        (this._personaController.dealloc(), (this._personaController = null));
  }),
  (UTGettingStartedViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.GettingStarted();
  }),
  (UTGettingStartedViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.gettingstarted');
  }),
  (UTGettingStartedViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getNavigationController();
    e && e.setNavigationVisibility(isPhone(), !0),
      this._personaController && this._personaController.viewDidAppear();
  }),
  (UTGettingStartedViewController.prototype.setType = function setType(e) {
    var t,
      i = !1;
    for (t in enums.GettingStartedTypes)
      if (
        enums.GettingStartedTypes.hasOwnProperty(t) &&
        enums.GettingStartedTypes[t] === e
      ) {
        i = !0;
        break;
      }
    if ((utils.Debug.Assert(i, 'Invalid getting started page type: ' + e), i)) {
      this._type = e;
      var s =
          services.Authentication.getFUTAuthState() ===
            enums.FUTAuthState.NO_DATA ||
          !services.User.getUser().getSelectedPersona().hasClubForCurrentYear,
        n = this._type !== enums.GettingStartedTypes.FIFA && !s;
      this.getView().render(this._type), n && this._generatePersonaController();
    }
  }),
  (UTGettingStartedViewController.prototype._generatePersonaController = function _generatePersonaController() {
    if (!this._personaController) {
      var e = this.getView();
      (this._personaController = new controllers.views.Persona()),
        this._personaController.init(),
        this.addChildViewController(this._personaController),
        e.appendPersonaSelector(this._personaController.getView()),
        e.layoutSubviews();
    }
  }),
  (UTGettingStartedViewController.prototype._eLearnMoreSelected = function _eLearnMoreSelected(
    e,
    t
  ) {
    var i;
    if (this._type !== enums.GettingStartedTypes.FIFA)
      switch (services.Localization.getLocale().region) {
        case enums.Region.USA:
          i = services.Localization.localize('link.gettingstartedfut.en_us');
          break;
        case enums.Region.CANADA:
          i = services.Localization.localize('link.gettingstartedfut.en_ca');
          break;
        case enums.Region.AUSTRALIA:
          i = services.Localization.localize('link.gettingstartedfut.en_au');
          break;
        default:
          i = services.Localization.localize('link.gettingstartedfut');
      }
    else i = services.Localization.localize('link.gettingstartedfifa');
    services.URL.process(i);
  }),
  utils.JS.inherits(UTLanguageTableCellView, UTTargetActionView),
  (UTLanguageTableCellView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-language-table-cell-view'),
        (this.__name = document.createElement('span')),
        this.__name.classList.add('ut-language-table-cell-view--name'),
        e.appendChild(this.__name),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTLanguageTableCellView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__name = null);
  }),
  (UTLanguageTableCellView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTLanguageTableCellView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTLanguageTableCellView.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTLanguageTableCellView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    var t = this._interactionState;
    this.superclass(e),
      this._interactionState !== t &&
        this.toggleClass(enums.UIState.DISABLED, !this._interactionState);
  }),
  (UTLanguageTableCellView.prototype.setName = function setName(e) {
    this.__name.textContent = e;
  }),
  (UTLanguageTableCellView.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIState.HOVER);
  }),
  (UTLanguageTableCellView.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass(enums.UIState.HOVER);
  }),
  (UTLanguageTableCellView.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(e), this.addClass(enums.UIState.ACTIVE);
  }),
  (UTLanguageTableCellView.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(e), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTLanguageTableCellView.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(e), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTLanguageTableCellView.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(e),
      this._triggerActions(enums.Event.TAP, {
        squad: this._squad
      });
  }),
  utils.JS.inherits(UTLanguageSelectView, UTTargetActionView),
  (UTLanguageSelectView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-language-select'),
        e.classList.add('sm-ut-content-container'),
        e.classList.add('ut-content-container');
      var t = document.createElement('div');
      t.classList.add('ut-content');
      var i = document.createElement('div');
      i.classList.add('ut-language-select-content'),
        (this._futLogo = new views.bootFlow.FUTLogo()),
        i.appendChild(this._futLogo.getRootElement()),
        (this.__languageTable = document.createElement('div')),
        this.__languageTable.classList.add('ut-language-select--table'),
        i.appendChild(this.__languageTable),
        t.appendChild(i),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTLanguageSelectView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._futLogo.destroy(),
      (this.__languageTable = null);
  }),
  (UTLanguageSelectView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTLanguageSelectView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTLanguageSelectView.prototype.init = function init() {
    this.superclass(),
      this._futLogo.init(),
      this._futLogo.loadImages(
        isPhone() ? enums.UIThemeVariation.LIGHT : enums.UIThemeVariation.DARK
      );
  }),
  (UTLanguageSelectView.prototype.dealloc = function dealloc() {
    this._clearLanguageCells(), this.superclass();
  }),
  (UTLanguageSelectView.prototype._clearLanguageCells = function _clearLanguageCells() {
    this._cells.forEach(function(e) {
      e.dealloc();
    }),
      (this._cells = []);
  }),
  (UTLanguageSelectView.prototype._generateLanguageCell = function _generateLanguageCell(
    e
  ) {
    var t = new UTLanguageTableCellView();
    t.init(),
      t.setName(e.name),
      t.addTarget(this, this._eLanguageSelected, enums.Event.TAP),
      this._cells.push(t),
      this.addSubview(t, this.__languageTable);
  }),
  (UTLanguageSelectView.prototype.setLocales = function setLocales(e) {
    this._clearLanguageCells(),
      e.forEach(this._generateLanguageCell, this),
      this.layoutSubviews();
  }),
  (UTLanguageSelectView.prototype._eLanguageSelected = function _eLanguageSelected(
    e,
    t,
    i
  ) {
    this._triggerActions(enums.Event.TAP, {
      index: this._cells.indexOf(e)
    });
  }),
  utils.JS.inherits(UTLanguageSelectViewController, UTViewController),
  (UTLanguageSelectViewController.prototype.init = function init() {
    this.superclass(),
      (this._locales = services.Localization.getSupportedLocales()),
      this.getView().addTarget(this, this._eLanguageSelected, enums.Event.TAP),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.LOGIN,
        'Language Select'
      );
  }),
  (UTLanguageSelectViewController.prototype.dealloc = function dealloc() {
    (this._callback = null), (this._locales = []), this.superclass();
  }),
  (UTLanguageSelectViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTLanguageSelectView();
  }),
  (UTLanguageSelectViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('title.languageselect');
  }),
  (UTLanguageSelectViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this.getView().setLocales(this._locales);
  }),
  (UTLanguageSelectViewController.prototype.setLanguageSelectCallback = function setLanguageSelectCallback(
    e
  ) {
    this._callback = e;
  }),
  (UTLanguageSelectViewController.prototype._selectLocale = function _selectLocale(
    e
  ) {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      getStorage().setItem(STORAGE_LOCALE_KEY, e.toString()),
      services.Localization.setLocale(e),
      services.Localization.requestLocalization().observe(
        this,
        function _onRequestLocalizationComplete(e, t) {
          e.unobserve(this),
            utils.JS.isFunction(this._callback) && this._callback(),
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      );
  }),
  (UTLanguageSelectViewController.prototype._eLanguageSelected = function _eLanguageSelected(
    e,
    t,
    i
  ) {
    var s = this._locales[i.index];
    utils.Debug.Assert(
      utils.JS.isValid(s),
      'Missing data for selected language.'
    ),
      s && this._selectLocale(s);
  }),
  NamespaceManager.Register('views.bootFlow'),
  (views.bootFlow.License = function LicenseView() {
    UTTargetActionView.call(this),
      (this._cbLicenseImageLoad = null),
      this._generate();
  }),
  utils.JS.inherits(views.bootFlow.License, UTTargetActionView),
  (views.bootFlow.License.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-license'),
        e.classList.add('sm-ut-content-container'),
        e.classList.add('ut-content-container');
      var t = document.createElement('div');
      t.classList.add('ut-content-center'), t.classList.add('ut-content');
      var i = document.createElement('div');
      i.classList.add('ut-license-content'),
        (this.__licenseLogo = document.createElement('img')),
        this.__licenseLogo.classList.add('licenseLogo'),
        i.appendChild(this.__licenseLogo),
        (this.__licenseTitle = document.createElement('h1')),
        this.__licenseTitle.classList.add('licenseTitle'),
        i.appendChild(this.__licenseTitle),
        (this.__licenseText1 = document.createElement('p')),
        this.__licenseText1.classList.add('licenseBody'),
        i.appendChild(this.__licenseText1),
        (this.__licenseText2 = document.createElement('p')),
        this.__licenseText2.classList.add('licenseBody'),
        i.appendChild(this.__licenseText2),
        t.appendChild(i),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.bootFlow.License.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__licenseLogo = null),
      (this.__licenseTitle = null),
      (this.__licenseText1 = null),
      (this.__licenseText2 = null);
  }),
  (views.bootFlow.License.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.bootFlow.License.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.bootFlow.License.prototype.init = function init() {
    (this._cbLicenseImageLoad = this._eLicenseImageLoad.bind(this)),
      this.__licenseLogo.addEventListener(
        enums.Event.LOAD,
        this._cbLicenseImageLoad,
        !1
      ),
      (this.__licenseTitle.textContent = services.Localization.localize(
        'license.text.header'
      ).toUpperCase()),
      (this.__licenseText1.textContent = services.Localization.localize(
        'license.text.body1'
      )),
      (this.__licenseText2.textContent = services.Localization.localize(
        'license.text.body2'
      )),
      DOMKit.toggleDisplayStyle(this.__licenseLogo, !1),
      (this.__licenseLogo.src = utils.AssetLocator.getLicenseLogoURI(
        services.Localization.getLocale().language
      )),
      this.superclass();
  }),
  (views.bootFlow.License.prototype.dealloc = function dealloc() {
    this._clearLoadEventListener(), this.superclass();
  }),
  (views.bootFlow.License.prototype._clearLoadEventListener = function _clearLoadEventListener() {
    this._cbLicenseImageLoad &&
      (this.__licenseLogo.removeEventListener(
        enums.Event.LOAD,
        this._cbLicenseImageLoad,
        !1
      ),
      (this._cbLicenseImageLoad = null));
  }),
  (views.bootFlow.License.prototype._eLicenseImageLoad = function _eLicenseImageLoad(
    e
  ) {
    this._clearLoadEventListener(),
      DOMKit.addClass(this.__licenseLogo, 'fade-in-screen'),
      DOMKit.toggleDisplayStyle(this.__licenseLogo, !0),
      this._triggerActions(enums.Event.LOAD);
  }),
  utils.JS.inherits(UTLicenseViewController, UTViewController),
  (UTLicenseViewController.FLAGS = {
    TIMER: 1,
    MEMORY: 2
  }),
  (UTLicenseViewController.LOW_MEMORY_LIMIT = 25600),
  (UTLicenseViewController.prototype.init = function init() {
    this.superclass(),
      this.getView().addTarget(this, this._eLicenseImageLoad, enums.Event.LOAD);
    var e = getDefaultDispatcher();
    e.addObserver(enums.Notification.APP_PAUSE, this, this._nAppPaused),
      e.addObserver(enums.Notification.APP_RESUME, this, this._nAppResumed),
      TelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, 'Legal');
  }),
  (UTLicenseViewController.prototype.dealloc = function dealloc() {
    clearTimeout(this._setTimerFlagTimeout);
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.APP_PAUSE, this),
      e.removeObserver(enums.Notification.APP_RESUME, this),
      this.superclass();
  }),
  (UTLicenseViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.License();
  }),
  (UTLicenseViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('gettingstarted.welcome');
  }),
  (UTLicenseViewController.prototype._eLicenseImageLoad = function _eLicenseImageLoad(
    e,
    t,
    i
  ) {
    this.checkFreeDiskSpace(), this._startDisplayTimer();
  }),
  (UTLicenseViewController.prototype._startDisplayTimer = function _startDisplayTimer() {
    clearTimeout(this._setTimerFlagTimeout),
      (this._setTimerFlagTimeout = setTimeout(
        this._setContinueFlag.bind(this, UTLicenseViewController.FLAGS.TIMER),
        3e3
      ));
  }),
  (UTLicenseViewController.prototype._checkFlagState = function _checkFlagState() {
    this._completedFlags ===
      (UTLicenseViewController.FLAGS.TIMER |
        UTLicenseViewController.FLAGS.MEMORY) &&
      (this._hasLowMemory
        ? utils.PopupManager.ShowAlert(
            utils.PopupManager.Alerts.LOW_MEMORY,
            this._transitionToLogin.bind(this)
          )
        : this._transitionToLogin());
  }),
  (UTLicenseViewController.prototype._setContinueFlag = function _setContinueFlag(
    e
  ) {
    utils.Debug.Assert(
      !(this._completedFlags & e),
      'Flag has already been set.'
    ),
      (this._completedFlags = this._completedFlags | e),
      this._checkFlagState();
  }),
  (UTLicenseViewController.prototype.checkFreeDiskSpace = function checkFreeDiskSpace() {
    function _onRetrieveFreeSpaceFail() {
      this._setContinueFlag(UTLicenseViewController.FLAGS.MEMORY);
    }
    isChrome()
      ? _onRetrieveFreeSpaceFail.call(this)
      : window.plugins.utilities.getFreeDiskSpace(
          function _onRetrieveFreeSpaceSuccess(e) {
            (this._hasLowMemory = e < UTLicenseViewController.LOW_MEMORY_LIMIT),
              this._setContinueFlag(UTLicenseViewController.FLAGS.MEMORY);
          }.bind(this),
          _onRetrieveFreeSpaceFail.bind(this)
        );
  }),
  (UTLicenseViewController.prototype._transitionToLogin = function _transitionToLogin() {
    getAppMain()
      .getRootViewController()
      .showLoginView();
  }),
  (UTLicenseViewController.prototype._nAppPaused = function _nAppPaused(
    e,
    t,
    i
  ) {
    clearTimeout(this._setTimerFlagTimeout);
  }),
  (UTLicenseViewController.prototype._nAppResumed = function _nAppResumed(
    e,
    t,
    i
  ) {
    this._completedFlags & UTLicenseViewController.FLAGS.TIMER ||
      this._startDisplayTimer();
  }),
  NamespaceManager.Register('views.bootFlow'),
  (views.bootFlow.Login = function UTLoginView() {
    UTView.call(this), this._generate();
  }),
  utils.JS.inherits(views.bootFlow.Login, UTView),
  (views.bootFlow.Login.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.setAttribute('id', 'Login'),
        e.classList.add('ut-login'),
        e.classList.add('sm-ut-content-container'),
        e.classList.add('ut-content-container');
      var t = document.createElement('div');
      t.classList.add('ut-content');
      var i = document.createElement('div');
      i.classList.add('ut-login-content'),
        (this._futLogo = new views.bootFlow.FUTLogo()),
        i.appendChild(this._futLogo.getRootElement()),
        (this._btnLogin = new UTStandardButtonControl()),
        this._btnLogin.getRootElement().classList.add('call-to-action'),
        i.appendChild(this._btnLogin.getRootElement()),
        (this._linkGettingStarted = new UTFlatButtonControl()),
        this._linkGettingStarted.getRootElement().classList.add('alt'),
        this._linkGettingStarted.getRootElement().classList.add('camel-case'),
        i.appendChild(this._linkGettingStarted.getRootElement()),
        t.appendChild(i),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.bootFlow.Login.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._futLogo.destroy(),
      this._btnLogin.destroy(),
      this._linkGettingStarted.destroy();
  }),
  (views.bootFlow.Login.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.bootFlow.Login.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.bootFlow.Login.prototype.init = function init() {
    this.superclass(),
      this._btnLogin.init(),
      this._btnLogin.setText(
        services.Localization.localize('login.loginButtonText')
      ),
      this._linkGettingStarted.init(),
      this._linkGettingStarted.setText(
        services.Localization.localize('login.gettingstarted')
      ),
      this._linkGettingStarted.addTarget(
        this,
        this._eGettingStarted,
        enums.Event.TAP
      ),
      this._futLogo.init(),
      this._futLogo.loadImages(enums.UIThemeVariation.DARK);
  }),
  (views.bootFlow.Login.prototype.getLoginButton = function getLoginButton() {
    return this._btnLogin;
  }),
  (views.bootFlow.Login.prototype.enableLoginButton = function enableLoginButton(
    e
  ) {
    this._btnLogin.setInteractionState(e);
  }),
  (views.bootFlow.Login.prototype._eGettingStarted = function _eGettingStarted(
    e,
    t,
    i
  ) {
    services.URL.process(services.Localization.localize('link.gettingstarted'));
  }),
  (models.ShowOffLoginModel = function UTShowOffLoginModel() {
    models.LoginModel.call(this), (this._showOffDTO = null);
  }),
  utils.JS.inherits(models.ShowOffLoginModel, models.LoginModel),
  (models.ShowOffLoginModel.LOGIN_STEP = {
    EXTENDED_LOC: 0,
    PRE_LOAD_SQUAD: 1,
    LOAD_SQUAD: 2,
    SQUAD_SCREEN: 3
  }),
  (models.ShowOffLoginModel.prototype._runCurrentStep = function _runCurrentStep() {
    switch (this._currentLoginStep) {
      case models.ShowOffLoginModel.LOGIN_STEP.EXTENDED_LOC:
        this._getExtendedLocFile();
        break;
      case models.ShowOffLoginModel.LOGIN_STEP.PRE_LOAD_SQUAD:
        this._onPreLoadSquad();
        break;
      case models.ShowOffLoginModel.LOGIN_STEP.LOAD_SQUAD:
        this._getShowOffSquad();
        break;
      case models.ShowOffLoginModel.LOGIN_STEP.SQUAD_SCREEN:
        this._goToSquadScreen();
        break;
      default:
        utils.Debug.Assert(
          !1,
          '[models.ShowOffLoginModel] Invalid or unsupported bootflow step requested.'
        ),
          (this._isRunning = !1),
          utils.PopupManager.ShowAlert(
            utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE,
            this.logout.bind(this)
          ),
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
    }
  }),
  (models.ShowOffLoginModel.prototype._onPreLoadSquad = function _onPreLoadSquad() {
    function _onStaticDataRequestFail() {
      (this._isRunning = !1),
        utils.PopupManager.ShowAlert(
          utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE,
          this.logout.bind(this)
        ),
        gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
    }

    function _onRequestSquadDataComplete(e, t) {
      e.unobserve(this),
        t.success ? this._runNextStep() : _onStaticDataRequestFail.call(this);
    }

    function _onGetRarityComplete(e, t) {
      e.unobserve(this),
        t.success
          ? services.Configuration.requestSquadData().observe(
              this,
              _onRequestSquadDataComplete
            )
          : _onStaticDataRequestFail.call(this);
    }

    function _onMissingImagesDataRequested(e, t) {
      e.unobserve(this),
        t.success
          ? services.Configuration.loadRarityData().observe(
              this,
              _onGetRarityComplete
            )
          : _onStaticDataRequestFail.call(this);
    }

    function _onPlayerIconDataRequested(e, t) {
      e.unobserve(this),
        t.success
          ? services.Configuration.requestMissingImagesData().observe(
              this,
              _onMissingImagesDataRequested
            )
          : _onStaticDataRequestFail.call(this);
    }

    function _onPlayerMetaDataRequested(e, t) {
      e.unobserve(this),
        t.success
          ? services.Configuration.requestPlayerIconData().observe(
              this,
              _onPlayerIconDataRequested
            )
          : _onStaticDataRequestFail.call(this);
    }

    function _onStaticPlayerDataRequested(e, t) {
      e.unobserve(this),
        t.success
          ? services.Configuration.requestPlayerMetaData().observe(
              this,
              _onPlayerMetaDataRequested
            )
          : _onStaticDataRequestFail.call(this);
    }
    services.Configuration.requestTeamConfig().observe(
      this,
      function _onTeamConfigRequested(e, t) {
        e.unobserve(this),
          t.success
            ? services.Configuration.requestStaticPlayerData().observe(
                this,
                _onStaticPlayerDataRequested
              )
            : _onStaticDataRequestFail.call(this);
      }
    );
  }),
  (models.ShowOffLoginModel.prototype._getShowOffSquad = function _getShowOffSquad() {
    services.Squad.loadShowOffSquad().observe(this, function(e, t) {
      (e.unobserve(this), t.success)
        ? ((this._showOffDTO = t.data.showOff), this._runNextStep())
        : (window.location.search.substring(1).length &&
            void 0 !== window.history &&
            void 0 !== window.history.pushState &&
            window.history.pushState(
              {},
              document.title,
              window.location.pathname
            ),
          (this._isRunning = !1),
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING));
    });
  }),
  (models.ShowOffLoginModel.prototype._goToSquadScreen = function _goToSquadScreen() {
    (this._isRunning = !1),
      getAppMain()
        .getRootViewController()
        .showSharedSquadView(this._showOffDTO),
      gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
  }),
  (models.ShowOffLoginModel.prototype.logout = function logout() {
    utils.Debug.Assert(
      !this._isRunning,
      '[LOGIN] Attempted to logout when a login/logout request is already running.'
    ),
      this._isRunning || this._resetApp();
  }),
  utils.JS.inherits(UTLoginViewController, UTViewController),
  (UTLoginViewController.IOS_STATUS_BAR_STYLE = {
    DEFAULT: 0,
    BLACK: 1
  }),
  (UTLoginViewController.prototype.init = function init() {
    this.superclass(),
      eadp.identity.setConnectHost(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_EADP_CONNECT_HOST
        )
      ),
      eadp.identity.setPortalHost(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_EADP_PORTAL_HOST
        )
      ),
      eadp.identity.setProxyHost(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_EADP_PROXY_HOST
        )
      ),
      eadp.identity.setClientId(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_EADP_CLIENT_ID
        )
      ),
      eadp.identity.setClientSecret(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_EADP_CLIENT_SECRET
        )
      ),
      eadp.identity.setLocale(
        services.Localization.getLocale().toEANetworkString()
      ),
      eadp.identity.setDeviceId(getUUID()),
      eadp.identity.setReleaseType(
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_RELEASE_TYPE
        )
      );
    var e = window.location.href,
      t = utils.HTTP.getParamsFromUrl(e),
      i = utils.HTTP.getUriRoot(e),
      s = services.URL.findValidDeepLinkID(t.keys());
    s !== enums.DeepLinkSections.NONE &&
      (services.URL.setDeepLinkURL(s, t.get(s)),
      getStorage().setItem(
        STORAGE_DEEP_LINK_KEY,
        services.URL.getDeepLinkURL()
      )),
      (i = i.replace(/\/$/, '') + '/auth.html'),
      eadp.identity.setRedirectUri(i),
      this.getView()
        .getLoginButton()
        .addTarget(this, this._eLoginSelected, enums.Event.TAP),
      TelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, 'Login');
  }),
  (UTLoginViewController.prototype.dealloc = function dealloc() {
    this.superclass();
  }),
  (UTLoginViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.Login();
  }),
  (UTLoginViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.loginfut');
  }),
  (UTLoginViewController.prototype.viewDidAppear = function viewDidAppear() {
    var e = function() {
        console.log('[controllers.LoginController] Unable to auto-login.'),
          this.getView().enableLoginButton(!0);
      }.bind(this),
      t = function() {
        eadp.identity.getUserInfo(
          this._onEadpUserInfoSuccess.bind(this),
          this._onEadpUserInfoFail.bind(this)
        );
      }.bind(this);
    services.Squad.hasExternalShowOffSquad()
      ? this._startUnauthenticatedLoginFlow()
      : isWeb()
      ? (this.getView().enableLoginButton(!1),
        eadp.identity.getAccessToken()
          ? t()
          : eadp.identity.checkEADPAuth(t, e))
      : eadp.identity.isAuthenticated(
          function() {
            console.log('LOGIN: Attempting to auto-authenticate...'),
              this.getView().enableLoginButton(!1),
              eadp.identity.checkEADPAuth(t, e);
          }.bind(this)
        ),
      getDefaultDispatcher().addObserver(
        enums.Notification.APP_RESUME,
        this,
        this._nAppResumed
      );
  }),
  (UTLoginViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      getDefaultDispatcher().removeObserver(
        enums.Notification.APP_RESUME,
        this
      );
  }),
  (UTLoginViewController.prototype._startUnauthenticatedLoginFlow = function _startUnauthenticatedLoginFlow() {
    var e = getAppMain();
    e.setLoginController(new models.ShowOffLoginModel()),
      e.getLoginController().login();
  }),
  (UTLoginViewController.prototype._onEadpLoginComplete = function _onEadpLoginComplete() {
    eadp.identity.getUserInfo(
      this._onEadpUserInfoSuccess.bind(this),
      this._onEadpUserInfoFail.bind(this)
    );
  }),
  (UTLoginViewController.prototype._onEadpUserInfoFail = function _onEadpUserInfoFail(
    e
  ) {
    return e === eadp.identity.error.LOCAL_STORAGE
      ? (utils.Debug.Assert(
          !1,
          '[controllers.LoginController] Unable to save EADP Identity data in local storage.'
        ),
        void this.getView().enableLoginButton(!0))
      : e === eadp.identity.error.REFRESH_TOKEN
      ? (console.log('LOGIN: EADP requires a login refresh.'),
        void this.getView().enableLoginButton(!0))
      : e === eadp.identity.error.SERVER
      ? (console.log('LOGIN: An unknown EADP server error occurred.'),
        void this.getView().enableLoginButton(!0))
      : void 0;
  }),
  (UTLoginViewController.prototype._onEadpUserInfoSuccess = function _onEadpUserInfoSuccess(
    e
  ) {
    var t = getAppMain();
    t.setLoginController(new models.LoginModel()),
      services.User.setCurrent(new entities.User(e)),
      gUserSettingsModel.setUserKey(e.pidId.toString()),
      isChrome() ||
        window.plugins.utilities.registerNimble(
          e.pidId,
          getStorage().getItem(STORAGE_PN_STATUS_KEY),
          function() {},
          function() {}
        ),
      t.getLoginController().login();
  }),
  (UTLoginViewController.prototype._eLoginSelected = function _eLoginSelected(
    e,
    t
  ) {
    gClientUpdate.disablePolling(),
      TelemetryManager.trackEvent(
        TelemetryManager.Sections.LOGIN,
        TelemetryManager.Categories.BUTTON_PRESS,
        'Login'
      ),
      this.getView().enableLoginButton(!1),
      this.createLoginView();
  }),
  (UTLoginViewController.prototype.createLoginView = function createLoginView() {
    if (hasConnection())
      if (isChrome())
        eadp.identity.initiateLoginFlow(
          'Login',
          this.onAccessTokenSuccess.bind(this),
          this.onAccessTokenFail.bind(this)
        );
      else {
        var e = eadp.identity.getLoginUrl();
        window.console.log('Opening EADP: ' + e),
          (this._inAppBrowser = window.open(e, '_blank', 'location=no')),
          (this._successCallbackDelegate = this.iabLoadStart.bind(this)),
          (this._errorCallbackDelegate = this.iabLoadError.bind(this)),
          (this._browserDismissedCallbackDelegate = this.iabExit.bind(this)),
          (this._linkCallbackDelegate = this.iabLoadStop.bind(this)),
          this._inAppBrowser.addEventListener(
            'loadstart',
            this._successCallbackDelegate,
            !1
          ),
          this._inAppBrowser.addEventListener(
            'loadstart',
            this._linkCallbackDelegate,
            !1
          ),
          this._inAppBrowser.addEventListener(
            'loadstop',
            this._linkCallbackDelegate,
            !1
          ),
          this._inAppBrowser.addEventListener(
            'loaderror',
            this._errorCallbackDelegate,
            !1
          ),
          this._inAppBrowser.addEventListener(
            'exit',
            this._browserDismissedCallbackDelegate,
            !1
          );
      }
    else
      utils.PopupManager.ShowAlert(
        utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE,
        function() {
          this.getView().enableLoginButton(!0);
        }.bind(this)
      );
  }),
  (UTLoginViewController.prototype.closeLoginView = function closeLoginView() {
    this.isLoginViewOpen() &&
      (this._inAppBrowser.removeEventListener(
        'loadstart',
        this._successCallbackDelegate,
        !1
      ),
      this._inAppBrowser.removeEventListener(
        'loadstart',
        this._linkCallbackDelegate,
        !1
      ),
      this._inAppBrowser.removeEventListener(
        'loadstop',
        this._linkCallbackDelegate,
        !1
      ),
      this._inAppBrowser.removeEventListener(
        'loaderror',
        this._errorCallbackDelegate,
        !1
      ),
      this._inAppBrowser.removeEventListener(
        'exit',
        this._browserDismissedCallbackDelegate,
        !1
      ),
      (this._successCallbackDelegate = null),
      (this._errorCallbackDelegate = null),
      (this._browserDismissedCallbackDelegate = null),
      this._inAppBrowser.close(),
      (this._inAppBrowser = null),
      gClientUpdate.pollForUpdates(function() {
        getAppMain()
          .getRootViewController()
          .showClientUpdateView();
      }));
  }),
  (UTLoginViewController.prototype.iabLoadStart = function iabLoadStart(e) {
    if (
      eadp.identity.isErrorPattern(
        e.url,
        '/p/mobile/fifa/companion/code',
        'code'
      )
    )
      getAppMain()
        .getLoginController()
        .logout(),
        this.closeLoginView(),
        this.getView().enableLoginButton(!0);
    else if (e.url && -1 !== e.url.indexOf('code=')) {
      this.closeLoginView();
      var t = e.url.split('code=')[1].split('&')[0];
      eadp.identity.exchangeAccessToken(
        t,
        this.onAccessTokenSuccess.bind(this),
        this.onAccessTokenFail.bind(this)
      );
    }
  }),
  (UTLoginViewController.prototype.iabLoadStop = function iabLoadStop(e) {
    eadp.identity.isExternalLink(e.url) &&
      (this.closeLoginView(),
      this.getView().enableLoginButton(!0),
      (this._recreateOnResume = !0),
      services.URL.process(e.url));
  }),
  (UTLoginViewController.prototype.iabLoadError = function iabLoadError(e) {
    utils.PopupManager.ShowAlert(
      utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE,
      this.iabExit.bind(this)
    );
  }),
  (UTLoginViewController.prototype.iabExit = function iabExit(e) {
    this.closeLoginView(), this.getView().enableLoginButton(!0);
  }),
  (UTLoginViewController.prototype.onAccessTokenSuccess = function onAccessTokenSuccess(
    e
  ) {
    isChrome() && eadp.identity.closeLoginFlow(), this._onEadpLoginComplete();
  }),
  (UTLoginViewController.prototype.onAccessTokenFail = function onAccessTokenFail(
    e
  ) {
    console.log('access token failure!'), this._onEadpLoginComplete();
  }),
  (UTLoginViewController.prototype.isLoginViewOpen = function isLoginViewOpen() {
    return utils.JS.isValid(this._inAppBrowser);
  }),
  (UTLoginViewController.prototype._nAppResumed = function _nAppResumed(
    e,
    t,
    i
  ) {
    services.Squad.hasExternalShowOffSquad()
      ? (this.isLoginViewOpen() &&
          (this.closeLoginView(), this.getView().enableLoginButton(!0)),
        this._startUnauthenticatedLoginFlow())
      : this._recreateOnResume &&
        ((this._recreateOnResume = !1),
        this.getView().enableLoginButton(!1),
        this.createLoginView());
  }),
  NamespaceManager.Register('views.bootFlow'),
  (views.bootFlow.LoggedOnConsole = function UTLoggedOnConsoleView() {
    UTView.call(this),
      (this.onRetryTap = new UTObservable()),
      Object.defineProperty(this, 'onImageLoaded', {
        writable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.bootFlow.LoggedOnConsole, UTView),
  (views.bootFlow.LoggedOnConsole.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('sm-ut-content-container'),
        e.classList.add('ut-content-container');
      var t = document.createElement('div');
      t.classList.add('ut-content'),
        (this.__personaSelectorContainer = document.createElement('div')),
        this.__personaSelectorContainer.classList.add(
          'ut-app-settings-persona-selector'
        ),
        t.appendChild(this.__personaSelectorContainer);
      var i = document.createElement('div');
      i.classList.add('ut-logged-on-console'),
        i.classList.add('ut-login-generic');
      var s = document.createElement('div');
      s.classList.add('ut-login-generic-content');
      var n = document.createElement('div');
      (this.__longOnTitle = document.createElement('h2')),
        n.appendChild(this.__longOnTitle),
        (this.__message1 = document.createElement('p')),
        n.appendChild(this.__message1),
        (this.__message2 = document.createElement('p')),
        n.appendChild(this.__message2),
        (this._btnRetry = new UTStandardButtonControl()),
        this._btnRetry.getRootElement().classList.add('call-to-action'),
        n.appendChild(this._btnRetry.getRootElement()),
        s.appendChild(n),
        i.appendChild(s),
        t.appendChild(i),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.bootFlow.LoggedOnConsole.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__personaSelectorContainer = null),
      (this.__longOnTitle = null),
      (this.__message1 = null),
      (this.__message2 = null),
      this._btnRetry.destroy();
  }),
  (views.bootFlow.LoggedOnConsole.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.bootFlow.LoggedOnConsole.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.bootFlow.LoggedOnConsole.prototype.init = function init() {
    this.superclass(),
      (this.__longOnTitle.textContent = services.Localization.localize(
        'signedontoanotherdevice.title'
      )),
      (this.__message1.textContent = services.Localization.localize(
        'signedontoanotherdevice.message1'
      )),
      (this.__message2.textContent = services.Localization.localize(
        'signedontoanotherdevice.message2'
      )),
      this._btnRetry.init(),
      this._btnRetry.setText(
        services.Localization.localize('common.dialog.retry')
      ),
      this._btnRetry.addTarget(
        this.onRetryTap,
        this.onRetryTap.notify,
        enums.Event.TAP
      );
  }),
  (views.bootFlow.LoggedOnConsole.prototype.appendPersonaSelector = function appendPersonaSelector(
    e
  ) {
    this.addClass('has-persona-selector'),
      this.addSubview(e, this.__personaSelectorContainer);
  }),
  utils.JS.inherits(UTLoggedOnConsoleViewController, UTViewController),
  (UTLoggedOnConsoleViewController.prototype.init = function init() {
    this.superclass();
    var e = this.getView();
    e.onRetryTap.observe(this, this._onRetryAuth),
      (this._personaController = new controllers.views.Persona()),
      this._personaController.init(),
      this.addChildViewController(this._personaController),
      e.appendPersonaSelector(this._personaController.getView()),
      e.layoutSubviews(),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.LOGIN,
        'Logged in on Console'
      );
  }),
  (UTLoggedOnConsoleViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._personaController &&
        (this._personaController.dealloc(), (this._personaController = null));
  }),
  (UTLoggedOnConsoleViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.LoggedOnConsole();
  }),
  (UTLoggedOnConsoleViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('signedontoanotherdevice.title');
  }),
  (UTLoggedOnConsoleViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getNavigationController();
    e && e.setNavigationVisibility(isPhone(), !0),
      this._personaController && this._personaController.viewDidAppear();
  }),
  (UTLoggedOnConsoleViewController.prototype._onRetryAuth = function _onRetryAuth() {
    this.getView().setInteractionState(!1),
      getAppMain()
        .getLoginController()
        .login(!0);
  }),
  utils.JS.inherits(UTDropDownControl, UTControl),
  (UTDropDownControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('inline-list-select'),
        e.classList.add('ut-drop-down-control'),
        (this.__animatedContainer = document.createElement('div')),
        this.__animatedContainer.classList.add('inline-container'),
        (this.__label = document.createElement('span')),
        this.__label.classList.add('label'),
        this.__animatedContainer.appendChild(this.__label),
        e.appendChild(this.__animatedContainer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTDropDownControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__animatedContainer = null),
      (this.__label = null);
  }),
  (UTDropDownControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTDropDownControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTDropDownControl.prototype.init = function init() {
    this.superclass();
    var e = this.getDropDownElement();
    this._addListener(enums.Event.CHANGE, e, this._handleChange.bind(this)),
      isPhone()
        ? this.__animatedContainer.appendChild(e)
        : ((this._windowListener = this._windowClick.bind(this)),
          (this.__list = document.createElement('ul')),
          DOMKit.addClass(this.__list, 'inline-list'),
          this._startHandlingEvents(this.__animatedContainer));
  }),
  (UTDropDownControl.prototype.dealloc = function dealloc() {
    this._removeListenersByName(enums.Event.CHANGE),
      this._removeWindowListener(),
      getKeyboardEventController().unregisterDelegate(
        this,
        UTKeyboardEventController.PRIORITY.ACTIVE_ELEMENT
      ),
      (this._options = []),
      (this._windowListener = null),
      (this.__list = null),
      (this.__picker = null),
      this.superclass();
  }),
  (UTDropDownControl.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    if (this._setInteractionStateFlag(e))
      if ((this.toggleClass(enums.UIState.DISABLED, !e), this.__list))
        this._interactionState
          ? this._startHandlingEvents(this.__animatedContainer)
          : this._stopHandlingEvents();
      else {
        var t = this.getDropDownElement();
        e ||
          t !== document.activeElement ||
          t.dispatchEvent(utils.JS.createEvent('blur')),
          (t.disabled = !e);
      }
  }),
  (UTDropDownControl.prototype._requiresFlip = function _requiresFlip() {
    return (
      !!this.__list &&
      window.innerHeight <
        this.getRootElement().getBoundingClientRect().bottom +
          this.__list.clientHeight
    );
  }),
  (UTDropDownControl.prototype._open = function _open() {
    !this._isOpen &&
      this.__list &&
      ((this._isOpen = !0),
      this.__animatedContainer.appendChild(this.__list),
      this._requiresFlip() &&
        (this.__animatedContainer.insertBefore(
          this.__list,
          this.__animatedContainer.children.item(0)
        ),
        (this.__animatedContainer.style.top =
          '-' + this.__list.clientHeight.toString() + 'px'),
        this.addClass(enums.UIDirection.FLIP_VERTICAL)),
      DOMKit.addClass(
        this.__list.children[this.getDropDownElement().selectedIndex],
        enums.UIState.SELECTED
      ),
      this._scrollToSelected(),
      this.addClass('is-open'),
      this._addWindowListener(),
      getKeyboardEventController().registerDelegate(
        this,
        UTKeyboardEventController.PRIORITY.ACTIVE_ELEMENT
      ));
  }),
  (UTDropDownControl.prototype._close = function _close() {
    this._isOpen &&
      this.__list &&
      ((this._isOpen = !1),
      this._removeWindowListener(),
      getKeyboardEventController().unregisterDelegate(
        this,
        UTKeyboardEventController.PRIORITY.ACTIVE_ELEMENT
      ),
      (this.__animatedContainer.style.top = '0px'),
      DOMKit.remove(this.__list),
      this.removeClass(['is-open', enums.UIDirection.FLIP_VERTICAL].join(' ')));
  }),
  (UTDropDownControl.prototype._addWindowListener = function _addWindowListener() {
    this._removeWindowListener(),
      requestAnimationFrame(
        function() {
          window.addEventListener(enums.Event.CLICK, this._windowListener, !1),
            window.addEventListener(
              enums.Event.TOUCHEND,
              this._windowListener,
              !1
            );
        }.bind(this)
      );
  }),
  (UTDropDownControl.prototype._removeWindowListener = function _removeWindowListener() {
    window.removeEventListener(enums.Event.CLICK, this._windowListener, !1),
      window.removeEventListener(
        enums.Event.TOUCHEND,
        this._windowListener,
        !1
      );
  }),
  (UTDropDownControl.prototype._scrollToSelected = function _scrollToSelected() {
    var e = this.__list.children.item(this.getDropDownElement().selectedIndex);
    e && (this.__list.scrollTop = e.offsetTop);
  }),
  (UTDropDownControl.prototype._windowClick = function _windowClick(e) {
    ('li' === e.target.nodeName.toLowerCase() &&
      e.target.parentNode === this.__list) ||
      this._close();
  }),
  (UTDropDownControl.prototype.getDropDownElement = function getDropDownElement() {
    return (
      this.__picker || (this.__picker = document.createElement('select')),
      this.__picker
    );
  }),
  (UTDropDownControl.prototype.getEnabled = function getEnabled() {
    return this.isInteractionEnabled();
  }),
  (UTDropDownControl.prototype.setEnabled = function setEnabled(e) {
    (e = !!e), this.setInteractionState(e);
  }),
  (UTDropDownControl.prototype._generateWebOptionElement = function _generateWebOptionElement(
    e
  ) {
    var t = document.createElement('li');
    return (t.textContent = e.label), t;
  }),
  (UTDropDownControl.prototype.setOptions = function setOptions(e) {
    Array.isArray(e) &&
      ((this._options = e),
      this._generateNativeOptions(),
      (this.__label.textContent = this.getLabel()),
      this.__list &&
        (DOMKit.empty(this.__list),
        e.forEach(function(e) {
          this.__list.appendChild(this._generateWebOptionElement(e));
        }, this))),
      this.removeClass(['is-open', enums.UIDirection.FLIP_VERTICAL].join(' '));
  }),
  (UTDropDownControl.prototype.getOptions = function getOptions() {
    return this._options.slice();
  }),
  (UTDropDownControl.prototype.setIndex = function setIndex(e) {
    var t = this.getDropDownElement();
    if (utils.JS.isNumber(e) && t.selectedIndex !== e) {
      if (this.__list) {
        var i = this.__list.children.item(t.selectedIndex),
          s = this.__list.children.item(e);
        i && DOMKit.removeClass(i, enums.UIState.SELECTED),
          s && DOMKit.addClass(s, enums.UIState.SELECTED);
      }
      (t.selectedIndex = e), t.dispatchEvent(utils.JS.createEvent('change'));
    }
  }),
  (UTDropDownControl.prototype.getIndex = function getIndex() {
    return this.getDropDownElement().selectedIndex;
  }),
  (UTDropDownControl.prototype.setIndexById = function setIndexById(e) {
    for (var t = this._options.length; 0 < t--; )
      if (this._options[t].id === e) {
        this.setIndex(t);
        break;
      }
  }),
  (UTDropDownControl.prototype.setIndexByValue = function setIndexByValue(e) {
    for (var t = this._options.length; 0 < t--; )
      if (this._options[t].value === e) return this.setIndex(t), !0;
    return !1;
  }),
  (UTDropDownControl.prototype.setDefaultIndexById = function setDefaultIndexById(
    e,
    t
  ) {
    for (var i = this._options.length; 0 < i--; )
      if (this._options[i].id === e)
        return (this._defaultIndex = i), t && this.setIndex(i), !0;
    return !1;
  }),
  (UTDropDownControl.prototype.setDefaultIndexByValue = function setDefaultIndexByValue(
    e,
    t
  ) {
    for (var i = this._options.length; 0 < i--; )
      if (this._options[i].value === e) {
        (this._defaultIndex = i), t && this.setIndex(i);
        break;
      }
  }),
  (UTDropDownControl.prototype.getDefaultIndex = function getDefaultIndex() {
    return this._defaultIndex;
  }),
  (UTDropDownControl.prototype.getLabel = function getLabel() {
    var e = this._options[this.getIndex()];
    return e ? e.label : '';
  }),
  (UTDropDownControl.prototype.getId = function getId() {
    var e = this._options[this.getIndex()];
    return e ? e.id : -1;
  }),
  (UTDropDownControl.prototype.getValue = function getValue() {
    var e = this._options[this.getIndex()];
    return e ? e.value : '';
  }),
  (UTDropDownControl.prototype.blur = function blur() {
    var e = this.getDropDownElement();
    e === document.activeElement && e.blur();
  }),
  (UTDropDownControl.prototype.focus = function focus() {
    var e = this.getDropDownElement();
    e !== document.activeElement && e.focus();
  }),
  (UTDropDownControl.prototype._handleDropdownSearch = function _handleDropdownSearch(
    e
  ) {
    0 < this._searchTimeout && clearTimeout(this._searchTimeout),
      (this._searchTimeout = setTimeout(
        function _resetSearch() {
          (this._searchTimeout = 0), (this._searchString = '');
        }.bind(this),
        1e3
      ));
    var i = (this._searchString += e),
      t = DOMKit.HTMLCollectionToArray(this.__list.childNodes),
      s = utils.JS.find(t, function(e) {
        var t = getComputedStyle(e);
        return (
          'none' !== t.display &&
          'visible' === t.visibility &&
          0 ===
            e.textContent
              .trim()
              .toLowerCase()
              .indexOf(i.trim().toLowerCase())
        );
      });
    s && (this.__list.scrollTop = s.offsetTop);
  }),
  (UTDropDownControl.prototype.handleKeyUpEvent = function handleKeyUpEvent(e) {
    /^[a-zA-Z0-9 ]$/.test(e.key) &&
      this._handleDropdownSearch(e.key.toString());
  }),
  (UTDropDownControl.prototype._handleChange = function _handleChange(e) {
    this.isInteractionEnabled() &&
      ((this.__label.textContent = this.getLabel()),
      this._triggerActions(enums.Event.CHANGE, {
        index: this.getIndex(),
        id: this.getId(),
        value: this.getValue()
      }));
  }),
  (UTDropDownControl.prototype._handleFocus = function _handleFocus(e) {
    this.enabled &&
      !this._shieldShowing &&
      ((this._shieldShowing = !0),
      gClickShield.showShield(components.ClickShield.SHIELD.FULL));
  }),
  (UTDropDownControl.prototype._handleBlur = function _handleBlur(e) {
    this._shieldShowing &&
      (gClickShield.hideShield(components.ClickShield.SHIELD.FULL),
      (this._shieldShowing = !1));
  }),
  (UTDropDownControl.prototype._touchStarted = function _touchStarted(e) {
    this.enabled &&
      requestAnimationFrame(
        function() {
          this.addClass(enums.UIState.ACTIVE);
        }.bind(this)
      );
  }),
  (UTDropDownControl.prototype._touchMoved = function _touchMoved(e) {
    requestAnimationFrame(
      function() {
        this.removeClass(enums.UIState.ACTIVE);
      }.bind(this)
    );
  }),
  (UTDropDownControl.prototype._touchEnded = function _touchEnded(e) {
    requestAnimationFrame(
      function() {
        this.removeClass(enums.UIState.ACTIVE);
      }.bind(this)
    );
  }),
  (UTDropDownControl.prototype._tapDetected = function _tapDetected(e) {
    if (this.isInteractionEnabled() && this.__list) {
      var t = e.target.nodeName.toLowerCase();
      if ('ul' !== t)
        if ('li' === t) {
          var i = DOMKit.HTMLCollectionToArray(this.__list.children);
          this.setIndex(i.indexOf(e.target)), this._close();
        } else this._isOpen ? this._close() : this._open();
    }
  }),
  (UTDropDownControl.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass(enums.UIState.HOVER);
  }),
  (UTDropDownControl.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIState.HOVER);
  }),
  (UTDropDownControl.prototype._generateNativeOptions = function _generateNativeOptions() {
    var i = this.getDropDownElement();
    DOMKit.empty(i),
      this._options.forEach(function _generateOptionElement(e) {
        var t = document.createElement('option');
        (t.value = e.value), (t.textContent = e.label), i.appendChild(t);
      }, this),
      this.setIndex(this._defaultIndex);
  }),
  utils.JS.inherits(UTSearchFilterControl, UTDropDownControl),
  (UTSearchFilterControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('inline-list-select'),
        e.classList.add('ut-search-filter-control'),
        (this.__animatedContainer = document.createElement('div')),
        this.__animatedContainer.classList.add('inline-container');
      var t = document.createElement('div');
      t.classList.add('ut-search-filter-control--row'),
        (this.__filterImage = document.createElement('img')),
        this.__filterImage.classList.add('ut-search-filter-control--row-image'),
        t.appendChild(this.__filterImage),
        (this.__label = document.createElement('span')),
        this.__label.classList.add('label'),
        t.appendChild(this.__label),
        (this._clearBtn = new UTFlatButtonControl()),
        this._clearBtn
          .getRootElement()
          .classList.add('ut-search-filter-control--row-button'),
        t.appendChild(this._clearBtn.getRootElement()),
        this.__animatedContainer.appendChild(t),
        e.appendChild(this.__animatedContainer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSearchFilterControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__animatedContainer = null),
      (this.__filterImage = null),
      (this.__label = null),
      this._clearBtn.destroy();
  }),
  (UTSearchFilterControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSearchFilterControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSearchFilterControl.prototype.init = function init() {
    this.superclass(),
      this._clearBtn.init(),
      this._clearBtn.addTarget(this, this._onClear, enums.Event.TAP);
  }),
  (UTSearchFilterControl.prototype.dealloc = function dealloc() {
    (this._iconTable = null), this.superclass();
  }),
  (UTSearchFilterControl.prototype._generateWebOptionElement = function _generateWebOptionElement(
    e
  ) {
    var t = utils.JS.isValid(this._iconTable),
      i = document.createElement('li');
    if (((i.textContent = e.label), t)) {
      var s = this._iconTable.get(e.value);
      utils.JS.isEmpty(s) ||
        (DOMKit.addClass(i, 'with-icon'),
        (i.style.backgroundImage = "url('" + s + "')"));
    }
    return i;
  }),
  (UTSearchFilterControl.prototype.setOptions = function setOptions(e) {
    this.superclass(e),
      this.removeClass('has-selection'),
      0 === this.getIndex() &&
        this._hasDefault &&
        (this.__label.textContent = this._defaultLabel);
  }),
  (UTSearchFilterControl.prototype.getImage = function getImage() {
    return this.__filterImage.getAttribute('src');
  }),
  (UTSearchFilterControl.prototype.setImage = function setImage(e) {
    var t = utils.JS.isEmpty(e);
    this.toggleClass('has-image', !t),
      t || this.__filterImage.setAttribute('src', e);
  }),
  (UTSearchFilterControl.prototype.setDefaultLabel = function setDefaultLabel(
    e
  ) {
    (this._defaultLabel = e),
      0 === this.getIndex() &&
        this._hasDefault &&
        (this.__label.textContent = this._defaultLabel);
  }),
  (UTSearchFilterControl.prototype.setIndex = function setIndex(e) {
    this.superclass(e),
      this.toggleClass(
        'has-selection',
        0 !== this.getIndex() || !this._hasDefault
      );
  }),
  (UTSearchFilterControl.prototype.setHasDefault = function setHasDefault(e) {
    (this._hasDefault = e), this.toggleClass('has-default', e);
  }),
  (UTSearchFilterControl.prototype.setIconTable = function setIconTable(e) {
    this._iconTable = e;
  }),
  (UTSearchFilterControl.prototype._handleChange = function _handleChange(e) {
    this.superclass(e),
      0 === this.getIndex() &&
        this._hasDefault &&
        (this.__label.textContent = this._defaultLabel);
  }),
  (UTSearchFilterControl.prototype._onClear = function _onClear(e) {
    if (this.enabled) {
      var t = this.getDropDownElement().parentNode;
      isPhone() &&
        utils.JS.isValid(t) &&
        (t.removeChild(this.getDropDownElement()),
        setTimeout(
          function() {
            this.__animatedContainer.appendChild(this.getDropDownElement());
          }.bind(this),
          500
        )),
        this.setIndex(this.getDefaultIndex());
    }
  }),
  utils.JS.inherits(UTImageButtonControl, UTButtonControl),
  (UTImageButtonControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      e.classList.add('ut-image-button-control'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTImageButtonControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTImageButtonControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTImageButtonControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  utils.JS.inherits(UTItemInfoStateViewModel, UTObject),
  (UTItemInfoStateViewModel.prototype.setState = function setState(e) {
    this._configDelegate &&
      (this._configDelegate.setSessionItem('UTItemInfoState', e),
      getDefaultDispatcher().notify(
        enums.Notification.UI_ITEM_STATE_CHANGE,
        this,
        {
          state: e
        }
      )),
      (this._state = e);
  }),
  (UTItemInfoStateViewModel.prototype.getState = function getState() {
    return (
      (this._configDelegate &&
        parseInt(this._configDelegate.getSessionItem('UTItemInfoState'), 10)) ||
      this._state
    );
  }),
  (UTItemInfoStateViewModel.prototype.nextState = function nextState() {
    switch (this.getState()) {
      case enums.UIItemInfoState.MAIN:
        this.setState(enums.UIItemInfoState.BIO);
        break;
      case enums.UIItemInfoState.BIO:
        this.setState(enums.UIItemInfoState.STATS);
        break;
      case enums.UIItemInfoState.STATS:
        this.setState(enums.UIItemInfoState.STYLE);
        break;
      case enums.UIItemInfoState.STYLE:
      default:
        this.setState(enums.UIItemInfoState.MAIN);
    }
    return this._state;
  }),
  utils.JS.inherits(UTItemCanvasDTO, UTObject),
  (components.ItemFUTBase = function ItemFUTBaseView() {
    UTView.call(this),
      (this._renderConcept = !0),
      Object.defineProperty(this, '_renderConcept', {
        writable: !0,
        enumerable: !1
      }),
      (this._rendered = !1),
      Object.defineProperty(this, '_rendered', {
        writable: !0,
        enumerable: !1
      }),
      (this._canShowSecondaryViews = !0),
      Object.defineProperty(this, '_canShowSecondaryViews', {
        writable: !0,
        enumerable: !1
      }),
      (this._infoStateViewModel = new UTItemInfoStateViewModel(
        gUserSettingsModel
      )),
      Object.defineProperty(this, '_infoStateViewModel', {
        writable: !1,
        enumerable: !1
      }),
      (this.assets = {}),
      (this._assetsLoaded = {});
  }),
  utils.JS.inherits(components.ItemFUTBase, UTView),
  (components.ItemFUTBase.CLASS = {
    ACTIVE_CLUB_ITEM: 'activeItem',
    CONTRACT_EXPIRED: 'restricted-contract',
    INJURED: 'restricted-injured',
    SUSPENDED: 'restricted-suspended',
    DYNAMIC_PORTRAIT: 'dynamic-portrait',
    CONCEPT: 'concept',
    EMPTY: 'empty',
    LOAN: 'loan',
    CHEM_BONUS: 'hasBonus',
    INVALID_STAT: 'invalidStat',
    PLAYSTYLE: 'playStyle',
    PLAYEROUT: 'playerOut',
    AUCTION_WINNING: 'winning',
    AUCTION_WON: 'won',
    AUCTION_EXPIRED: 'expired',
    AUCTION_OUTBID: 'outbid',
    LOADING: 'ut-item-loading',
    LOADED: 'ut-item-loaded',
    CHAMPIONS: 'champions'
  }),
  (components.ItemFUTBase.QUALITY = {
    BRONZE: 'bronze',
    SILVER: 'silver',
    GOLD: 'gold'
  }),
  (components.ItemFUTBase.STATUS_OVERLAY_TYPE = ['common', 'rare', 'specials']),
  (components.ItemFUTBase.prototype.init = function init() {
    this.superclass(),
      getDefaultDispatcher().addObserver(
        enums.Notification.UI_ITEM_STATE_CHANGE,
        this,
        this._nInfoStateChanged
      );
  }),
  (components.ItemFUTBase.prototype.dealloc = function dealloc() {
    getDefaultDispatcher().removeObserver(
      enums.Notification.UI_ITEM_STATE_CHANGE,
      this
    ),
      this.superclass();
  }),
  (components.ItemFUTBase.prototype.renderConcept = function renderConcept(e) {
    this._renderConcept = e;
  }),
  (components.ItemFUTBase.prototype.showSecondaryViews = function showSecondaryViews(
    e
  ) {
    this._canShowSecondaryViews = !!e;
  }),
  (components.ItemFUTBase.onFlagImageLoad = function onFlagImageLoad(
    e,
    t,
    i,
    s
  ) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.FLAG + '.png')
        );
  }),
  (components.ItemFUTBase.prototype.setItemInfoState = function setItemInfoState(
    e
  ) {}),
  (components.ItemFUTBase.prototype.render = function render(e) {
    var t = services.Configuration.getItemRarity(e, e.getYear());
    this._rendered && this._resetRender(),
      this._canvas &&
        (this._canvas.clearCanvas(),
        this.removeClass(components.ItemFUTBase.CLASS.LOADED),
        this.addClass(components.ItemFUTBase.CLASS.LOADING)),
      (this.assets = {}),
      (this._assetsLoaded = {}),
      this._renderShell(e, t),
      this._render(e, t),
      this.renderAuctionState(e.getAuctionData()),
      (this._rendered = !0);
    var i =
      this._infoStateViewModel && this._canShowSecondaryViews
        ? this._infoStateViewModel.getState()
        : enums.UIItemInfoState.MAIN;
    this.setItemInfoState(i);
  }),
  (components.ItemFUTBase.prototype._renderComplete = function _renderComplete() {
    this.removeClass(components.ItemFUTBase.CLASS.LOADING),
      this.addClass(components.ItemFUTBase.CLASS.LOADED);
  }),
  (components.ItemFUTBase.prototype._resetRender = function _resetRender() {}),
  (components.ItemFUTBase.prototype.canRender = function canRender(e) {
    return (
      utils.Debug.Assert(
        !1,
        '[components.ItemFUTBase] Abstract method canRender not implemented.'
      ),
      !1
    );
  }),
  (components.ItemFUTBase.prototype._render = function _render(e, t) {
    utils.Debug.Assert(
      !1,
      '[components.ItemFUTBase] Abstract method _render not implemented.'
    );
  }),
  (components.ItemFUTBase.prototype._renderShell = function _renderShell(e, t) {
    this._rendered &&
      this.removeClass(
        components.ItemFUTBase.CLASS.CONCEPT +
          ' ' +
          components.ItemFUTBase.CLASS.EMPTY
      ),
      e.isValid()
        ? this._renderConcept && e.concept
          ? this.addClass(components.ItemFUTBase.CLASS.CONCEPT)
          : (this.toggleClass(
              components.ItemFUTBase.CLASS.ACTIVE_CLUB_ITEM,
              e.isActiveClubItem()
            ),
            this.removeClass(
              components.ItemFUTBase.STATUS_OVERLAY_TYPE.join(' ')
            ),
            this.addClass(components.ItemFUTBase.STATUS_OVERLAY_TYPE[t.shell]))
        : this.addClass(components.ItemFUTBase.CLASS.EMPTY);
  }),
  (components.ItemFUTBase.prototype._setShell = function _setShell(e, t, i) {
    var s,
      n = this.getRootElement(),
      o = e.isPlayer() || e.isManager(),
      a = e.isStaff() && !o,
      r = utils.JS.isString(i) ? i : '';
    s = a ? 2 : o ? 1 : 0;
    var l = e.hasQualityTiers() ? e.getTier() : enums.ItemRatingTier.NONE,
      c = utils.AssetLocator.getShellURL(t, s, e.rareflag, l, r);
    o
      ? ((this.assets[enums.ItemAssetType.SHELL] = this._getAssetDimensions(
          enums.ItemAssetType.SHELL,
          !1
        )),
        this._loadAsset(c, enums.ItemAssetType.SHELL, e))
      : (n.style.backgroundImage = 'url(' + c + ')');
  }),
  (components.ItemFUTBase.prototype._setLocalShell = function _setLocalShell(
    e,
    t
  ) {
    var i = this.getRootElement(),
      s = e.concept && this._renderConcept,
      n = s && e.rareflag > entities.Item.Rarity.RARE ? 2 : e.rareflag,
      o = e.hasQualityTiers() ? e.getTier() : enums.ItemRatingTier.NONE,
      a = utils.AssetLocator.getLocalShellURL(s, n, o, t);
    this._canvas
      ? ((this.assets[enums.ItemAssetType.SHELL] = this._getAssetDimensions(
          enums.ItemAssetType.SHELL,
          !1
        )),
        this._loadAsset(a, enums.ItemAssetType.SHELL, e))
      : (i.style.backgroundImage = 'url(' + a + ')');
  }),
  (components.ItemFUTBase.prototype.renderAuctionState = function renderAuctionState(
    e
  ) {
    if (this._rendered) {
      var t = [
        components.ItemFUTBase.CLASS.AUCTION_WON,
        components.ItemFUTBase.CLASS.AUCTION_WINNING,
        components.ItemFUTBase.CLASS.AUCTION_EXPIRED,
        components.ItemFUTBase.CLASS.AUCTION_OUTBID
      ].join(' ');
      this.removeClass(t);
    }
    e.isValid() &&
      (e.isWon()
        ? this.addClass(components.ItemFUTBase.CLASS.AUCTION_WON)
        : e.isHighestBid() || e.isBought() || e.isSold()
        ? this.addClass(components.ItemFUTBase.CLASS.AUCTION_WINNING)
        : e.isActiveTrade() && e.isOutbid()
        ? this.addClass(components.ItemFUTBase.CLASS.AUCTION_OUTBID)
        : (e.isClosedTrade() || e.isExpired()) &&
          this.addClass(components.ItemFUTBase.CLASS.AUCTION_EXPIRED));
  }),
  (components.ItemFUTBase.prototype.renderChemistry = function renderChemistry(
    e,
    t,
    i
  ) {}),
  (components.ItemFUTBase.prototype._applyColors = function _applyColors(e, t) {
    var i = this.getRootElement();
    DOMKit.findElements(i, e).forEach(function(e) {
      e.style.color = 'rgba(' + t.r + ', ' + t.g + ', ' + t.b + ', 1)';
    });
  }),
  (components.ItemFUTBase.prototype._getAssetDimensions = function _getAssetDimensions(
    e,
    t
  ) {}),
  (components.ItemFUTBase.prototype._requestResource = function _requestResource(
    e,
    t,
    i,
    s
  ) {
    var n =
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_RESOURCE_ROOT
        ) + e,
      o = s || this._onLoadAssetError;
    this._loadAsset(n, t, i, o);
  }),
  (components.ItemFUTBase.prototype._loadAsset = function _loadAsset(
    e,
    t,
    i,
    s
  ) {
    var n, o, a;
    if (this.assets[t]) {
      var r = new Image();
      if (!this.assets[t]) return;
      (n = function _onLoadError() {
        r.removeEventListener('load', o, !1),
          r.removeEventListener('error', a, !1),
          s ? s.apply(this, [t, i]) : this._onLoadAssetError(t, i);
      }),
        (o = function _onLoadSuccess() {
          r.removeEventListener('load', o, !1),
            r.removeEventListener('error', a, !1),
            this._onLoadAssetSuccess(t, r);
        }.bind(this)),
        (a = n.bind(this)),
        e &&
          ((r.src = e),
          r.addEventListener('load', o, !1),
          r.addEventListener('error', a, !1));
    }
  }),
  (components.ItemFUTBase.prototype._onLoadAssetSuccess = function _onLoadAssetSuccess(
    e,
    t
  ) {
    this._canvas &&
      ((this.assets[e].element = t),
      (this._assetsLoaded[e] = !0),
      this._onLoadComplete());
  }),
  (components.ItemFUTBase.prototype._onLoadAssetError = function _onLoadAssetError(
    e,
    t
  ) {
    this._canvas &&
      ((this.assets[e].element = null),
      (this._assetsLoaded[e] = !1),
      this._onLoadComplete());
  }),
  (components.ItemFUTBase.prototype._onLoadComplete = function _onLoadComplete() {
    if (
      Object.keys(this._assetsLoaded).length >= Object.keys(this.assets).length
    ) {
      var e =
        this._infoStateViewModel && this._canShowSecondaryViews
          ? this._infoStateViewModel.getState()
          : enums.UIItemInfoState.MAIN;
      this._canvas.setAssets(this.assets),
        this._canvas.setState(e),
        this._renderComplete();
    }
  }),
  (components.ItemFUTBase.prototype._nInfoStateChanged = function _nInfoStateChanged(
    e,
    t,
    i
  ) {
    this.setItemInfoState(i.state);
  }),
  (components.ItemPlayerBase = function ItemPlayerBaseView() {
    components.ItemFUTBase.call(this);
  }),
  utils.JS.inherits(components.ItemPlayerBase, components.ItemFUTBase),
  (components.ItemPlayerBase.onImageLoad = function onImageLoad(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.PLAYER + '.png')
        );
  }),
  (components.ItemPlayerBase.prototype.renderChemistry = function renderChemistry(
    e,
    t,
    i
  ) {
    var o = repositories.PlayStyle.getPlayStyleBonusById(
        e.playStyle,
        e.isGK()
      ).slice(0, 6),
      a = Math.max(t - 4, 0),
      s = [2, 3, 4, 5, 0, 1],
      r = s.filter(function(e) {
        return 0 < o[e];
      });
    s.forEach(function _applyChevronChemistry(e) {
      var t = this['_chevronSet' + (e + 1)];
      if (t) {
        var i = o[e],
          s = a - r.indexOf(e),
          n = 0;
        if (0 < i && 0 < s) for (; n < i && 0 < s; ) (s -= r.length), n++;
        t.setChemistryBoost(n);
      }
    }, this);
  }),
  (components.ItemPlayerBase.prototype._render = function _render(e, t) {
    if (e.isValid()) {
      var i,
        s = e.getYear(),
        n = t.getExpColorMap(e.getTier()),
        o =
          e.isContractExpired() &&
          !e.getAuctionData().isSold() &&
          !e.isLoaned();
      if (
        (e.concept ||
          (e.isInjured()
            ? this.addClass(components.ItemFUTBase.CLASS.INJURED)
            : o
            ? this.addClass(components.ItemFUTBase.CLASS.CONTRACT_EXPIRED)
            : e.isSuspended() &&
              this.addClass(components.ItemFUTBase.CLASS.SUSPENDED)),
        e.hasTraining())
      )
        (i =
          e.getBoostLevel() === enums.ItemRatingTier.GOLD
            ? components.ItemFUTBase.QUALITY.GOLD
            : e.getBoostLevel() === enums.ItemRatingTier.SILVER
            ? components.ItemFUTBase.QUALITY.SILVER
            : components.ItemFUTBase.QUALITY.BRONZE),
          DOMKit.addClass(this.__trainingBoost, i);
      this.toggleClass(
        components.ItemFUTBase.CLASS.CHAMPIONS,
        e.isChampionsLeagueItem() && !services.Localization.isRTL()
      ),
        this.toggleClass(components.ItemFUTBase.CLASS.LOAN, e.isLoaned()),
        e.isLoaned() &&
          this.__loanInfoTab &&
          (this.__loanInfoTab.textContent = e.contract.toString()),
        (this.__playerRating.innerHTML = e.rating.toString());
      var a = utils.FUTLocalization.getLocalizedPositionStringById(
        e.preferredPosition
      );
      if (
        ((this.__playerPosition.innerHTML = a),
        this._setPortrait(e),
        this._setFlag(e),
        this._setBadge(e, n.useLightCrest),
        this._setLeague(e, n.useLightCrest),
        this.__bioNation &&
          (this.__bioNation.textContent = utils.FUTLocalization.getNationAbb3ById(
            e.nationId
          )),
        this.__bioClub &&
          (this.__bioClub.textContent = utils.FUTLocalization.getTeamAbb3ByID(
            e.teamId,
            s
          )),
        this.__bioLeague &&
          (this.__bioLeague.textContent = utils.FUTLocalization.getLeagueAbbr5ByID(
            e.leagueId,
            s
          )),
        this.__playerManagerBonus &&
          (this.__playerManagerBonus.textContent = 'M'),
        this.__playerLoyaltyIcon)
      ) {
        var r = 0 < e.loyaltyBonus && !e.getAuctionData().isValid();
        DOMKit.toggleClass(
          this.__playerLoyaltyIcon,
          components.ItemFUTBase.CLASS.CHEM_BONUS,
          r
        );
      }
      this._setSkillMoves(e.getSkillMoves()),
        this._setWeakFoot(e.isLeftFoot(), e.getWeakFoot());
    }
  }),
  (components.ItemPlayerBase.prototype.canRender = function canRender(e) {
    return utils.JS.isValid(e) && e.isPlayer() && !e.isCustomBrick();
  }),
  (components.ItemPlayerBase.prototype._resetRender = function _resetRender() {
    DOMKit.removeClass(
      this.__trainingBoost,
      [
        components.ItemFUTBase.QUALITY.GOLD,
        components.ItemFUTBase.QUALITY.SILVER,
        components.ItemFUTBase.QUALITY.BRONZE
      ].join(' ')
    ),
      this.removeClass(
        [
          components.ItemFUTBase.CLASS.CONTRACT_EXPIRED,
          components.ItemFUTBase.CLASS.SUSPENDED,
          components.ItemFUTBase.CLASS.INJURED
        ].join(' ')
      ),
      this.removeClass(components.ItemFUTBase.CLASS.LOAN),
      this.removeClass(components.ItemFUTBase.CLASS.CHAMPIONS),
      this.__loanInfoTab && (this.__loanInfoTab.textContent = ''),
      this._mainImage &&
        this._mainImage.removeClass(
          components.ItemFUTBase.CLASS.DYNAMIC_PORTRAIT
        ),
      this.getRootElement().removeAttribute('style'),
      (this.assets = {}),
      this._canvas && this._canvas.clearCanvas();
  }),
  (components.ItemPlayerBase.prototype._createConceptRarity = function _createConceptRarity() {
    return new UTItemRarityDTO({
      colors: ['d2e2f6', 'a8b7c9', '4b5e78', '7a899d'],
      lgColorIndices: [1, 1, 1, 1, 2, 2, 3, 4, 4],
      smColorIndices: [1, 1, 1, 1, 2, 2, 3, 4, 4],
      colorsPerLevel: 4
    });
  }),
  (components.ItemPlayerBase.prototype._applyChevrons = function _applyChevrons(
    e
  ) {
    utils.Debug.Assert(
      6 === e.length,
      'Expected 6 entries in chevronList array.'
    ),
      e.slice(0, 6).forEach(function applyChevrons(e, t) {
        var i = this['_chevronSet' + (t + 1)];
        i && i.setChevronCount(e);
      }, this);
  }),
  (components.ItemPlayerBase.prototype._onLoadDynamicPortraitError = function _onLoadDynamicPortraitError(
    e,
    t
  ) {
    e === enums.ItemAssetType.MAIN &&
      ((this.assets[enums.ItemAssetType.MAIN] = this._getAssetDimensions(
        enums.ItemAssetType.MAIN,
        !1
      )),
      this._requestResource(
        utils.AssetLocator.getImage(
          utils.AssetLocator.IMAGE_TYPE_PORTRAIT,
          t.getYear(),
          this._getItemAssetId(t.getMaskedResourceId(), t.getYear())
        ),
        enums.ItemAssetType.MAIN,
        t
      ));
  }),
  (components.ItemPlayerBase.prototype._onLoadAssetError = function _onLoadAssetError(
    e,
    t
  ) {
    var i;
    if (e === enums.ItemAssetType.MAIN)
      return (
        (i = t.isBronzeRating()
          ? enums.PlaceholderAssetId.PLAYER_BRONZE
          : t.isSilverRating()
          ? enums.PlaceholderAssetId.PLAYER_SILVER
          : enums.PlaceholderAssetId.PLAYER_GOLD),
        void this._requestResource(
          utils.AssetLocator.getImage(
            utils.AssetLocator.IMAGE_TYPE_PORTRAIT,
            t.getYear(),
            this._getItemAssetId(i, t.getYear())
          ),
          enums.ItemAssetType.MAIN,
          t
        )
      );
    (this._assetsLoaded[e] = !1), this._onLoadComplete();
  }),
  (components.ItemPlayerBase.prototype._getItemAssetId = function _getItemAssetId(
    e,
    t
  ) {
    return (
      entities.Item.isAlex(e)
        ? (e = ALEX_HUNTER_PLACEHOLDER_ASSET_ID)
        : entities.Item.isJim(e)
        ? (e = JIM_HUNTER_PLACEHOLDER_ASSET_ID)
        : entities.Item.isDanny(e)
        ? (e = DANNY_WILLIAMS_PLACEHOLDER_ASSET_ID)
        : utils.AssetLocator.hasPlaceholder(
            enums.PlaceholderAssetKey.PLAYERS,
            e,
            t
          ) && (e = enums.PlaceholderAssetId.PLAYER),
      e
    );
  }),
  (components.ItemPlayerBase.prototype._setPortrait = function _setPortrait(e) {
    if (this._canvas) {
      var t =
          e.isSpecial() &&
          !e.isLegend() &&
          !entities.Item.isStoryMode(e.getMaskedResourceId()),
        i = this._getItemAssetId(e.getMaskedResourceId(), e.getYear()),
        s = t
          ? utils.AssetLocator.getImage(
              utils.AssetLocator.IMAGE_TYPE_DYNAMIC_PORTRAIT,
              e.getYear(),
              e.getDefId()
            )
          : utils.AssetLocator.getImage(
              utils.AssetLocator.IMAGE_TYPE_PORTRAIT,
              e.getYear(),
              i
            ),
        n = t ? this._onLoadDynamicPortraitError : this._onLoadAssetError;
      (this.assets[enums.ItemAssetType.MAIN] = this._getAssetDimensions(
        enums.ItemAssetType.MAIN,
        t
      )),
        this._requestResource(s, enums.ItemAssetType.MAIN, e, n);
    } else
      this._mainImage
        ? this._setImageElementPortrait(e)
        : utils.Debug.Assert(
            !1,
            'MissingElement: Canvas or Image Element Missing to render asset id:' +
              e.assetId
          );
  }),
  (components.ItemPlayerBase.prototype._setImageElementPortrait = function _setImageElementPortrait(
    e
  ) {
    var t = this._getItemAssetId(e.getMaskedResourceId(), e.getYear()),
      n = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_PORTRAIT,
        e.getYear(),
        t
      );
    if (e.isSpecial()) {
      var i = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_DYNAMIC_PORTRAIT,
        e.getYear(),
        e.getDefId()
      );
      this._mainImage
        .setResource(i, !0)
        .observe(this, function onDynamicPortraitLoad(e, t, i, s) {
          e.unobserve(this),
            t
              ? this._mainImage.addClass(
                  components.ItemFUTBase.CLASS.DYNAMIC_PORTRAIT
                )
              : this._mainImage
                  .setResource(n, !0)
                  .observe(
                    this._mainImage,
                    components.ItemPlayerBase.onImageLoad
                  );
        });
    } else
      this._mainImage
        .setResource(n, !0)
        .observe(this._mainImage, components.ItemPlayerBase.onImageLoad);
  }),
  (components.ItemPlayerBase.prototype._setFlag = function _setFlag(e) {
    var t = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_FLAG,
      e.getYear(),
      e.nationId
    );
    this._canvas
      ? ((this.assets[enums.ItemAssetType.FLAG] = this._getAssetDimensions(
          enums.ItemAssetType.FLAG,
          !1
        )),
        this._requestResource(t, enums.ItemAssetType.FLAG, e),
        this._bioFlagImage.setResource(t))
      : this._flagImage.setResource(t);
  }),
  (components.ItemPlayerBase.prototype._setBadge = function _setBadge(e, t) {
    var i = t
        ? utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT
        : utils.AssetLocator.IMAGE_TYPE_BADGE_DARK,
      s = e.teamId,
      n = e.getYear();
    (utils.AssetLocator.hasPlaceholder(
      enums.PlaceholderAssetKey.CREST,
      s.toString(),
      n,
      enums.PlaceholderAssetKey.CREST_LIGHT
    ) ||
      utils.AssetLocator.hasPlaceholder(
        enums.PlaceholderAssetKey.CREST,
        s.toString(),
        n,
        enums.PlaceholderAssetKey.CREST_DARK
      )) &&
      (s = enums.PlaceholderAssetId.TEAM);
    var o = utils.AssetLocator.getImage(i, n, s);
    this._canvas
      ? ((this.assets[enums.ItemAssetType.BADGE] = this._getAssetDimensions(
          enums.ItemAssetType.BADGE,
          !1
        )),
        this._requestResource(o, enums.ItemAssetType.BADGE, e),
        this._bioBadgeImage.setResource(o))
      : this._badgeImage.setResource(o);
  }),
  (components.ItemPlayerBase.prototype._setLeague = function _setLeague(e, t) {
    if (this._canvas) {
      var i = t
        ? utils.AssetLocator.IMAGE_TYPE_LEAGUE_LIGHT
        : utils.AssetLocator.IMAGE_TYPE_LEAGUE_DARK;
      this._bioLeagueImage.setResource(
        utils.AssetLocator.getImage(i, e.getYear(), e.leagueId)
      );
    }
  }),
  (components.ItemPlayerBase.prototype._setSkillMoves = function _setSkillMoves(
    e
  ) {}),
  (components.ItemPlayerBase.prototype._setWeakFoot = function _setWeakFoot(
    e,
    t
  ) {}),
  utils.JS.inherits(UTItemStatChevronsView, UTView),
  (UTItemStatChevronsView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('chevrons');
      var t = document.createElement('div');
      t.classList.add('chevron1'), t.classList.add('chevron'), e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('chevron2'), i.classList.add('chevron'), e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('chevron3'),
        s.classList.add('chevron'),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTItemStatChevronsView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTItemStatChevronsView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTItemStatChevronsView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTItemStatChevronsView.prototype.setChevronCount = function setChevronCount(
    i
  ) {
    DOMKit.HTMLCollectionToArray(this.getRootElement().children)
      .reverse()
      .forEach(function(e, t) {
        e.style.display = i < t + 1 ? 'none' : '';
      });
  }),
  (UTItemStatChevronsView.prototype.setChemistryBoost = function setChemistryBoost(
    i
  ) {
    DOMKit.HTMLCollectionToArray(this.getRootElement().children)
      .reverse()
      .forEach(function(e, t) {
        DOMKit.toggleClass(e, 'chemBoost', t < i);
      });
  }),
  utils.JS.inherits(UTItemCanvasView, UTView),
  (UTItemCanvasView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('canvas');
      (this.__root = e), (this._generated = !0);
    }
  }),
  (UTItemCanvasView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTItemCanvasView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTItemCanvasView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTItemCanvasView.prototype.init = function init() {
    this.superclass();
    var e = this.getRootElement();
    (this._ctx = e.getContext('2d')),
      (e.style.width = '100%'),
      (e.style.height = '100%'),
      (this._ctx.globalCompositeOperation = 'source-over');
  }),
  (UTItemCanvasView.prototype.dealloc = function dealloc() {
    (this._ctx = null),
      (this._colormap = null),
      (this.assets = {}),
      (this.rendered = !1),
      this.superclass();
  }),
  (UTItemCanvasView.prototype.setSize = function setSize(e) {
    var t = this.getRootElement(),
      i =
        1 === window.devicePixelRatio
          ? 1.5 * window.devicePixelRatio
          : window.devicePixelRatio;
    (this.size = e) === enums.ItemViewType.LARGE
      ? ((t.width = 152 * i),
        (t.height = 212 * i),
        (t.style.width = '152px'),
        (t.style.height = '212px'))
      : e === enums.ItemViewType.SMALL &&
        ((t.width = 97 * i),
        (t.height = 114 * i),
        (t.style.width = '100%'),
        (t.style.height = '100%')),
      this._ctx.scale(i, i);
  }),
  (UTItemCanvasView.prototype.setColorMap = function setColorMap(e) {
    this._colormap = e;
  }),
  (UTItemCanvasView.prototype.setAssets = function setAssets(e) {
    this.assets = e;
  }),
  (UTItemCanvasView.prototype.setState = function setState(e) {}),
  (UTItemCanvasView.prototype.clearCanvas = function clearCanvas() {
    var e = this.getRootElement();
    this._ctx &&
      ((this._ctx.globalCompositeOperation = 'source-over'),
      this._ctx.clearRect(0, 0, e.width, e.height)),
      (this.rendered = !1);
  }),
  (UTItemCanvasView.prototype.getWidth = function getWidth() {
    var e =
      1 === window.devicePixelRatio
        ? 1.5 * window.devicePixelRatio
        : window.devicePixelRatio;
    return this.getRootElement().width / e;
  }),
  (UTItemCanvasView.prototype.getHeight = function getHeight() {
    var e =
      1 === window.devicePixelRatio
        ? 1.5 * window.devicePixelRatio
        : window.devicePixelRatio;
    return this.getRootElement().height / e;
  }),
  (UTItemCanvasView.prototype._drawAsset = function _drawAsset(e) {
    var t = this.assets[e];
    if (t && t.element && t.element.complete) {
      var i = t.element.width || t.width,
        s = t.element.height || t.height;
      this._ctx.drawImage(
        t.element,
        0,
        0,
        i,
        s,
        t.xPos,
        t.yPos,
        t.width,
        t.height
      );
    }
  }),
  (UTItemCanvasView.prototype._drawBgColor = function _drawBgColor() {
    var e = this.getRootElement(),
      t = this._colormap.background,
      i = 'rgba(' + t.r + ', ' + t.g + ', ' + t.b + ', 1)';
    (this._ctx.fillStyle = '#000000'),
      (this._ctx.globalAlpha = 0),
      this._drawAsset(enums.ItemAssetType.SHELL),
      (this._ctx.globalCompositeOperation = 'source-atop'),
      (this._ctx.globalAlpha = 1),
      (this._ctx.fillStyle = i),
      this._ctx.fillRect(0, 0, e.width, e.height),
      (this._ctx.globalCompositeOperation = 'source-over');
  }),
  (UTItemCanvasView.prototype._drawDivider = function _drawDivider(e, t, i, s) {
    utils.Debug.Assert(
      utils.JS.isValid(this._colormap),
      'Render Warning: color map is not defined when attempting to draw dividers.'
    );
    var n = this._colormap.dividers,
      o = 'rgba(' + n.r + ', ' + n.g + ', ' + n.b + ', 1)';
    this._ctx.beginPath(),
      this._ctx.moveTo(e, t),
      this._ctx.lineTo(i, s),
      (this._ctx.strokeStyle = o),
      this._ctx.stroke();
  }),
  (UTItemCanvasView.prototype._maskItem = function _maskItem() {
    (this._ctx.globalAlpha = 0),
      this._drawAsset(enums.ItemAssetType.SHELL),
      (this._ctx.globalCompositeOperation = 'source-atop'),
      (this._ctx.globalAlpha = 1);
  }),
  (UTItemCanvasView.prototype._resetMask = function _maskItem() {
    this._ctx.globalCompositeOperation = 'source-over';
  }),
  utils.JS.inherits(UTItemPlayerCanvasView, UTItemCanvasView),
  (UTItemPlayerCanvasView.prototype.setState = function setState(e) {
    switch ((this.clearCanvas(), e)) {
      case enums.UIItemInfoState.STYLE:
        this._renderStyleView();
        break;
      case enums.UIItemInfoState.BIO:
        this._renderBioView();
        break;
      case enums.UIItemInfoState.STATS:
        this._renderStatsView();
        break;
      case enums.UIItemInfoState.MAIN:
        this._renderMainView();
    }
    this.rendered = !0;
  }),
  (UTItemPlayerCanvasView.prototype._renderAsDynamic = function _renderAsDynamic() {
    var e = this.assets[enums.ItemAssetType.MAIN];
    return (
      !!(e && e.element && e.element.complete) &&
      (this.renderSpecial &&
        !this.renderConcept &&
        this.assets[enums.ItemAssetType.MAIN].dynamic)
    );
  }),
  (UTItemPlayerCanvasView.prototype._renderMainView = function _renderMainView() {
    if (
      (this._drawAsset(enums.ItemAssetType.SHELL),
      this._maskItem(),
      this._drawAsset(enums.ItemAssetType.MAIN),
      this._resetMask(),
      this._renderAsDynamic() && (this._drawArc(), this._drawTransparentBar()),
      this._drawAsset(enums.ItemAssetType.BADGE),
      this._drawAsset(enums.ItemAssetType.FLAG),
      this.size === enums.ItemViewType.LARGE)
    ) {
      var e = this.getWidth();
      this._drawDivider(34, 131.5, 117, 131.5),
        this._drawDivider((e - 1) / 2, 135, (e - 1) / 2, 171),
        this._drawDivider(68, 174, 84, 174),
        this._drawDivider(36, 66.5, 51, 66.5),
        this._drawDivider(36, 85.5, 51, 85.5);
    }
  }),
  (UTItemPlayerCanvasView.prototype._renderStyleView = function _renderStyleView() {
    if (
      (this._drawAsset(enums.ItemAssetType.SHELL),
      this._drawBgColor(),
      this.size === enums.ItemViewType.SMALL)
    )
      this._smallViewAlternateViewLines();
    else {
      var e = this.getWidth(),
        t = (e - 1) / 2,
        i = 36,
        s = e - 36;
      this._drawDivider(i, 110.5, s, 110.5),
        this._drawDivider(i, 130.5, s, 130.5),
        this._drawDivider(t, 132.5, t, 172.5),
        this.renderConcept ||
          ((i = t - 10.5),
          (s = t + 10.5),
          this._drawDivider(i, 175.5, s, 175.5));
    }
  }),
  (UTItemPlayerCanvasView.prototype._renderBioView = function _renderBioView() {
    if (
      (this._drawAsset(enums.ItemAssetType.SHELL),
      this._drawBgColor(),
      this.size === enums.ItemViewType.SMALL)
    )
      this._smallViewAlternateViewLines();
    else {
      var e = this.getWidth(),
        t = (e - 1) / 2,
        i = e - 26;
      this._drawDivider(26, 55.5, i, 55.5),
        this._drawDivider(26, 90.5, i, 90.5),
        this._drawDivider(26, 125.5, i, 125.5),
        this._drawDivider(26, 160.5, i, 160.5),
        this._drawDivider(t, 170.5, t, 182.5);
    }
  }),
  (UTItemPlayerCanvasView.prototype._renderStatsView = function _renderStatsView() {
    if (
      (this._drawAsset(enums.ItemAssetType.SHELL),
      this._drawBgColor(),
      this.size === enums.ItemViewType.SMALL)
    )
      this._smallViewAlternateViewLines();
    else {
      var e = this.getWidth(),
        t = (e - 1) / 2,
        i = 26,
        s = e - 26;
      this._drawDivider(i, 55.5, s, 55.5),
        this._drawDivider(i, 81.5, s, 81.5),
        this._drawDivider(i, 108.5, s, 108.5),
        this._drawDivider(i, 134.5, s, 134.5),
        this._drawDivider(i, 160.5, s, 160.5),
        this.renderConcept ||
          ((i = t - 10.5),
          (s = t + 10.5),
          this._drawDivider(i, 175.5, s, 175.5));
    }
  }),
  (UTItemPlayerCanvasView.prototype._drawArc = function _drawArc() {
    if (this.renderSpecial && this.size !== enums.ItemViewType.SMALL) {
      var e = this.getWidth(),
        t = this.getHeight();
      this._maskItem(),
        this._ctx.beginPath(),
        this._ctx.moveTo(0, t / 1.1),
        this._ctx.quadraticCurveTo(e / 1.1, t / 1.75, e - 29, 0),
        this._ctx.quadraticCurveTo(e, 0, e, 0),
        this._ctx.quadraticCurveTo(e, t, e, t + 20),
        (this._ctx.fillStyle = 'rgba(0, 0, 0, 0.10)'),
        this._ctx.fill(),
        this._resetMask();
    }
  }),
  (UTItemPlayerCanvasView.prototype._drawTransparentBar = function _drawTransparentBar() {
    if (this.renderSpecial) {
      var e, t;
      utils.Debug.Assert(
        utils.JS.isValid(this._colormap),
        'Render Warning: color map is not defined when attempting to draw transparent bar.'
      );
      var i = this.getHeight(),
        s = this._ctx.createLinearGradient(0, 0, 24, i),
        n = this._colormap.background,
        o = 'rgba(' + n.r + ', ' + n.g + ', ' + n.b + ', 0.675)',
        a = 'rgba(' + n.r + ', ' + n.g + ', ' + n.b + ', 0)';
      this._maskItem(),
        s.addColorStop(0, a),
        s.addColorStop(0.1, a),
        s.addColorStop(0.333, o),
        s.addColorStop(0.666, o),
        s.addColorStop(0.9, a),
        s.addColorStop(1, a),
        (t =
          this.size === enums.ItemViewType.LARGE
            ? ((e = 30), 27)
            : ((e = 13), 20)),
        this._ctx.beginPath(),
        (this._ctx.fillStyle = s),
        this._ctx.fillRect(e, 0, t, i),
        this._resetMask();
    }
  }),
  (UTItemPlayerCanvasView.prototype._smallViewAlternateViewLines = function _smallViewAlternateViewLines() {
    if (this.size !== enums.ItemViewType.LARGE) {
      var e = this.getWidth() - 17;
      this._drawDivider(17, 29.5, e, 29.5),
        this._drawDivider(17, 47.5, e, 47.5),
        this._drawDivider(17, 65.5, e, 65.5),
        this._drawDivider(17, 83.5, e, 83.5);
    }
  }),
  utils.JS.inherits(UTItemPlayerLargeView, components.ItemPlayerBase),
  (UTItemPlayerLargeView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'),
        e.classList.add('player'),
        e.classList.add('item'),
        (this._canvas = new UTItemPlayerCanvasView()),
        (this._canvas.width = '152'),
        (this._canvas.height = '212'),
        e.appendChild(this._canvas.getRootElement());
      var t = document.createElement('div');
      t.classList.add('ut-item-loader'), e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('statusOverlay'),
        e.appendChild(i),
        (this.__trainingBoost = document.createElement('div')),
        this.__trainingBoost.classList.add('ut-item-player-status--training'),
        this.__trainingBoost.classList.add('ut-item-player-status'),
        e.appendChild(this.__trainingBoost);
      var s = document.createElement('div');
      s.classList.add('ut-item-player-status--restricted'),
        s.classList.add('ut-item-player-status'),
        e.appendChild(s),
        (this.__playerName = document.createElement('div')),
        this.__playerName.classList.add('name'),
        e.appendChild(this.__playerName),
        (this.__playStyle = document.createElement('div')),
        this.__playStyle.classList.add('playStyle'),
        e.appendChild(this.__playStyle),
        (this.__mainViewDiv = document.createElement('div')),
        this.__mainViewDiv.classList.add('ut-item-view--main'),
        this.__mainViewDiv.classList.add('ut-item-view'),
        (this.__loanInfoTab = document.createElement('div')),
        this.__loanInfoTab.classList.add('ut-item-player-status--loan'),
        this.__mainViewDiv.appendChild(this.__loanInfoTab);
      var n = document.createElement('div');
      n.classList.add('playerOverview'),
        (this.__playerRating = document.createElement('div')),
        this.__playerRating.classList.add('rating'),
        n.appendChild(this.__playerRating),
        (this.__playerPosition = document.createElement('div')),
        this.__playerPosition.classList.add('position'),
        n.appendChild(this.__playerPosition),
        this.__mainViewDiv.appendChild(n);
      var o = document.createElement('div');
      o.classList.add('statCellRow');
      var a = document.createElement('div');
      a.classList.add('statCell');
      var r = document.createElement('span');
      r.classList.add('Pace'),
        r.classList.add('statValue'),
        a.appendChild(r),
        (this.__attribute0 = document.createElement('span')),
        this.__attribute0.classList.add('Pace'),
        this.__attribute0.classList.add('statLabel'),
        a.appendChild(this.__attribute0),
        o.appendChild(a);
      var l = document.createElement('div');
      l.classList.add('statCell');
      var c = document.createElement('span');
      c.classList.add('Dribbling'),
        c.classList.add('statValue'),
        l.appendChild(c),
        (this.__attribute3 = document.createElement('span')),
        this.__attribute3.classList.add('Dribbling'),
        this.__attribute3.classList.add('statLabel'),
        l.appendChild(this.__attribute3),
        o.appendChild(l),
        this.__mainViewDiv.appendChild(o);
      var u = document.createElement('div');
      u.classList.add('statCellRow');
      var d = document.createElement('div');
      d.classList.add('statCell');
      var h = document.createElement('span');
      h.classList.add('Shooting'),
        h.classList.add('statValue'),
        d.appendChild(h),
        (this.__attribute1 = document.createElement('span')),
        this.__attribute1.classList.add('Shooting'),
        this.__attribute1.classList.add('statLabel'),
        d.appendChild(this.__attribute1),
        u.appendChild(d);
      var p = document.createElement('div');
      p.classList.add('statCell');
      var _ = document.createElement('span');
      _.classList.add('Defending'),
        _.classList.add('statValue'),
        p.appendChild(_),
        (this.__attribute4 = document.createElement('span')),
        this.__attribute4.classList.add('Defending'),
        this.__attribute4.classList.add('statLabel'),
        p.appendChild(this.__attribute4),
        u.appendChild(p),
        this.__mainViewDiv.appendChild(u);
      var m = document.createElement('div');
      m.classList.add('statCellRow');
      var g = document.createElement('div');
      g.classList.add('statCell');
      var T = document.createElement('span');
      T.classList.add('Passing'),
        T.classList.add('statValue'),
        g.appendChild(T),
        (this.__attribute2 = document.createElement('span')),
        this.__attribute2.classList.add('Passing'),
        this.__attribute2.classList.add('statLabel'),
        g.appendChild(this.__attribute2),
        m.appendChild(g);
      var S = document.createElement('div');
      S.classList.add('statCell');
      var C = document.createElement('span');
      C.classList.add('Header'),
        C.classList.add('statValue'),
        S.appendChild(C),
        (this.__attribute5 = document.createElement('span')),
        this.__attribute5.classList.add('Header'),
        this.__attribute5.classList.add('statLabel'),
        S.appendChild(this.__attribute5),
        m.appendChild(S),
        this.__mainViewDiv.appendChild(m),
        e.appendChild(this.__mainViewDiv),
        (this.__statsViewDiv = document.createElement('div')),
        this.__statsViewDiv.classList.add('ut-item-view--stats'),
        this.__statsViewDiv.classList.add('ut-item-view'),
        (this.__skillMoves = document.createElement('div')),
        this.__skillMoves.classList.add('ut-item-row'),
        (this.__skillMovesLabel = document.createElement('span')),
        this.__skillMovesLabel.classList.add('ut-item-row-label--left'),
        this.__skillMovesLabel.classList.add('ut-item-row-label'),
        this.__skillMoves.appendChild(this.__skillMovesLabel);
      var y = document.createElement('div');
      y.classList.add('ut-star-rating'),
        this.__skillMoves.appendChild(y),
        (this.__skillMovesRating = document.createElement('span')),
        this.__skillMoves.appendChild(this.__skillMovesRating),
        this.__statsViewDiv.appendChild(this.__skillMoves),
        (this.__weakFoot = document.createElement('div')),
        this.__weakFoot.classList.add('ut-item-row'),
        (this.__weakFootLabel = document.createElement('span')),
        this.__weakFootLabel.classList.add('ut-item-row-label--left'),
        this.__weakFootLabel.classList.add('ut-item-row-label'),
        this.__weakFoot.appendChild(this.__weakFootLabel);
      var v = document.createElement('div');
      v.classList.add('ut-star-rating'),
        this.__weakFoot.appendChild(v),
        (this.__weakFootRating = document.createElement('span')),
        this.__weakFoot.appendChild(this.__weakFootRating),
        this.__statsViewDiv.appendChild(this.__weakFoot),
        (this.__statsRowFitness = document.createElement('div')),
        this.__statsRowFitness.classList.add('ut-item-row'),
        (this.__playerFitnessLabel = document.createElement('span')),
        this.__playerFitnessLabel.classList.add('ut-item-row-label--left'),
        this.__playerFitnessLabel.classList.add('ut-item-row-label'),
        this.__statsRowFitness.appendChild(this.__playerFitnessLabel);
      var f = document.createElement('div');
      f.classList.add('ut-item-progress-bar'),
        (this.__playerFitnessBar = document.createElement('span')),
        f.appendChild(this.__playerFitnessBar),
        this.__statsRowFitness.appendChild(f),
        (this.__playerFitness = document.createElement('span')),
        this.__playerFitness.classList.add('ut-item-row-label--right'),
        this.__playerFitness.classList.add('ut-item-row-label'),
        this.__statsRowFitness.appendChild(this.__playerFitness),
        this.__statsViewDiv.appendChild(this.__statsRowFitness),
        (this.__statsRowContract = document.createElement('div')),
        this.__statsRowContract.classList.add('ut-item-row'),
        (this.__playerContractLabel = document.createElement('span')),
        this.__playerContractLabel.classList.add('ut-item-row-label--left'),
        this.__playerContractLabel.classList.add('ut-item-row-label'),
        this.__statsRowContract.appendChild(this.__playerContractLabel),
        (this.__playerContract = document.createElement('span')),
        this.__playerContract.classList.add('ut-item-row-label--right'),
        this.__playerContract.classList.add('ut-item-row-label'),
        this.__statsRowContract.appendChild(this.__playerContract),
        this.__statsViewDiv.appendChild(this.__statsRowContract),
        (this.__statsRowInjury = document.createElement('div')),
        this.__statsRowInjury.classList.add('ut-item-row--multiline'),
        this.__statsRowInjury.classList.add('ut-item-row--center'),
        this.__statsRowInjury.classList.add('ut-item-row'),
        (this.__injuryLabel = document.createElement('span')),
        this.__injuryLabel.classList.add('ut-item-row-label'),
        this.__statsRowInjury.appendChild(this.__injuryLabel),
        (this.__injury = document.createElement('span')),
        this.__injury.classList.add('ut-item-row-label'),
        this.__statsRowInjury.appendChild(this.__injury),
        this.__statsViewDiv.appendChild(this.__statsRowInjury),
        e.appendChild(this.__statsViewDiv),
        (this.__styleViewDiv = document.createElement('div')),
        this.__styleViewDiv.classList.add('ut-item-view--style'),
        this.__styleViewDiv.classList.add('ut-item-view'),
        (this.__playStyleName = document.createElement('div')),
        this.__playStyleName.classList.add('name'),
        this.__styleViewDiv.appendChild(this.__playStyleName),
        (this.__playStyleLarge = document.createElement('div')),
        this.__playStyleLarge.classList.add('playStyle'),
        this.__playStyleLarge.classList.add('ut-play-style--large'),
        this.__styleViewDiv.appendChild(this.__playStyleLarge);
      var w = document.createElement('div');
      w.classList.add('statCellRow');
      var I = document.createElement('div');
      I.classList.add('statCell'),
        (this._chevronSet1 = new UTItemStatChevronsView()),
        I.appendChild(this._chevronSet1.getRootElement());
      var b = document.createElement('span');
      b.classList.add('Pace'),
        b.classList.add('statLabel'),
        I.appendChild(b),
        w.appendChild(I);
      var E = document.createElement('div');
      E.classList.add('statCell'),
        (this._chevronSet4 = new UTItemStatChevronsView()),
        E.appendChild(this._chevronSet4.getRootElement());
      var L = document.createElement('span');
      L.classList.add('Dribbling'),
        L.classList.add('statLabel'),
        E.appendChild(L),
        w.appendChild(E),
        this.__styleViewDiv.appendChild(w);
      var U = document.createElement('div');
      U.classList.add('statCellRow');
      var A = document.createElement('div');
      A.classList.add('statCell'),
        (this._chevronSet2 = new UTItemStatChevronsView()),
        A.appendChild(this._chevronSet2.getRootElement());
      var V = document.createElement('span');
      V.classList.add('Shooting'),
        V.classList.add('statLabel'),
        A.appendChild(V),
        U.appendChild(A);
      var R = document.createElement('div');
      R.classList.add('statCell'),
        (this._chevronSet5 = new UTItemStatChevronsView()),
        R.appendChild(this._chevronSet5.getRootElement());
      var P = document.createElement('span');
      P.classList.add('Defending'),
        P.classList.add('statLabel'),
        R.appendChild(P),
        U.appendChild(R),
        this.__styleViewDiv.appendChild(U);
      var D = document.createElement('div');
      D.classList.add('statCellRow');
      var O = document.createElement('div');
      O.classList.add('statCell'),
        (this._chevronSet3 = new UTItemStatChevronsView()),
        O.appendChild(this._chevronSet3.getRootElement());
      var N = document.createElement('span');
      N.classList.add('Passing'),
        N.classList.add('statLabel'),
        O.appendChild(N),
        D.appendChild(O);
      var B = document.createElement('div');
      B.classList.add('statCell'),
        (this._chevronSet6 = new UTItemStatChevronsView()),
        B.appendChild(this._chevronSet6.getRootElement());
      var M = document.createElement('span');
      M.classList.add('Header'),
        M.classList.add('statLabel'),
        B.appendChild(M),
        D.appendChild(B),
        this.__styleViewDiv.appendChild(D),
        e.appendChild(this.__styleViewDiv),
        (this.__bioViewDiv = document.createElement('div')),
        this.__bioViewDiv.classList.add('ut-item-view--bio'),
        this.__bioViewDiv.classList.add('ut-item-view');
      var q = document.createElement('div');
      q.classList.add('ut-item-row');
      var k = document.createElement('span');
      k.classList.add('ut-item-row-label--left'),
        k.classList.add('ut-item-row-label'),
        (this._bioFlagImage = new UTImageView()),
        k.appendChild(this._bioFlagImage.getRootElement()),
        q.appendChild(k),
        (this.__bioNation = document.createElement('span')),
        this.__bioNation.classList.add('ut-item-row-label--right'),
        this.__bioNation.classList.add('ut-item-row-label'),
        q.appendChild(this.__bioNation),
        this.__bioViewDiv.appendChild(q);
      var F = document.createElement('div');
      F.classList.add('ut-item-row');
      var G = document.createElement('span');
      G.classList.add('ut-item-row-label--left'),
        G.classList.add('ut-item-row-label'),
        (this._bioLeagueImage = new UTImageView()),
        G.appendChild(this._bioLeagueImage.getRootElement()),
        F.appendChild(G),
        (this.__bioLeague = document.createElement('span')),
        this.__bioLeague.classList.add('ut-item-row-label--right'),
        this.__bioLeague.classList.add('ut-item-row-label'),
        F.appendChild(this.__bioLeague),
        this.__bioViewDiv.appendChild(F);
      var x = document.createElement('div');
      x.classList.add('ut-item-row');
      var z = document.createElement('span');
      z.classList.add('ut-item-row-label--left'),
        z.classList.add('ut-item-row-label'),
        (this._bioBadgeImage = new UTImageView()),
        z.appendChild(this._bioBadgeImage.getRootElement()),
        x.appendChild(z),
        (this.__bioClub = document.createElement('span')),
        this.__bioClub.classList.add('ut-item-row-label--right'),
        this.__bioClub.classList.add('ut-item-row-label'),
        x.appendChild(this.__bioClub),
        this.__bioViewDiv.appendChild(x);
      var H = document.createElement('div');
      H.classList.add('ut-item-player-bonuses'),
        (this.__playerLoyaltyIcon = document.createElement('span')),
        this.__playerLoyaltyIcon.classList.add('ut-item-player-bonus'),
        this.__playerLoyaltyIcon.classList.add('loyalty'),
        H.appendChild(this.__playerLoyaltyIcon),
        (this.__playerManagerBonus = document.createElement('span')),
        this.__playerManagerBonus.classList.add('ut-item-player-bonus'),
        this.__playerManagerBonus.classList.add('manager'),
        H.appendChild(this.__playerManagerBonus),
        this.__bioViewDiv.appendChild(H),
        e.appendChild(this.__bioViewDiv),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTItemPlayerLargeView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._canvas.destroy(),
      (this.__trainingBoost = null),
      (this.__playerName = null),
      (this.__playStyle = null),
      (this.__mainViewDiv = null),
      (this.__loanInfoTab = null),
      (this.__playerRating = null),
      (this.__playerPosition = null),
      (this.__attribute0 = null),
      (this.__attribute3 = null),
      (this.__attribute1 = null),
      (this.__attribute4 = null),
      (this.__attribute2 = null),
      (this.__attribute5 = null),
      (this.__statsViewDiv = null),
      (this.__skillMoves = null),
      (this.__skillMovesLabel = null),
      (this.__skillMovesRating = null),
      (this.__weakFoot = null),
      (this.__weakFootLabel = null),
      (this.__weakFootRating = null),
      (this.__statsRowFitness = null),
      (this.__playerFitnessLabel = null),
      (this.__playerFitnessBar = null),
      (this.__playerFitness = null),
      (this.__statsRowContract = null),
      (this.__playerContractLabel = null),
      (this.__playerContract = null),
      (this.__statsRowInjury = null),
      (this.__injuryLabel = null),
      (this.__injury = null),
      (this.__styleViewDiv = null),
      (this.__playStyleName = null),
      (this.__playStyleLarge = null),
      this._chevronSet1.destroy(),
      this._chevronSet4.destroy(),
      this._chevronSet2.destroy(),
      this._chevronSet5.destroy(),
      this._chevronSet3.destroy(),
      this._chevronSet6.destroy(),
      (this.__bioViewDiv = null),
      this._bioFlagImage.destroy(),
      (this.__bioNation = null),
      this._bioLeagueImage.destroy(),
      (this.__bioLeague = null),
      this._bioBadgeImage.destroy(),
      (this.__bioClub = null),
      (this.__playerLoyaltyIcon = null),
      (this.__playerManagerBonus = null);
  }),
  (UTItemPlayerLargeView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTItemPlayerLargeView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTItemPlayerLargeView.prototype.init = function init() {
    this.superclass(), this._canvas.init();
  }),
  (UTItemPlayerLargeView.prototype.setItemInfoState = function setItemInfoState(
    e
  ) {
    DOMKit.toggleDisplayStyle(
      this.__playStyle,
      e !== enums.UIItemInfoState.BIO
    ),
      DOMKit.toggleDisplayStyle(
        this.__mainViewDiv,
        e === enums.UIItemInfoState.MAIN
      ),
      DOMKit.toggleDisplayStyle(
        this.__bioViewDiv,
        e === enums.UIItemInfoState.BIO
      ),
      DOMKit.toggleDisplayStyle(
        this.__statsViewDiv,
        e === enums.UIItemInfoState.STATS
      ),
      DOMKit.toggleDisplayStyle(
        this.__styleViewDiv,
        e === enums.UIItemInfoState.STYLE
      ),
      DOMKit.toggleClass(
        this.__playerName,
        'main-view',
        e === enums.UIItemInfoState.MAIN || e === enums.UIItemInfoState.STYLE
      ),
      this._canvas.rendered && this._canvas.setState(e);
  }),
  (UTItemPlayerLargeView.prototype.renderChemistry = function renderChemistry(
    e,
    t,
    i
  ) {
    this.superclass(e, t, i),
      DOMKit.toggleClass(
        this.__playerManagerBonus,
        components.ItemFUTBase.CLASS.CHEM_BONUS,
        0 < i
      );
  }),
  (UTItemPlayerLargeView.prototype._render = function _render(e, t) {
    if (e.isValid()) {
      e.concept
        ? ((t = this._createConceptRarity()),
          this._setLocalShell(e, enums.ItemViewType.LARGE))
        : this._setShell(e, enums.ItemViewType.LARGE, t.getGuid());
      var i = this.getRootElement(),
        s = e.getStaticData(),
        n = t.getExpColorMap(e.getTier());
      this._canvas &&
        (this._canvas.setSize(enums.ItemViewType.LARGE),
        this._canvas.setColorMap(n),
        (this._canvas.renderSpecial = e.isSpecial()),
        (this._canvas.renderConcept = e.concept)),
        this.superclass(e, t),
        (this.__playerName.textContent = s.name);
      var o,
        a,
        r = e.isGK();
      if (
        ((DOMKit.findElements(
          i,
          '.statValue.Pace'
        )[0].innerHTML = e
          .getAttribute(r ? enums.GKStats.DIVING : enums.PlayerStats.PACE, !1)
          .toString()),
        (DOMKit.findElements(
          i,
          '.statValue.Header'
        )[0].innerHTML = e
          .getAttribute(
            r ? enums.GKStats.POSITION : enums.PlayerStats.HEADING,
            !1
          )
          .toString()),
        (DOMKit.findElements(
          i,
          '.statValue.Dribbling'
        )[0].innerHTML = e
          .getAttribute(
            r ? enums.GKStats.REFLEX : enums.PlayerStats.DRIBBLING,
            !1
          )
          .toString()),
        (DOMKit.findElements(
          i,
          '.statValue.Shooting'
        )[0].innerHTML = e
          .getAttribute(
            r ? enums.GKStats.HANDLING : enums.PlayerStats.SHOOTING,
            !1
          )
          .toString()),
        (DOMKit.findElements(
          i,
          '.statValue.Defending'
        )[0].innerHTML = e
          .getAttribute(r ? enums.GKStats.SPEED : enums.PlayerStats.DEFEND, !1)
          .toString()),
        (DOMKit.findElements(
          i,
          '.statValue.Passing'
        )[0].innerHTML = e
          .getAttribute(
            r ? enums.GKStats.KICKING : enums.PlayerStats.PASSING,
            !1
          )
          .toString()),
        setStatLabel(
          '.statLabel.Pace',
          r
            ? services.Localization.localize('cards.cardfront.divingAbbr')
            : services.Localization.localize('cards.cardfront.paceAbbr')
        ),
        setStatLabel(
          '.statLabel.Header',
          r
            ? services.Localization.localize('cards.cardfront.positionAbbr')
            : services.Localization.localize('cards.cardfront.headingAbbr')
        ),
        setStatLabel(
          '.statLabel.Dribbling',
          r
            ? services.Localization.localize('cards.cardfront.reflexAbbr')
            : services.Localization.localize('cards.cardfront.dribblingAbbr')
        ),
        setStatLabel(
          '.statLabel.Shooting',
          r
            ? services.Localization.localize('cards.cardfront.handlingAbbr')
            : services.Localization.localize('cards.cardfront.shootingAbbr')
        ),
        setStatLabel(
          '.statLabel.Defending',
          r
            ? services.Localization.localize('cards.cardfront.speedAbbr')
            : services.Localization.localize('cards.cardfront.defendingAbbr')
        ),
        setStatLabel(
          '.statLabel.Passing',
          r
            ? services.Localization.localize('cards.cardfront.kickAbbr')
            : services.Localization.localize('cards.cardfront.passingAbbr')
        ),
        e.hasTraining())
      )
        for (
          o =
            e.getBoostLevel() === enums.ItemRatingTier.GOLD
              ? components.ItemFUTBase.QUALITY.GOLD
              : e.getBoostLevel() === enums.ItemRatingTier.SILVER
              ? components.ItemFUTBase.QUALITY.SILVER
              : components.ItemFUTBase.QUALITY.BRONZE,
            a = 0;
          a < 6;
          ++a
        )
          utils.JS.isValid(this['__attribute' + a]) &&
            e.isAttributeBoosted(a) &&
            DOMKit.addClass(this['__attribute' + a], o);
      n &&
        (this._applyColors('.playerOverview', n.header),
        this._applyColors('.name', n.name),
        this._applyColors('.ut-item-view--main .statValue', n.attributeValues),
        this._applyColors('.ut-item-view--main .statLabel', n.footer),
        this._applyColors('.playStyle span', n.playStyleText),
        this._applyColors('.playStyle', n.playStyleIcon)),
        n && this._applyColors('.ut-item-view--bio', n.name),
        DOMKit.removeClass(
          this.__statsRowContract,
          components.ItemFUTBase.CLASS.INVALID_STAT
        ),
        DOMKit.toggleClass(
          this.__statsRowFitness,
          components.ItemFUTBase.CLASS.INVALID_STAT,
          e.isInjured()
        ),
        e.isSuspended()
          ? (DOMKit.addClass(
              this.__statsRowContract,
              components.ItemFUTBase.CLASS.INVALID_STAT
            ),
            (this.__playerContractLabel.textContent = services.Localization.localize(
              'item.status.suspended'
            )),
            (this.__playerContract.textContent = ''))
          : ((this.__playerContractLabel.textContent = services.Localization.localize(
              'cards.cardfront.contractAbbr'
            )),
            (this.__playerFitnessLabel.textContent = services.Localization.localize(
              'cards.cardfront.fitnessAbbr'
            )),
            (this.__playerContract.textContent = ' ' + e.contract.toString()),
            (this.__playerFitness.textContent = e.fitness.toString()),
            (this.__playerFitnessBar.style.width = e.fitness + '%'),
            e.fitness <= 20
              ? (this.__playerFitnessBar.style.backgroundColor =
                  'rgba(224, 0, 0, 1)')
              : e.fitness <= 60 &&
                (this.__playerFitnessBar.style.backgroundColor =
                  'rgba(224, 144, 0, 1)')),
        e.isInjured()
          ? (DOMKit.toggleDisplayStyle(this.__statsRowInjury, !0),
            (this.__injuryLabel.textContent =
              services.Localization.localize('item.status.injured') +
              ' ' +
              e.injuryType),
            (this.__injury.textContent = services.Localization.localize(
              'item.status.outnummatches',
              [e.injuryGames]
            )))
          : DOMKit.toggleDisplayStyle(this.__statsRowInjury, !1),
        n && this._applyColors('.ut-item-view--stats', n.name);
      var l = e.playStyle,
        c = utils.FUTLocalization.getPlaystyleByID(l);
      if ((DOMKit.addClass(this.__playStyle, 'chemstyle' + l), e.isValid())) {
        var u = repositories.PlayStyle.getPlayStyleBonusById(l, e.isGK());
        this._applyChevrons(u);
      }
      (this.__playStyleName.textContent = c),
        DOMKit.addClass(this.__playStyleLarge, 'chemstyle' + l),
        n && this._applyColors('.ut-item-view--style', n.name);
    }

    function setStatLabel(e, t) {
      DOMKit.findElements(i, e).forEach(function(e) {
        e.innerHTML = t;
      });
    }
  }),
  (UTItemPlayerLargeView.prototype._resetRender = function _resetRender() {
    var e = this.getRootElement();
    this.superclass();
    var t = [
      components.ItemFUTBase.QUALITY.GOLD,
      components.ItemFUTBase.QUALITY.SILVER,
      components.ItemFUTBase.QUALITY.BRONZE
    ].join(' ');

    function _getIconClasses(e) {
      return (e.className.match(/(^|\s)chemstyle\S+/g) || []).join(' ');
    }
    DOMKit.findElements(e, '.statLabel').forEach(function(e) {
      DOMKit.removeClass(e, t);
    }),
      DOMKit.removeClass(this.__playStyle, _getIconClasses(this.__playStyle)),
      DOMKit.removeClass(
        this.__playStyleLarge,
        _getIconClasses(this.__playStyleLarge)
      );
  }),
  (UTItemPlayerLargeView.prototype._getAssetDimensions = function _getAssetDimensions(
    e,
    t
  ) {
    t = t || !1;
    var i = 0,
      s = 0,
      n = 0,
      o = 0;
    return (
      e === enums.ItemAssetType.MAIN
        ? ((i = t ? 113 : 73),
          (s = t ? 130 : 73),
          (n = t ? 18 : 55),
          (o = t ? 31 : 37))
        : e === enums.ItemAssetType.BADGE
        ? ((s = i = 22), (n = 33), (o = 88))
        : e === enums.ItemAssetType.FLAG
        ? ((i = 20), (s = 12), (n = 34), (o = 70))
        : e === enums.ItemAssetType.SHELL && ((i = 152), (s = 212)),
      new UTItemCanvasDTO(null, t, i, s, n, o)
    );
  }),
  (UTItemPlayerLargeView.prototype._setSkillMoves = function _setSkillMoves(e) {
    (this.__skillMovesLabel.textContent = services.Localization.localize(
      'cards.cardfront.skillMoves'
    )),
      (this.__skillMovesRating.textContent = e);
  }),
  (UTItemPlayerLargeView.prototype._setWeakFoot = function _setWeakFoot(e, t) {
    var i = e
      ? services.Localization.localize('cards.cardfront.weakFootRightAbbr')
      : services.Localization.localize('cards.cardfront.weakFootLeftAbbr');
    services.Localization.localize('cards.cardfront.weakFootAbbr'),
      (this.__weakFootLabel.textContent =
        services.Localization.localize('cards.cardfront.weakFoot') +
        ' (' +
        i +
        ')'),
      (this.__weakFootRating.textContent = t);
  }),
  utils.JS.inherits(UTItemPlayerSmallView, components.ItemPlayerBase),
  (UTItemPlayerSmallView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'),
        e.classList.add('player'),
        e.classList.add('item'),
        (this._canvas = new UTItemPlayerCanvasView()),
        (this._canvas.width = '97'),
        (this._canvas.height = '114'),
        e.appendChild(this._canvas.getRootElement());
      var t = document.createElement('div');
      t.classList.add('ut-item-loader'), e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('statusOverlay'),
        e.appendChild(i),
        (this.__trainingBoost = document.createElement('div')),
        this.__trainingBoost.classList.add('ut-item-player-status--training'),
        this.__trainingBoost.classList.add('ut-item-player-status'),
        e.appendChild(this.__trainingBoost);
      var s = document.createElement('div');
      s.classList.add('ut-item-player-status--restricted'),
        s.classList.add('ut-item-player-status'),
        e.appendChild(s),
        (this.__mainViewDiv = document.createElement('div')),
        this.__mainViewDiv.classList.add('ut-item-view--main'),
        this.__mainViewDiv.classList.add('ut-item-view'),
        (this.__loanInfoTab = document.createElement('div')),
        this.__loanInfoTab.classList.add('ut-item-player-status--loan'),
        this.__mainViewDiv.appendChild(this.__loanInfoTab);
      var n = document.createElement('div');
      n.classList.add('playerOverview'),
        (this.__playerRating = document.createElement('div')),
        this.__playerRating.classList.add('rating'),
        n.appendChild(this.__playerRating),
        (this.__playerPosition = document.createElement('div')),
        this.__playerPosition.classList.add('position'),
        n.appendChild(this.__playerPosition),
        this.__mainViewDiv.appendChild(n),
        e.appendChild(this.__mainViewDiv),
        (this.__statsViewDiv = document.createElement('div')),
        this.__statsViewDiv.classList.add('ut-item-view--stats'),
        this.__statsViewDiv.classList.add('ut-item-view'),
        (this.__skillMoves = document.createElement('div')),
        this.__skillMoves.classList.add('ut-item-row'),
        (this.__skillMovesLabel = document.createElement('span')),
        this.__skillMovesLabel.classList.add('ut-item-row-label--left'),
        this.__skillMovesLabel.classList.add('ut-item-row-label'),
        this.__skillMoves.appendChild(this.__skillMovesLabel);
      var o = document.createElement('div');
      o.classList.add('ut-star-rating'),
        this.__skillMoves.appendChild(o),
        (this.__skillMovesRating = document.createElement('span')),
        this.__skillMoves.appendChild(this.__skillMovesRating),
        this.__statsViewDiv.appendChild(this.__skillMoves),
        (this.__weakFoot = document.createElement('div')),
        this.__weakFoot.classList.add('ut-item-row'),
        (this.__weakFootLabel = document.createElement('span')),
        this.__weakFootLabel.classList.add('ut-item-row-label--left'),
        this.__weakFootLabel.classList.add('ut-item-row-label'),
        this.__weakFoot.appendChild(this.__weakFootLabel);
      var a = document.createElement('div');
      a.classList.add('ut-star-rating'),
        this.__weakFoot.appendChild(a),
        (this.__weakFootRating = document.createElement('span')),
        this.__weakFoot.appendChild(this.__weakFootRating),
        this.__statsViewDiv.appendChild(this.__weakFoot),
        (this.__statsRowFitness = document.createElement('div')),
        this.__statsRowFitness.classList.add('ut-item-row'),
        (this.__playerFitnessLabel = document.createElement('span')),
        this.__statsRowFitness.appendChild(this.__playerFitnessLabel);
      var r = document.createElement('div');
      r.classList.add('ut-item-progress-bar'),
        (this.__playerFitnessBar = document.createElement('span')),
        r.appendChild(this.__playerFitnessBar),
        this.__statsRowFitness.appendChild(r),
        (this.__playerFitness = document.createElement('span')),
        this.__statsRowFitness.appendChild(this.__playerFitness),
        this.__statsViewDiv.appendChild(this.__statsRowFitness),
        (this.__statsRowContract = document.createElement('div')),
        this.__statsRowContract.classList.add('contracts'),
        this.__statsRowContract.classList.add('ut-item-row--center'),
        this.__statsRowContract.classList.add('ut-item-row'),
        (this.__playerContractLabel = document.createElement('span')),
        this.__playerContractLabel.classList.add('ut-item-row-label'),
        this.__statsRowContract.appendChild(this.__playerContractLabel),
        (this.__playerContract = document.createElement('span')),
        this.__playerContract.classList.add('ut-item-row-label'),
        this.__statsRowContract.appendChild(this.__playerContract),
        this.__statsViewDiv.appendChild(this.__statsRowContract),
        e.appendChild(this.__statsViewDiv),
        (this.__styleViewDiv = document.createElement('div')),
        this.__styleViewDiv.classList.add('ut-item-view--style'),
        this.__styleViewDiv.classList.add('ut-item-view');
      var l = document.createElement('div');
      l.classList.add('ut-item-row'), l.classList.add('statCellRow');
      var c = document.createElement('div');
      c.classList.add('statCell'),
        (this._chevronSet1 = new UTItemStatChevronsView()),
        c.appendChild(this._chevronSet1.getRootElement()),
        (this.__statLabel1 = document.createElement('span')),
        this.__statLabel1.classList.add('statLabel'),
        c.appendChild(this.__statLabel1),
        l.appendChild(c);
      var u = document.createElement('div');
      u.classList.add('statCell'),
        (this._chevronSet4 = new UTItemStatChevronsView()),
        u.appendChild(this._chevronSet4.getRootElement()),
        (this.__statLabel4 = document.createElement('span')),
        this.__statLabel4.classList.add('Dribbling'),
        this.__statLabel4.classList.add('statLabel'),
        u.appendChild(this.__statLabel4),
        l.appendChild(u),
        this.__styleViewDiv.appendChild(l);
      var d = document.createElement('div');
      d.classList.add('ut-item-row'), d.classList.add('statCellRow');
      var h = document.createElement('div');
      h.classList.add('statCell'),
        (this._chevronSet2 = new UTItemStatChevronsView()),
        h.appendChild(this._chevronSet2.getRootElement()),
        (this.__statLabel2 = document.createElement('span')),
        this.__statLabel2.classList.add('Shooting'),
        this.__statLabel2.classList.add('statLabel'),
        h.appendChild(this.__statLabel2),
        d.appendChild(h);
      var p = document.createElement('div');
      p.classList.add('statCell'),
        (this._chevronSet5 = new UTItemStatChevronsView()),
        p.appendChild(this._chevronSet5.getRootElement()),
        (this.__statLabel5 = document.createElement('span')),
        this.__statLabel5.classList.add('Defending'),
        this.__statLabel5.classList.add('statLabel'),
        p.appendChild(this.__statLabel5),
        d.appendChild(p),
        this.__styleViewDiv.appendChild(d);
      var _ = document.createElement('div');
      _.classList.add('ut-item-row'), _.classList.add('statCellRow');
      var m = document.createElement('div');
      m.classList.add('statCell'),
        (this._chevronSet3 = new UTItemStatChevronsView()),
        m.appendChild(this._chevronSet3.getRootElement()),
        (this.__statLabel3 = document.createElement('span')),
        this.__statLabel3.classList.add('Passing'),
        this.__statLabel3.classList.add('statLabel'),
        m.appendChild(this.__statLabel3),
        _.appendChild(m);
      var g = document.createElement('div');
      g.classList.add('statCell'),
        (this._chevronSet6 = new UTItemStatChevronsView()),
        g.appendChild(this._chevronSet6.getRootElement()),
        (this.__statLabel6 = document.createElement('span')),
        this.__statLabel6.classList.add('Header'),
        this.__statLabel6.classList.add('statLabel'),
        g.appendChild(this.__statLabel6),
        _.appendChild(g),
        this.__styleViewDiv.appendChild(_),
        e.appendChild(this.__styleViewDiv),
        (this.__bioViewDiv = document.createElement('div')),
        this.__bioViewDiv.classList.add('ut-item-view--bio'),
        this.__bioViewDiv.classList.add('ut-item-view');
      var T = document.createElement('div');
      T.classList.add('ut-item-row');
      var S = document.createElement('span');
      S.classList.add('ut-item-row-label--left'),
        S.classList.add('ut-item-row-label'),
        (this._bioFlagImage = new UTImageView()),
        S.appendChild(this._bioFlagImage.getRootElement()),
        T.appendChild(S),
        (this.__bioNation = document.createElement('span')),
        this.__bioNation.classList.add('ut-item-row-label--right'),
        this.__bioNation.classList.add('ut-item-row-label'),
        T.appendChild(this.__bioNation),
        this.__bioViewDiv.appendChild(T);
      var C = document.createElement('div');
      C.classList.add('ut-item-row');
      var y = document.createElement('span');
      y.classList.add('ut-item-row-label--left'),
        y.classList.add('ut-item-row-label'),
        (this._bioLeagueImage = new UTImageView()),
        y.appendChild(this._bioLeagueImage.getRootElement()),
        C.appendChild(y),
        (this.__bioLeague = document.createElement('span')),
        this.__bioLeague.classList.add('ut-item-row-label--right'),
        this.__bioLeague.classList.add('ut-item-row-label'),
        C.appendChild(this.__bioLeague),
        this.__bioViewDiv.appendChild(C);
      var v = document.createElement('div');
      v.classList.add('ut-item-row');
      var f = document.createElement('span');
      f.classList.add('ut-item-row-label--left'),
        f.classList.add('ut-item-row-label'),
        (this._bioBadgeImage = new UTImageView()),
        f.appendChild(this._bioBadgeImage.getRootElement()),
        v.appendChild(f),
        (this.__bioClub = document.createElement('span')),
        this.__bioClub.classList.add('ut-item-row-label--right'),
        this.__bioClub.classList.add('ut-item-row-label'),
        v.appendChild(this.__bioClub),
        this.__bioViewDiv.appendChild(v);
      var w = document.createElement('div');
      w.classList.add('ut-item-player-bonuses'),
        w.classList.add('ut-item-row'),
        (this.__playerLoyaltyIcon = document.createElement('span')),
        this.__playerLoyaltyIcon.classList.add('ut-item-player-bonus'),
        this.__playerLoyaltyIcon.classList.add('loyalty'),
        w.appendChild(this.__playerLoyaltyIcon),
        (this.__playerManagerBonus = document.createElement('span')),
        this.__playerManagerBonus.classList.add('ut-item-player-bonus'),
        this.__playerManagerBonus.classList.add('manager'),
        w.appendChild(this.__playerManagerBonus),
        this.__bioViewDiv.appendChild(w),
        e.appendChild(this.__bioViewDiv),
        (this.__playStyle = document.createElement('div')),
        this.__playStyle.classList.add('playStyle'),
        e.appendChild(this.__playStyle),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTItemPlayerSmallView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._canvas.destroy(),
      (this.__trainingBoost = null),
      (this.__mainViewDiv = null),
      (this.__loanInfoTab = null),
      (this.__playerRating = null),
      (this.__playerPosition = null),
      (this.__statsViewDiv = null),
      (this.__skillMoves = null),
      (this.__skillMovesLabel = null),
      (this.__skillMovesRating = null),
      (this.__weakFoot = null),
      (this.__weakFootLabel = null),
      (this.__weakFootRating = null),
      (this.__statsRowFitness = null),
      (this.__playerFitnessLabel = null),
      (this.__playerFitnessBar = null),
      (this.__playerFitness = null),
      (this.__statsRowContract = null),
      (this.__playerContractLabel = null),
      (this.__playerContract = null),
      (this.__styleViewDiv = null),
      this._chevronSet1.destroy(),
      (this.__statLabel1 = null),
      this._chevronSet4.destroy(),
      (this.__statLabel4 = null),
      this._chevronSet2.destroy(),
      (this.__statLabel2 = null),
      this._chevronSet5.destroy(),
      (this.__statLabel5 = null),
      this._chevronSet3.destroy(),
      (this.__statLabel3 = null),
      this._chevronSet6.destroy(),
      (this.__statLabel6 = null),
      (this.__bioViewDiv = null),
      this._bioFlagImage.destroy(),
      (this.__bioNation = null),
      this._bioLeagueImage.destroy(),
      (this.__bioLeague = null),
      this._bioBadgeImage.destroy(),
      (this.__bioClub = null),
      (this.__playerLoyaltyIcon = null),
      (this.__playerManagerBonus = null),
      (this.__playStyle = null);
  }),
  (UTItemPlayerSmallView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTItemPlayerSmallView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTItemPlayerSmallView.prototype.init = function init() {
    this.superclass(), this._canvas.init();
  }),
  (UTItemPlayerSmallView.prototype.setItemInfoState = function setItemInfoState(
    e
  ) {
    DOMKit.toggleDisplayStyle(
      this.__statsViewDiv,
      e === enums.UIItemInfoState.STATS
    ),
      DOMKit.toggleDisplayStyle(
        this.__bioViewDiv,
        e === enums.UIItemInfoState.BIO
      ),
      DOMKit.toggleDisplayStyle(
        this.__mainViewDiv,
        e === enums.UIItemInfoState.MAIN
      ),
      DOMKit.toggleDisplayStyle(
        this.__styleViewDiv,
        e === enums.UIItemInfoState.STYLE
      ),
      DOMKit.toggleDisplayStyle(
        this.__playStyle,
        e === enums.UIItemInfoState.STYLE || e === enums.UIItemInfoState.MAIN
      ),
      this._canvas.rendered && this._canvas.setState(e);
  }),
  (UTItemPlayerSmallView.prototype.renderChemistry = function renderChemistry(
    e,
    t,
    i
  ) {
    this.superclass(e, t, i),
      DOMKit.toggleClass(
        this.__playerManagerBonus,
        components.ItemFUTBase.CLASS.CHEM_BONUS,
        0 < i
      );
  }),
  (UTItemPlayerSmallView.prototype._render = function _render(e, t) {
    if ((this.getRoot().data('info', e), e.isValid())) {
      e.concept
        ? ((t = this._createConceptRarity()),
          this._setLocalShell(e, enums.ItemViewType.SMALL))
        : this._setShell(e, enums.ItemViewType.SMALL, t.getGuid());
      var i = e.playStyle,
        s = t.getSmallColorMap(e.getTier());
      this._canvas &&
        (this._canvas.setSize(enums.ItemViewType.SMALL),
        this._canvas.setColorMap(s),
        (this._canvas.renderSpecial = e.isSpecial()),
        (this._canvas.renderConcept = e.concept)),
        this.superclass(e, t),
        s &&
          (this._applyColors('.playerOverview', s.header),
          this._applyColors('.playStyle', s.playStyleIcon)),
        DOMKit.addClass(this.__playStyle, 'chemstyle' + i),
        s && this._applyColors('.ut-item-view--bio', s.footer),
        DOMKit.removeClass(
          this.__statsRowContract,
          components.ItemFUTBase.CLASS.INVALID_STAT
        ),
        DOMKit.toggleClass(
          this.__statsRowFitness,
          components.ItemFUTBase.CLASS.INVALID_STAT,
          e.isInjured()
        ),
        e.isSuspended()
          ? (DOMKit.addClass(
              this.__statsRowContract,
              components.ItemFUTBase.CLASS.INVALID_STAT
            ),
            (this.__playerContractLabel.textContent = services.Localization.localize(
              'item.status.suspended'
            )))
          : ((this.__playerContractLabel.textContent = services.Localization.localize(
              'cards.cardfront.contractAbbr'
            )),
            (this.__playerFitnessLabel.textContent = services.Localization.localize(
              'cards.cardfront.fitnessAbbr'
            )),
            (this.__playerContract.textContent = e.contract.toString()),
            (this.__playerFitness.textContent = e.fitness.toString()),
            (this.__playerFitnessBar.style.width = e.fitness + '%'),
            e.fitness <= 20
              ? (this.__playerFitnessBar.style.backgroundColor =
                  'rgba(224,0,0,1)')
              : e.fitness < 60 &&
                (this.__playerFitnessBar.style.backgroundColor =
                  'rgba(224,142,0,1)')),
        s && this._applyColors('.ut-item-view--stats', s.footer);
      var n = e.isGK();
      if (
        ((this.__statLabel1.textContent = services.Localization.localize(
          n ? 'cards.cardfront.divingAbbr' : 'cards.cardfront.paceAbbr'
        )),
        (this.__statLabel2.textContent = services.Localization.localize(
          n ? 'cards.cardfront.handlingAbbr' : 'cards.cardfront.shootingAbbr'
        )),
        (this.__statLabel3.textContent = services.Localization.localize(
          n ? 'cards.cardfront.kickAbbr' : 'cards.cardfront.passingAbbr'
        )),
        (this.__statLabel4.textContent = services.Localization.localize(
          n ? 'cards.cardfront.reflexAbbr' : 'cards.cardfront.dribblingAbbr'
        )),
        (this.__statLabel5.textContent = services.Localization.localize(
          n ? 'cards.cardfront.speedAbbr' : 'cards.cardfront.defendingAbbr'
        )),
        (this.__statLabel6.textContent = services.Localization.localize(
          n ? 'cards.cardfront.positionAbbr' : 'cards.cardfront.headingAbbr'
        )),
        e.isValid())
      ) {
        var o = repositories.PlayStyle.getPlayStyleBonusById(i, e.isGK());
        this._applyChevrons(o);
      }
      s && this._applyColors('.ut-item-view--style', s.footer);
    }
  }),
  (UTItemPlayerSmallView.prototype._resetRender = function _resetRender() {
    this.superclass(),
      DOMKit.removeClass(
        this.__playStyle,
        (function _getIconClasses(e) {
          return (e.className.match(/(^|\s)chemstyle\S+/g) || []).join(' ');
        })(this.__playStyle)
      );
  }),
  (UTItemPlayerSmallView.prototype._getAssetDimensions = function _getAssetDimensions(
    e,
    t
  ) {
    t = t || !1;
    var i = 0,
      s = 0,
      n = 0,
      o = 0;
    return (
      e === enums.ItemAssetType.MAIN
        ? ((i = t ? 78 : 53),
          (s = t ? 85 : 53),
          (n = t ? 6 : 32),
          (o = t ? 21 : 28))
        : e === enums.ItemAssetType.BADGE
        ? ((s = i = 18), (n = 14), (o = 63))
        : e === enums.ItemAssetType.FLAG
        ? ((i = 14), (s = 8), (n = 16), (o = 53))
        : e === enums.ItemAssetType.SHELL && ((i = 97), (s = 114)),
      new UTItemCanvasDTO(null, t, i, s, n, o)
    );
  }),
  (UTItemPlayerSmallView.prototype._setSkillMoves = function _setSkillMoves(e) {
    (this.__skillMovesLabel.textContent = services.Localization.localize(
      'cards.cardfront.skillMovesAbbr'
    )),
      (this.__skillMovesRating.textContent = e);
  }),
  (UTItemPlayerSmallView.prototype._setWeakFoot = function _setWeakFoot(e, t) {
    var i = e
      ? services.Localization.localize('cards.cardfront.weakFootRightAbbr')
      : services.Localization.localize('cards.cardfront.weakFootLeftAbbr');
    (this.__weakFootLabel.textContent =
      services.Localization.localize('cards.cardfront.weakFootAbbr') +
      ' (' +
      i +
      ')'),
      (this.__weakFootRating.textContent = t);
  }),
  (components.ItemManagerBase = function ItemManagerBaseView() {
    components.ItemFUTBase.call(this);
  }),
  utils.JS.inherits(components.ItemManagerBase, components.ItemFUTBase),
  (components.ItemManagerBase.onImageLoad = function onImageLoad(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.STAFF + '.png')
        );
  }),
  (components.ItemManagerBase.prototype._render = function _render(e, t) {
    if (((this.__position.textContent = ''), e.isValid())) {
      var i = e.getYear();
      e.concept ||
        !e.isContractExpired() ||
        e.getAuctionData().isSold() ||
        this.addClass(components.ItemFUTBase.CLASS.CONTRACT_EXPIRED);
      var s = utils.AssetLocator.hasPlaceholder(
          enums.PlaceholderAssetKey.STAFF,
          e.getMaskedResourceId().toString(),
          i
        )
          ? enums.PlaceholderAssetId.STAFF
          : e.getMaskedResourceId(),
        n = utils.AssetLocator.getImage(
          utils.AssetLocator.IMAGE_TYPE_PORTRAIT,
          i,
          s
        );
      (this.assets[enums.ItemAssetType.MAIN] = this._getAssetDimensions(
        enums.ItemAssetType.MAIN,
        !1
      )),
        this._requestResource(n, enums.ItemAssetType.MAIN, e),
        this._setFlag(e);
      var o = t.getExpColorMap(e.getTier());
      this._setLeague(e, o.useLightCrest),
        (this.__position.textContent = services.Localization.localize(
          'cards.cardfrontlarge.manager'
        ));
    }
  }),
  (components.ItemManagerBase.prototype._setFlag = function _setFlag(e) {
    var t = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_FLAG,
      e.getYear(),
      e.nationId
    );
    (this.assets[enums.ItemAssetType.FLAG] = this._getAssetDimensions(
      enums.ItemAssetType.FLAG,
      !1
    )),
      this._requestResource(t, enums.ItemAssetType.FLAG, e),
      this._bioFlagImage.setResource(t);
  }),
  (components.ItemManagerBase.prototype._setLeague = function _setLeague(e, t) {
    var i = utils.AssetLocator.getImage(
      t
        ? utils.AssetLocator.IMAGE_TYPE_LEAGUE_LIGHT
        : utils.AssetLocator.IMAGE_TYPE_LEAGUE_DARK,
      e.getYear(),
      e.leagueId
    );
    this._bioLeagueImage.setResource(i),
      (this.assets[enums.ItemAssetType.BADGE] = this._getAssetDimensions(
        enums.ItemAssetType.BADGE,
        !1
      )),
      this._requestResource(i, enums.ItemAssetType.BADGE, e);
  }),
  (components.ItemManagerBase.prototype.canRender = function canRender(e) {
    return e.isManager();
  }),
  (components.ItemManagerBase.prototype._resetRender = function _resetRender() {
    this.removeClass(components.ItemFUTBase.CLASS.CONTRACT_EXPIRED),
      this.getRootElement().removeAttribute('style'),
      (this.assets = {});
  }),
  utils.JS.inherits(UTItemManagerCanvasView, UTItemCanvasView),
  (UTItemManagerCanvasView.prototype.setState = function setState(e) {
    switch ((this.clearCanvas(), e)) {
      case enums.UIItemInfoState.MAIN:
      case enums.UIItemInfoState.STATS:
        this._renderMainView();
        break;
      case enums.UIItemInfoState.BIO:
      case enums.UIItemInfoState.STYLE:
        this._renderBioView();
    }
    this.rendered = !0;
  }),
  (UTItemManagerCanvasView.prototype._renderMainView = function _renderMainView() {
    if (
      (this._drawAsset(enums.ItemAssetType.SHELL),
      this._drawAsset(enums.ItemAssetType.MAIN),
      this._drawAsset(enums.ItemAssetType.FLAG),
      this._drawAsset(enums.ItemAssetType.BADGE),
      this.size === enums.ItemViewType.LARGE)
    ) {
      var e = (this.getWidth() - 1) / 2;
      this._drawDivider(34, 130.5, 117, 130.5);
      var t = e - 9.5,
        i = e + 9.5;
      this._drawDivider(t, 175.5, i, 175.5),
        this._drawDivider(36, 66, 49, 66),
        this._drawDivider(36, 85, 49, 85);
    }
  }),
  (UTItemManagerCanvasView.prototype._renderBioView = function _renderBioView() {
    var e, t;
    if (
      (this._drawAsset(enums.ItemAssetType.SHELL),
      this._drawBgColor(),
      this.size === enums.ItemViewType.LARGE)
    ) {
      var i = this.getWidth(),
        s = (i - 1) / 2;
      (t = i - (e = 26)),
        this._drawDivider(e, 55.5, t, 55.5),
        this._drawDivider(e, 81.5, t, 81.5),
        this._drawDivider(e, 108.5, t, 108.5),
        this._drawDivider(e, 134.5, t, 134.5),
        this._drawDivider(e, 160.5, t, 160.5),
        (t = e = s - 10.5),
        this._drawDivider(e, 175.5, t, 175.5);
    } else
      this.size === enums.ItemViewType.SMALL &&
        ((e = 17),
        (t = this.getWidth() - 17),
        this._drawDivider(e, 26.4, t, 26.4),
        this._drawDivider(e, 45.7, t, 45.7),
        this._drawDivider(e, 64.7, t, 64.7),
        this._drawDivider(e, 84.4, t, 84.4));
  }),
  (components.ItemManagerLarge = function ItemManagerLargeView() {
    components.ItemManagerBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemManagerLarge, components.ItemManagerBase),
  (components.ItemManagerLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'),
        e.classList.add('manager'),
        e.classList.add('staff'),
        e.classList.add('item'),
        (this._canvas = new UTItemManagerCanvasView()),
        (this._canvas.width = '152'),
        (this._canvas.height = '212'),
        e.appendChild(this._canvas.getRootElement());
      var t = document.createElement('div');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this.__infoTab = document.createElement('div')),
        this.__infoTab.classList.add('infoTab'),
        e.appendChild(this.__infoTab),
        (this.__position = document.createElement('div')),
        this.__position.classList.add('position'),
        e.appendChild(this.__position),
        (this.__itemName = document.createElement('div')),
        this.__itemName.classList.add('name'),
        e.appendChild(this.__itemName),
        (this.__mainViewDiv = document.createElement('div')),
        this.__mainViewDiv.classList.add('mainView'),
        (this.__managerText = document.createElement('div')),
        this.__managerText.classList.add('infoRow'),
        this.__mainViewDiv.appendChild(this.__managerText),
        e.appendChild(this.__mainViewDiv),
        (this.__bioViewDiv = document.createElement('div')),
        this.__bioViewDiv.classList.add('bioView');
      var i = document.createElement('div');
      i.classList.add('ut-item-row');
      var s = document.createElement('span');
      s.classList.add('ut-item-row-label--left'),
        s.classList.add('ut-item-row-label'),
        (this._bioFlagImage = new UTImageView()),
        s.appendChild(this._bioFlagImage.getRootElement()),
        i.appendChild(s),
        (this.__managerNation = document.createElement('span')),
        this.__managerNation.classList.add('ut-item-row-label--right'),
        this.__managerNation.classList.add('ut-item-row-label'),
        i.appendChild(this.__managerNation),
        this.__bioViewDiv.appendChild(i);
      var n = document.createElement('div');
      n.classList.add('ut-item-row');
      var o = document.createElement('span');
      o.classList.add('ut-item-row-label--left'),
        o.classList.add('ut-item-row-label'),
        (this._bioLeagueImage = new UTImageView()),
        o.appendChild(this._bioLeagueImage.getRootElement()),
        n.appendChild(o),
        (this.__managerLeague = document.createElement('span')),
        this.__managerLeague.classList.add('ut-item-row-label--right'),
        this.__managerLeague.classList.add('ut-item-row-label'),
        n.appendChild(this.__managerLeague),
        this.__bioViewDiv.appendChild(n);
      var a = document.createElement('div');
      a.classList.add('ut-item-row'),
        (this.__managerNegotiationTitle = document.createElement('span')),
        this.__managerNegotiationTitle.classList.add('ut-item-row-label--left'),
        this.__managerNegotiationTitle.classList.add('ut-item-row-label'),
        a.appendChild(this.__managerNegotiationTitle),
        (this.__managerNegotiation = document.createElement('span')),
        this.__managerNegotiation.classList.add('ut-item-row-label--right'),
        this.__managerNegotiation.classList.add('ut-item-row-label'),
        a.appendChild(this.__managerNegotiation),
        this.__bioViewDiv.appendChild(a);
      var r = document.createElement('div');
      r.classList.add('ut-item-row'),
        (this.__managerContractTitle = document.createElement('span')),
        this.__managerContractTitle.classList.add('ut-item-row-label--left'),
        this.__managerContractTitle.classList.add('ut-item-row-label'),
        r.appendChild(this.__managerContractTitle),
        (this.__managerContract = document.createElement('span')),
        this.__managerContract.classList.add('ut-item-row-label--right'),
        this.__managerContract.classList.add('ut-item-row-label'),
        r.appendChild(this.__managerContract),
        this.__bioViewDiv.appendChild(r),
        e.appendChild(this.__bioViewDiv);
      var l = document.createElement('div');
      l.classList.add('manager'),
        l.classList.add('iconStaff'),
        e.appendChild(l),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemManagerLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._canvas.destroy(),
      (this.__infoTab = null),
      (this.__position = null),
      (this.__itemName = null),
      (this.__mainViewDiv = null),
      (this.__managerText = null),
      (this.__bioViewDiv = null),
      this._bioFlagImage.destroy(),
      (this.__managerNation = null),
      this._bioLeagueImage.destroy(),
      (this.__managerLeague = null),
      (this.__managerNegotiationTitle = null),
      (this.__managerNegotiation = null),
      (this.__managerContractTitle = null),
      (this.__managerContract = null);
  }),
  (components.ItemManagerLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemManagerLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemManagerLarge.prototype.init = function init() {
    this.superclass(), this._canvas.init();
  }),
  (components.ItemManagerLarge.prototype.setItemInfoState = function setItemInfoState(
    e
  ) {
    DOMKit.toggleDisplayStyle(
      this.__position,
      e === enums.UIItemInfoState.MAIN || e === enums.UIItemInfoState.STATS
    ),
      DOMKit.toggleDisplayStyle(
        this.__mainViewDiv,
        e === enums.UIItemInfoState.MAIN || e === enums.UIItemInfoState.STATS
      ),
      DOMKit.toggleDisplayStyle(
        this.__bioViewDiv,
        e !== enums.UIItemInfoState.MAIN && e !== enums.UIItemInfoState.STATS
      ),
      DOMKit.toggleClass(
        this.__itemName,
        'main-view',
        e === enums.UIItemInfoState.MAIN || e === enums.UIItemInfoState.STATS
      ),
      this._canvas.rendered && this._canvas.setState(e);
  }),
  (components.ItemManagerLarge.prototype._render = function _render(e, t) {
    var i = e.getStaticData(),
      s = e.isValid();
    this.superclass(e, t),
      this._canvas &&
        (this._canvas.setSize(enums.ItemViewType.LARGE),
        this._canvas.setColorMap(t.getExpColorMap(e.getTier()))),
      s && this._setShell(e, enums.ItemViewType.LARGE),
      (this.__itemName.textContent = i.name);
    var n = s ? t.getExpColorMap(e.getTier()) : null;
    (this.__managerText.textContent = services.Localization.localize(
      'cards.cardfront.manager'
    )),
      n &&
        (this._applyColors('.position', n.header),
        this._applyColors('.name', n.name),
        this._applyColors('.mainView .infoRow', n.footer)),
      (this.__managerNation.textContent = utils.FUTLocalization.getNationNameById(
        e.nationId
      )),
      (this.__managerLeague.textContent = utils.FUTLocalization.getLeagueNameByID(
        e.leagueId,
        e.getYear()
      )),
      (this.__managerNegotiationTitle.textContent = services.Localization.localize(
        'cards.cardfront.negotiations'
      )),
      (this.__managerNegotiation.textContent = i.amount + '%'),
      (this.__managerContractTitle.textContent = services.Localization.localize(
        'cards.cardfront.contracts'
      )),
      (this.__managerContract.textContent = services.Localization.localizeNumber(
        e.contract
      )),
      n && this._applyColors('.bioView .infoRow', n.footer);
  }),
  (components.ItemManagerLarge.prototype._getAssetDimensions = function _getAssetDimensions(
    e,
    t
  ) {
    t = t || !1;
    var i = 0,
      s = 0,
      n = 0,
      o = 0;
    return (
      e === enums.ItemAssetType.MAIN
        ? ((s = i = 73), (n = 55), (o = 37))
        : e === enums.ItemAssetType.BADGE
        ? ((s = i = 18), (n = 34), (o = 88))
        : e === enums.ItemAssetType.FLAG
        ? ((i = 18), (s = 13), (n = 34), (o = 69))
        : e === enums.ItemAssetType.SHELL && ((i = 152), (s = 212)),
      new UTItemCanvasDTO(null, t, i, s, n, o)
    );
  }),
  (components.ItemStaffBase = function ItemStaffBaseView() {
    components.ItemFUTBase.call(this);
  }),
  utils.JS.inherits(components.ItemStaffBase, components.ItemFUTBase),
  (components.ItemStaffBase.ICON = {
    HEAD_COACH: 'headCoach',
    GK_COACH: 'gkCoach',
    FITNESS_COACH: 'fitnessCoach',
    PHYSIO_COACH: 'physioCoach'
  }),
  (components.ItemStaffBase.onImageLoad = function onImageLoad(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.STAFF + '.png')
        );
  }),
  (components.ItemStaffBase.prototype._render = function _render(e, t) {
    var i = '',
      s = e.getYear();
    switch (e.type) {
      case enums.ItemType.HEAD_COACH:
        i = components.ItemStaffBase.ICON.HEAD_COACH;
        break;
      case enums.ItemType.GK_COACH:
        i = components.ItemStaffBase.ICON.GK_COACH;
        break;
      case enums.ItemType.FITNESS_COACH:
        i = components.ItemStaffBase.ICON.FITNESS_COACH;
        break;
      case enums.ItemType.PHYSIO:
        i = components.ItemStaffBase.ICON.PHYSIO_COACH;
        break;
      default:
        utils.Debug.Assert(
          !1,
          '[components.ItemStaffBase] Reached default case when selecting the icon in _render() method.'
        );
    }
    DOMKit.addClass(this.__itemIcon, i);
    var n = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_PORTRAIT,
      s,
      e.getMaskedResourceId()
    );
    utils.AssetLocator.hasPlaceholder(
      enums.PlaceholderAssetKey.STAFF,
      e.getMaskedResourceId().toString(),
      s
    ) &&
      (n = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_PORTRAIT,
        s,
        enums.PlaceholderAssetId.STAFF
      )),
      this._mainImage
        .setResource(n, !0)
        .observe(this._mainImage, components.ItemStaffBase.onImageLoad);
  }),
  (components.ItemStaffBase.prototype.canRender = function canRender(e) {
    return e.isCoach();
  }),
  (components.ItemStaffBase.prototype._resetRender = function _resetRender() {
    var e = [
      components.ItemStaffBase.ICON.HEAD_COACH,
      components.ItemStaffBase.ICON.GK_COACH,
      components.ItemStaffBase.ICON.FITNESS_COACH,
      components.ItemStaffBase.ICON.PHYSIO_COACH
    ].join(' ');
    DOMKit.removeClass(this.__itemIcon, e),
      this.getRootElement().removeAttribute('style');
  }),
  (components.ItemStaffLarge = function ItemStaffLargeView() {
    components.ItemStaffBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemStaffLarge, components.ItemStaffBase),
  (components.ItemStaffLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'),
        e.classList.add('staff'),
        e.classList.add('item');
      var t = document.createElement('div');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('staff'),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__itemName = document.createElement('div')),
        this.__itemName.classList.add('name'),
        e.appendChild(this.__itemName);
      var i = document.createElement('div');
      i.classList.add('infoView'),
        (this.__line1 = document.createElement('div')),
        this.__line1.classList.add('infoRow'),
        i.appendChild(this.__line1),
        (this.__line2 = document.createElement('div')),
        this.__line2.classList.add('infoRow'),
        i.appendChild(this.__line2),
        e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('debugView'),
        (this.__staffDebug = document.createElement('div')),
        this.__staffDebug.classList.add('infoRow'),
        s.appendChild(this.__staffDebug),
        e.appendChild(s),
        (this.__itemIcon = document.createElement('div')),
        this.__itemIcon.classList.add('iconStaff'),
        e.appendChild(this.__itemIcon),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemStaffLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy(),
      (this.__itemName = null),
      (this.__line1 = null),
      (this.__line2 = null),
      (this.__staffDebug = null),
      (this.__itemIcon = null);
  }),
  (components.ItemStaffLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemStaffLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemStaffLarge.prototype._render = function _render(e, t) {
    var i = e.getStaticData();
    this.superclass(e, t), this._setShell(e, enums.ItemViewType.LARGE);
    var s = t.getExpColorMap(e.getTier());
    (this.__itemName.textContent = i.name),
      (this.__line1.textContent = services.Localization.localize(
        'card.desc.staff.bonus',
        [services.Localization.localizeNumber(i.amount)]
      )),
      (this.__line2.textContent = utils.FUTLocalization.getStaffAttribute(
        e.type,
        i.trainedAttribute
      )),
      this._applyColors('.name', s.name),
      this._applyColors('.infoView .infoRow', s.footer);
  }),
  (components.ItemConsumableBase = function ItemConsumableBaseView() {
    components.ItemFUTBase.call(this);
  }),
  utils.JS.inherits(components.ItemConsumableBase, components.ItemFUTBase),
  (components.ItemConsumableBase.ICON = {
    PLAYER_FITNESS: 'playerFitness',
    SQUAD_FITNESS: 'squadFitness',
    GK_TRAINING: 'gkTraining',
    HEALING: 'healing',
    MANAGER_CONTRACT: 'managerContract',
    MANAGER_LEAGUE: 'managerLeague',
    PLAYER_CONTRACT: 'playerContract',
    PLAYER_TRAINING: 'playerTraining',
    POSITIONING: 'positioning'
  }),
  (components.ItemConsumableBase.CLASS = {
    CONTRACTS: 'contracts',
    CONTRACT_STATS: 'contractStats',
    BRONZE_BOOST: 'bronzeBoost',
    SILVER_BOOST: 'silverBoost',
    GOLD_BOOST: 'goldBoost'
  }),
  (components.ItemConsumableBase.prototype.getImageUrl = function getImageUrl(
    e,
    t,
    i
  ) {
    return utils.AssetLocator.getImage(e, t, i);
  }),
  (components.ItemConsumableBase.prototype._render = function _render(e, t) {
    this._renderConsumableStack(e);
    var i = e.getStaticData(),
      s = this.getImageUrl(i.assetType, e.getYear(), i.assetId);
    this._mainImage.setResource(s), this._setConsumableIcon(e);
  }),
  (components.ItemConsumableBase.prototype.canRender = function canRender(e) {
    return e.isConsumable() && !e.isStyleModifier();
  }),
  (components.ItemConsumableBase.prototype._resetRender = function _resetRender() {
    var e = [
      components.ItemConsumableBase.ICON.PLAYER_FITNESS,
      components.ItemConsumableBase.ICON.SQUAD_FITNESS,
      components.ItemConsumableBase.ICON.GK_TRAINING,
      components.ItemConsumableBase.ICON.HEALING,
      components.ItemConsumableBase.ICON.MANAGER_CONTRACT,
      components.ItemConsumableBase.ICON.MANAGER_LEAGUE,
      components.ItemConsumableBase.ICON.PLAYER_CONTRACT,
      components.ItemConsumableBase.ICON.PLAYER_TRAINING,
      components.ItemConsumableBase.ICON.POSITIONING
    ].join(' ');
    DOMKit.removeClass(this.__itemIcon, e),
      this.getRootElement().removeAttribute('style');
  }),
  (components.ItemConsumableBase.prototype._renderConsumableStack = function _renderConsumableStack(
    e
  ) {
    var t = 1 < e.stackCount;
    (this.__stackCount.textContent = t ? e.stackCount.toString() : ''),
      DOMKit.toggleDisplayStyle(this.__stackCount, t);
  }),
  (components.ItemConsumableBase.prototype._setConsumableIcon = function _setConsumableIcon(
    e
  ) {
    var t = '';
    switch (e.type) {
      case enums.ItemType.CONTRACT:
        t = e.isPlayerContract()
          ? components.ItemConsumableBase.ICON.PLAYER_CONTRACT
          : components.ItemConsumableBase.ICON.MANAGER_CONTRACT;
        break;
      case enums.ItemType.TRAINING:
        e.isGKTraining()
          ? (t = components.ItemConsumableBase.ICON.GK_TRAINING)
          : e.isPlayerTraining()
          ? (t = components.ItemConsumableBase.ICON.PLAYER_TRAINING)
          : e.isPlayerPositionModifier()
          ? (t = components.ItemConsumableBase.ICON.POSITIONING)
          : e.isManagerLeagueModifier() &&
            (t = components.ItemConsumableBase.ICON.MANAGER_LEAGUE);
        break;
      case enums.ItemType.HEALTH:
        t = e.isPlayerFitness()
          ? components.ItemConsumableBase.ICON.PLAYER_FITNESS
          : e.isTeamFitness()
          ? components.ItemConsumableBase.ICON.SQUAD_FITNESS
          : components.ItemConsumableBase.ICON.HEALING;
        break;
      default:
        utils.Debug.Assert(
          !1,
          '[components.ItemConsumableBase] Hit default case for method _setConsumableIcon().'
        );
    }
    DOMKit.addClass(this.__itemIcon, t);
  }),
  (components.ItemConsumableLarge = function ItemConsumableLargeView() {
    components.ItemConsumableBase.call(this), this._generate();
  }),
  utils.JS.inherits(
    components.ItemConsumableLarge,
    components.ItemConsumableBase
  ),
  (components.ItemConsumableLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'),
        e.classList.add('consumable'),
        e.classList.add('item');
      var t = document.createElement('div');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this.__stackCount = document.createElement('div')),
        this.__stackCount.classList.add('infoTab'),
        e.appendChild(this.__stackCount),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement());
      var i = document.createElement('div');
      i.classList.add('ut-item-consumable-details'),
        (this.__itemName = document.createElement('div')),
        this.__itemName.classList.add('name'),
        i.appendChild(this.__itemName);
      var s = document.createElement('div');
      s.classList.add('infoView'),
        (this.__line1 = document.createElement('div')),
        this.__line1.classList.add('infoRow'),
        s.appendChild(this.__line1),
        (this.__line2 = document.createElement('div')),
        this.__line2.classList.add('infoRow'),
        s.appendChild(this.__line2),
        i.appendChild(s),
        (this.__itemIcon = document.createElement('div')),
        this.__itemIcon.classList.add('iconConsumable'),
        i.appendChild(this.__itemIcon),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemConsumableLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__stackCount = null),
      this._mainImage.destroy(),
      (this.__itemName = null),
      (this.__line1 = null),
      (this.__line2 = null),
      (this.__itemIcon = null);
  }),
  (components.ItemConsumableLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemConsumableLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemConsumableLarge.prototype._render = function _render(e, t) {
    var i = e.getStaticData();
    this.superclass(e, t), this._setShell(e, enums.ItemViewType.LARGE);
    var s = t.getExpColorMap(e.getTier());
    this.__itemName.textContent = i.name;
    var n = '',
      o = '',
      a = '';
    if (e.isContract()) {
      var r = document.createElement('span'),
        l = document.createElement('span'),
        c = document.createElement('span');
      (r.textContent = '+' + i.bronzeBoost),
        (l.textContent = '+' + i.silverBoost),
        (c.textContent = '+' + i.goldBoost),
        DOMKit.addClass(r, components.ItemConsumableBase.CLASS.BRONZE_BOOST),
        DOMKit.addClass(l, components.ItemConsumableBase.CLASS.SILVER_BOOST),
        DOMKit.addClass(c, components.ItemConsumableBase.CLASS.GOLD_BOOST),
        DOMKit.empty(this.__line1),
        DOMKit.addClass(
          this.__line1,
          components.ItemConsumableBase.CLASS.CONTRACT_STATS
        ),
        this.__line1.appendChild(r),
        this.__line1.appendChild(l),
        this.__line1.appendChild(c),
        e.isPlayerContract()
          ? (this.__itemName.textContent = services.Localization.localize(
              'card.title.playercontracts'
            ))
          : (this.__itemName.textContent = services.Localization.localize(
              'card.title.managercontracts'
            )),
        (this.__line2.textContent = services.Localization.localize(
          'card.desc.contract.matches'
        ));
    } else if (e.isTraining()) {
      var u = utils.FUTLocalization.convertAttributeIdToHALString(
        i.trainedAttribute,
        e.isGKTraining()
      );
      e.isGKTraining()
        ? ((n = services.Localization.localize(
            'trainingtype.goalkeeperTraining'
          )),
          (o = '+' + services.Localization.localizeNumber(i.amount)),
          (a = services.Localization.localize(
            'card.desc.training.gkattrib.' + u
          )))
        : e.isPlayerTraining()
        ? ((n = services.Localization.localize('trainingtype.playerTraining')),
          (o = '+' + services.Localization.localizeNumber(i.amount)),
          (a = services.Localization.localize(
            'card.desc.training.attrib.' + u
          )))
        : e.isPlayerPositionModifier()
        ? ((n = services.Localization.localize('card.title.positionmodifier')),
          (o = services.Localization.localize(
            'card.desc.training.pos.' + i.trainPosFrom + '_' + i.trainPosTo
          )))
        : e.isManagerLeagueModifier() &&
          ((n = services.Localization.localize('card.title.leaguechange')),
          (o = utils.FUTLocalization.getLeagueNameByID(e.leagueId))),
        (this.__itemName.textContent = n),
        (this.__line1.textContent = o),
        (this.__line2.textContent = a);
    } else if (e.isHealth()) {
      if (
        ((n = services.Localization.localize('card.title.healing')),
        (o = '+' + services.Localization.localizeNumber(i.amount)),
        e.isPlayerFitness())
      )
        (n = services.Localization.localize('card.title.playerfitness')),
          (a = services.Localization.localize('card.title.fitness'));
      else if (e.isTeamFitness())
        (n = services.Localization.localize('card.title.squadfitness')),
          (a = services.Localization.localize('card.title.fitness'));
      else
        switch (e.subtype) {
          case enums.ItemSubType.HEALING_HEAD:
            a = services.Localization.localize('card.desc.healing.head');
            break;
          case enums.ItemSubType.HEALING_SHOULDER:
            a = services.Localization.localize('card.desc.healing.shoulder');
            break;
          case enums.ItemSubType.HEALING_ARM:
            a = services.Localization.localize('card.desc.healing.arm');
            break;
          case enums.ItemSubType.HEALING_BACK:
            a = services.Localization.localize('card.desc.healing.back');
            break;
          case enums.ItemSubType.HEALING_HIP:
            a = services.Localization.localize('card.desc.healing.hip');
            break;
          case enums.ItemSubType.HEALING_LEG:
            a = services.Localization.localize('card.desc.healing.leg');
            break;
          case enums.ItemSubType.HEALING_FOOT:
            a = services.Localization.localize('card.desc.healing.foot');
            break;
          case enums.ItemSubType.HEALING_ALL:
            a = services.Localization.localize(
              'card.desc.healing.all.injuries'
            );
        }
      (this.__itemName.textContent = n),
        (this.__line1.textContent = o),
        (this.__line2.textContent = a);
    }
    utils.JS.isValid(s) &&
      (this._applyColors('.name', s.name),
      this._applyColors('.infoView .infoRow', s.footer));
  }),
  (components.ItemConsumableLarge.prototype._resetRender = function _resetRender() {
    this.superclass(),
      DOMKit.removeClass(
        this.__line1,
        components.ItemConsumableBase.CLASS.CONTRACT_STATS
      );
  }),
  (components.ItemChemistryStyleBase = function ItemChemistryStyleBaseView() {
    components.ItemConsumableBase.call(this);
  }),
  utils.JS.inherits(
    components.ItemChemistryStyleBase,
    components.ItemConsumableBase
  ),
  (components.ItemChemistryStyleBase.prototype._render = function _render(
    e,
    t
  ) {
    this._renderConsumableStack(e);
  }),
  (components.ItemChemistryStyleBase.prototype.canRender = function canRender(
    e
  ) {
    return e.isStyleModifier();
  }),
  (components.ItemChemistryStyleBase.prototype._resetRender = function _resetRender() {
    this.getRootElement().removeAttribute('style');
  }),
  (components.ItemChemistryStyleLarge = function UTItemChemistryStyleLargeView() {
    components.ItemChemistryStyleBase.call(this), this._generate();
  }),
  utils.JS.inherits(
    components.ItemChemistryStyleLarge,
    components.ItemChemistryStyleBase
  ),
  (components.ItemChemistryStyleLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'),
        e.classList.add('chemistryStyle'),
        e.classList.add('item');
      var t = document.createElement('div');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this.__stackCount = document.createElement('div')),
        this.__stackCount.classList.add('infoTab'),
        e.appendChild(this.__stackCount),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__itemName = document.createElement('div')),
        this.__itemName.classList.add('name'),
        e.appendChild(this.__itemName);
      var i = document.createElement('div');
      i.classList.add('styleView');
      var s = document.createElement('div');
      s.classList.add('statCellRow');
      var n = document.createElement('div');
      n.classList.add('statCell'),
        (this._chevronSet1 = new UTItemStatChevronsView()),
        n.appendChild(this._chevronSet1.getRootElement()),
        (this.__statLabel1 = document.createElement('span')),
        this.__statLabel1.classList.add('statLabel'),
        n.appendChild(this.__statLabel1),
        s.appendChild(n);
      var o = document.createElement('div');
      o.classList.add('statCell'),
        (this._chevronSet4 = new UTItemStatChevronsView()),
        o.appendChild(this._chevronSet4.getRootElement()),
        (this.__statLabel4 = document.createElement('span')),
        this.__statLabel4.classList.add('statLabel'),
        o.appendChild(this.__statLabel4),
        s.appendChild(o),
        i.appendChild(s);
      var a = document.createElement('div');
      a.classList.add('statCellRow');
      var r = document.createElement('div');
      r.classList.add('statCell'),
        (this._chevronSet2 = new UTItemStatChevronsView()),
        r.appendChild(this._chevronSet2.getRootElement()),
        (this.__statLabel2 = document.createElement('span')),
        this.__statLabel2.classList.add('statLabel'),
        r.appendChild(this.__statLabel2),
        a.appendChild(r);
      var l = document.createElement('div');
      l.classList.add('statCell'),
        (this._chevronSet5 = new UTItemStatChevronsView()),
        l.appendChild(this._chevronSet5.getRootElement()),
        (this.__statLabel5 = document.createElement('span')),
        this.__statLabel5.classList.add('statLabel'),
        l.appendChild(this.__statLabel5),
        a.appendChild(l),
        i.appendChild(a);
      var c = document.createElement('div');
      c.classList.add('statCellRow');
      var u = document.createElement('div');
      u.classList.add('statCell'),
        (this._chevronSet3 = new UTItemStatChevronsView()),
        u.appendChild(this._chevronSet3.getRootElement()),
        (this.__statLabel3 = document.createElement('span')),
        this.__statLabel3.classList.add('statLabel'),
        u.appendChild(this.__statLabel3),
        c.appendChild(u);
      var d = document.createElement('div');
      d.classList.add('statCell'),
        (this._chevronSet6 = new UTItemStatChevronsView()),
        d.appendChild(this._chevronSet6.getRootElement()),
        (this.__statLabel6 = document.createElement('span')),
        this.__statLabel6.classList.add('statLabel'),
        d.appendChild(this.__statLabel6),
        c.appendChild(d),
        i.appendChild(c),
        e.appendChild(i),
        (this.__itemIcon = document.createElement('div')),
        this.__itemIcon.classList.add('chemistryStyle'),
        this.__itemIcon.classList.add('iconConsumable'),
        e.appendChild(this.__itemIcon),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemChemistryStyleLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__stackCount = null),
      this._mainImage.destroy(),
      (this.__itemName = null),
      this._chevronSet1.destroy(),
      (this.__statLabel1 = null),
      this._chevronSet4.destroy(),
      (this.__statLabel4 = null),
      this._chevronSet2.destroy(),
      (this.__statLabel2 = null),
      this._chevronSet5.destroy(),
      (this.__statLabel5 = null),
      this._chevronSet3.destroy(),
      (this.__statLabel3 = null),
      this._chevronSet6.destroy(),
      (this.__statLabel6 = null),
      (this.__itemIcon = null);
  }),
  (components.ItemChemistryStyleLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemChemistryStyleLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemChemistryStyleLarge.prototype._render = function _render(
    e,
    t
  ) {
    this.superclass(e, t), this._setShell(e, enums.ItemViewType.LARGE);
    var i = e.getStaticData(),
      s = t.getExpColorMap(e.getTier()),
      n = utils.AssetLocator.getImage(i.assetType, e.getYear(), e.subtype);
    this._mainImage.setResource(n);
    var o = e.subtype,
      a = utils.FUTLocalization.getPlaystyleByID(o);
    this.__itemName.textContent = a;
    var r = e.isGKStyleModifier();
    (this.__statLabel1.textContent = services.Localization.localize(
      r ? 'cards.cardfront.divingAbbr' : 'cards.cardfront.paceAbbr'
    )),
      (this.__statLabel2.textContent = services.Localization.localize(
        r ? 'cards.cardfront.handlingAbbr' : 'cards.cardfront.shootingAbbr'
      )),
      (this.__statLabel3.textContent = services.Localization.localize(
        r ? 'cards.cardfront.kickAbbr' : 'cards.cardfront.passingAbbr'
      )),
      (this.__statLabel4.textContent = services.Localization.localize(
        r ? 'cards.cardfront.reflexAbbr' : 'cards.cardfront.dribblingAbbr'
      )),
      (this.__statLabel5.textContent = services.Localization.localize(
        r ? 'cards.cardfront.speedAbbr' : 'cards.cardfront.defendingAbbr'
      )),
      (this.__statLabel6.textContent = services.Localization.localize(
        r ? 'cards.cardfront.positionAbbr' : 'cards.cardfront.headingAbbr'
      ));
    var l = repositories.PlayStyle.getPlayStyleBonusById(o, r);
    this._applyChevrons(l),
      utils.JS.isValid(s) &&
        (this._applyColors('.itemTypeName', s.header),
        this._applyColors('.name', s.name),
        this._applyColors('.styleView .statLabel', s.footer));
  }),
  (components.ItemChemistryStyleLarge.prototype._applyChevrons = function _applyChevrons(
    e
  ) {
    e.slice(0, 6).forEach(function applyChevrons(e, t) {
      var i = this['_chevronSet' + (t + 1)];
      i && (i.setChevronCount(e), i.setChemistryBoost(e));
      var s = this['__statLabel' + (t + 1)];
      s && DOMKit.toggleClass(s, 'chemBoost', 0 < e);
    }, this);
  }),
  (components.ItemBadgeBase = function() {
    components.ItemFUTBase.call(this);
  }),
  utils.JS.inherits(components.ItemBadgeBase, components.ItemFUTBase),
  (components.ItemBadgeBase.onImageLoad = function(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.TEAM + '.png')
        );
  }),
  (components.ItemBadgeBase.prototype._render = function(e, t) {
    var i = e.getYear(),
      s = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT,
        i,
        e.teamId
      );
    utils.AssetLocator.hasPlaceholder(
      enums.PlaceholderAssetKey.CREST,
      e.teamId,
      i,
      enums.PlaceholderAssetKey.CREST_LIGHT
    ) &&
      (s = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT,
        i,
        enums.PlaceholderAssetId.TEAM
      )),
      this._mainImage
        .setResource(s, !0)
        .observe(this._mainImage, components.ItemBadgeBase.onImageLoad);
  }),
  (components.ItemBadgeBase.prototype.canRender = function(e) {
    return e.isBadge();
  }),
  (components.ItemBadgeLarge = function ItemBadgeLargeView() {
    components.ItemBadgeBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemBadgeLarge, components.ItemBadgeBase),
  (components.ItemBadgeLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'),
        e.classList.add('badge'),
        e.classList.add('item');
      var t = document.createElement('div');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._flagImage = new UTImageView()),
        this._flagImage.getRootElement().classList.add('flag'),
        e.appendChild(this._flagImage.getRootElement()),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__clubName = document.createElement('div')),
        this.__clubName.classList.add('name'),
        e.appendChild(this.__clubName);
      var i = document.createElement('div');
      i.classList.add('clubView'),
        (this.__itemName = document.createElement('div')),
        this.__itemName.classList.add('clubLine'),
        i.appendChild(this.__itemName),
        e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('badge'),
        s.classList.add('iconClub'),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemBadgeLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._flagImage.destroy(),
      this._mainImage.destroy(),
      (this.__clubName = null),
      (this.__itemName = null);
  }),
  (components.ItemBadgeLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemBadgeLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemBadgeLarge.prototype._render = function _render(e, t) {
    var i = t.getExpColorMap(e.getTier());
    this.superclass(e, t),
      this._setShell(e, enums.ItemViewType.LARGE),
      (this.__itemName.textContent = services.Localization.localize(
        'card.desc.badge'
      )),
      (this.__clubName.textContent = utils.FUTLocalization.getTeamAbb15ByID(
        e.teamId,
        e.getYear()
      )),
      this._applyColors('.name', i.name),
      this._applyColors('.clubView .clubLine', i.footer);
  }),
  (components.ItemKitBase = function ItemKitBaseView() {
    components.ItemFUTBase.call(this);
  }),
  utils.JS.inherits(components.ItemKitBase, components.ItemFUTBase),
  (components.ItemKitBase.onImageLoad = function onImageLoad(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(
            /j(\d+)_\d+_\d+\.png/,
            'j$1_' +
              enums.PlaceholderAssetId.TEAM +
              '_' +
              enums.PlaceholderAssetId.KIT +
              '.png'
          )
        );
  }),
  (components.ItemKitBase.prototype._render = function _render(e, t) {
    var i = e.getStaticData(),
      s = e.getYear(),
      n = i.assetType,
      o = utils.AssetLocator.getImage(n, s, e.teamId, i.assetYear);
    utils.AssetLocator.hasPlaceholderKit(o, s) &&
      (o = utils.AssetLocator.getImage(
        n,
        s,
        enums.PlaceholderAssetId.TEAM,
        enums.PlaceholderAssetId.KIT
      )),
      this._mainImage
        .setResource(o, !0)
        .observe(this._mainImage, components.ItemKitBase.onImageLoad);
    var a = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_FLAG,
      s,
      e.nationId
    );
    this._flagImage
      .setResource(a, !0)
      .observe(this._flagImage, components.ItemFUTBase.onFlagImageLoad);
    var r = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT,
      s,
      e.teamId
    );
    utils.AssetLocator.hasPlaceholder(
      enums.PlaceholderAssetKey.CREST,
      e.teamId.toString(),
      s,
      enums.PlaceholderAssetKey.CREST_LIGHT
    ) &&
      (r = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT,
        s,
        enums.PlaceholderAssetId.TEAM
      )),
      this._badgeImage
        .setResource(r, !0)
        .observe(this._badgeImage, components.ItemBadgeBase.onImageLoad);
  }),
  (components.ItemKitBase.prototype.canRender = function canRender(e) {
    return e.isKit();
  }),
  (components.ItemKitLarge = function ItemKitLargeView() {
    components.ItemKitBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemKitLarge, components.ItemKitBase),
  (components.ItemKitLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'), e.classList.add('kit'), e.classList.add('item');
      var t = document.createElement('div');
      t.classList.add('statusOverlay'), e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('kitOverview'),
        (this._flagImage = new UTImageView()),
        this._flagImage.getRootElement().classList.add('flag'),
        i.appendChild(this._flagImage.getRootElement()),
        (this._badgeImage = new UTImageView()),
        this._badgeImage.getRootElement().classList.add('badge'),
        i.appendChild(this._badgeImage.getRootElement()),
        e.appendChild(i),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__clubName = document.createElement('div')),
        this.__clubName.classList.add('name'),
        e.appendChild(this.__clubName);
      var s = document.createElement('div');
      s.classList.add('clubView'),
        (this.__kitText = document.createElement('div')),
        this.__kitText.classList.add('clubRow'),
        s.appendChild(this.__kitText),
        e.appendChild(s);
      var n = document.createElement('div');
      n.classList.add('kit'),
        n.classList.add('iconClub'),
        e.appendChild(n),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemKitLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._flagImage.destroy(),
      this._badgeImage.destroy(),
      this._mainImage.destroy(),
      (this.__clubName = null),
      (this.__kitText = null);
  }),
  (components.ItemKitLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemKitLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemKitLarge.prototype._render = function _render(e, t) {
    var i = e.getStaticData();
    this.superclass(e, t), this._setShell(e, enums.ItemViewType.LARGE);
    var s = t.getExpColorMap(e.getTier());
    (this.__clubName.textContent = utils.FUTLocalization.getTeamAbb15ByID(
      e.teamId,
      e.getYear()
    )),
      (this.__kitText.textContent = i.description),
      this._applyColors('.name', s.name),
      this._applyColors('.clubView .clubRow', s.footer);
  }),
  (components.ItemBallBase = function() {
    components.ItemFUTBase.call(this);
  }),
  utils.JS.inherits(components.ItemBallBase, components.ItemFUTBase),
  (components.ItemBallBase.onImageLoad = function(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.BALL + '.png')
        );
  }),
  (components.ItemBallBase.prototype._render = function(e, t) {
    var i = e.getStaticData(),
      s = e.getYear(),
      n = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_BALL,
        s,
        i.assetId
      );
    utils.AssetLocator.hasPlaceholder(
      enums.PlaceholderAssetKey.BALLS,
      i.assetId,
      s
    ) &&
      (n = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_BALL,
        s,
        enums.PlaceholderAssetId.BALL
      )),
      this._mainImage
        .setResource(n, !0)
        .observe(this._mainImage, components.ItemBallBase.onImageLoad);
  }),
  (components.ItemBallBase.prototype.canRender = function(e) {
    return e.isBall();
  }),
  (components.ItemBallLarge = function ItemBallLargeView() {
    components.ItemBallBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemBallLarge, components.ItemBallBase),
  (components.ItemBallLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'),
        e.classList.add('ball'),
        e.classList.add('item');
      var t = document.createElement('div');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__ballName = document.createElement('div')),
        this.__ballName.classList.add('name'),
        e.appendChild(this.__ballName);
      var i = document.createElement('div');
      i.classList.add('ball'),
        i.classList.add('iconClub'),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemBallLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy(),
      (this.__ballName = null);
  }),
  (components.ItemBallLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemBallLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemBallLarge.prototype._render = function _render(e, t) {
    var i = e.getStaticData();
    this.superclass(e, t), this._setShell(e, enums.ItemViewType.LARGE);
    var s = t.getExpColorMap(e.getTier());
    (this.__ballName.textContent = services.Localization.localize(
      i.description
    )),
      this._applyColors('.name', s.name),
      this._applyColors('.clubView clubRow', s.footer);
  }),
  (components.ItemStadiumBase = function ItemStadiumBaseView() {
    components.ItemFUTBase.call(this);
  }),
  utils.JS.inherits(components.ItemStadiumBase, components.ItemFUTBase),
  (components.ItemStadiumBase.onImageLoad = function onImageLoad(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.STADIUM + '.png')
        );
  }),
  (components.ItemStadiumBase.prototype.getImageUrl = function getImageUrl(
    e,
    t,
    i
  ) {
    return utils.AssetLocator.getImage(e, t, i);
  }),
  (components.ItemStadiumBase.prototype._render = function _render(e, t) {
    var i = this.getImageUrl(
      utils.AssetLocator.IMAGE_TYPE_STADIUM_FULL,
      e.getYear(),
      e.getStaticData().assetId
    );
    this._mainImage
      .setResource(i, !0)
      .observe(this._mainImage, components.ItemStadiumBase.onImageLoad);
  }),
  (components.ItemStadiumBase.prototype._renderRestrictions = function _renderRestrictions(
    e
  ) {
    e.bannerRestricted && (this.__restrictedBanner.style.display = 'none'),
      e.tifoRestricted && (this.__restrictedTifo.style.display = 'none');
  }),
  (components.ItemStadiumBase.prototype.canRender = function canRender(e) {
    return e.isStadium();
  }),
  (components.ItemStadiumLarge = function ItemStadiumLargeView() {
    components.ItemStadiumBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemStadiumLarge, components.ItemStadiumBase),
  (components.ItemStadiumLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'),
        e.classList.add('stadium'),
        e.classList.add('item');
      var t = document.createElement('div');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__stadiumName = document.createElement('div')),
        this.__stadiumName.classList.add('name'),
        e.appendChild(this.__stadiumName);
      var i = document.createElement('div');
      i.classList.add('stadium'),
        i.classList.add('iconClub'),
        e.appendChild(i),
        (this.__restrictedIcons = document.createElement('div')),
        this.__restrictedIcons.classList.add('restricted'),
        (this.__restrictedBanner = document.createElement('div')),
        this.__restrictedBanner.classList.add('banner'),
        this.__restrictedBanner.classList.add('iconClub'),
        this.__restrictedIcons.appendChild(this.__restrictedBanner),
        (this.__restrictedTifo = document.createElement('div')),
        this.__restrictedTifo.classList.add('tifo'),
        this.__restrictedTifo.classList.add('iconClub'),
        this.__restrictedIcons.appendChild(this.__restrictedTifo),
        e.appendChild(this.__restrictedIcons),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemStadiumLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy(),
      (this.__stadiumName = null),
      (this.__restrictedIcons = null),
      (this.__restrictedBanner = null),
      (this.__restrictedTifo = null);
  }),
  (components.ItemStadiumLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemStadiumLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemStadiumLarge.prototype._render = function _render(e, t) {
    var i = e.getStaticData();
    this.superclass(e, t), this._setShell(e, enums.ItemViewType.LARGE);
    var s = t.getExpColorMap(e.getTier());
    this._renderRestrictions(e),
      (this.__stadiumName.textContent = i.description),
      this._applyColors('.name', s.name),
      this._applyColors('.clubView .clubLine', s.footer);
  }),
  (components.ItemMiscBase = function ItemMiscBaseView() {
    components.ItemFUTBase.call(this);
  }),
  utils.JS.inherits(components.ItemMiscBase, components.ItemFUTBase),
  (components.ItemMiscBase.CLASS = {
    PLAYER_PICK: 'player-pick'
  }),
  (components.ItemMiscBase.ICON = {
    COINS: 'freeCoins',
    DRAFT_TOKEN: 'draftToken',
    FREE_PACK: 'freePack'
  }),
  (components.ItemMiscBase.prototype.getImageUrl = function getImageUrl(
    e,
    t,
    i
  ) {
    return utils.AssetLocator.getImage(e, t, i);
  }),
  (components.ItemMiscBase.prototype._render = function _render(e, t) {
    var i = e.getStaticData(),
      s = '';
    e.isPlayerPickItem()
      ? DOMKit.addClass(
          this.getRootElement(),
          components.ItemMiscBase.CLASS.PLAYER_PICK
        )
      : (e.isFreeCoins()
          ? (s = components.ItemMiscBase.ICON.COINS)
          : e.isDraftToken()
          ? (s = components.ItemMiscBase.ICON.DRAFT_TOKEN)
          : e.isFreePack() && (s = components.ItemMiscBase.ICON.FREE_PACK),
        DOMKit.addClass(this.__itemIcon, s),
        this._mainImage.setResource(
          this.getImageUrl(i.assetType, e.getYear(), i.assetId)
        ));
  }),
  (components.ItemMiscBase.prototype.canRender = function canRender(e) {
    return e.isMiscItem();
  }),
  (components.ItemMiscBase.prototype._resetRender = function _resetRender() {
    var e = [
      components.ItemMiscBase.ICON.COINS,
      components.ItemMiscBase.ICON.DRAFT_TOKEN,
      components.ItemMiscBase.ICON.FREE_PACK
    ].join(' ');
    DOMKit.removeClass(this.__itemIcon, e),
      DOMKit.removeClass(
        this.getRootElement(),
        components.ItemMiscBase.CLASS.PLAYER_PICK
      ),
      this.getRootElement().removeAttribute('style'),
      this._mainImage.clearResource();
  }),
  (components.ItemMiscLarge = function ItemMiscLargeView() {
    components.ItemMiscBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemMiscLarge, components.ItemMiscBase),
  (components.ItemMiscLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'),
        e.classList.add('misc'),
        e.classList.add('item');
      var t = document.createElement('div');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement());
      var i = document.createElement('div');
      i.classList.add('ut-item-misc-details'),
        (this.__itemName = document.createElement('div')),
        this.__itemName.classList.add('name'),
        i.appendChild(this.__itemName);
      var s = document.createElement('div');
      s.classList.add('infoView'),
        (this.__itemDesc = document.createElement('div')),
        this.__itemDesc.classList.add('line'),
        s.appendChild(this.__itemDesc),
        i.appendChild(s),
        (this.__itemIcon = document.createElement('div')),
        this.__itemIcon.classList.add('iconConsumable'),
        i.appendChild(this.__itemIcon),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemMiscLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy(),
      (this.__itemName = null),
      (this.__itemDesc = null),
      (this.__itemIcon = null);
  }),
  (components.ItemMiscLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemMiscLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemMiscLarge.prototype._render = function _render(e) {
    var t = e.getStaticData(),
      i = '',
      s = '';
    if (
      (this.superclass(e),
      (s = e.isPlayerPickItem()
        ? services.Localization.localize('card.title.playerpicks')
        : (this._setShell(e, enums.ItemViewType.LARGE), t.name)),
      e.isFreeCoins())
    )
      i = services.Localization.localize('card.desc.misc.coins', [t.amount]);
    else if (e.isDraftToken())
      i = services.Localization.localize('card.desc.misc.drafttoken');
    else if (e.isFreePack())
      if (t.hasLoanPackDescription())
        i = services.Localization.localize('card.desc.FreeLoanPackDesc');
      else
        switch (t.assetId) {
          case utils.AssetLocator.ASSET_ID_BRONZE_PACK:
            i = services.Localization.localize('card.desc.freebronze');
            break;
          case utils.AssetLocator.ASSET_ID_SILVER_PACK:
            i = services.Localization.localize('card.desc.freesilver');
            break;
          case utils.AssetLocator.ASSET_ID_GOLD_PACK:
            i = services.Localization.localize('card.desc.freegold');
        }
    (this.__itemName.textContent = s), (this.__itemDesc.textContent = i);
  }),
  (components.ItemTifoBase = function() {
    components.ItemFUTBase.call(this);
  }),
  utils.JS.inherits(components.ItemTifoBase, components.ItemFUTBase),
  (components.ItemTifoBase.onImageLoad = function(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.TIFO + '.png')
        );
  }),
  (components.ItemTifoBase.prototype._render = function(e, t) {}),
  (components.ItemTifoBase.prototype.canRender = function(e) {
    return e.isTifo();
  }),
  (components.ItemTifoLarge = function ItemTifoLargeView() {
    components.ItemTifoBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemTifoLarge, components.ItemTifoBase),
  (components.ItemTifoLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'),
        e.classList.add('tifo'),
        e.classList.add('item');
      var t = document.createElement('div');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__tifoName = document.createElement('div')),
        this.__tifoName.classList.add('name'),
        e.appendChild(this.__tifoName);
      var i = document.createElement('div');
      i.classList.add('clubView'),
        (this.__tifoText = document.createElement('div')),
        this.__tifoText.classList.add('clubRow'),
        i.appendChild(this.__tifoText),
        e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('tifo'),
        s.classList.add('iconClub'),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemTifoLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy(),
      (this.__tifoName = null),
      (this.__tifoText = null);
  }),
  (components.ItemTifoLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemTifoLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemTifoLarge.prototype._render = function _render(e, t) {
    var i = e.getStaticData(),
      s = e.getYear();
    this.superclass(e, t);
    var n = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_TIFO,
      s,
      i.assetId
    );
    utils.AssetLocator.hasPlaceholder(
      enums.PlaceholderAssetKey.TIFOS,
      i.assetId,
      s
    ) &&
      (n = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_TIFO,
        s,
        enums.PlaceholderAssetId.TIFO
      )),
      this._mainImage
        .setResource(n, !0)
        .observe(this._mainImage, components.ItemTifoBase.onImageLoad),
      this._setShell(e, enums.ItemViewType.LARGE);
    var o = t.getExpColorMap(e.getTier());
    (this.__tifoName.textContent = services.Localization.localize(i.name)),
      (this.__tifoText.textContent = services.Localization.localize(
        'card.desc.tifo'
      )),
      this._applyColors('.name', o.name),
      this._applyColors('.clubView .clubRow', o.footer);
  }),
  (components.ItemBannerBase = function() {
    components.ItemFUTBase.call(this);
  }),
  utils.JS.inherits(components.ItemBannerBase, components.ItemFUTBase),
  (components.ItemBannerBase.onImageLoad = function(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.BANNER + '.png')
        );
  }),
  (components.ItemBannerBase.prototype._render = function(e, t) {}),
  (components.ItemBannerBase.prototype.canRender = function(e) {
    return e.isBanner();
  }),
  (components.ItemBannerLarge = function ItemBannerLargeView() {
    components.ItemBannerBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemBannerLarge, components.ItemBannerBase),
  (components.ItemBannerLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'),
        e.classList.add('banner'),
        e.classList.add('item');
      var t = document.createElement('div');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__bannerName = document.createElement('div')),
        this.__bannerName.classList.add('name'),
        e.appendChild(this.__bannerName);
      var i = document.createElement('div');
      i.classList.add('clubView'),
        (this.__bannerText = document.createElement('div')),
        this.__bannerText.classList.add('clubRow'),
        i.appendChild(this.__bannerText),
        e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('banner'),
        s.classList.add('iconClub'),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemBannerLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy(),
      (this.__bannerName = null),
      (this.__bannerText = null);
  }),
  (components.ItemBannerLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemBannerLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemBannerLarge.prototype._render = function _render(e, t) {
    var i = e.getYear(),
      s = e.resourceId;
    this.superclass(e, t);
    var n = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_BANNER,
      i,
      s
    );
    utils.AssetLocator.hasPlaceholder(
      enums.PlaceholderAssetKey.BANNERS,
      s,
      i
    ) &&
      (n = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_BANNER,
        i,
        enums.PlaceholderAssetId.BANNER
      )),
      this._mainImage
        .setResource(n, !0)
        .observe(this._mainImage, components.ItemBannerBase.onImageLoad),
      this._setShell(e, enums.ItemViewType.LARGE);
    var o = t.getExpColorMap(e.getTier());
    (this.__bannerName.textContent = services.Localization.localize(
      e.getStaticData().name
    )),
      (this.__bannerText.textContent = services.Localization.localize(
        'card.desc.banner'
      )),
      this._applyColors('.name', o.name),
      this._applyColors('.clubView .clubRow', o.footer);
  }),
  (components.ItemCelebrationBase = function() {
    components.ItemFUTBase.call(this);
  }),
  utils.JS.inherits(components.ItemCelebrationBase, components.ItemFUTBase),
  (components.ItemCelebrationBase.onImageLoad = function(e, t, i, s) {
    e.unobserve(this),
      t ||
        i.replaceAndShowResource(
          s.replace(/\d+\.png/, enums.PlaceholderAssetId.CELEBRATION + '.png')
        );
  }),
  (components.ItemCelebrationBase.prototype._render = function(e, t) {}),
  (components.ItemCelebrationBase.prototype.canRender = function(e) {
    return e.isCelebration();
  }),
  (components.ItemCelebrationLarge = function ItemCelebrationLargeView() {
    components.ItemCelebrationBase.call(this), this._generate();
  }),
  utils.JS.inherits(
    components.ItemCelebrationLarge,
    components.ItemCelebrationBase
  ),
  (components.ItemCelebrationLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('large'),
        e.classList.add('celebration'),
        e.classList.add('item');
      var t = document.createElement('div');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__celebrationName = document.createElement('div')),
        this.__celebrationName.classList.add('name'),
        e.appendChild(this.__celebrationName);
      var i = document.createElement('div');
      i.classList.add('clubView'),
        (this.__celebrationText = document.createElement('div')),
        this.__celebrationText.classList.add('clubRow'),
        i.appendChild(this.__celebrationText),
        e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('celebration'),
        s.classList.add('iconClub'),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemCelebrationLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy(),
      (this.__celebrationName = null),
      (this.__celebrationText = null);
  }),
  (components.ItemCelebrationLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemCelebrationLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemCelebrationLarge.prototype._render = function _render(e, t) {
    var i = e.getStaticData(),
      s = e.getYear(),
      n = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_CELEBRATION,
        s,
        i.assetId
      );
    utils.AssetLocator.hasPlaceholder(
      enums.PlaceholderAssetKey.CELEBRATIONS,
      i.assetId,
      s
    ) &&
      (n = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_CELEBRATION,
        s,
        enums.PlaceholderAssetId.CELEBRATION
      )),
      this._mainImage
        .setResource(n, !0)
        .observe(this._mainImage, components.ItemCelebrationBase.onImageLoad),
      this.superclass(e, t),
      this._setShell(e, enums.ItemViewType.LARGE);
    var o = t.getExpColorMap(e.getTier());
    (this.__celebrationName.textContent = services.Localization.localize(
      'FUT_CelebrationName_' + e.resourceId
    )),
      (this.__celebrationText.textContent = services.Localization.localize(
        'card.desc.celebration'
      )),
      this._applyColors('.name', o.name),
      this._applyColors('.clubView .clubRow', o.footer);
  }),
  (components.ItemManagerSmall = function ItemManagerSmallView() {
    components.ItemManagerBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemManagerSmall, components.ItemManagerBase),
  (components.ItemManagerSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'),
        e.classList.add('manager'),
        e.classList.add('staff'),
        e.classList.add('item'),
        (this._canvas = new UTItemManagerCanvasView()),
        (this._canvas.width = '90'),
        (this._canvas.height = '114'),
        e.appendChild(this._canvas.getRootElement());
      var t = document.createElement('span');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this.__infoTab = document.createElement('span')),
        this.__infoTab.classList.add('infoTab'),
        e.appendChild(this.__infoTab),
        (this.__position = document.createElement('div')),
        this.__position.classList.add('position'),
        e.appendChild(this.__position),
        (this.__iconDiv = document.createElement('div')),
        this.__iconDiv.classList.add('manager'),
        this.__iconDiv.classList.add('iconStaff'),
        e.appendChild(this.__iconDiv),
        (this.__bioViewDiv = document.createElement('div')),
        this.__bioViewDiv.classList.add('bioView');
      var i = document.createElement('div');
      i.classList.add('ut-item-row');
      var s = document.createElement('span');
      s.classList.add('ut-item-row-label--left'),
        s.classList.add('ut-item-row-label'),
        (this._bioFlagImage = new UTImageView()),
        s.appendChild(this._bioFlagImage.getRootElement()),
        i.appendChild(s),
        (this.__managerNation = document.createElement('span')),
        this.__managerNation.classList.add('ut-item-row-label--right'),
        this.__managerNation.classList.add('ut-item-row-label'),
        i.appendChild(this.__managerNation),
        this.__bioViewDiv.appendChild(i);
      var n = document.createElement('div');
      n.classList.add('ut-item-row');
      var o = document.createElement('span');
      o.classList.add('ut-item-row-label--left'),
        o.classList.add('ut-item-row-label'),
        (this._bioLeagueImage = new UTImageView()),
        o.appendChild(this._bioLeagueImage.getRootElement()),
        n.appendChild(o),
        (this.__managerLeague = document.createElement('span')),
        this.__managerLeague.classList.add('ut-item-row-label--right'),
        this.__managerLeague.classList.add('ut-item-row-label'),
        n.appendChild(this.__managerLeague),
        this.__bioViewDiv.appendChild(n);
      var a = document.createElement('div');
      a.classList.add('ut-item-row'),
        (this.__managerNegotiationTitle = document.createElement('span')),
        this.__managerNegotiationTitle.classList.add('ut-item-row-label--left'),
        this.__managerNegotiationTitle.classList.add('ut-item-row-label'),
        a.appendChild(this.__managerNegotiationTitle),
        (this.__managerNegotiation = document.createElement('span')),
        this.__managerNegotiation.classList.add('ut-item-row-label--right'),
        this.__managerNegotiation.classList.add('ut-item-row-label'),
        a.appendChild(this.__managerNegotiation),
        this.__bioViewDiv.appendChild(a);
      var r = document.createElement('div');
      r.classList.add('ut-item-row--center'),
        r.classList.add('ut-item-row'),
        (this.__managerContractTitle = document.createElement('span')),
        this.__managerContractTitle.classList.add('ut-item-row-label'),
        r.appendChild(this.__managerContractTitle),
        (this.__managerContract = document.createElement('span')),
        this.__managerContract.classList.add('ut-item-row-label'),
        r.appendChild(this.__managerContract),
        this.__bioViewDiv.appendChild(r),
        e.appendChild(this.__bioViewDiv),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemManagerSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._canvas.destroy(),
      (this.__infoTab = null),
      (this.__position = null),
      (this.__iconDiv = null),
      (this.__bioViewDiv = null),
      this._bioFlagImage.destroy(),
      (this.__managerNation = null),
      this._bioLeagueImage.destroy(),
      (this.__managerLeague = null),
      (this.__managerNegotiationTitle = null),
      (this.__managerNegotiation = null),
      (this.__managerContractTitle = null),
      (this.__managerContract = null);
  }),
  (components.ItemManagerSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemManagerSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemManagerSmall.prototype.init = function init() {
    this.superclass(), this._canvas.init();
  }),
  (components.ItemManagerSmall.prototype.setItemInfoState = function setItemInfoState(
    e
  ) {
    DOMKit.toggleDisplayStyle(
      this.__position,
      e === enums.UIItemInfoState.MAIN || e === enums.UIItemInfoState.STATS
    ),
      DOMKit.toggleDisplayStyle(
        this.__iconDiv,
        e === enums.UIItemInfoState.MAIN || e === enums.UIItemInfoState.STATS
      ),
      DOMKit.toggleDisplayStyle(
        this.__bioViewDiv,
        e !== enums.UIItemInfoState.MAIN && e !== enums.UIItemInfoState.STATS
      ),
      this._canvas.rendered && this._canvas.setState(e);
  }),
  (components.ItemManagerSmall.prototype._render = function _render(e, t) {
    var i = e.getStaticData(),
      s = e.isValid();
    this.superclass(e, t),
      this._canvas &&
        (this._canvas.setSize(enums.ItemViewType.SMALL),
        this._canvas.setColorMap(t.getSmallColorMap(e.getTier()))),
      s && this._setShell(e, enums.ItemViewType.SMALL);
    var n = s ? t.getSmallColorMap(e.getTier()) : null;
    n &&
      (this._applyColors('.position', n.header),
      this._applyColors('.itemDesc', n.footer)),
      (this.__managerNation.textContent = utils.FUTLocalization.getNationAbb3ById(
        e.nationId
      )),
      (this.__managerLeague.textContent = utils.FUTLocalization.getLeagueAbbr5ByID(
        e.leagueId,
        e.getYear()
      )),
      (this.__managerNegotiationTitle.textContent = services.Localization.localize(
        'cards.cardfront.negotiations'
      )),
      (this.__managerNegotiation.textContent = i.amount + '%'),
      (this.__managerContractTitle.textContent = services.Localization.localize(
        'cards.cardfront.contractAbbr'
      )),
      (this.__managerContract.textContent = services.Localization.localizeNumber(
        e.contract
      ));
  }),
  (components.ItemManagerSmall.prototype._getAssetDimensions = function _getAssetDimensions(
    e,
    t
  ) {
    t = t || !1;
    var i = 0,
      s = 0,
      n = 0,
      o = 0;
    return (
      e === enums.ItemAssetType.MAIN
        ? ((s = i = 53), (n = 33), (o = 28))
        : e === enums.ItemAssetType.BADGE
        ? ((s = i = 14), (n = 18), (o = 63))
        : e === enums.ItemAssetType.FLAG
        ? ((i = 14), (s = 9), (n = 18), (o = 49))
        : e === enums.ItemAssetType.SHELL && ((i = 97), (s = 114)),
      new UTItemCanvasDTO(null, t, i, s, n, o)
    );
  }),
  (components.ItemStaffSmall = function ItemStaffSmallView() {
    components.ItemStaffBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemStaffSmall, components.ItemStaffBase),
  (components.ItemStaffSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'),
        e.classList.add('staff'),
        e.classList.add('item');
      var t = document.createElement('span');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__desc = document.createElement('div')),
        this.__desc.classList.add('itemDesc'),
        e.appendChild(this.__desc),
        (this.__itemIcon = document.createElement('div')),
        this.__itemIcon.classList.add('iconStaff'),
        e.appendChild(this.__itemIcon),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemStaffSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy(),
      (this.__desc = null),
      (this.__itemIcon = null);
  }),
  (components.ItemStaffSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemStaffSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemStaffSmall.prototype._render = function _render(e, t) {
    var i = e.getStaticData();
    this.superclass(e, t), this._setShell(e, enums.ItemViewType.SMALL);
    var s = t.getSmallColorMap(e.getTier());
    (this.__desc.textContent =
      utils.FUTLocalization.getStaffAttributeAbbr(e.type, i.trainedAttribute) +
      ' ' +
      services.Localization.localize('card.desc.staff.bonus', [
        services.Localization.localizeNumber(i.amount)
      ])),
      this._applyColors('.itemDesc', s.footer);
  }),
  (components.ItemConsumableSmall = function ItemConsumableSmallView() {
    components.ItemConsumableBase.call(this), this._generate();
  }),
  utils.JS.inherits(
    components.ItemConsumableSmall,
    components.ItemConsumableBase
  ),
  (components.ItemConsumableSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'),
        e.classList.add('consumable'),
        e.classList.add('item');
      var t = document.createElement('span');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this.__stackCount = document.createElement('div')),
        this.__stackCount.classList.add('infoTab'),
        e.appendChild(this.__stackCount),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__desc = document.createElement('div')),
        this.__desc.classList.add('itemDesc'),
        e.appendChild(this.__desc),
        (this.__itemIcon = document.createElement('div')),
        this.__itemIcon.classList.add('iconConsumable'),
        e.appendChild(this.__itemIcon),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemConsumableSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__stackCount = null),
      this._mainImage.destroy(),
      (this.__desc = null),
      (this.__itemIcon = null);
  }),
  (components.ItemConsumableSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemConsumableSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemConsumableSmall.prototype.getImageUrl = function getImageUrl(
    e,
    t,
    i
  ) {
    return utils.AssetLocator.getSmallImage(e, t, i);
  }),
  (components.ItemConsumableSmall.prototype._render = function _render(e, t) {
    var i = e.getStaticData();
    this.superclass(e, t), this._setShell(e, enums.ItemViewType.SMALL);
    var s = t.getSmallColorMap(e.getTier());
    if (e.isContract()) {
      var n = document.createElement('span'),
        o = document.createElement('span'),
        a = document.createElement('span');
      (n.textContent = '+' + i.bronzeBoost),
        (o.textContent = '+' + i.silverBoost),
        (a.textContent = '+' + i.goldBoost),
        DOMKit.addClass(n, components.ItemConsumableBase.CLASS.BRONZE_BOOST),
        DOMKit.addClass(o, components.ItemConsumableBase.CLASS.SILVER_BOOST),
        DOMKit.addClass(a, components.ItemConsumableBase.CLASS.GOLD_BOOST),
        DOMKit.empty(this.__desc),
        DOMKit.addClass(
          this.__desc,
          components.ItemConsumableBase.CLASS.CONTRACT_STATS
        ),
        this.__desc.appendChild(n),
        this.__desc.appendChild(o),
        this.__desc.appendChild(a),
        this.addClass(components.ItemConsumableBase.CLASS.CONTRACTS);
    }
    utils.JS.isValid(s) && this._applyColors('.itemDesc', s.footer);
  }),
  (components.ItemChemistryStyleSmall = function ItemChemistryStyleSmallView() {
    components.ItemChemistryStyleBase.call(this), this._generate();
  }),
  utils.JS.inherits(
    components.ItemChemistryStyleSmall,
    components.ItemChemistryStyleBase
  ),
  (components.ItemChemistryStyleSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'),
        e.classList.add('chemistryStyle'),
        e.classList.add('item');
      var t = document.createElement('span');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this.__stackCount = document.createElement('div')),
        this.__stackCount.classList.add('infoTab'),
        e.appendChild(this.__stackCount),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__desc = document.createElement('div')),
        this.__desc.classList.add('itemDesc'),
        e.appendChild(this.__desc),
        (this.__itemIcon = document.createElement('div')),
        this.__itemIcon.classList.add('chemistryStyle'),
        this.__itemIcon.classList.add('iconConsumable'),
        e.appendChild(this.__itemIcon),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemChemistryStyleSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__stackCount = null),
      this._mainImage.destroy(),
      (this.__desc = null),
      (this.__itemIcon = null);
  }),
  (components.ItemChemistryStyleSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemChemistryStyleSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemChemistryStyleSmall.prototype._render = function _render(
    e,
    t
  ) {
    this.superclass(e, t), this._setShell(e, enums.ItemViewType.SMALL);
    var i = t.getSmallColorMap(e.getTier()),
      s = e.getStaticData(),
      n = utils.AssetLocator.getImage(s.assetType, e.getYear(), e.subtype);
    this._mainImage.setResource(n), this._applyColors('.itemDesc', i.footer);
  }),
  (components.ItemBadgeSmall = function ItemBadgeSmallView() {
    components.ItemBadgeBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemBadgeSmall, components.ItemBadgeBase),
  (components.ItemBadgeSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'),
        e.classList.add('badge'),
        e.classList.add('item');
      var t = document.createElement('span');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement());
      var i = document.createElement('div');
      i.classList.add('badge'),
        i.classList.add('iconClub'),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemBadgeSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy();
  }),
  (components.ItemBadgeSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemBadgeSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemBadgeSmall.prototype._render = function _render(e, t) {
    this.superclass(e, t), this._setShell(e, enums.ItemViewType.SMALL);
  }),
  (components.ItemKitSmall = function ItemKitSmallView() {
    components.ItemKitBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemKitSmall, components.ItemKitBase),
  (components.ItemKitSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'), e.classList.add('kit'), e.classList.add('item');
      var t = document.createElement('span');
      t.classList.add('statusOverlay'), e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('kitOverview'),
        (this._flagImage = new UTImageView()),
        this._flagImage.getRootElement().classList.add('flag'),
        i.appendChild(this._flagImage.getRootElement()),
        (this._badgeImage = new UTImageView()),
        this._badgeImage.getRootElement().classList.add('badge'),
        i.appendChild(this._badgeImage.getRootElement()),
        e.appendChild(i),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__desc = document.createElement('div')),
        this.__desc.classList.add('itemDesc'),
        e.appendChild(this.__desc);
      var s = document.createElement('div');
      s.classList.add('kit'),
        s.classList.add('iconClub'),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemKitSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._flagImage.destroy(),
      this._badgeImage.destroy(),
      this._mainImage.destroy(),
      (this.__desc = null);
  }),
  (components.ItemKitSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemKitSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemKitSmall.prototype._render = function _render(e, t) {
    this.superclass(e, t), this._setShell(e, enums.ItemViewType.SMALL);
    var i = t.getSmallColorMap(e.getTier());
    (this.__desc.textContent = e.getStaticData().description),
      this._applyColors('.itemDesc', i.footer);
  }),
  (components.ItemBallSmall = function ItemBallSmallView() {
    components.ItemBallBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemBallSmall, components.ItemBallBase),
  (components.ItemBallSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'),
        e.classList.add('ball'),
        e.classList.add('item');
      var t = document.createElement('span');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement());
      var i = document.createElement('div');
      i.classList.add('ball'),
        i.classList.add('iconClub'),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemBallSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy();
  }),
  (components.ItemBallSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemBallSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemBallSmall.prototype._render = function _render(e, t) {
    this.superclass(e, t), this._setShell(e, enums.ItemViewType.SMALL);
  }),
  (components.ItemStadiumSmall = function ItemStadiumSmallView() {
    components.ItemStadiumBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemStadiumSmall, components.ItemStadiumBase),
  (components.ItemStadiumSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'),
        e.classList.add('stadium'),
        e.classList.add('item');
      var t = document.createElement('span');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement());
      var i = document.createElement('div');
      i.classList.add('stadium'),
        i.classList.add('iconClub'),
        e.appendChild(i),
        (this.__restrictedIcons = document.createElement('div')),
        this.__restrictedIcons.classList.add('restricted'),
        (this.__restrictedBanner = document.createElement('div')),
        this.__restrictedBanner.classList.add('banner'),
        this.__restrictedBanner.classList.add('iconClub'),
        this.__restrictedIcons.appendChild(this.__restrictedBanner),
        (this.__restrictedTifo = document.createElement('div')),
        this.__restrictedTifo.classList.add('tifo'),
        this.__restrictedTifo.classList.add('iconClub'),
        this.__restrictedIcons.appendChild(this.__restrictedTifo),
        e.appendChild(this.__restrictedIcons),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemStadiumSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy(),
      (this.__restrictedIcons = null),
      (this.__restrictedBanner = null),
      (this.__restrictedTifo = null);
  }),
  (components.ItemStadiumSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemStadiumSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemStadiumSmall.prototype.getImageUrl = function getImageUrl(
    e,
    t,
    i
  ) {
    return utils.AssetLocator.getSmallImage(e, t, i);
  }),
  (components.ItemStadiumSmall.prototype._render = function _render(e, t) {
    this.superclass(e, t),
      this._setShell(e, enums.ItemViewType.SMALL),
      this._renderRestrictions(e);
  }),
  (components.ItemMiscSmall = function ItemMiscSmallView() {
    components.ItemMiscBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemMiscSmall, components.ItemMiscBase),
  (components.ItemMiscSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'),
        e.classList.add('misc'),
        e.classList.add('item');
      var t = document.createElement('span');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement()),
        (this.__itemName = document.createElement('div')),
        this.__itemName.classList.add('name'),
        e.appendChild(this.__itemName),
        (this.__itemIcon = document.createElement('div')),
        this.__itemIcon.classList.add('iconConsumable'),
        e.appendChild(this.__itemIcon),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemMiscSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy(),
      (this.__itemName = null),
      (this.__itemIcon = null);
  }),
  (components.ItemMiscSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemMiscSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemMiscSmall.prototype.getImageUrl = function getImageUrl(
    e,
    t,
    i
  ) {
    return utils.AssetLocator.getSmallImage(e, t, i);
  }),
  (components.ItemMiscSmall.prototype._render = function _render(e, t) {
    this.superclass(e, t),
      e.isPlayerPickItem()
        ? (this.__itemName.textContent = services.Localization.localize(
            'card.title.playerpicks'
          ))
        : this._setShell(e, enums.ItemViewType.SMALL);
  }),
  (components.ItemTifoSmall = function ItemTifoSmallView() {
    components.ItemTifoBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemTifoSmall, components.ItemTifoBase),
  (components.ItemTifoSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'),
        e.classList.add('tifo'),
        e.classList.add('item');
      var t = document.createElement('span');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement());
      var i = document.createElement('div');
      i.classList.add('tifo'),
        i.classList.add('iconClub'),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemTifoSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy();
  }),
  (components.ItemTifoSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemTifoSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemTifoSmall.prototype._render = function _render(e, t) {
    var i = e.getYear(),
      s = e.getStaticData();
    this.superclass(e, t);
    var n = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_TIFO_SMALL,
      i,
      s.assetId
    );
    utils.AssetLocator.hasPlaceholder(
      enums.PlaceholderAssetKey.TIFOS,
      s.assetId,
      i
    ) &&
      (n = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_TIFO,
        i,
        enums.PlaceholderAssetId.TIFO
      )),
      this._mainImage
        .setResource(n, !0)
        .observe(this._mainImage, components.ItemTifoBase.onImageLoad),
      this._setShell(e, enums.ItemViewType.SMALL);
  }),
  (components.ItemBannerSmall = function ItemBannerSmallView() {
    components.ItemBannerBase.call(this), this._generate();
  }),
  utils.JS.inherits(components.ItemBannerSmall, components.ItemBannerBase),
  (components.ItemBannerSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'),
        e.classList.add('banner'),
        e.classList.add('item');
      var t = document.createElement('span');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement());
      var i = document.createElement('div');
      i.classList.add('banner'),
        i.classList.add('iconClub'),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemBannerSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy();
  }),
  (components.ItemBannerSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemBannerSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemBannerSmall.prototype._render = function _render(e, t) {
    var i = e.resourceId,
      s = e.getYear();
    this.superclass(e, t);
    var n = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_BANNER_SMALL,
      s,
      i
    );
    utils.AssetLocator.hasPlaceholder(
      enums.PlaceholderAssetKey.BANNERS,
      i,
      s
    ) &&
      (n = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_BANNER,
        s,
        enums.PlaceholderAssetId.BANNER
      )),
      this._mainImage
        .setResource(n, !0)
        .observe(this._mainImage, components.ItemBannerBase.onImageLoad),
      this._setShell(e, enums.ItemViewType.SMALL);
  }),
  (components.ItemCelebrationSmall = function ItemCelebrationSmallView() {
    components.ItemCelebrationBase.call(this), this._generate();
  }),
  utils.JS.inherits(
    components.ItemCelebrationSmall,
    components.ItemCelebrationBase
  ),
  (components.ItemCelebrationSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('small'),
        e.classList.add('celebration'),
        e.classList.add('item');
      var t = document.createElement('span');
      t.classList.add('statusOverlay'),
        e.appendChild(t),
        (this._mainImage = new UTImageView()),
        this._mainImage.getRootElement().classList.add('photo'),
        e.appendChild(this._mainImage.getRootElement());
      var i = document.createElement('div');
      i.classList.add('celebration'),
        i.classList.add('iconClub'),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ItemCelebrationSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._mainImage.destroy();
  }),
  (components.ItemCelebrationSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ItemCelebrationSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ItemCelebrationSmall.prototype._render = function _render(e, t) {
    var i = e.getStaticData(),
      s = e.getYear();
    this.superclass(e, t);
    var n = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_CELEBRATION_SMALL,
      s,
      i.assetId
    );
    utils.AssetLocator.hasPlaceholder(
      enums.PlaceholderAssetKey.CELEBRATIONS,
      i.assetId,
      s
    ) &&
      (n = utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_CELEBRATION,
        s,
        enums.PlaceholderAssetId.CELEBRATION
      )),
      this._mainImage
        .setResource(n, !0)
        .observe(this._mainImage, components.ItemCelebrationBase.onImageLoad),
      this._setShell(e, enums.ItemViewType.SMALL);
  }),
  utils.JS.inherits(UTImageView, UTView),
  (UTImageView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('img');
      e.setAttribute('src', 'images/transparent.png'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTImageView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTImageView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTImageView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTImageView.prototype.allowImageCaching = function allowImageCaching(e) {
    this._useCache = !!e;
  }),
  (UTImageView.prototype.setLocalResource = function setLocalResource(e) {
    this.src = e;
    var t = this.getRootElement();
    if (t) {
      var i = utils.JS.isString(e) && 0 < e.length;
      (t.src = i ? e : ''), (t.style.display = i ? '' : 'none');
    }
  }),
  (UTImageView.prototype.replaceAndShowResource = function replaceAndShowResource(
    e
  ) {
    var t = this.getRootElement();
    t &&
      (this._useCache || (e = e + '?' + Date.now()),
      (t.src = e),
      (t.style.display = ''));
  }),
  (UTImageView.prototype.setExternalResource = function setExternalResource(
    e,
    t
  ) {
    return this._loadResource(e, !!t, !0);
  }),
  (UTImageView.prototype.setResource = function setResource(e, t) {
    return this._loadResource(e, !!t, !1);
  }),
  (UTImageView.prototype.clearResource = function clearResource() {
    (this.src = ''), (this.getRootElement().src = '');
  }),
  (UTImageView.prototype._loadResource = function _loadResource(e, t, i) {
    if (
      ((this.src =
        !0 === i
          ? e
          : gConfigurationModel.getConfigString(
              models.ConfigurationModel.KEY_RESOURCE_ROOT
            ) + e),
      (this.path = e),
      (this.getRootElement().style.display = 'none'),
      !utils.HTTP.urlHasImage(this.src))
    )
      return (
        this._imageLoadEvent.notify(!1, this, this.src), this._imageLoadEvent
      );
    if (t) {
      var s = this.getRootElement();
      this._addListener(
        enums.Event.LOAD,
        s,
        this._handleLoadSuccessEvent.bind(this)
      ),
        this._addListener(
          enums.Event.ERROR,
          s,
          this._handleLoadFailEvent.bind(this)
        );
    }
    return this.replaceAndShowResource(this.src), this._imageLoadEvent;
  }),
  (UTImageView.prototype._handleLoadSuccessEvent = function _handleLoadSuccessEvent(
    e
  ) {
    var t = this.getRootElement();
    t.complete &&
      (0 === t.naturalWidth
        ? this._imageLoadEvent.notify(!1, this, this.src)
        : this._imageLoadEvent.notify(!0, this, this.src),
      this._removeListenersByName(enums.Event.LOAD, enums.Event.ERROR));
  }),
  (UTImageView.prototype._handleLoadFailEvent = function _handleLoadFailEvent(
    e
  ) {
    this._imageLoadEvent.notify(!1, this, this.src),
      this._removeListenersByName(enums.Event.LOAD, enums.Event.ERROR);
  }),
  (components.CustomBrickItemBase = function() {
    components.ItemFUTBase.call(this), (this._imgLoaders = []);
  }),
  utils.JS.inherits(components.CustomBrickItemBase, components.ItemFUTBase),
  (components.CustomBrickItemBase.prototype._render = function _render(e) {
    this._renderCustomRequirement(
      enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID,
      e.leagueId
    ),
      this._renderCustomRequirement(
        enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID,
        e.teamId
      ),
      this._renderCustomRequirement(
        enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID,
        e.nationId
      );
  }),
  (components.CustomBrickItemBase.prototype._resetRender = function _resetRender() {
    this._imgLoaders.forEach(function(e) {
      e.dealloc();
    }, this),
      (this._imgLoaders = []),
      this.getRootElement().removeAttribute('style');
  }),
  (components.CustomBrickItemBase.prototype._renderShell = function _renderShell(
    e,
    t
  ) {}),
  (components.CustomBrickItemBase.prototype._renderCustomRequirement = function _checkForCustomRequirement(
    e,
    t
  ) {
    var i = this._generateImageLoader(e, t);
    this._imgLoaders.push(i),
      this.getRootElement().appendChild(i.getRootElement());
  }),
  (components.CustomBrickItemBase.prototype._generateImageLoader = function _generateImageLoader(
    e,
    t
  ) {
    var i = new UTImageView();
    switch (e) {
      case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
        i.setResource(
          utils.AssetLocator.getImage(
            utils.AssetLocator.IMAGE_TYPE_FLAG,
            enums.Year.ASSET,
            t
          )
        );
        break;
      case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
        i.setResource(
          utils.AssetLocator.getImage(
            utils.AssetLocator.IMAGE_TYPE_LEAGUE_DARK,
            enums.Year.ASSET,
            t
          )
        );
        break;
      case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
        i.setResource(
          utils.AssetLocator.getImage(
            utils.AssetLocator.IMAGE_TYPE_BADGE_DARK,
            enums.Year.ASSET,
            t
          )
        );
        break;
      default:
        utils.Debug.Assert(!1, 'Reached default case: ' + e);
    }
    return i;
  }),
  (components.CustomBrickItemBase.prototype.canRender = function canRender(e) {
    return e.isCustomBrick();
  }),
  (components.CustomBrickItemSmall = function() {
    components.CustomBrickItemBase.call(this), this._generate();
  }),
  utils.JS.inherits(
    components.CustomBrickItemSmall,
    components.CustomBrickItemBase
  ),
  (components.CustomBrickItemSmall.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('custom-brick'),
        e.classList.add('small'),
        e.classList.add('item');
      var t = document.createElement('div');
      t.classList.add('lock'),
        e.appendChild(t),
        (this.__league = document.createElement('span')),
        e.appendChild(this.__league),
        (this.__team = document.createElement('span')),
        e.appendChild(this.__team),
        (this.__nation = document.createElement('span')),
        e.appendChild(this.__nation),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.CustomBrickItemSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__league = null),
      (this.__team = null),
      (this.__nation = null);
  }),
  (components.CustomBrickItemSmall.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.CustomBrickItemSmall.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.CustomBrickItemSmall.prototype._render = function _render(e) {
    this.superclass(e),
      0 === e.nationId
        ? (this.__nation.textContent = services.Localization.localize(
            'roles.defaultRole'
          ))
        : (this.__nation.textContent = utils.FUTLocalization.getNationAbb3ById(
            e.nationId
          )),
      0 === e.leagueId
        ? (this.__league.textContent = services.Localization.localize(
            'roles.defaultRole'
          ))
        : (this.__league.textContent = utils.FUTLocalization.getLeagueAbbr5ByID(
            e.leagueId,
            e.getYear()
          )),
      0 === e.teamId
        ? (this.__team.textContent = services.Localization.localize(
            'roles.defaultRole'
          ))
        : (this.__team.textContent = utils.FUTLocalization.getTeamAbb3ByID(
            e.teamId,
            e.getYear()
          ));
  }),
  (components.CustomBrickItemLarge = function() {
    components.CustomBrickItemBase.call(this), this._generate();
  }),
  utils.JS.inherits(
    components.CustomBrickItemLarge,
    components.CustomBrickItemBase
  ),
  (components.CustomBrickItemLarge.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('custom-brick'),
        e.classList.add('large'),
        e.classList.add('item'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.CustomBrickItemLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (components.CustomBrickItemLarge.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.CustomBrickItemLarge.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  NamespaceManager.Register('factories'),
  (factories.ItemView = (function() {
    function UTItemViewFactory() {
      UTObject.call(this);
    }
    return (
      utils.JS.inherits(UTItemViewFactory, UTObject),
      (UTItemViewFactory.prototype.createLargeItem = function createLargeItem(
        e
      ) {
        var t;
        switch (
          (utils.Debug.Assert(
            e instanceof entities.Item,
            'Expected an item entity'
          ),
          e.type)
        ) {
          case enums.ItemType.PLAYER:
            t = e.isCustomBrick()
              ? new components.CustomBrickItemLarge()
              : new UTItemPlayerLargeView();
            break;
          case enums.ItemType.MANAGER:
            t = new components.ItemManagerLarge();
            break;
          case enums.ItemType.BADGE:
            t = new components.ItemBadgeLarge();
            break;
          case enums.ItemType.KIT:
            t = new components.ItemKitLarge();
            break;
          case enums.ItemType.BALL:
            t = new components.ItemBallLarge();
            break;
          case enums.ItemType.STADIUM:
            t = new components.ItemStadiumLarge();
            break;
          case enums.ItemType.TRAINING:
            t = e.isStyleModifier()
              ? new components.ItemChemistryStyleLarge()
              : new components.ItemConsumableLarge();
            break;
          case enums.ItemType.HEALTH:
          case enums.ItemType.CONTRACT:
            t = new components.ItemConsumableLarge();
            break;
          case enums.ItemType.MISC:
            t = new components.ItemMiscLarge();
            break;
          case enums.ItemType.HEAD_COACH:
          case enums.ItemType.GK_COACH:
          case enums.ItemType.FITNESS_COACH:
          case enums.ItemType.PHYSIO:
            t = new components.ItemStaffLarge();
            break;
          case enums.ItemType.TIFO:
            t = new components.ItemTifoLarge();
            break;
          case enums.ItemType.BANNER:
            t = new components.ItemBannerLarge();
            break;
          case enums.ItemType.CELEBRATION:
            t = new components.ItemCelebrationLarge();
            break;
          default:
            t = new UTItemPlayerLargeView();
        }
        return t;
      }),
      (UTItemViewFactory.prototype.createSmallItem = function createSmallItem(
        e
      ) {
        var t;
        switch (
          (utils.Debug.Assert(
            e instanceof entities.Item,
            'Expected an item entity'
          ),
          e.type)
        ) {
          case enums.ItemType.PLAYER:
            t = e.isCustomBrick()
              ? new components.CustomBrickItemSmall()
              : new UTItemPlayerSmallView();
            break;
          case enums.ItemType.MANAGER:
            t = new components.ItemManagerSmall();
            break;
          case enums.ItemType.BADGE:
            t = new components.ItemBadgeSmall();
            break;
          case enums.ItemType.KIT:
            t = new components.ItemKitSmall();
            break;
          case enums.ItemType.BALL:
            t = new components.ItemBallSmall();
            break;
          case enums.ItemType.STADIUM:
            t = new components.ItemStadiumSmall();
            break;
          case enums.ItemType.TRAINING:
            t = e.isStyleModifier()
              ? new components.ItemChemistryStyleSmall()
              : new components.ItemConsumableSmall();
            break;
          case enums.ItemType.HEALTH:
          case enums.ItemType.CONTRACT:
            t = new components.ItemConsumableSmall();
            break;
          case enums.ItemType.MISC:
            t = new components.ItemMiscSmall();
            break;
          case enums.ItemType.TIFO:
            t = new components.ItemTifoSmall();
            break;
          case enums.ItemType.BANNER:
            t = new components.ItemBannerSmall();
            break;
          case enums.ItemType.CELEBRATION:
            t = new components.ItemCelebrationSmall();
            break;
          case enums.ItemType.HEAD_COACH:
          case enums.ItemType.GK_COACH:
          case enums.ItemType.FITNESS_COACH:
          case enums.ItemType.PHYSIO:
            t = new components.ItemStaffSmall();
            break;
          default:
            t = new UTItemPlayerSmallView();
        }
        return t;
      }),
      new UTItemViewFactory()
    );
  })()),
  (components.ListDataPlaystyle = function UTListDataPlayStyleView() {
    UTView.call(this), this._generate();
  });

function UTSendToSquadView() {
  UTView.call(this),
    (this._pinnedRow = null),
    Object.defineProperty(this, '_pinnedRow', {
      writable: !0,
      enumerable: !1
    }),
    (this.onSlotSelected = new UTObservable()),
    Object.defineProperty(this, 'onSlotSelected', {
      writable: !1,
      enumerable: !0
    }),
    this._generate();
}

function UTSquadSectionListViewModel(e) {
  viewmodels.ItemSectionList.call(this, e),
    this.setSection(
      UTSquadSectionListViewModel.SECTION.STARTING_ELEVEN,
      function(e) {
        return 0 <= e.getIndex() && e.getIndex() < entities.Squad.FIELD_PLAYERS;
      },
      UTSquadSectionListViewModel.SECTION.STARTING_ELEVEN
    ),
    this.setSection(
      UTSquadSectionListViewModel.SECTION.SUBS,
      function(e) {
        return (
          e.getIndex() >= entities.Squad.FIELD_PLAYERS &&
          e.getIndex() <
            entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS
        );
      },
      UTSquadSectionListViewModel.SECTION.SUBS
    ),
    this.setSection(
      UTSquadSectionListViewModel.SECTION.RESERVES,
      function(e) {
        return (
          e.getIndex() >=
            entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS &&
          e.getIndex() < entities.Squad.MANAGER_SLOT_INDEX
        );
      },
      UTSquadSectionListViewModel.SECTION.RESERVES
    ),
    this._organizeItems();
}

function UTSendToSquadViewController() {
  UTViewController.call(this),
    (this._viewmodel = null),
    (this._pinnedItem = null),
    (this._squad = null),
    (this._selectedSlotIndex = -1),
    (this._defaultedToActiveSquad = !1);
}

function UTMarketSearchView() {
  UTTargetActionView.call(this),
    (this._pinnedItemView = null),
    Object.defineProperty(this, '_pinnedItemView', {
      writable: !0,
      enumerable: !1
    });
}

function UTSquadMarketSearchViewModel() {
  UTObject.call(this),
    (this._squad = null),
    Object.defineProperty(this, '_squad', {
      writable: !0,
      enumerable: !1
    }),
    (this._slotIndex = 0),
    Object.defineProperty(this, '_slotIndex', {
      writable: !0,
      enumerable: !1
    });
}

function UTTransferMarketPaginationViewModel() {
  UTViewModel.call(this),
    (this._paginationList = null),
    Object.defineProperty(this, '_paginationList', {
      enumerable: !1,
      writable: !0
    }),
    (this._pageIndex = 1),
    Object.defineProperty(this, '_pageIndex', {
      enumerable: !1,
      writable: !0
    });
}

function UTMarketSearchResultsViewController() {
  UTViewController.call(this),
    (this._itemListViewDelegate = null),
    Object.defineProperty(this, '_itemListViewDelegate', {
      writable: !0,
      enumerable: !1
    }),
    (this._paginationViewModel = null),
    Object.defineProperty(this, '_paginationViewModel', {
      writable: !0,
      enumerable: !1
    }),
    (this._searchCriteria = null),
    Object.defineProperty(this, '_searchCriteria', {
      writable: !0,
      enumerable: !1
    }),
    (this._squadContext = null),
    Object.defineProperty(this, '_squadContext', {
      writable: !0,
      enumerable: !1
    }),
    (this._compareItem = null),
    Object.defineProperty(this, '_compareItem', {
      writable: !0,
      enumerable: !1
    }),
    (this._selectedItem = null),
    Object.defineProperty(this, '_selectedItem', {
      writable: !0,
      enumerable: !1
    }),
    (this._pinnedListItem = null),
    Object.defineProperty(this, '_pinnedListItem', {
      writable: !0,
      enumerable: !1
    }),
    (this._arbitraryInterval = 0),
    Object.defineProperty(this, '_arbitraryInterval', {
      writable: !0,
      enumerable: !1
    }),
    (this.onDataChange = new UTObservable()),
    Object.defineProperty(this, 'onDataChange', {
      writable: !1,
      enumerable: !0
    });
}

function UTMarketSearchResultsSplitViewController() {
  UTSplitViewController.call(this),
    (this._listController = new UTMarketSearchResultsViewController()),
    (this._itemDetailController = new controllers.navigation.ItemDetails());
}

function UTPlayerSearchControl() {
  UTControl.call(this),
    (this._timeout = 0),
    (this._closeTimeout = 0),
    (this._inputChangeTimeout = 0),
    (this._tapDelay = 0),
    (this._searchEngine = new utils.PlayerSearchEngine(
      repositories.Item.getStaticData()
    )),
    (this._currentQuery = []),
    (this._currentName = ''),
    (this._isOpen = !1),
    (this._selected = null),
    (this._windowListener = this._windowClick.bind(this));
}

function UTNumberInputControl() {
  UTControl.call(this),
    (this.value = 0),
    Object.defineProperty(this, 'value', {
      get: this.getValue,
      set: this.setValue,
      enumerable: !0
    }),
    (this._minValue = Number.MIN_SAFE_INTEGER),
    Object.defineProperty(this, '_minValue', {
      writable: !0,
      enumerable: !1
    }),
    (this._maxValue = Number.MAX_SAFE_INTEGER),
    Object.defineProperty(this, '_maxValue', {
      writable: !0,
      enumerable: !1
    }),
    (this._selectionTimeout = 0),
    Object.defineProperty(this, '_selectionTimeout', {
      writable: !0,
      enumerable: !1
    });
}

function UTCurrencyInputControl() {
  UTNumberInputControl.call(this),
    (this._defaultValue = 0),
    Object.defineProperty(this, '_defaultValue', {
      writable: !0,
      enumerable: !1
    });
}

function UTNumericInputSpinnerControl() {
  UTView.call(this);
}

function UTMarketSearchFiltersView() {
  UTTargetActionView.call(this),
    (this._pinnedListRowItem = null),
    Object.defineProperty(this, '_pinnedListRowItem', {
      writable: !0,
      enumerable: !1
    });
}

function UTMarketSearchFiltersViewController() {
  UTViewController.call(this),
    (this._viewmodel = null),
    (this._squadContext = null);
}

function UTToggleButtonControl() {
  UTButtonControl.call(this),
    (this._checked = !1),
    (this._textOn = ''),
    (this._textOff = '');
}

function UTTileDimOverlayView() {
  UTView.call(this);
}

function UTTileView() {
  UTTargetActionView.call(this),
    (this._title = ''),
    Object.defineProperty(this, '_title', {
      writable: !0,
      enumerable: !1
    }),
    (this._highlightTimeout = 0),
    Object.defineProperty(this, '_highlightTimeout', {
      writable: !0,
      enumerable: !1
    }),
    (this._contentView = null),
    Object.defineProperty(this, '_contentView', {
      writable: !0,
      enumerable: !1
    }),
    (this._dimOverlay = null),
    Object.defineProperty(this, '_dimOverlay', {
      writable: !0,
      enumerable: !1
    }),
    (this.contentLoaded = !1);
}

function UTConsumablesHubView() {
  UTView.call(this);
}

function UTConsumablesHubViewController() {
  UTViewController.call(this), (this._viewmodel = null);
}

function UTCustomItemsHubView() {
  UTView.call(this);
}

function UTCustomItemsHubViewController() {
  UTViewController.call(this), (this._viewmodel = null);
}

function UTClubHubView() {
  UTView.call(this), this._generate();
}

function UTClubHubViewController() {
  UTViewController.call(this), (this._viewmodel = new viewmodels.Club([]));
}

function UTGoToLinkController() {
  UTObject.call(this), (this._nc = null);
}

function UTUnassignedItemsViewModel(e) {
  viewmodels.ItemSectionList.call(this, e),
    (this._requests = []),
    Object.defineProperty(this, '_permutation', {
      writable: !0,
      enumerable: !1
    }),
    this.setSection(
      UTUnassignedItemsViewModel.SECTION.ITEMS,
      function(e) {
        return e.isMovable() || e.isMiscItem();
      },
      UTUnassignedItemsViewModel.SECTION.ITEMS
    ),
    this.setSection(
      UTUnassignedItemsViewModel.SECTION.DUPLICATES,
      function(e) {
        return !e.isMovable() && !e.isMiscItem();
      },
      UTUnassignedItemsViewModel.SECTION.DUPLICATES
    ),
    this._organizeItems();
}
utils.JS.inherits(components.ListDataPlaystyle, UTView),
  (components.ListDataPlaystyle.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('list-data-playstyle'), e.classList.add('styleView');
      var t = document.createElement('ul'),
        i = document.createElement('li');
      (this.__label1 = document.createElement('span')),
        this.__label1.classList.add('Pace'),
        this.__label1.classList.add('statLabel'),
        i.appendChild(this.__label1),
        (this._chevronSet1 = new UTItemStatChevronsView()),
        i.appendChild(this._chevronSet1.getRootElement()),
        t.appendChild(i);
      var s = document.createElement('li');
      (this.__label2 = document.createElement('span')),
        this.__label2.classList.add('Shooting'),
        this.__label2.classList.add('statLabel'),
        s.appendChild(this.__label2),
        (this._chevronSet2 = new UTItemStatChevronsView()),
        s.appendChild(this._chevronSet2.getRootElement()),
        t.appendChild(s);
      var n = document.createElement('li');
      (this.__label3 = document.createElement('span')),
        this.__label3.classList.add('Passing'),
        this.__label3.classList.add('statLabel'),
        n.appendChild(this.__label3),
        (this._chevronSet3 = new UTItemStatChevronsView()),
        n.appendChild(this._chevronSet3.getRootElement()),
        t.appendChild(n);
      var o = document.createElement('li');
      (this.__label4 = document.createElement('span')),
        this.__label4.classList.add('Dibbling'),
        this.__label4.classList.add('statLabel'),
        o.appendChild(this.__label4),
        (this._chevronSet4 = new UTItemStatChevronsView()),
        o.appendChild(this._chevronSet4.getRootElement()),
        t.appendChild(o);
      var a = document.createElement('li');
      (this.__label5 = document.createElement('span')),
        this.__label5.classList.add('Defending'),
        this.__label5.classList.add('statLabel'),
        a.appendChild(this.__label5),
        (this._chevronSet5 = new UTItemStatChevronsView()),
        a.appendChild(this._chevronSet5.getRootElement()),
        t.appendChild(a);
      var r = document.createElement('li');
      (this.__label6 = document.createElement('span')),
        this.__label6.classList.add('Header'),
        this.__label6.classList.add('statLabel'),
        r.appendChild(this.__label6),
        (this._chevronSet6 = new UTItemStatChevronsView()),
        r.appendChild(this._chevronSet6.getRootElement()),
        t.appendChild(r),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ListDataPlaystyle.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__label1 = null),
      this._chevronSet1.destroy(),
      (this.__label2 = null),
      this._chevronSet2.destroy(),
      (this.__label3 = null),
      this._chevronSet3.destroy(),
      (this.__label4 = null),
      this._chevronSet4.destroy(),
      (this.__label5 = null),
      this._chevronSet5.destroy(),
      (this.__label6 = null),
      this._chevronSet6.destroy();
  }),
  (components.ListDataPlaystyle.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ListDataPlaystyle.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ListDataPlaystyle.prototype.render = function render(e) {
    var t = e.isPlayer() ? e.playStyle : e.subtype,
      i = e.isPlayer() ? e.isGK() : e.isGKStyleModifier(),
      s = repositories.PlayStyle.getPlayStyleBonusById(t, i);
    this._applyChevrons(s),
      (this.__label1.textContent = services.Localization.localize(
        i ? 'cards.cardfront.divingAbbr' : 'cards.cardfront.paceAbbr'
      )),
      (this.__label2.textContent = services.Localization.localize(
        i ? 'cards.cardfront.handlingAbbr' : 'cards.cardfront.shootingAbbr'
      )),
      (this.__label3.textContent = services.Localization.localize(
        i ? 'cards.cardfront.kickAbbr' : 'cards.cardfront.passingAbbr'
      )),
      (this.__label4.textContent = services.Localization.localize(
        i ? 'cards.cardfront.reflexAbbr' : 'cards.cardfront.dribblingAbbr'
      )),
      (this.__label5.textContent = services.Localization.localize(
        i ? 'cards.cardfront.speedAbbr' : 'cards.cardfront.defendingAbbr'
      )),
      (this.__label6.textContent = services.Localization.localize(
        i ? 'cards.cardfront.positionAbbr' : 'cards.cardfront.headingAbbr'
      ));
  }),
  (components.ListDataPlaystyle.prototype.update = function update(e) {}),
  (components.ListDataPlaystyle.prototype._applyChevrons = function _applyChevrons(
    e
  ) {
    e.slice(0, 6).forEach(function applyChevrons(e, t) {
      var i = this['_chevronSet' + (t + 1)];
      i && (i.setChevronCount(e), i.setChemistryBoost(e));
      var s = this['__label' + (t + 1)];
      s && DOMKit.toggleClass(s, 'chemBoost', 0 < e);
    }, this);
  }),
  utils.JS.inherits(UTListDataPlayerStatsView, UTView),
  (UTListDataPlayerStatsView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('player-stats-data-component');
      var t = document.createElement('ul'),
        i = document.createElement('li'),
        s = document.createElement('span');
      s.classList.add('label'), i.appendChild(s);
      var n = document.createElement('span');
      n.classList.add('value'), i.appendChild(n), t.appendChild(i);
      var o = document.createElement('li'),
        a = document.createElement('span');
      a.classList.add('label'), o.appendChild(a);
      var r = document.createElement('span');
      r.classList.add('value'), o.appendChild(r), t.appendChild(o);
      var l = document.createElement('li'),
        c = document.createElement('span');
      c.classList.add('label'), l.appendChild(c);
      var u = document.createElement('span');
      u.classList.add('value'), l.appendChild(u), t.appendChild(l);
      var d = document.createElement('li'),
        h = document.createElement('span');
      h.classList.add('label'), d.appendChild(h);
      var p = document.createElement('span');
      p.classList.add('value'), d.appendChild(p), t.appendChild(d);
      var _ = document.createElement('li'),
        m = document.createElement('span');
      m.classList.add('label'), _.appendChild(m);
      var g = document.createElement('span');
      g.classList.add('value'), _.appendChild(g), t.appendChild(_);
      var T = document.createElement('li'),
        S = document.createElement('span');
      S.classList.add('label'), T.appendChild(S);
      var C = document.createElement('span');
      C.classList.add('value'),
        T.appendChild(C),
        t.appendChild(T),
        e.appendChild(t),
        (this.__slotPosition = document.createElement('span')),
        this.__slotPosition.classList.add('slot-position'),
        e.appendChild(this.__slotPosition),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTListDataPlayerStatsView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__slotPosition = null);
  }),
  (UTListDataPlayerStatsView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTListDataPlayerStatsView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTListDataPlayerStatsView.prototype.setSlotData = function setSlotData(e) {
    this.slotData = e || null;
  }),
  (UTListDataPlayerStatsView.prototype.setComparisonData = function setComparisonData(
    e
  ) {
    this.comparisonData = e;
  }),
  (UTListDataPlayerStatsView.prototype.render = function render(e) {
    var t = e.getAttributes(),
      i = this.getRoot().find('li'),
      s = this.getRoot().find('.label'),
      n = this.getRoot().find('.value'),
      o = e.isGK()
        ? enums.Localization.STATS_LABELS_GK
        : enums.Localization.STATS_LABELS_PLAYER;

    function limitToMax(e) {
      return 99 < e ? 99 : e;
    }
    var a,
      r = 0;
    for (r = 0; r < t.length; r++)
      e.isValid()
        ? ((s.get(r).innerHTML = services.Localization.localize(o[r])),
          (n.get(r).innerHTML = t[r]))
        : ((s.get(r).innerHTML = ''), (n.get(r).innerHTML = ''));
    if (
      (s.removeClass('statIncrease statDecrease'),
      n.removeClass('statIncrease statDecrease'),
      utils.JS.isValid(this.comparisonData) &&
        this.comparisonData.isValid() &&
        e.compareType(this.comparisonData))
    ) {
      var l,
        c,
        u = t.slice(),
        d = this.comparisonData.getStaticData(),
        h = '',
        p = this.comparisonData.getAttributes();
      if (
        this.comparisonData.isPlayer() &&
        e.isPlayer() &&
        this.comparisonData.isGK() === e.isGK()
      )
        for (r = 0; r < t.length; r++)
          t[r] !== p[r] &&
            ((h = t[r] > p[r] ? 'statIncrease' : 'statDecrease'),
            s.eq(r).addClass(h),
            n.eq(r).addClass(h));
      else if (
        this.comparisonData.isPlayerTraining() ||
        this.comparisonData.isGKTraining()
      ) {
        if (e.hasTraining()) {
          var _ = e.getAppliedTrainingItem(),
            m = _.getStaticData();
          if (
            ((l = m.amount),
            (c = m.trainedAttribute),
            _.isAllAttributeTraining())
          )
            for (r = 0; r < t.length; r++) u[r] -= l;
          else u[c] -= l;
        }
        if (
          ((l = d.amount),
          (c = d.trainedAttribute),
          this.comparisonData.isAllAttributeTraining())
        )
          for (r = 0; r < t.length; r++) u[r] = limitToMax(u[r] + l);
        else u[c] = limitToMax(u[c] + l);
        for (r = 0; r < t.length; r++) {
          var g = u[r],
            T = t[r];
          (h = T < g ? 'statIncrease' : g < T ? 'statDecrease' : ''),
            s.eq(r).addClass(h),
            n.eq(r).addClass(h),
            (n.get(r).innerHTML = g);
        }
      }
    }
    if (e.hasTraining())
      for (
        a =
          e.getBoostLevel() === enums.ItemRatingTier.GOLD
            ? components.ItemFUTBase.QUALITY.GOLD
            : e.getBoostLevel() === enums.ItemRatingTier.SILVER
            ? components.ItemFUTBase.QUALITY.SILVER
            : components.ItemFUTBase.QUALITY.BRONZE,
          r = 0;
        r < t.length;
        ++r
      )
        e.isAttributeBoosted(r) && i.eq(r).addClass(a);
    if (
      utils.JS.isValid(this.slotData) &&
      utils.JS.isValid(this.slotData.getUniquePosition())
    ) {
      var S = this.slotData.getGeneralPosition();
      utils.JS.isValid(S) &&
        ((this.__slotPosition.textContent = utils.FUTLocalization.getLocalizedPositionStringById(
          S
        )),
        DOMKit.addClass(
          this.__slotPosition,
          this.getZoneClass(this.slotData.getGeneralPosition())
        ));
    }
  }),
  (UTListDataPlayerStatsView.prototype.update = function update(e) {}),
  (UTListDataPlayerStatsView.prototype.getZoneClass = function getZoneClass(e) {
    var t = enums.SquadPositionZones[e],
      i = 0;
    for (i = 0; i < this._zoneClasses.length; i++)
      if (this._zoneClasses[i].zone === t)
        return this._zoneClasses[i].zoneClass;
    return '';
  }),
  (components.ListDataString = function() {
    (this.string = ''), this._generate();
  }),
  (components.ListDataString.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('dataString'),
        (this.__str = document.createElement('span')),
        this.__str.classList.add('subtype'),
        e.appendChild(this.__str),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ListDataString.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__str = null);
  }),
  (components.ListDataString.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ListDataString.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ListDataString.prototype.render = function() {
    this.__str.textContent = this.string;
  }),
  (components.ListDataString.prototype.update = function() {}),
  (components.ListDataString.prototype.destroy = function() {
    this.destroyGeneratedElements();
  }),
  (components.ListDataString.prototype.setString = function(e) {
    this.string = e;
  }),
  (components.ListDataString.prototype.getString = function() {
    return this.string;
  }),
  NamespaceManager.Register('components'),
  (components.ListDataContracts = function() {
    (this._comparisonData = null), this._generate();
  }),
  (components.ListDataContracts.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('contracts-data-component'),
        (this.__label = document.createElement('span')),
        e.appendChild(this.__label),
        (this.__delta = document.createElement('span')),
        this.__delta.classList.add('statIncrease'),
        e.appendChild(this.__delta),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ListDataContracts.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__label = null),
      (this.__delta = null);
  }),
  (components.ListDataContracts.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ListDataContracts.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ListDataContracts.prototype.init = function init() {}),
  (components.ListDataContracts.prototype.destroy = function destroy() {
    (this._comparisonData = null), this.destroyGeneratedElements();
  }),
  (components.ListDataContracts.prototype.render = function render(e) {
    if (
      ((this.__label.textContent = services.Localization.localize(
        'listdata.contracts',
        [e.contract]
      )),
      this._comparisonData && this._comparisonData.isContract())
    ) {
      var t,
        i = this._comparisonData.getStaticData();
      (t = e.isBronzeRating()
        ? i.bronzeBoost
        : e.isSilverRating()
        ? i.silverBoost
        : i.goldBoost),
        (this.__delta.textContent = ' +' + t);
    }
  }),
  (components.ListDataContracts.prototype.setComparisonData = function setComparisonData(
    e
  ) {
    this._comparisonData = e;
  }),
  (components.ListDataContracts.prototype.update = function update(e) {}),
  utils.JS.inherits(UTListDataFitnessView, UTView),
  (UTListDataFitnessView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      (this.__label = document.createElement('span')),
        e.appendChild(this.__label),
        (this.__delta = document.createElement('span')),
        this.__delta.classList.add('statIncrease'),
        e.appendChild(this.__delta),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTListDataFitnessView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__label = null),
      (this.__delta = null);
  }),
  (UTListDataFitnessView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTListDataFitnessView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTListDataFitnessView.prototype.dealloc = function dealloc() {
    (this._comparisonData = null), this.superclass();
  }),
  (UTListDataFitnessView.prototype.render = function render(e) {
    if (
      ((this.__label.textContent = services.Localization.localize(
        'listdata.fitness',
        [e.fitness]
      )),
      utils.JS.isValid(this._comparisonData) &&
        this._comparisonData.isFitness())
    ) {
      var t = this._comparisonData.getStaticData(),
        i = t.amount - Math.max(t.amount + e.fitness - 99, 0);
      this.__delta.textContent = ' +' + i;
    }
  }),
  (UTListDataFitnessView.prototype.setComparisonData = function setComparisonData(
    e
  ) {
    this._comparisonData = e;
  }),
  (UTListDataFitnessView.prototype.update = function update(e) {}),
  NamespaceManager.Register('components'),
  (components.ListDataPlayerPosition = function() {
    (this._comparisonData = null), this._generate();
  }),
  (components.ListDataPlayerPosition.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      (this.__label = document.createElement('span')),
        e.appendChild(this.__label),
        (this.__delta = document.createElement('span')),
        this.__delta.classList.add('statIncrease'),
        e.appendChild(this.__delta),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ListDataPlayerPosition.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__label = null),
      (this.__delta = null);
  }),
  (components.ListDataPlayerPosition.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ListDataPlayerPosition.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ListDataPlayerPosition.prototype.init = function init() {}),
  (components.ListDataPlayerPosition.prototype.destroy = function destroy() {
    (this._comparisonData = null), this.destroyGeneratedElements();
  }),
  (components.ListDataPlayerPosition.prototype.render = function render(e) {
    var t = services.Localization.localize(
      'extendedPlayerInfo.positions.position' + e.preferredPosition
    );
    if (
      ((this.__label.textContent = services.Localization.localize(
        'listdata.change',
        [t]
      )),
      utils.JS.isValid(this._comparisonData) &&
        this._comparisonData.isPlayerPositionModifier())
    ) {
      var i = this._comparisonData.getStaticData(),
        s = utils.FUTLocalization.getLocalizedPositionStringByName(
          i.trainPosTo
        );
      this.__delta.textContent = ' ' + s;
    }
  }),
  (components.ListDataPlayerPosition.prototype.setComparisonData = function setComparisonData(
    e
  ) {
    this._comparisonData = e;
  }),
  (components.ListDataPlayerPosition.prototype.update = function update(e) {}),
  NamespaceManager.Register('utils'),
  (utils.FUTLocalization = {}),
  (utils.FUTLocalization.getNationNameById = function getNationNameById(e) {
    return services.Localization.localize('search.nationName.nation' + e);
  }),
  (utils.FUTLocalization.getNationAbb3ById = function getNationAbb3ById(e) {
    return services.Localization.localize('nationAbbrvByID_' + e);
  }),
  (utils.FUTLocalization.getNationAbb12ById = function getNationAbb12ById(e) {
    return services.Localization.localize('search.nationAbbr12.nation' + e);
  }),
  (utils.FUTLocalization.getFormationByName = function getFormationByName(e) {
    return services.Localization.localize('global.formation.' + e);
  }),
  (utils.FUTLocalization.getPlaystyleByID = function getPlaystyleByID(e, t) {
    return 0 < e
      ? services.Localization.localize('playstyles.playstyle' + e)
      : services.Localization.localize('playstyles.invalid.playstyle0');
  }),
  (utils.FUTLocalization.getTeamAbb3ByID = function getTeamAbb3ByID(e, t) {
    return services.Localization.localize(
      'global.teamabbr3.' + APP_YEAR + '.team' + e
    );
  }),
  (utils.FUTLocalization.getTeamAbb15ByID = function getTeamAbb15ByID(e, t) {
    return services.Localization.localize(
      'global.teamabbr15.' + APP_YEAR + '.team' + e
    );
  }),
  (utils.FUTLocalization.getLeagueAbbr5ByID = function getLeagueAbbr5ByID(
    e,
    t
  ) {
    return services.Localization.localize(
      'global.leagueabbr5.' + APP_YEAR + '.league' + e
    );
  }),
  (utils.FUTLocalization.getLeagueNameByID = function getLeagueNameByID(e, t) {
    return services.Localization.localize(
      'global.leagueabbr15.' + APP_YEAR + '.league' + e
    );
  }),
  (utils.FUTLocalization.getStaffAttribute = function getStaffAttribute(e, t) {
    var i = '';
    switch (e) {
      case enums.ItemType.HEAD_COACH:
        i = services.Localization.localize(
          [
            'headcoach.pace',
            'headcoach.shooting',
            'headcoach.passing',
            'headcoach.dribbling',
            'headcoach.defending',
            'headcoach.heading'
          ][t]
        );
        break;
      case enums.ItemType.GK_COACH:
        i = services.Localization.localize(
          [
            'gkcoach.diving',
            'gkcoach.handling',
            'gkcoach.kicking',
            'gkcoach.reflexes',
            'gkcoach.speed',
            'gkcoach.positioning'
          ][t]
        );
        break;
      case enums.ItemType.PHYSIO:
        i = services.Localization.localize(
          [
            'physiocoach.head',
            'physiocoach.shoulder',
            'physiocoach.arm',
            'physiocoach.back',
            'physiocoach.hip',
            'physiocoach.leg',
            'physiocoach.foot'
          ][t]
        );
        break;
      case enums.ItemType.FITNESS_COACH:
        i = services.Localization.localize('fitnesscoach.fitness');
        break;
      default:
        window.console.log(
          '[FUTLocalization] getStaffAttribute() reached default state = ' + e
        );
    }
    return i;
  }),
  (utils.FUTLocalization.convertAttributeIdToHALString = function convertAttributeIdToHALString(
    e,
    t
  ) {
    return (
      (t
        ? [
            'Diving',
            'Handling',
            'Kicking',
            'Reflex',
            'Speed',
            'Position',
            'All'
          ]
        : [
            'Pace',
            'Shooting',
            'Passing',
            'Dribbling',
            'Defend',
            'Heading',
            'All'
          ])[e] || ''
    );
  }),
  (utils.FUTLocalization.getStaffAttributeAbbr = function getStaffAttributeAbbr(
    e,
    t
  ) {
    var i = '';
    switch (e) {
      case enums.ItemType.HEAD_COACH:
        i = services.Localization.localize(
          [
            'cards.cardfront.paceAbbr',
            'cards.cardfront.shootingAbbr',
            'cards.cardfront.passingAbbr',
            'cards.cardfront.dribblingAbbr',
            'cards.cardfront.defendingAbbr',
            'cards.cardfront.headingAbbr'
          ][t]
        );
        break;
      case enums.ItemType.GK_COACH:
        i = services.Localization.localize(
          [
            'cards.cardfront.divingAbbr',
            'cards.cardfront.handlingAbbr',
            'cards.cardfront.kickAbbr',
            'cards.cardfront.reflexAbbr',
            'cards.cardfront.speedAbbr',
            'cards.cardfront.positionAbbr'
          ][t]
        );
        break;
      case enums.ItemType.PHYSIO:
        i = services.Localization.localize(
          [
            'physiocoach.head.abbr',
            'physiocoach.shoulder.abbr',
            'physiocoach.arm.abbr',
            'physiocoach.back.abbr',
            'physiocoach.hip.abbr',
            'physiocoach.leg.abbr',
            'physiocoach.foot.abbr'
          ][t]
        );
        break;
      case enums.ItemType.FITNESS_COACH:
        i = services.Localization.localize('fitnesscoach.fitness.abbr');
        break;
      default:
        window.console.log(
          '[FUTLocalization] getStaffAttributeAbbr() reached default state = ' +
            e
        );
    }
    return i;
  }),
  (utils.FUTLocalization.getLocalizedPositionStringByName = function getLocalizedPositionStringByName(
    e
  ) {
    var t = repositories.Squad.getPositionByUniqueName(e);
    return t
      ? services.Localization.localize(
          'extendedPlayerInfo.positions.position' + t.getId().toString()
        )
      : '';
  }),
  (utils.FUTLocalization.getLocalizedPositionStringById = function getLocalizedPositionStringById(
    e
  ) {
    var t = repositories.Squad.getPosition(e);
    return t
      ? services.Localization.localize(
          'extendedPlayerInfo.positions.position' + t.getId().toString()
        )
      : '';
  }),
  (utils.FUTLocalization.getSaveTechniqueString = function getSaveTechniqueString(
    e
  ) {
    return 0 < e
      ? services.Localization.localize(
          'extendedPlayerInfo.saveTechnique.acrobatic'
        )
      : services.Localization.localize(
          'extendedPlayerInfo.saveTechnique.traditional'
        );
  }),
  (utils.FUTLocalization.convertInjuryTypeToText = function convertInjuryTypeToText(
    e
  ) {
    switch (e) {
      case enums.PlayerInjury.NONE:
        return '';
      case enums.PlayerInjury.HEAD:
        return services.Localization.localize('card.desc.healing.head');
      case enums.PlayerInjury.SHOULDER:
        return services.Localization.localize('card.desc.healing.shoulder');
      case enums.PlayerInjury.ARM:
        return services.Localization.localize('card.desc.healing.arm');
      case enums.PlayerInjury.BACK:
        return services.Localization.localize('card.desc.healing.back');
      case enums.PlayerInjury.HIP:
        return services.Localization.localize('card.desc.healing.hip');
      case enums.PlayerInjury.LEG:
        return services.Localization.localize('card.desc.healing.leg');
      case enums.PlayerInjury.FOOT:
        return services.Localization.localize('card.desc.healing.foot');
    }
    return (
      utils.Debug.Assert(
        !1,
        '[FUT Localization - convertInjuryTypeToText] - invalid injuryType: ' +
          e
      ),
      ''
    );
  }),
  NamespaceManager.Register('components'),
  (components.ListDataHealing = function() {
    (this._comparisonData = null), this._generate();
  }),
  (components.ListDataHealing.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      (this.__label = document.createElement('span')),
        e.appendChild(this.__label),
        (this.__delta = document.createElement('span')),
        this.__delta.classList.add('statIncrease'),
        e.appendChild(this.__delta),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ListDataHealing.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__label = null),
      (this.__delta = null);
  }),
  (components.ListDataHealing.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ListDataHealing.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ListDataHealing.prototype.init = function init() {}),
  (components.ListDataHealing.prototype.destroy = function destroy() {
    (this._comparisonData = null), this.destroyGeneratedElements();
  }),
  (components.ListDataHealing.prototype.render = function render(e) {
    if (
      ((this.__label.textContent = services.Localization.localize(
        'listdata.injury',
        [
          utils.FUTLocalization.convertInjuryTypeToText(e.injuryType),
          e.injuryGames
        ]
      )),
      utils.JS.isValid(this._comparisonData) &&
        this._comparisonData.isInjuryHealing())
    ) {
      var t = this._comparisonData.getStaticData(),
        i = e.injuryGames - (t.amount < 0 ? e.injuryGames : t.amount);
      this.__delta.textContent = ' -' + i;
    }
  }),
  (components.ListDataHealing.prototype.setComparisonData = function setComparisonData(
    e
  ) {
    this._comparisonData = e;
  }),
  (components.ListDataHealing.prototype.update = function update(e) {}),
  NamespaceManager.Register('components'),
  (components.ListDataManagerLeague = function() {
    (this._comparisonData = null), this._generate();
  }),
  (components.ListDataManagerLeague.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      (this.__label = document.createElement('span')),
        e.appendChild(this.__label),
        (this.__delta = document.createElement('span')),
        this.__delta.classList.add('statIncrease'),
        e.appendChild(this.__delta),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ListDataManagerLeague.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__label = null),
      (this.__delta = null);
  }),
  (components.ListDataManagerLeague.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ListDataManagerLeague.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ListDataManagerLeague.prototype.init = function init() {}),
  (components.ListDataManagerLeague.prototype.destroy = function destroy() {
    (this._comparisonData = null), this.destroyGeneratedElements();
  }),
  (components.ListDataManagerLeague.prototype.render = function render(e) {
    var t = utils.FUTLocalization.getLeagueNameByID(e.leagueId);
    if (
      ((this.__label.textContent = services.Localization.localize(
        'listdata.change',
        [t]
      )),
      utils.JS.isValid(this._comparisonData) &&
        this._comparisonData.isManagerLeagueModifier())
    ) {
      var i = this._comparisonData.getStaticData(),
        s = utils.FUTLocalization.getLeagueNameByID(i.amount);
      this.__delta.textContent = ' ' + s;
    }
  }),
  (components.ListDataManagerLeague.prototype.setComparisonData = function setComparisonData(
    e
  ) {
    this._comparisonData = e;
  }),
  (components.ListDataManagerLeague.prototype.update = function update(e) {}),
  utils.JS.inherits(UTListActiveTagView, UTView),
  (UTListActiveTagView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('active-tag');
      var t = document.createElement('div');
      t.classList.add('label-container'),
        (this.__activeTagIcon = document.createElement('span')),
        this.__activeTagIcon.classList.add('fut_icon'),
        t.appendChild(this.__activeTagIcon),
        (this.__tagName = document.createElement('span')),
        this.__tagName.classList.add('label'),
        t.appendChild(this.__tagName),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTListActiveTagView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__activeTagIcon = null),
      (this.__tagName = null);
  }),
  (UTListActiveTagView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTListActiveTagView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTListActiveTagView.prototype.render = function render() {
    this.__tagName.textContent = this._string;
  }),
  (UTListActiveTagView.prototype.setString = function setString(e) {
    this._string = e;
  }),
  (UTListActiveTagView.prototype.getString = function getString() {
    return this._string;
  }),
  (UTListActiveTagView.prototype.setIconClass = function setIconClass(e) {
    DOMKit.removeClass(this.__activeTagIcon, this._iconClass),
      DOMKit.addClass(this.__activeTagIcon, e),
      (this._iconClass = e);
  }),
  NamespaceManager.Register('components'),
  (components.ListRowItem = function ItemListRowView() {
    UTTargetActionView.call(this),
      (this.slotData = null),
      (this.comparisonData = null),
      (this.data = null),
      (this._viewDirty = !0),
      (this._dataComponent = null),
      (this._activeTagComponent = null),
      (this._itemComponent = null),
      (this._hasAction = !1),
      (this._tapCallback = null),
      (this._renderMode = enums.UIListItemPriority.DEFAULT),
      this._generate();
  }),
  utils.JS.inherits(components.ListRowItem, UTTargetActionView),
  (components.ListRowItem.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('li');
      e.classList.add('listFUTItem'),
        (this._btnAction = new UTImageButtonControl()),
        this._btnAction.getRootElement().classList.add('btnAction'),
        e.appendChild(this._btnAction.getRootElement()),
        (this.__rowContent = document.createElement('div')),
        this.__rowContent.classList.add('rowContent'),
        (this.__entityContainer = document.createElement('div')),
        this.__entityContainer.classList.add('entityContainer'),
        (this.__name = document.createElement('div')),
        this.__name.classList.add('name'),
        this.__entityContainer.appendChild(this.__name),
        this.__rowContent.appendChild(this.__entityContainer),
        (this.__auction = document.createElement('div')),
        this.__auction.classList.add('auction');
      var t = document.createElement('div');
      t.classList.add('auctionStartPrice'),
        t.classList.add('auctionValue'),
        (this.__auctionStartLabel = document.createElement('span')),
        this.__auctionStartLabel.classList.add('label'),
        t.appendChild(this.__auctionStartLabel),
        (this.__auctionStartValue = document.createElement('span')),
        this.__auctionStartValue.classList.add('currency-coins'),
        this.__auctionStartValue.classList.add('value'),
        t.appendChild(this.__auctionStartValue),
        this.__auction.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('auctionValue'),
        (this.__auctionBidLabel = document.createElement('span')),
        this.__auctionBidLabel.classList.add('label'),
        i.appendChild(this.__auctionBidLabel),
        (this.__auctionBidValue = document.createElement('span')),
        this.__auctionBidValue.classList.add('currency-coins'),
        this.__auctionBidValue.classList.add('value'),
        i.appendChild(this.__auctionBidValue),
        this.__auction.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('auctionValue'),
        (this.__auctionBuyLabel = document.createElement('span')),
        this.__auctionBuyLabel.classList.add('label'),
        s.appendChild(this.__auctionBuyLabel),
        (this.__auctionBuyValue = document.createElement('span')),
        this.__auctionBuyValue.classList.add('currency-coins'),
        this.__auctionBuyValue.classList.add('value'),
        s.appendChild(this.__auctionBuyValue),
        this.__auction.appendChild(s);
      var n = document.createElement('div');
      n.classList.add('auction-state'),
        (this.__auctionTimeLabel = document.createElement('span')),
        this.__auctionTimeLabel.classList.add('label'),
        n.appendChild(this.__auctionTimeLabel),
        (this.__auctionTime = document.createElement('span')),
        this.__auctionTime.classList.add('time'),
        n.appendChild(this.__auctionTime),
        this.__auction.appendChild(n),
        this.__rowContent.appendChild(this.__auction),
        e.appendChild(this.__rowContent),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ListRowItem.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._btnAction.destroy(),
      (this.__rowContent = null),
      (this.__entityContainer = null),
      (this.__name = null),
      (this.__auction = null),
      (this.__auctionStartLabel = null),
      (this.__auctionStartValue = null),
      (this.__auctionBidLabel = null),
      (this.__auctionBidValue = null),
      (this.__auctionBuyLabel = null),
      (this.__auctionBuyValue = null),
      (this.__auctionTimeLabel = null),
      (this.__auctionTime = null);
  }),
  (components.ListRowItem.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ListRowItem.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ListRowItem.CLASS = {
    HAS_AUCTION_DATA: 'has-auction-data',
    SBC: 'sbc',
    HAS_ACTION: 'hasAction',
    WON: 'won',
    EXPIRED: 'expired',
    OUTBID: 'outbid',
    HIGHEST_BID: 'highest-bid',
    PROCESSING: 'processing',
    CHEMISTRY_STYLE: 'chemistryStyle'
  }),
  (components.ListRowItem.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (components.ListRowItem.prototype.dealloc = function dealloc() {
    utils.JS.isValid(this._itemComponent) &&
      (this._itemComponent.dealloc(), (this._itemComponent = null)),
      utils.JS.isValid(this._activeTagComponent) &&
        (this._activeTagComponent.destroy(), (this._activeTagComponent = null)),
      utils.JS.isValid(this._dataComponent) &&
        (this._dataComponent.destroy(), (this._dataComponent = null)),
      utils.JS.isValid(this.data) &&
        this.data.getAuctionData().onDataUpdated.unobserve(this),
      (this.data = null),
      (this.slotData = null),
      (this.comparisonData = null),
      (this._tapCallback = null),
      (this._actionCallback = null),
      (this._renderMode = null),
      this.superclass();
  }),
  (components.ListRowItem.prototype.setData = function setData(e, t, i) {
    utils.JS.isValid(this.data) &&
      this.data.getAuctionData().onDataUpdated.unobserve(this),
      (this._renderMode = i || enums.UIListItemPriority.DEFAULT),
      (this._viewDirty = !0),
      (this.data = e),
      (this.slotData = t || null),
      this.data
        .getAuctionData()
        .onDataUpdated.observe(this, this._eAuctionUpdated),
      this.setInteractionState(!0);
  }),
  (components.ListRowItem.prototype.getData = function getData() {
    return this.data;
  }),
  (components.ListRowItem.prototype.setComparisonData = function setComparisonData(
    e
  ) {
    this.comparisonData = e;
  }),
  (components.ListRowItem.prototype.setDataComponent = function setDataComponent(
    e
  ) {
    this._dataComponent = e;
  }),
  (components.ListRowItem.prototype.setActiveTagComponent = function setActiveTagComponent(
    e
  ) {
    this._activeTagComponent = e;
  }),
  (components.ListRowItem.prototype.setAction = function setAction(e, t) {
    utils.Debug.Assert(
      !this._hasAction,
      '[ListRowItem::setAction] Action already set.'
    ),
      this._hasAction ||
        ((this._actionCallback = t),
        this.addClass(enums.UIListRowState.HAS_ACTION),
        this._btnAction.addClass(e),
        this._btnAction.addTarget(this, this._actionCallback, enums.Event.TAP),
        this._btnAction.init(),
        (this._hasAction = !0));
  }),
  (components.ListRowItem.prototype.setActionState = function setActionState(
    e
  ) {
    e ? this.enableAction() : this.disableAction();
  }),
  (components.ListRowItem.prototype.disableAction = function disableAction() {
    this._btnAction.setInteractionState(!1);
  }),
  (components.ListRowItem.prototype.enableAction = function enableAction() {
    this._btnAction.setInteractionState(!0);
  }),
  (components.ListRowItem.prototype.render = function render() {
    utils.Debug.Assert(
      utils.JS.isValid(this.data),
      'Missing item data in list row component.'
    );
    var e = this.getData(),
      t = utils.JS.isValid(this._itemComponent);
    (t && this._itemComponent.canRender(e)) ||
      (t && this._itemComponent.destroy(),
      (this._itemComponent = factories.ItemView.createSmallItem(e)),
      this._itemComponent.init(),
      this.__entityContainer.insertBefore(
        this._itemComponent.getRootElement(),
        this.__entityContainer.firstChild
      )),
      this.renderItemData(),
      this._itemComponent.render(e),
      this.renderName(),
      utils.JS.isValid(this._dataComponent) &&
        this._viewDirty &&
        (this._dataComponent.destroy(), (this._dataComponent = null)),
      utils.JS.isValid(this._dataComponent)
        ? this._updateDataComponent(
            this._dataComponent,
            this.data,
            this.comparisonData,
            this.slotData
          )
        : this.setDataComponent(
            this._generateDataComponent(
              this.data,
              this.comparisonData,
              this.slotData
            )
          ),
      utils.JS.isValid(this._activeTagComponent) ||
        this.setActiveTagComponent(this._generateActiveTagComponent(this.data)),
      utils.JS.isValid(this.slotData) &&
        !this.slotData.isValid() &&
        this.data.isPlayer() &&
        (this.__name.textContent = enums.Localization.BLANK_STR),
      utils.JS.isValid(this._dataComponent) &&
        (this.__entityContainer.appendChild(
          this._dataComponent.getRootElement()
        ),
        this._dataComponent.render(e)),
      utils.JS.isValid(this._activeTagComponent) &&
        (this.addClass(enums.UIListRowState.IS_ACTIVE_SQUAD),
        this.__rowContent.appendChild(
          this._activeTagComponent.getRootElement()
        ),
        this._activeTagComponent.render(e)),
      this._highlightUnassignedBought(),
      (this._viewDirty = !1),
      this.onTimedUpdate();
  }),
  (components.ListRowItem.prototype.renderItemData = function renderItemData() {
    switch (this._renderMode) {
      case enums.UIListItemPriority.DEFAULT:
        var e = this.getData().getAuctionData();
        if (
          services.Configuration.checkFeatureEnabled(
            enums.ServerFeature.TRADING_ENABLED
          ) &&
          e.isValid()
        ) {
          (this.__auctionTimeLabel.textContent = services.Localization.localize(
            'auctioninfo.timeremaining.condensed'
          )),
            this.addClass(components.ListRowItem.CLASS.HAS_AUCTION_DATA);
          var t = 0 < e.currentBid ? e.currentBid : e.startingBid;
          (this.__auctionBidLabel.textContent = services.Localization.localize(
            'auctioninfo.currentbid.condensed'
          )),
            (this.__auctionBidValue.textContent = services.Localization.localizeNumber(
              t
            )),
            (this.__auctionStartLabel.textContent = services.Localization.localize(
              'auctioninfo.startprice'
            )),
            (this.__auctionStartValue.textContent = services.Localization.localizeNumber(
              e.startingBid
            )),
            0 === e.buyNowPrice
              ? (DOMKit.toggleDisplayStyle(this.__auctionBuyLabel, !1),
                DOMKit.toggleDisplayStyle(this.__auctionBuyValue, !1))
              : ((this.__auctionBuyLabel.textContent = services.Localization.localize(
                  'auctioninfo.buynowprice.condensed'
                )),
                (this.__auctionBuyValue.textContent = services.Localization.localizeNumber(
                  e.buyNowPrice
                ))),
            this._itemComponent.renderAuctionState(e);
        } else
          this.removeClass(components.ListRowItem.CLASS.HAS_AUCTION_DATA),
            DOMKit.toggleDisplayStyle(this.__auction, !1);
        break;
      default:
        this.removeClass(components.ListRowItem.CLASS.HAS_AUCTION_DATA),
          DOMKit.toggleDisplayStyle(this.__auction, !1);
    }
  }),
  (components.ListRowItem.prototype.setSelected = function setSelected(e) {
    this.toggleClass(enums.UIListRowState.SELECTED, e);
  }),
  (components.ListRowItem.prototype.renderName = function renderName() {
    var e = this.getData(),
      t = e.getStaticData(),
      i = enums.Localization.BLANK_STR;
    if (e.isBadge() || e.isKit())
      i = utils.FUTLocalization.getTeamAbb15ByID(e.teamId, e.getYear());
    else if (e.isBall()) i = services.Localization.localize(t.description);
    else if (e.isManagerContract())
      i = services.Localization.localize('card.title.managercontracts');
    else if (e.isPlayerContract())
      i = services.Localization.localize('card.title.playercontracts');
    else if (e.isTeamFitness())
      i = services.Localization.localize('card.title.squadfitness');
    else if (e.isPlayerFitness())
      i = services.Localization.localize('card.title.playerfitness');
    else if (e.isInjuryHealing())
      switch (e.subtype) {
        case enums.ItemSubType.HEALING_HEAD:
          i = services.Localization.localize('card.desc.healing.head');
          break;
        case enums.ItemSubType.HEALING_SHOULDER:
          i = services.Localization.localize('card.desc.healing.shoulder');
          break;
        case enums.ItemSubType.HEALING_ARM:
          i = services.Localization.localize('card.desc.healing.arm');
          break;
        case enums.ItemSubType.HEALING_BACK:
          i = services.Localization.localize('card.desc.healing.back');
          break;
        case enums.ItemSubType.HEALING_HIP:
          i = services.Localization.localize('card.desc.healing.hip');
          break;
        case enums.ItemSubType.HEALING_LEG:
          i = services.Localization.localize('card.desc.healing.leg');
          break;
        case enums.ItemSubType.HEALING_FOOT:
          i = services.Localization.localize('card.desc.healing.foot');
          break;
        case enums.ItemSubType.HEALING_ALL:
          i = services.Localization.localize('list.healing.all.injuries');
          break;
        default:
          i = services.Localization.localize('card.title.healing');
      }
    else if (e.isPlayer() || e.isStaff()) i = t.name;
    else if (e.isTifo() || e.isBanner() || e.isCelebration())
      i = services.Localization.localize(t.name);
    else if (e.isMiscItem())
      if (e.isFreeCoins())
        i = services.Localization.localize('card.desc.misc.coins', [t.amount]);
      else if (e.isDraftToken())
        i = services.Localization.localize('card.desc.misc.drafttoken');
      else if (e.isFreePack())
        if (t.hasLoanPackDescription())
          i = services.Localization.localize('card.desc.FreeLoanPackDesc');
        else
          switch (t.assetId) {
            case utils.AssetLocator.ASSET_ID_BRONZE_PACK:
              i = services.Localization.localize('card.desc.freebronze');
              break;
            case utils.AssetLocator.ASSET_ID_SILVER_PACK:
              i = services.Localization.localize('card.desc.freesilver');
              break;
            case utils.AssetLocator.ASSET_ID_GOLD_PACK:
              i = services.Localization.localize('card.desc.freegold');
          }
      else
        e.isPlayerPickItem() &&
          (i = services.Localization.localize('card.desc.misc.draftitem'));
    else if (e.isStadium()) i = t.description;
    else if (e.isStyleModifier())
      i = utils.FUTLocalization.getPlaystyleByID(e.subtype);
    else if (e.isAllAttributeTraining())
      i = services.Localization.localize('card.desc.training.all.attributes');
    else if (e.isPlayerTraining()) {
      var s = utils.FUTLocalization.convertAttributeIdToHALString(
        t.trainedAttribute,
        !1
      );
      i = services.Localization.localize('card.desc.training.attrib.' + s);
    } else if (e.isGKTraining()) {
      var n = utils.FUTLocalization.convertAttributeIdToHALString(
        t.trainedAttribute,
        !0
      );
      i = services.Localization.localize('card.desc.training.gkattrib.' + n);
    } else
      e.isPlayerPositionModifier()
        ? (i = services.Localization.localize(
            'card.desc.training.pos.' + t.trainPosFrom + '_' + t.trainPosTo
          ))
        : e.isManagerLeagueModifier() &&
          (i = services.Localization.localize(
            'global.leagueFull.' + APP_YEAR + '.league' + e.leagueId
          ));
    (this.__auctionTime.textContent = enums.Localization.BLANK_STR),
      (this.__name.textContent = i);
  }),
  (components.ListRowItem.prototype.onTimedUpdate = function onTimedUpdate() {
    var e = this.getData();
    utils.JS.isValid(this._dataComponent) && this._dataComponent.update(e),
      this._renderAuctionState();
  }),
  (components.ListRowItem.prototype._renderAuctionState = function _renderAuctionState() {
    var e = this.getData().getAuctionData(),
      t = [
        components.ListRowItem.CLASS.WON,
        components.ListRowItem.CLASS.EXPIRED,
        components.ListRowItem.CLASS.HIGHEST_BID,
        components.ListRowItem.CLASS.OUTBID,
        components.ListRowItem.CLASS.PROCESSING
      ].join(' ');
    switch (
      (this.removeClass(t),
      this._itemComponent.removeClass(t),
      this._renderMode)
    ) {
      case enums.UIListItemPriority.DEFAULT:
        if (
          services.Configuration.checkFeatureEnabled(
            enums.ServerFeature.TRADING_ENABLED
          ) &&
          e.isValid()
        ) {
          if (e.getSecondsRemaining() <= 0) {
            e.isWon() || e.isSold()
              ? this.addClass(components.ListRowItem.CLASS.WON)
              : e.isPendingExpiry()
              ? e.isOutbid()
                ? this.addClass(components.ListRowItem.CLASS.OUTBID)
                : e.isHighestBid() &&
                  this.addClass(components.ListRowItem.CLASS.HIGHEST_BID)
              : this.addClass(components.ListRowItem.CLASS.EXPIRED);
            var i = e.isPendingExpiry()
              ? 'auctioninfo.timeremaining.pending.condensed'
              : 'watchlist.dock.categories.expired.condensed';
            (this.__auctionTime.textContent = services.Localization.localize(
              i
            )),
              DOMKit.removeClass(this.__auctionTime, 'expiring alarm-txt');
          } else {
            var s = e.getSecondsRemaining();
            (this.__auctionTime.textContent = services.Localization.localizeAuctionTimeRemaining(
              s
            )),
              0 < s && s < AUCTION_COUNTDOWN_FLASING_THRESHOLD
                ? (DOMKit.addClass(this.__auctionTime, 'alarm-txt'),
                  s <= AUCTION_COUNTDOWN_ALERT_THRESHOLD &&
                    DOMKit.addClass(this.__auctionTime, 'expiring'))
                : DOMKit.removeClass(this.__auctionTime, 'expiring alarm-txt'),
              e.isWon()
                ? this.addClass(components.ListRowItem.CLASS.WON)
                : e.isOutbid()
                ? this.addClass(components.ListRowItem.CLASS.OUTBID)
                : e.isHighestBid() &&
                  this.addClass(components.ListRowItem.CLASS.HIGHEST_BID);
          }
          var n = 0 < e.currentBid ? e.currentBid : e.startingBid;
          this.__auctionBidValue.textContent = services.Localization.localizeNumber(
            n
          );
        } else
          DOMKit.toggleDisplayStyle(this.__auction, !1),
            this._highlightUnassignedBought();
        this._itemComponent.renderAuctionState(e),
          DOMKit.toggleClass(
            this.__name,
            'watchIcon',
            !e.tradeOwner && e.watched && !e.isWon()
          );
        break;
      default:
        this.removeClass(components.ListRowItem.CLASS.HAS_AUCTION_DATA),
          this._highlightUnassignedBought(),
          DOMKit.toggleDisplayStyle(this.__auction, !1);
    }
  }),
  (components.ListRowItem.prototype._highlightUnassignedBought = function _highlightUnassignedBought() {
    var e =
      this.data.pile === enums.FUTItemPile.PURCHASED &&
      0 < this.data.lastSalePrice;
    this.toggleClass(enums.UIListRowState.IS_WON, e);
  }),
  (components.ListRowItem.prototype._updateDataComponent = function _updateDataComponent(
    e,
    t,
    i,
    s
  ) {
    t.isPlayer() && e instanceof UTListDataPlayerStatsView
      ? (e.setSlotData(s), e.setComparisonData(i))
      : e.update(t);
  }),
  (components.ListRowItem.prototype._generateActiveTagComponent = function _generateActiveTagComponent(
    e
  ) {
    var t = null;
    if (e.isActiveClubItem()) {
      (t = new UTListActiveTagView()).setIconClass(enums.UIIconClass.CLUB);
      var i = services.Localization.localize(
        'listrow.clubitem.active'
      ).toUpperCase();
      e.isKit() &&
        (e.state === enums.ItemState.ACTIVE_HOME_KIT
          ? (i +=
              ' - ' + services.Localization.localize('card.desc.homekitcaps'))
          : e.state === enums.ItemState.ACTIVE_AWAY_KIT &&
            (i +=
              ' - ' + services.Localization.localize('card.desc.awaykitcaps'))),
        t.setString(i);
    }
    return t;
  }),
  (components.ListRowItem.prototype._generateDataComponent = function _generateDataComponent(
    e,
    t,
    i
  ) {
    var s = null,
      n = e.getStaticData();
    if (utils.JS.isValid(t) && t.isConsumable() && !t.canApplyTo(e))
      this.disableAction(),
        (s = new components.ListDataString()),
        e.isManager()
          ? s.setString(
              services.Localization.localize(
                'panel.applyitem.invaliditem_manager'
              )
            )
          : e.isPlayer() &&
            s.setString(
              services.Localization.localize('panel.applyitem.invaliditem')
            ),
        s.getRoot().addClass('unapplicableConsumable');
    else if (e.isStyleModifier())
      (s = new components.ListDataPlaystyle()),
        this.addClass(components.ListRowItem.CLASS.CHEMISTRY_STYLE);
    else if (
      utils.JS.isValid(t) &&
      t.isContract() &&
      (e.isPlayer() || e.isManager())
    )
      (s = new components.ListDataContracts()).setComparisonData(t);
    else if (
      utils.JS.isValid(t) &&
      t.isManagerLeagueModifier() &&
      e.isManager()
    )
      (s = new components.ListDataManagerLeague()).setComparisonData(t);
    else if (utils.JS.isValid(t) && t.isConsumable() && e.isPlayer())
      t.isFitness()
        ? (s = new UTListDataFitnessView()).setComparisonData(t)
        : t.isPlayerPositionModifier()
        ? (s = new components.ListDataPlayerPosition()).setComparisonData(t)
        : t.isInjuryHealing()
        ? (s = new components.ListDataHealing()).setComparisonData(t)
        : t.isStyleModifier()
        ? ((s = new components.ListDataPlaystyle()),
          this.addClass(components.ListRowItem.CLASS.CHEMISTRY_STYLE))
        : t.isTraining() &&
          (s = new UTListDataPlayerStatsView()).setComparisonData(t);
    else if (e.isPlayer())
      (s = new UTListDataPlayerStatsView()).setSlotData(i),
        s.setComparisonData(t);
    else if (e.isHealth())
      (s = new components.ListDataString()).setString(
        '+' + services.Localization.localizeNumber(n.amount)
      );
    else if (e.isTraining()) {
      var o = '';
      e.isGKTraining() || e.isPlayerTraining()
        ? (o = ' +' + services.Localization.localizeNumber(n.amount))
        : e.isPlayerPositionModifier()
        ? (o = '')
        : e.isManagerLeagueModifier() &&
          (o =
            ' +' +
            utils.FUTLocalization.getLeagueAbbr5ByID(e.leagueId, e.getYear())),
        (s = new components.ListDataString()).setString(o);
    } else if (
      e.isStadium() &&
      (e.bannerRestricted || e.tifoRestricted) &&
      !e.getAuctionData().isValid()
    ) {
      var a = [];
      e.bannerRestricted &&
        a.push(services.Localization.localize('card.desc.banner')),
        e.tifoRestricted &&
          a.push(services.Localization.localize('card.desc.tifo'));
      var r = services.Localization.isRTL() ? a.join(' ,') : a.join(', '),
        l = services.Localization.localize('listrow.stadium.restricted', [r]);
      (s = new components.ListDataString()).setString(l);
    }
    return (
      DOMKit.toggleClass(
        this.__name,
        'untradeable',
        (e.untradeable && !e.getAuctionData().isSold()) || e.isLoaned()
      ),
      s
    );
  }),
  (components.ListRowItem.prototype.setTapCallback = function setTapCallback(
    e
  ) {
    (this._tapCallback = e),
      DOMKit.addClass(this.__rowContent, enums.UIListRowState.HAS_TAP_CALLBACK);
  }),
  (components.ListRowItem.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(),
      e.target === this.__rowContent &&
        DOMKit.addClass(this.__rowContent, enums.UIState.ACTIVE);
  }),
  (components.ListRowItem.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(),
      e.target === this.__rowContent &&
        DOMKit.removeClass(this.__rowContent, enums.UIState.ACTIVE);
  }),
  (components.ListRowItem.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(),
      e.target === this.__rowContent &&
        DOMKit.removeClass(this.__rowContent, enums.UIState.ACTIVE);
  }),
  (components.ListRowItem.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(),
      utils.JS.isFunction(this._tapCallback) && this._tapCallback(this.data);
  }),
  (components.ListRowItem.prototype._eAuctionUpdated = function _eAuctionUpdated(
    e,
    t
  ) {
    this._itemComponent && this.renderItemData(), this._renderAuctionState();
  }),
  NamespaceManager.Register('views.lists'),
  (views.lists.PinnedListItem = function PinnedListItem() {
    UTView.call(this), (this._pinnedListItem = null), this._generate();
  }),
  utils.JS.inherits(views.lists.PinnedListItem, UTView),
  (views.lists.PinnedListItem.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-pinned-item'),
        (this._btnLeft = new UTFlatButtonControl()),
        this._btnLeft.getRootElement().classList.add('btn-left'),
        e.appendChild(this._btnLeft.getRootElement()),
        (this.__list = document.createElement('ul')),
        e.appendChild(this.__list),
        (this._btnRight = new UTFlatButtonControl()),
        this._btnRight.getRootElement().classList.add('btn-right'),
        e.appendChild(this._btnRight.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.lists.PinnedListItem.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._btnLeft.destroy(),
      (this.__list = null),
      this._btnRight.destroy();
  }),
  (views.lists.PinnedListItem.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.lists.PinnedListItem.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.lists.PinnedListItem.prototype.dealloc = function dealloc() {
    utils.JS.isValid(this._pinnedListItem) &&
      (this._pinnedListItem.destroy(), (this._pinnedListItem = null)),
      this.superclass();
  }),
  (views.lists.PinnedListItem.prototype.init = function init() {
    this._btnRight.init(), this._btnLeft.init();
  }),
  (views.lists.PinnedListItem.prototype.getBtnRight = function getBtnRight() {
    return this._btnRight;
  }),
  (views.lists.PinnedListItem.prototype.getBtnLeft = function getBtnLeft() {
    return this._btnLeft;
  }),
  (views.lists.PinnedListItem.prototype.setHasIterator = function setHasIterator(
    e
  ) {
    this.getRoot().toggleClass(enums.UIPinnedListItem.HAS_ITERATOR, e);
  }),
  (views.lists.PinnedListItem.prototype.setHasNext = function setHasNext(e) {
    this._btnRight.setDisplay(e);
  }),
  (views.lists.PinnedListItem.prototype.setHasPrev = function setHasPrev(e) {
    this._btnLeft.setDisplay(e);
  }),
  (views.lists.PinnedListItem.prototype.pinListItem = function pinListItem(
    e,
    t
  ) {
    utils.JS.isValid(this._pinnedListItem)
      ? (this._pinnedListItem.setData(e, t), this._pinnedListItem.render())
      : ((this._pinnedListItem = new components.ListRowItem()),
        this._pinnedListItem.setData(e, t),
        this._pinnedListItem.render(),
        this.__list.appendChild(this._pinnedListItem.getRootElement()));
  }),
  (views.lists.PinnedListItem.prototype.onTimedUpdate = function onTimedUpdate() {
    utils.JS.isValid(this._pinnedListItem) &&
      this._pinnedListItem.onTimedUpdate();
  }),
  (views.lists.PinnedListItem.prototype.refreshItem = function refreshItem() {
    utils.JS.isValid(this._pinnedListItem) && this._pinnedListItem.render();
  }),
  utils.JS.inherits(UTToggleControl, UTControl),
  (UTToggleControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-toggle-control');
      var t = document.createElement('div');
      t.classList.add('ut-toggle-control--track'), e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('ut-toggle-control--grip'),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTToggleControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTToggleControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTToggleControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTToggleControl.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTToggleControl.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    var t = this._interactionState;
    this.superclass(e),
      this._interactionState !== t &&
        this.toggleClass(enums.UIState.DISABLED, !this._interactionState);
  }),
  (UTToggleControl.prototype.toggle = function toggle(e) {
    var t = utils.JS.isBoolean(e) ? e : !this._toggled;
    return (
      t !== this._toggled &&
        ((this._toggled = t), this.toggleClass('toggled', this._toggled)),
      this._toggled
    );
  }),
  (UTToggleControl.prototype.getToggleState = function getToggleState() {
    return this._toggled;
  }),
  (UTToggleControl.prototype._tapDetected = function _tapDetected(e) {
    this.getEventDelegate()
      ? this.superclass(e)
      : this.isInteractionEnabled() &&
        (this.toggle(),
        this._triggerActions(enums.Event.TAP, {
          toggleState: this._toggled
        }));
  }),
  utils.JS.inherits(UTToggleCellView, UTTargetActionView),
  (UTToggleCellView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-toggle-cell-view'),
        (this.__label = document.createElement('span')),
        this.__label.classList.add('ut-toggle-cell-view--label'),
        e.appendChild(this.__label),
        (this._toggle = new UTToggleControl()),
        e.appendChild(this._toggle.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTToggleCellView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__label = null),
      this._toggle.destroy();
  }),
  (UTToggleCellView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTToggleCellView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTToggleCellView.prototype.init = function init() {
    this.superclass(),
      this._toggle.init(),
      this._toggle.setEventDelegate(this),
      this.setInteractionState(!0);
  }),
  (UTToggleCellView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    this.superclass(e), this._toggle.setInteractionState(e);
  }),
  (UTToggleCellView.prototype.setLabel = function setLabel(e) {
    this.__label.textContent = e;
  }),
  (UTToggleCellView.prototype.getToggleState = function getToggleState() {
    return this._toggle.getToggleState();
  }),
  (UTToggleCellView.prototype.toggle = function toggle(e) {
    return this._toggle.toggle(e);
  }),
  (UTToggleCellView.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(e),
      this.isInteractionEnabled() &&
        (this.toggle(),
        this._triggerActions(enums.Event.TAP, {
          toggleState: this._toggle.getToggleState()
        }));
  }),
  utils.JS.inherits(UTToggleControlGroupView, UTTargetActionView),
  (UTToggleControlGroupView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-toggle-control-group-view'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTToggleControlGroupView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTToggleControlGroupView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTToggleControlGroupView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTToggleControlGroupView.prototype.dealloc = function dealloc() {
    this.getSubviews().forEach(function(e) {
      e.dealloc();
    }),
      this.removeSliders(),
      this.superclass();
  }),
  (UTToggleControlGroupView.prototype.setInteractionState = function setInteractionState(
    t
  ) {
    this.superclass(t),
      this.getSubviews().forEach(function(e) {
        e.setInteractionState(t);
      });
  }),
  (UTToggleControlGroupView.prototype.addSlider = function addSlider(e, t) {
    if (this._toggles.has(e))
      utils.Debug.Assert(!1, 'Toggle control already exists with ID: ' + e);
    else {
      var i = new UTToggleCellView();
      i.init(),
        i.setLabel(t),
        i.addTarget(this, this._handleToggleChange, enums.Event.TAP),
        this._toggles.set(e, i),
        this.addSubview(i);
    }
  }),
  (UTToggleControlGroupView.prototype.toggleSlider = function toggleSlider(
    e,
    t
  ) {
    var i = this._toggles.get(e);
    i && i.toggle(t);
  }),
  (UTToggleControlGroupView.prototype.setSliderInteractionState = function setSliderInteractionState(
    e,
    t
  ) {
    var i = this._toggles.get(e);
    i && i.setInteractionState(t);
  }),
  (UTToggleControlGroupView.prototype.removeSliders = function removeSliders() {
    this.removeSubviews(), this._toggles.clear();
  }),
  (UTToggleControlGroupView.prototype._handleToggleChange = function _handleToggleChange(
    t,
    e,
    i
  ) {
    var s = this._toggles.keys().filter(
      function(e) {
        return this._toggles.get(e) === t;
      }.bind(this)
    )[0];
    this._triggerActions(enums.Event.CHANGE, {
      id: s,
      checked: i.toggleState
    });
  }),
  (UTToggleControlGroupView.prototype.reset = function reset() {
    this._toggles.forEach(function(e) {
      e.toggle(!1);
    });
  }),
  NamespaceManager.Register('views.club'),
  (views.club.ClubSearchFilters = function ClubSearchFiltersView() {
    UTView.call(this),
      (this._pinnedItemView = null),
      (this.onSearchModeChange = new UTObservable()),
      Object.defineProperty(this, 'onSearchModeChange', {
        writable: !1,
        enumerable: !0
      }),
      (this.onFilterChange = new UTObservable()),
      Object.defineProperty(this, 'onFilterChange', {
        writable: !1,
        enumerable: !0
      }),
      this._generate();
  }),
  utils.JS.inherits(views.club.ClubSearchFilters, UTView),
  (views.club.ClubSearchFilters.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-club-search-filters-view');
      var t = document.createElement('div');
      t.classList.add('ut-pinned-list-container'),
        t.classList.add('ut-content-container'),
        (this.__searchContainer = document.createElement('div')),
        this.__searchContainer.classList.add('ut-content');
      var i = document.createElement('div');
      i.classList.add('ut-pinned-list'),
        (this.__sortContainer = document.createElement('div')),
        this.__sortContainer.classList.add('sort-filter-container'),
        (this.__filterTitle = document.createElement('h4')),
        this.__sortContainer.appendChild(this.__filterTitle),
        (this._sortOptions = new UTToggleControlGroupView()),
        this.__sortContainer.appendChild(this._sortOptions.getRootElement()),
        (this.__sortTitle = document.createElement('h4')),
        this.__sortContainer.appendChild(this.__sortTitle),
        (this._sortDropDown = new UTDropDownControl()),
        this.__sortContainer.appendChild(this._sortDropDown.getRootElement()),
        i.appendChild(this.__sortContainer),
        (this._filterContainer = new views.items.ItemSearch()),
        this._filterContainer
          .getRootElement()
          .classList.add('filter-container'),
        i.appendChild(this._filterContainer.getRootElement()),
        this.__searchContainer.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('button-container'),
        (this._btnReset = new UTStandardButtonControl()),
        s.appendChild(this._btnReset.getRootElement()),
        (this._btnSearch = new UTStandardButtonControl()),
        this._btnSearch.getRootElement().classList.add('call-to-action'),
        s.appendChild(this._btnSearch.getRootElement()),
        this.__searchContainer.appendChild(s),
        t.appendChild(this.__searchContainer),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.club.ClubSearchFilters.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__searchContainer = null),
      (this.__sortContainer = null),
      (this.__filterTitle = null),
      this._sortOptions.destroy(),
      (this.__sortTitle = null),
      this._sortDropDown.destroy(),
      this._filterContainer.destroy(),
      this._btnReset.destroy(),
      this._btnSearch.destroy();
  }),
  (views.club.ClubSearchFilters.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.club.ClubSearchFilters.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.club.ClubSearchFilters.prototype.init = function init() {
    this.superclass(),
      this._btnReset.init(),
      this._btnReset.setText(
        services.Localization.localize('search.pagination.reset')
      ),
      this._btnSearch.init(),
      this._btnSearch.setText(services.Localization.localize('button.search')),
      this._filterContainer.init(),
      this._filterContainer.onSearchModeChange.observe(
        this,
        this._eSearchModeChanged
      ),
      this._filterContainer.onFilterChange.observe(this, this._eFilterChanged),
      (this.__filterTitle.textContent = services.Localization.localize(
        'search.sort.filterBy'
      )),
      (this.__sortTitle.textContent = services.Localization.localize(
        'search.sort.sortBy'
      ));
  }),
  (views.club.ClubSearchFilters.prototype.dealloc = function dealloc() {
    this.onSearchModeChange.dealloc(),
      this.onFilterChange.dealloc(),
      this._filterContainer.onSearchModeChange.unobserve(this),
      this._filterContainer.onFilterChange.unobserve(this),
      this.superclass(),
      (this._pinnedItemView = null);
  }),
  (views.club.ClubSearchFilters.prototype.setupSortOptions = function setupSortOptions(
    e,
    t
  ) {
    e || t
      ? ((this.__filterTitle.style.display = ''),
        this._sortOptions.init(),
        e &&
          this._sortOptions.addSlider(
            enums.UISortOptionType.UNTRADEABLE,
            services.Localization.localize('search.sort.header')
          ),
        t &&
          this._sortOptions.addSlider(
            enums.UISortOptionType.EXCLUDE_SQUAD,
            services.Localization.localize('search.sort.squadPlayers')
          ),
        this._sortOptions.layoutSubviews())
      : (this._sortOptions.setDisplay(!1),
        (this.__filterTitle.style.display = 'none')),
      this._sortDropDown.init(),
      this._sortDropDown.setOptions(factories.DataProvider.getSortTypeDP());
  }),
  (views.club.ClubSearchFilters.prototype.toggleExcludeSquadSlider = function toggleExcludeSquadSlider(
    e
  ) {
    this._sortOptions.setSliderInteractionState(
      enums.UISortOptionType.EXCLUDE_SQUAD,
      e
    ),
      e ||
        this._sortOptions.toggleSlider(enums.UISortOptionType.EXCLUDE_SQUAD, e);
  }),
  (views.club.ClubSearchFilters.prototype.togglePileFilter = function togglePileFilter(
    e
  ) {
    this._filterContainer.togglePileFilter(e);
  }),
  (views.club.ClubSearchFilters.prototype.setPileFilter = function setPileFilter(
    e,
    t
  ) {
    this._filterContainer.setPileFilter(e, t);
  }),
  (views.club.ClubSearchFilters.prototype.setSearchTypeImage = function setSearchTypeImage(
    e
  ) {
    this._filterContainer.setPileFilterImage(e);
  }),
  (views.club.ClubSearchFilters.prototype.appendPinnedItemView = function appendPinnedItemView(
    e
  ) {
    (this._pinnedItemView = e),
      this.__searchContainer.insertBefore(
        e.getRootElement(),
        this.__searchContainer.firstChild
      );
  }),
  (views.club.ClubSearchFilters.prototype.setPlayerSearch = function setPlayerSearch(
    e
  ) {
    this._filterContainer.setPlayerSearch(e);
  }),
  (views.club.ClubSearchFilters.prototype.resetPlayerName = function resetPlayerName() {
    this._filterContainer.resetPlayerName();
  }),
  (views.club.ClubSearchFilters.prototype.togglePlayerNameRow = function togglePlayerNameRow(
    e
  ) {
    this._filterContainer.togglePlayerNameRow(e);
  }),
  (views.club.ClubSearchFilters.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    this._btnSearch.setInteractionState(e),
      this._btnReset.setInteractionState(e),
      this._filterContainer.setInteractionState(e),
      this._sortOptions.setInteractionState(e),
      this.superclass(e);
  }),
  (views.club.ClubSearchFilters.prototype.setFilters = function setFilters(
    e,
    t
  ) {
    this._filterContainer.setFilters(e, t),
      this._filterContainer.togglePlayerNameRow(
        e.searchCriteria.type === enums.SearchType.PLAYER && !e.isMarketSearch
      );
  }),
  (views.club.ClubSearchFilters.prototype.setFilterValue = function setFilterValue(
    e,
    t
  ) {
    this._filterContainer.setFilterValue(e, t);
  }),
  (views.club.ClubSearchFilters.prototype.setFilterDefaultValue = function setFilterDefaultValue(
    e,
    t
  ) {
    this._filterContainer.setFilterDefaultValue(e, t);
  }),
  (views.club.ClubSearchFilters.prototype.setFilterLock = function setFilterValue(
    e,
    t
  ) {
    this._filterContainer.setFilterLock(e, t);
  }),
  (views.club.ClubSearchFilters.prototype.getSortOptions = function getSortOptions() {
    return this._sortOptions;
  }),
  (views.club.ClubSearchFilters.prototype.getSortDropDown = function getSortDropDown() {
    return this._sortDropDown;
  }),
  (views.club.ClubSearchFilters.prototype.getSearchButton = function getSearchButton() {
    return this._btnSearch;
  }),
  (views.club.ClubSearchFilters.prototype.getResetButton = function getResetButton() {
    return this._btnReset;
  }),
  (views.club.ClubSearchFilters.prototype.getPlayerNameSearch = function getPlayerNameSearch() {
    return this._filterContainer.getPlayerNameSearch();
  }),
  (views.club.ClubSearchFilters.prototype._eSearchModeChanged = function _eSearchModeChanged(
    e,
    t
  ) {
    this.onSearchModeChange.notify(t);
  }),
  (views.club.ClubSearchFilters.prototype._eFilterChanged = function _eFilterChanged(
    e,
    t,
    i,
    s
  ) {
    this.onFilterChange.notify(t, i, s);
  }),
  NamespaceManager.Register('viewmodels'),
  (viewmodels.ItemSearch = function ItemSearchViewmodel() {
    UTViewModel.call(this),
      (this.searchFeature = enums.ItemSearchFeature.CLUB),
      (this.searchCriteria = new transferobjects.SearchCriteria()),
      Object.defineProperty(this, 'searchCriteria', {
        writable: !1,
        enumerable: !0
      }),
      (this.playerData = null),
      (this.defaultSearchCriteria = new transferobjects.SearchCriteria()),
      Object.defineProperty(this, 'defaultSearchCriteria', {
        writable: !1,
        enumerable: !0
      }),
      (this.isMarketSearch = !1),
      Object.defineProperty(this, 'isMarketSearch', {
        get: function() {
          return this.searchFeature === enums.ItemSearchFeature.MARKET;
        },
        enumerable: !0
      }),
      (this.sort = enums.SearchSort.DESCENDING),
      Object.defineProperty(this, 'sort', {
        get: function() {
          return this.searchCriteria.sort;
        },
        set: function(e) {
          this.searchCriteria.sort = e;
        }
      }),
      (this.defaultSearchCriteria.type = enums.SearchType.PLAYER),
      (this.searchCriteria.type = enums.SearchType.PLAYER);
  }),
  utils.JS.inherits(viewmodels.ItemSearch, UTViewModel),
  (viewmodels.ItemSearch.prototype.resetSearch = function resetSearch() {
    this.clearPlayerData(),
      this.updateSearchCriteria(this.defaultSearchCriteria);
  }),
  (viewmodels.ItemSearch.prototype.updateSearchCriteria = function updateSearchCriteria(
    e
  ) {
    this.searchCriteria.update(e);
    var t = 0;
    this.searchCriteria.hasValidDefId()
      ? (t = this.searchCriteria.defId[0])
      : this.isMarketSearch &&
        0 < this.searchCriteria.maskedDefId &&
        (t = this.searchCriteria.maskedDefId),
      0 < t
        ? (this.playerData = repositories.Item.getStaticDataByDefId(t))
        : this.clearPlayerData();
  }),
  (viewmodels.ItemSearch.prototype.setPlayerData = function setPlayerData(e) {
    (this.playerData = e),
      this.isMarketSearch
        ? (this.searchCriteria.maskedDefId = e.id)
        : (this.searchCriteria.defId = [e.id]);
  }),
  (viewmodels.ItemSearch.prototype.clearPlayerData = function clearPlayerData() {
    (this.playerData = null), this.searchCriteria.resetDefId();
  }),
  (viewmodels.ItemSearch.prototype.getBucketFromType = function getBucketFromType(
    e
  ) {
    switch (e) {
      case enums.SearchType.ANY:
      case enums.SearchType.PLAYER:
        return enums.SearchBucket.PLAYER;
      case enums.SearchType.STAFF:
        return enums.SearchBucket.STAFF;
      case enums.SearchType.STADIUM:
      case enums.SearchType.BALL:
      case enums.SearchType.CLUB_INFO:
        return enums.SearchBucket.CLUB;
      case enums.SearchType.CONSUMABLES_TRAINING:
      case enums.SearchType.CONSUMABLES_DEVELOPMENT:
        return enums.SearchBucket.CONSUMABLE;
    }
    return enums.SearchBucket.PLAYER;
  }),
  (viewmodels.ItemSearch.prototype.updateFromFilterChange = function updateFromFilterChange(
    e,
    t,
    i
  ) {
    var s = this.searchCriteria;
    switch (e) {
      case enums.UISearchFilters.TYPE:
        switch (i) {
          case enums.SearchType.PLAYER:
          case enums.SearchType.STAFF:
          case enums.SearchType.CONSUMABLES_TRAINING:
          case enums.SearchType.CONSUMABLES_DEVELOPMENT:
          case enums.SearchType.STADIUM:
          case enums.SearchType.BALL:
            s.type = i;
            break;
          case enums.SearchCategory.ANY:
          case enums.SearchCategory.MANAGER:
          case enums.SearchCategory.COACH_HEAD:
          case enums.SearchCategory.COACH_GK:
          case enums.SearchCategory.COACH_FITNESS:
          case enums.SearchCategory.PHYSIO:
          case enums.SearchCategory.POSITION:
          case enums.SearchCategory.PLAYSTYLE:
          case enums.SearchCategory.PLAYER_TRAINING:
          case enums.SearchCategory.GK_TRAINING:
          case enums.SearchCategory.MANAGER_LEAGUE:
          case enums.SearchCategory.CONTRACT:
          case enums.SearchCategory.FITNESS:
          case enums.SearchCategory.HEALING:
          case enums.SearchCategory.KIT:
          case enums.SearchCategory.BADGE:
            s.category = i;
            break;
          default:
            utils.Debug.Assert(!1, 'Invalid search category: ' + i);
        }
        break;
      case enums.UISearchFilters.POSITION:
        if (i === enums.SearchType.ANY)
          (s.zone = enums.SearchType.ANY), (s.position = enums.SearchType.ANY);
        else {
          var n = this._generatePositionSearchDataFromId(t);
          'zone' === n.label
            ? (s.zone = n.value || enums.SearchType.ANY)
            : (s.position = n.value || enums.SearchType.ANY);
        }
        break;
      case enums.UISearchFilters.POSITION_MOD:
        s.position = i;
        break;
      case enums.UISearchFilters.LEVEL:
        s.level = i;
        break;
      case enums.UISearchFilters.PLAYSTYLE:
        s.playStyle = t;
        break;
      case enums.UISearchFilters.LEAGUE:
        (s.league = t), (s.club = -1);
        break;
      case enums.UISearchFilters.NATION:
        s.nation = t;
        break;
      case enums.UISearchFilters.CLUB:
        s.club = t;
    }
  }),
  (viewmodels.ItemSearch.prototype.requestActiveSquadDefIds = function requestActiveSquadDefIds() {
    var s = new UTObservable();
    return (
      this._trackRequest(s, !0),
      services.Squad.requestSquadById(
        services.Squad.getActiveSquadId()
      ).observe(this, function _onActiveSquadRequested(e, t) {
        e.unobserve(this);
        var i = {
          defIds: []
        };
        (i.defIds = t.success
          ? t.data.squad.getPlayers().map(function(e) {
              return e.getItem().getDefId();
            }, this)
          : []),
          (t.data = i),
          s.notify(t);
      }),
      s
    );
  }),
  (viewmodels.ItemSearch.prototype._generatePositionSearchDataFromId = function _generatePositionSearchDataFromId(
    t
  ) {
    -1 === t && (t = 1);
    var e = {
        value: '',
        label: ''
      },
      i = utils.JS.find(PLAYER_ZONE_LOOKUP, function(e) {
        return e.id === t;
      });
    if (i) (e.value = i.value), (e.label = 'zone');
    else {
      var s = repositories.Squad.getPosition(t);
      (e.value = s ? s.getName() : ''), (e.label = 'pos');
    }
    return e;
  }),
  utils.JS.inherits(UTMyClubSearchFiltersViewController, UTViewController),
  (UTMyClubSearchFiltersViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      e
        .getSearchButton()
        .addTarget(this, this._eSearchSelected, enums.Event.TAP),
        e
          .getResetButton()
          .addTarget(this, this._eResetSelected, enums.Event.TAP),
        e
          .getPlayerNameSearch()
          .addTarget(this, this._ePlayerNameChange, enums.Event.CHANGE),
        e
          .getSortOptions()
          .addTarget(this, this._eSortToggled, enums.Event.CHANGE),
        e
          .getSortDropDown()
          .addTarget(this, this._eDropDownChanged, enums.Event.CHANGE),
        e.onFilterChange.observe(this, this._eFilterChanged),
        e.setupSortOptions(
          !0,
          !!this._searchCriteria &&
            this._searchCriteria.type === enums.SearchType.PLAYER
        );
    }
  }),
  (UTMyClubSearchFiltersViewController.prototype.initWithSearchCriteria = function initWithSearchCriteria(
    e
  ) {
    this.initialized ||
      ((this._searchCriteria = e),
      this._searchViewmodel.updateSearchCriteria(e),
      (this._searchViewmodel.defaultSearchCriteria.type = e.type),
      (this._searchViewmodel.defaultSearchCriteria.count = e.count),
      e.type !== enums.SearchType.STAFF &&
        (this._searchViewmodel.defaultSearchCriteria.category = e.category),
      this.init());
  }),
  (UTMyClubSearchFiltersViewController.prototype.initWithConsumable = function initWithConsumable(
    e
  ) {
    if (!this.initialized) {
      this._consumable = e;
      var t = this._searchViewmodel.defaultSearchCriteria;
      (this._consumable.isManagerConsumable() ||
        this._consumable.isManagerLeagueModifier()) &&
        ((t.category = enums.SearchCategory.MANAGER),
        this._searchViewmodel.updateSearchCriteria(t)),
        (this._consumable.isPlayerTraining() ||
          this._consumable.isPlayerStyleModifier()) &&
          ((t.zone = ZONE_NO_GK_VALUE),
          (this._searchViewmodel.searchCriteria.zone = ZONE_NO_GK_VALUE)),
        this.init();
    }
  }),
  (UTMyClubSearchFiltersViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this._searchViewmodel = null),
      (this._clubViewmodel = null),
      (this._consumable = null),
      (this._searchCriteria = null);
  }),
  (UTMyClubSearchFiltersViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.club.ClubSearchFilters();
  }),
  (UTMyClubSearchFiltersViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.clubsearch');
  }),
  (UTMyClubSearchFiltersViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    e.setFilters(
      this._searchViewmodel,
      this._searchViewmodel.searchCriteria.zone === ZONE_NO_GK_VALUE
    );
    var t,
      i = this._searchViewmodel.searchCriteria.acquiredDate,
      s = this._searchViewmodel.searchCriteria.sort;
    (t =
      i === enums.SearchSort.DESCENDING
        ? enums.SearchSortType.RECENCY_DESC
        : s === enums.SearchSort.DESCENDING
        ? enums.SearchSortType.VALUE_DESC
        : enums.SearchSortType.VALUE_ASC),
      e.getSortDropDown().setIndexById(t);
    var n = this._searchViewmodel.searchCriteria.type;
    if (
      n === enums.SearchType.STADIUM ||
      n === enums.SearchType.BALL ||
      n === enums.SearchType.CLUB_INFO
    ) {
      var o =
        n === enums.SearchType.CLUB_INFO
          ? this._searchViewmodel.searchCriteria.category
          : n;
      e.setFilterDefaultValue(enums.UISearchFilters.TYPE, o),
        e.setFilterLock(enums.UISearchFilters.TYPE, !0);
    }
    utils.JS.isValid(this._consumable)
      ? (e.pinListItem(this._consumable),
        this._adjustFiltersForConsumable(this._consumable))
      : ((this._searchViewmodel.searchCriteria.untradeables =
          enums.SearchUntradeables.DEFAULT),
        (this._searchViewmodel.searchCriteria.excludeDefIds = []));
  }),
  (UTMyClubSearchFiltersViewController.prototype.setSearchResultViewModel = function setSearchResultViewModel(
    e
  ) {
    this._clubViewmodel = e;
  }),
  (UTMyClubSearchFiltersViewController.prototype._adjustFiltersForConsumable = function _adjustFiltersForConsumable(
    e
  ) {
    var t = this.getView();
    e.isPlayerTraining() || e.isGKTraining()
      ? e.isGKTraining() &&
        (t.setFilterDefaultValue(
          enums.UISearchFilters.POSITION,
          enums.PlayerPositions.GK
        ),
        t.setFilterValue(
          enums.UISearchFilters.POSITION,
          enums.PlayerPositions.GK
        ),
        t.setFilterLock(enums.UISearchFilters.POSITION, !0))
      : e.isManagerContract()
      ? t.setFilterLock(enums.UISearchFilters.TYPE, !0)
      : e.isPlayerPositionModifier()
      ? (t.setFilterDefaultValue(
          enums.UISearchFilters.POSITION,
          e.getStaticData().trainPosFrom
        ),
        t.setFilterValue(
          enums.UISearchFilters.POSITION,
          e.getStaticData().trainPosFrom
        ),
        t.setFilterLock(enums.UISearchFilters.POSITION, !0))
      : e.isStyleModifier()
      ? e.isGKStyleModifier() &&
        (t.setFilterDefaultValue(
          enums.UISearchFilters.POSITION,
          enums.PlayerPositions.GK
        ),
        t.setFilterValue(
          enums.UISearchFilters.POSITION,
          enums.PlayerPositions.GK
        ),
        t.setFilterLock(enums.UISearchFilters.POSITION, !0))
      : e.isManagerLeagueModifier() &&
        t.setFilterLock(enums.UISearchFilters.TYPE, !0);
  }),
  (UTMyClubSearchFiltersViewController.prototype._eSearchSelected = function _eSearchSelected(
    e,
    t,
    i
  ) {
    this._clubViewmodel && this._clubViewmodel.resetCollection([]),
      this._searchCriteria.update(this._searchViewmodel.searchCriteria),
      (this._searchCriteria.offset = 0);
    var s = this.getNavigationController();
    s && s.popViewController();
  }),
  (UTMyClubSearchFiltersViewController.prototype._eResetSelected = function _eResetSelected(
    e,
    t,
    i
  ) {
    this._searchViewmodel.resetSearch();
    var s = this.getView(),
      n = s.getSortDropDown();
    s.setFilters(
      this._searchViewmodel,
      this._searchViewmodel.searchCriteria.zone === ZONE_NO_GK_VALUE
    ),
      s.getPlayerNameSearch().clearInput(),
      s.getSortOptions().reset(),
      n.setIndex(n.getDefaultIndex());
  }),
  (UTMyClubSearchFiltersViewController.prototype._eSortToggled = function _eSortToggled(
    e,
    t,
    i
  ) {
    i.id === enums.UISortOptionType.UNTRADEABLE
      ? (this._searchViewmodel.searchCriteria.untradeables = i.checked
          ? enums.SearchUntradeables.ONLY
          : enums.SearchUntradeables.DEFAULT)
      : i.id === enums.UISortOptionType.EXCLUDE_SQUAD &&
        (i.checked
          ? this._searchViewmodel
              .requestActiveSquadDefIds()
              .observe(this, function(e, t) {
                e.unobserve(this),
                  (this._searchViewmodel.searchCriteria.excludeDefIds =
                    t.data.defIds);
              })
          : (this._searchViewmodel.searchCriteria.excludeDefIds = []));
  }),
  (UTMyClubSearchFiltersViewController.prototype._eDropDownChanged = function _eDropDownChanged(
    e,
    t,
    i
  ) {
    var s = 'Club Search Filters - Sort By DropDown changed to: ';
    switch (e.getId()) {
      case enums.SearchSortType.VALUE_DESC:
        (this._searchViewmodel.searchCriteria.sort = e.getValue()),
          (s += "'Highest Quick Sell'");
        break;
      case enums.SearchSortType.VALUE_ASC:
        (this._searchViewmodel.searchCriteria.sort = e.getValue()),
          (s += "'Lowest Quick Sell'");
        break;
      case enums.SearchSortType.RECENCY_DESC:
        (this._searchViewmodel.searchCriteria.acquiredDate = e.getValue()),
          (s += "'Most Recent'");
        break;
      default:
        utils.Debug.Assert(
          !1,
          'ClubSearchFilters :: Passed an invalid SearchSort Enums.'
        );
    }
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.CLUB,
      TelemetryManager.Categories.FILTER,
      s
    );
  }),
  (UTMyClubSearchFiltersViewController.prototype._eFilterChanged = function _eFilterChanged(
    e,
    t,
    i,
    s
  ) {
    this._searchViewmodel.updateFromFilterChange(t, i, s),
      this.getView().setFilters(
        this._searchViewmodel,
        this._searchViewmodel.searchCriteria.zone === ZONE_NO_GK_VALUE
      );
  }),
  (UTMyClubSearchFiltersViewController.prototype._ePlayerNameChange = function _ePlayerNameChange(
    e,
    t,
    i
  ) {
    var s = this.getView()
        .getPlayerNameSearch()
        .getSelected(),
      n = this.getView();
    utils.JS.isValid(s)
      ? this._searchViewmodel.setPlayerData(s)
      : this._searchViewmodel.clearPlayerData(),
      n.setFilters(this._searchViewmodel),
      utils.JS.isValid(s) &&
        (n.setFilterValue(enums.UISearchFilters.NATION, -1),
        n.setFilterValue(enums.UISearchFilters.LEAGUE, -1),
        n.setFilterValue(enums.UISearchFilters.CLUB, -1));
  }),
  NamespaceManager.Register('controllers.views'),
  (controllers.views.PinnedListItem = function UTPinnedListItemViewController() {
    UTViewController.call(this),
      (this._item = null),
      (this._slot = null),
      (this._iterator = null),
      (this.onItemChange = new UTObservable()),
      Object.defineProperty(this, 'onItemChange', {
        writable: !1
      });
  }),
  utils.JS.inherits(controllers.views.PinnedListItem, UTViewController),
  (controllers.views.PinnedListItem.prototype.init = function init() {
    this.superclass();
    var e = this.getView();
    e.setHasIterator(utils.JS.isValid(this._iterator)),
      e.init(),
      e
        .getBtnRight()
        .addTarget(this, this._ePinnedRightBtnPressed, enums.Event.TAP),
      e
        .getBtnLeft()
        .addTarget(this, this._ePinnedLeftBtnPressed, enums.Event.TAP),
      utils.JS.isValid(this._iterator) &&
        (e.setHasNext(!this._iterator.endOfList),
        e.setHasPrev(!this._iterator.startOfList));
  }),
  (controllers.views.PinnedListItem.prototype.initWithItem = function initWithItem(
    e
  ) {
    this.setItem(e), this.init();
  }),
  (controllers.views.PinnedListItem.prototype.initWithSlot = function initWithItem(
    e
  ) {
    (this._slot = e), this.initWithItem(e.getItem());
  }),
  (controllers.views.PinnedListItem.prototype.initWithIterator = function initWithItem(
    e
  ) {
    (this._iterator = e), this.initWithSlot(e.current());
  }),
  (controllers.views.PinnedListItem.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._item && this._item.getAuctionData().onDataUpdated.unobserve(this),
      (this._view = null),
      (this._item = null),
      (this._slot = null),
      this.onItemChange.dealloc(),
      (this.onItemChange = null);
  }),
  (controllers.views.PinnedListItem.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.lists.PinnedListItem();
  }),
  (controllers.views.PinnedListItem.prototype.setItem = function setItem(e) {
    this._item && this._item.getAuctionData().onDataUpdated.unobserve(this);
    var t = (this._item = e).getAuctionData();
    this.getView().pinListItem(e, this._slot),
      t.isValid() && t.onDataUpdated.observe(this, this.onTimedUpdate);
  }),
  (controllers.views.PinnedListItem.prototype.getItem = function getItem() {
    return this._item;
  }),
  (controllers.views.PinnedListItem.prototype.setSlot = function setSlot(e) {
    (this._slot = e), this.setItem(this._slot.getItem());
  }),
  (controllers.views.PinnedListItem.prototype.getSlot = function getSlot() {
    return this._slot;
  }),
  (controllers.views.PinnedListItem.prototype.viewDidAppear = function viewDidAppear() {
    if ((this.superclass(), utils.JS.isValid(this._iterator))) {
      var e = this.getView();
      e.setHasNext(-1 !== this._getNextIndex(this._iterator)),
        e.setHasPrev(-1 !== this._getPrevIndex(this._iterator));
    }
  }),
  (controllers.views.PinnedListItem.prototype._ePinnedLeftBtnPressed = function _ePinnedLeftBtnPressed(
    e,
    t,
    i
  ) {
    if (utils.JS.isValid(this._iterator) && !this._iterator.startOfList) {
      this._iterator.setIndex(this._getPrevIndex(this._iterator));
      var s = this._iterator.current();
      this.setSlot(s),
        this.getView().setHasNext(-1 !== this._getNextIndex(this._iterator)),
        this.getView().setHasPrev(-1 !== this._getPrevIndex(this._iterator)),
        this.onItemChange.notify(s);
    }
  }),
  (controllers.views.PinnedListItem.prototype._ePinnedRightBtnPressed = function _ePinnedRightBtnPressed(
    e,
    t,
    i
  ) {
    if (utils.JS.isValid(this._iterator) && !this._iterator.endOfList) {
      this._iterator.setIndex(this._getNextIndex(this._iterator));
      var s = this._iterator.current();
      this.setSlot(s),
        this.getView().setHasNext(-1 !== this._getNextIndex(this._iterator)),
        this.getView().setHasPrev(-1 !== this._getPrevIndex(this._iterator)),
        this.onItemChange.notify(s);
    }
  }),
  (controllers.views.PinnedListItem.prototype._getNextIndex = function _getNextIndex(
    e
  ) {
    for (var t = e.getIndex() + 1, i = e.get(t); null !== i; ) {
      if (!i.getItem().isCustomBrick()) return t;
      i = e.get(++t);
    }
    return -1;
  }),
  (controllers.views.PinnedListItem.prototype._getPrevIndex = function _getPrevIndex(
    e
  ) {
    for (var t = e.getIndex() - 1, i = e.get(t); null !== i; ) {
      if (!i.getItem().isCustomBrick()) return t;
      i = e.get(--t);
    }
    return -1;
  }),
  (controllers.views.PinnedListItem.prototype.onTimedUpdate = function onTimedUpdate() {
    this.getView().onTimedUpdate();
  }),
  (controllers.views.PinnedListItem.prototype.refresh = function refresh() {
    this.getView().refreshItem();
  }),
  utils.JS.inherits(UTListNoResultsView, UTView),
  (UTListNoResultsView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-no-results-view');
      var t = document.createElement('div');
      t.classList.add('contents');
      var i = document.createElement('span');
      i.classList.add('no-results-icon'),
        t.appendChild(i),
        (this.__message = document.createElement('h2')),
        t.appendChild(this.__message),
        (this.__description = document.createElement('p')),
        t.appendChild(this.__description),
        (this._button = new UTStandardButtonControl()),
        this._button.getRootElement().classList.add('call-to-action'),
        t.appendChild(this._button.getRootElement()),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTListNoResultsView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__message = null),
      (this.__description = null),
      this._button.destroy();
  }),
  (UTListNoResultsView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTListNoResultsView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTListNoResultsView.prototype.init = function init() {
    this.superclass(), this._button.init(), this._button.setDisplay(!1);
  }),
  (UTListNoResultsView.prototype.setText = function setText(e) {
    this.__message.innerHTML = e;
  }),
  (UTListNoResultsView.prototype.setDescription = function setDescription(e) {
    this.__description.innerHTML = e;
  }),
  (UTListNoResultsView.prototype.setupButton = function setupButton(e, t) {
    utils.JS.isString(e) &&
      utils.JS.isFunction(t) &&
      (this._button.addTarget(this, t, enums.Event.TAP),
      this._button.setText(e),
      this._button.setDisplay(!0));
  }),
  NamespaceManager.Register('views.lists'),
  (views.lists.PaginatedItemList = function UTPaginatedItemListView() {
    UTTargetActionView.call(this),
      (this._listRows = []),
      (this._noResultsView = null),
      (this._paginationDirection = !0);
  }),
  utils.JS.inherits(views.lists.PaginatedItemList, UTTargetActionView),
  (views.lists.PaginatedItemList.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('paginated-item-list'),
        (this.__itemList = document.createElement('ul')),
        e.appendChild(this.__itemList),
        (this.__botPagination = document.createElement('div')),
        this.__botPagination.classList.add('pagingContainer'),
        (this._botPrev = new UTFlatButtonControl()),
        this._botPrev.getRootElement().classList.add('pagination'),
        this._botPrev.getRootElement().classList.add('prev'),
        this.__botPagination.appendChild(this._botPrev.getRootElement()),
        (this._botNext = new UTFlatButtonControl()),
        this._botNext.getRootElement().classList.add('pagination'),
        this._botNext.getRootElement().classList.add('next'),
        this.__botPagination.appendChild(this._botNext.getRootElement()),
        e.appendChild(this.__botPagination),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.lists.PaginatedItemList.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__itemList = null),
      (this.__botPagination = null),
      this._botPrev.destroy(),
      this._botNext.destroy();
  }),
  (views.lists.PaginatedItemList.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.lists.PaginatedItemList.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.lists.PaginatedItemList.prototype.init = function init() {
    this.superclass(),
      this._botPrev.addTarget(this, this._ePreviousPage, enums.Event.TAP),
      this._botPrev.setText(services.Localization.localize('label.prev')),
      this._botPrev.init(),
      this._botNext.addTarget(this, this._eNextPage, enums.Event.TAP),
      this._botNext.setText(services.Localization.localize('label.next')),
      this._botNext.init(),
      this.setPaginationState(!1, !1),
      this.setInteractionState(!0);
  }),
  (views.lists.PaginatedItemList.prototype.dealloc = function dealloc() {
    this._removeListRows(),
      this._noResultsView &&
        (this._noResultsView.destroy(), (this._noResultsView = null)),
      this.superclass();
  }),
  (views.lists.PaginatedItemList.prototype._removeListRows = function _removeListRows() {
    0 < this._listRows.length &&
      (this._listRows.forEach(function(e) {
        e.destroy();
      }),
      (this._listRows = []));
  }),
  (views.lists.PaginatedItemList.prototype.setItems = function setItems(e) {
    return (
      this._removeListRows(),
      e.forEach(function(e) {
        var t = new components.ListRowItem();
        t.setData(e), this._listRows.push(t);
      }, this),
      this._listRows
    );
  }),
  (views.lists.PaginatedItemList.prototype.removeItemsById = function removeItemsById(
    e
  ) {
    e.forEach(function _removeItemById(t) {
      var e = utils.JS.find(this._listRows, function(e) {
        return e.getData().id === t;
      });
      e && (e.destroy(), this._listRows.splice(this._listRows.indexOf(e), 1));
    }, this),
      this._renderItems();
  }),
  (views.lists.PaginatedItemList.prototype._renderItems = function _renderItems() {
    this._listRows.forEach(function(e) {
      e.render(), this.__itemList.appendChild(e.getRootElement());
    }, this),
      this._noResultsView &&
        0 < this._listRows.length &&
        (this._noResultsView.destroy(), (this._noResultsView = null));
  }),
  (views.lists.PaginatedItemList.prototype.renderItems = function renderItems() {
    this._renderItems(),
      (this.__itemList.scrollTop = this._paginationDirection
        ? 0
        : this.__itemList.scrollHeight);
  }),
  (views.lists.PaginatedItemList.prototype.getRows = function getRows() {
    return this._listRows;
  }),
  (views.lists.PaginatedItemList.prototype.setRowTapCallback = function setRowTapCallback(
    t
  ) {
    (t = utils.JS.isFunction(t) ? t : this._eItemSelected.bind(this)),
      this._listRows.forEach(function _setTapCallback(e) {
        e.setTapCallback(t);
      }, this);
  }),
  (views.lists.PaginatedItemList.prototype.setRowActionCallback = function setRowActionCallback(
    i
  ) {
    this._listRows.forEach(function _setActionCallback(e) {
      var t = utils.JS.isFunction(i)
        ? i
        : this._eItemActionSelected.bind(this, e.getData());
      e.setAction(enums.UIRowActionClass.ADD, t);
    }, this);
  }),
  (views.lists.PaginatedItemList.prototype.setComparisonData = function setComparisonData(
    t
  ) {
    this._listRows.forEach(function(e) {
      e.setComparisonData(t), e.render();
    }, this);
  }),
  (views.lists.PaginatedItemList.prototype.setPaginationState = function setPaginationState(
    e,
    t
  ) {
    this._botPrev.setDisplay(e),
      this._botNext.setDisplay(t),
      DOMKit.toggleClass(this.__itemList, 'paginated', e || t),
      DOMKit.toggleDisplayStyle(this.__botPagination, e || t);
  }),
  (views.lists.PaginatedItemList.prototype.render = function render(e, t, i) {
    this.setPaginationState(t, i), this.setItems(e), this.renderItems();
  }),
  (views.lists.PaginatedItemList.prototype.appendEmptyListMessage = function appendEmptyListMessage(
    e,
    t,
    i
  ) {
    this._removeListRows(),
      this._noResultsView && this._noResultsView.destroy(),
      (this._noResultsView = new UTListNoResultsView()),
      this._noResultsView.init(),
      this._noResultsView.setText(e),
      this._noResultsView.setDescription(
        services.Localization.localize('popup.error.noresults.description')
      ),
      t && utils.JS.isFunction(i) && this._noResultsView.setupButton(t, i),
      this.getRoot().append(this._noResultsView.getRoot());
  }),
  (views.lists.PaginatedItemList.prototype.selectRow = function selectRow(t) {
    this._listRows.forEach(function(e) {
      e.setSelected(e.getData().id === t);
    }, this);
  }),
  (views.lists.PaginatedItemList.prototype.onTimedUpdate = function() {
    this._listRows.forEach(function(e) {
      e instanceof components.ListRowItem && e.onTimedUpdate();
    });
  }),
  (views.lists.PaginatedItemList.prototype._ePreviousPage = function _ePreviousPage(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      ((this._paginationDirection = !1),
      this._triggerActions(enums.UIPaginationEvent.PREVIOUS));
  }),
  (views.lists.PaginatedItemList.prototype._eNextPage = function _eNextPage(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      ((this._paginationDirection = !0),
      this._triggerActions(enums.UIPaginationEvent.NEXT));
  }),
  (views.lists.PaginatedItemList.prototype._eItemSelected = function _eItemSelected(
    e
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(enums.UIListEvent.ROW_SELECT, {
        item: e
      });
  }),
  (views.lists.PaginatedItemList.prototype._eItemActionSelected = function _eItemActionSelected(
    e
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(enums.UIListEvent.ROW_ACTION, {
        item: e
      });
  }),
  NamespaceManager.Register('views.club'),
  (views.club.ClubHeader = function ClubItemsSearchHeader() {
    UTView.call(this), this._generate();
  }),
  utils.JS.inherits(views.club.ClubHeader, UTView),
  (views.club.ClubHeader.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-list-header'),
        (this.__imageContainer = document.createElement('span')),
        this.__imageContainer.classList.add('ut-list-header-icon'),
        e.appendChild(this.__imageContainer),
        (this.__title = document.createElement('span')),
        this.__title.classList.add('ut-list-header-title'),
        e.appendChild(this.__title),
        (this.__searchContainer = document.createElement('span')),
        this.__searchContainer.classList.add('ut-list-header-action'),
        (this._btnSearch = new UTStandardButtonControl()),
        this._btnSearch.getRootElement().classList.add('mini'),
        this._btnSearch.getRootElement().classList.add('call-to-action'),
        this.__searchContainer.appendChild(this._btnSearch.getRootElement()),
        e.appendChild(this.__searchContainer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.club.ClubHeader.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__imageContainer = null),
      (this.__title = null),
      (this.__searchContainer = null),
      this._btnSearch.destroy();
  }),
  (views.club.ClubHeader.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.club.ClubHeader.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.club.ClubHeader.prototype.init = function init() {
    this.superclass(),
      this._btnSearch.init(),
      this._btnSearch.setText(services.Localization.localize('button.search'));
  }),
  (views.club.ClubHeader.prototype.getButton = function getButton() {
    return this._btnSearch;
  }),
  (views.club.ClubHeader.prototype.setTitle = function setTitle(e) {
    this.__title.textContent = e;
  }),
  (views.club.ClubHeader.prototype.getTitle = function getTitle() {
    return this.__title.textContent;
  }),
  (views.club.ClubHeader.prototype.setImagesFromImgLoader = function setImagesFromImgLoader(
    e
  ) {
    DOMKit.empty(this.__imageContainer),
      e.forEach(function(e) {
        this.__imageContainer.appendChild(e.getRootElement());
      }, this);
  }),
  (views.club.ClubHeader.prototype.setImagesFromData = function setImagesFromData(
    e
  ) {
    DOMKit.empty(this.__imageContainer),
      e.forEach(function(e) {
        var t = new UTImageView(),
          i = t.getRootElement();
        t.setLocalResource(e.src),
          DOMKit.addClass(i, e.cssClass),
          this.__imageContainer.appendChild(i);
      }, this);
  }),
  (views.club.ClubHeader.prototype.getImageData = function getImageData() {
    var e = [];
    return (
      $('img', this.__imageContainer).each(function() {
        e.push({
          src: this.src,
          cssClass: this.getAttribute('class') || ''
        });
      }),
      e
    );
  }),
  (views.club.ClubHeader.prototype.toggleSearch = function toggleSearch(e) {
    utils.JS.isValid(this.__searchContainer) &&
      DOMKit.toggleDisplayStyle(this.__searchContainer, e);
  }),
  NamespaceManager.Register('views.club'),
  (views.club.ClubSearchResults = function ClubSearchResultsView() {
    UTTargetActionView.call(this),
      (this._pinnedItem = null),
      Object.defineProperty(this, '_pinnedItem', {
        writable: !0,
        enumerable: !1
      }),
      (this._pinnedItemView = null),
      Object.defineProperty(this, '_pinnedItemView', {
        writable: !0,
        enumerable: !1
      }),
      (this._header = null),
      Object.defineProperty(this, '_header', {
        writable: !0,
        enumerable: !1
      }),
      (this.onSearch = new UTObservable()),
      Object.defineProperty(this, 'onSearch', {
        writable: !1,
        enumerable: !0
      }),
      (this._activeSquad = null),
      Object.defineProperty(this, '_activeSquad', {
        writable: !0,
        enumerable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.club.ClubSearchResults, UTTargetActionView),
  (views.club.ClubSearchResults.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-pinned-list-container'),
        e.classList.add('ut-club-search-results-view'),
        (this._list = new views.lists.PaginatedItemList()),
        this._list.getRootElement().classList.add('ut-pinned-list'),
        e.appendChild(this._list.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.club.ClubSearchResults.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._list.destroy();
  }),
  (views.club.ClubSearchResults.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.club.ClubSearchResults.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.club.ClubSearchResults.prototype.init = function init() {
    this.superclass(),
      this._list.init(),
      this._list.addTarget(
        this,
        this._bubbleEvent,
        enums.UIListEvent.ROW_SELECT
      ),
      this._list.addTarget(
        this,
        this._bubbleEvent,
        enums.UIListEvent.ROW_ACTION
      ),
      this._list.addTarget(
        this,
        this._bubbleEvent,
        enums.UIPaginationEvent.NEXT
      ),
      this._list.addTarget(
        this,
        this._bubbleEvent,
        enums.UIPaginationEvent.PREVIOUS
      ),
      this.setInteractionState(!0);
  }),
  (views.club.ClubSearchResults.prototype.dealloc = function dealloc() {
    this._header &&
      (this._header
        .getButton()
        .removeTarget(this.onSearch, this.onSearch.notify, enums.Event.TAP),
      this._header.dealloc(),
      (this._header = null)),
      this.onSearch.dealloc(),
      (this.onSearch = null),
      (this._pinnedItem = null),
      (this._pinnedItemView = null),
      this.superclass();
  }),
  (views.club.ClubSearchResults.prototype.updateListTopPosition = function updateListTopPosition() {
    var e = 0;
    this._header && (e += this._header.getRoot().outerHeight()),
      this._pinnedItemView &&
        (e += this._pinnedItemView.getRoot().outerHeight()),
      this._list.getRoot().css('top', e);
  }),
  (views.club.ClubSearchResults.prototype.setItems = function setItems(e) {
    if (0 < e.length) {
      var t = this._list.setItems(e),
        s = utils.JS.isValid(this._pinnedItem) && this._pinnedItem.isValid(),
        n = utils.JS.isValid(this._activeSquad);
      (s || n) &&
        t.forEach(function(e, t) {
          if (
            (s && e.setComparisonData(this._pinnedItem),
            n && this._activeSquad.containsItem(e.getData(), !0))
          ) {
            var i = new UTListActiveTagView();
            i.setIconClass(enums.UIIconClass.SQUAD), e.setActiveTagComponent(i);
          }
        }, this),
        this._list.renderItems();
    } else this.setEmptyListMessage(!0);
  }),
  (views.club.ClubSearchResults.prototype.setActionableStates = function setActionableStates(
    i
  ) {
    utils.JS.isValid(this._pinnedItem) &&
      this._pinnedItem.isValid() &&
      this._list.getRows().forEach(function(e, t) {
        e.setActionState(i ? i[t] : this._pinnedItem.compareType(e.getData()));
      }, this);
  }),
  (views.club.ClubSearchResults.prototype.setEmptyListMessage = function setEmptyListMessage(
    e
  ) {
    e
      ? this._list.appendEmptyListMessage(
          services.Localization.localize(
            'popup.error.searchauctions.retrysearch'
          ),
          services.Localization.localize('button.searchagain'),
          this.onSearch.notify.bind(this.onSearch)
        )
      : (this._list.appendEmptyListMessage(
          services.Localization.localize('clubitems.categoryempty')
        ),
        this._header && this._header.toggleSearch(!1));
  }),
  (views.club.ClubSearchResults.prototype.setRowTapCallback = function setRowTapCallback(
    e
  ) {
    this._list.setRowTapCallback(e);
  }),
  (views.club.ClubSearchResults.prototype.setRowActionCallback = function setRowActionCallback(
    e
  ) {
    this._list.setRowActionCallback(e);
  }),
  (views.club.ClubSearchResults.prototype.setPaginationState = function setPaginationState(
    e,
    t
  ) {
    this._list.setPaginationState(e, t);
  }),
  (views.club.ClubSearchResults.prototype.appendPinnedItemView = function appendPinnedItemView(
    e
  ) {
    this._pinnedItemView = e;
    var t = this.getRootElement();
    t.insertBefore(e.getRootElement(), t.firstChild),
      this.updateListTopPosition();
  }),
  (views.club.ClubSearchResults.prototype.selectListRow = function selectListRow(
    e
  ) {
    this._list.selectRow(e);
  }),
  (views.club.ClubSearchResults.prototype._bubbleEvent = function _bubbleEvent(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() && this._triggerActions(t, i);
  }),
  (views.club.ClubSearchResults.prototype.setPinnedItemData = function setPinnedItemData(
    e
  ) {
    (this._pinnedItem = e), this._list.setComparisonData(e);
  }),
  (views.club.ClubSearchResults.prototype.setActiveSquadData = function setActiveSquadData(
    e
  ) {
    this._activeSquad = e;
  }),
  (views.club.ClubSearchResults.prototype.setItemTypeHeader = function setItemTypeHeader(
    e,
    t
  ) {
    this._header ||
      ((this._header = new views.club.ClubHeader()),
      this._header.init(),
      this._header.toggleSearch(!1),
      this._header
        .getButton()
        .addTarget(this.onSearch, this.onSearch.notify, enums.Event.TAP),
      this.getRootElement().insertBefore(
        this._header.getRootElement(),
        this.getRootElement().firstChild
      ));
    var i = '';
    switch (e) {
      case enums.ItemType.PLAYER:
        (i = services.Localization.localize('search.filters.players')),
          t[0].setLocalResource('images/icon_club_categories_player.png');
        break;
      case enums.ItemType.MANAGER:
        (i = services.Localization.localize('search.filters.staff')),
          t[0].setLocalResource('images/icon-Staff.png');
        break;
      case enums.ItemType.KIT:
        (i = services.Localization.localize('clubtype.kit')),
          t[0].addClass('kitHome'),
          t[1].addClass('kitAway');
        break;
      case enums.ItemType.BADGE:
        i = services.Localization.localize('clubtype.badge');
        break;
      case enums.ItemType.BALL:
        i = services.Localization.localize('clubtype.ball');
        break;
      case enums.ItemType.TIFO:
        i = services.Localization.localize('clubtype.tifo');
        break;
      case enums.ItemType.BANNER:
        i = services.Localization.localize('clubtype.banner');
        break;
      case enums.ItemType.CELEBRATION:
        i = services.Localization.localize('clubtype.celebration');
        break;
      case enums.ItemType.STADIUM:
        (i = services.Localization.localize('clubtype.stadium')),
          t[0].addClass('activeStadium');
    }
    this._header.setTitle(i),
      this._header.setImagesFromImgLoader(t),
      this._header.getRoot().show(),
      this.updateListTopPosition();
  }),
  (views.club.ClubSearchResults.prototype.toggleHeaderSearchBtn = function toggleHeaderSearchBtn(
    e
  ) {
    this._header && this._header.toggleSearch(e);
  }),
  (views.club.ClubSearchResults.prototype.getHeaderTitle = function getHeaderTitle() {
    return this._header ? this._header.getTitle() : '';
  }),
  (views.club.ClubSearchResults.prototype.getHeaderImageData = function getHeaderImageData() {
    return this._header ? this._header.getImageData() : [];
  }),
  NamespaceManager.Register('controllers.club'),
  (controllers.club.ClubSearchResults = function ClubSearchResultsController() {
    UTViewController.call(this),
      (this._viewmodel = null),
      (this._searchCriteria = new transferobjects.SearchCriteria()),
      (this._consumable = null),
      (this._pinnedListItem = null),
      (this.displayAsDetails = !1),
      (this.onItemSelected = new UTObservable()),
      Object.defineProperty(this, 'onItemSelected', {
        writable: !1,
        enumerable: !0
      }),
      (this.onDataChange = new UTObservable()),
      Object.defineProperty(this, 'onDataChange', {
        writable: !1,
        enumerable: !0
      }),
      (this._activeSquad = null),
      Object.defineProperty(this, '_activeSquad', {
        writable: !0,
        enumerable: !1
      });
  }),
  utils.JS.inherits(controllers.club.ClubSearchResults, UTViewController),
  (controllers.club.ClubSearchResults.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      (this._searchCriteria.count = MAX_ITEMS_REQUEST + 1),
        e.onSearch.observe(this, this.onSearch),
        e.addTarget(this, this._eRowSelected, enums.UIListEvent.ROW_SELECT),
        e.addTarget(
          this,
          this._eRowActionSelected,
          enums.UIListEvent.ROW_ACTION
        ),
        e.addTarget(this, this._eNextPage, enums.UIPaginationEvent.NEXT),
        e.addTarget(this, this._ePrevPage, enums.UIPaginationEvent.PREVIOUS);
    }
  }),
  (controllers.club.ClubSearchResults.prototype.initWithSearchCriteria = function initWithSearchCriteria(
    e
  ) {
    this.initialized ||
      ((this._viewmodel = utils.JS.isValid(this._viewmodel)
        ? this._viewmodel
        : new viewmodels.Club([])),
      (this._searchCriteria = e),
      this.init());
  }),
  (controllers.club.ClubSearchResults.prototype.initWithConsumables = function initWithConsumables(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        Array.isArray(e),
        'Initialization expected an array of item entities.'
      ),
      (this._viewmodel = utils.JS.isValid(this._viewmodel)
        ? this._viewmodel
        : new viewmodels.ConsumableCategories(e)),
      (this._viewmodel.isFull = !0),
      (this._searchCriteria.type =
        0 < e.length ? e[0].getSearchType() : enums.SearchType.ANY),
      this.init());
  }),
  (controllers.club.ClubSearchResults.prototype.dealloc = function dealloc() {
    this.getView().onSearch.unobserve(this),
      this.superclass(),
      (this._viewmodel = null),
      (this._searchCriteria = null),
      (this._consumable = null),
      this.onItemSelected.dealloc(),
      this.onDataChange.dealloc(),
      (this.onItemSelected = null),
      (this.onDataChange = null),
      utils.JS.isValid(this._pinnedListItem) &&
        (this._pinnedListItem.dealloc(), (this._pinnedListItem = null));
  }),
  (controllers.club.ClubSearchResults.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.club.ClubSearchResults();
  }),
  (controllers.club.ClubSearchResults.prototype.viewDidAppear = function viewDidAppear() {
    function _renderView() {
      this._setupHeader(),
        this._viewmodel.canShowPage()
          ? (this._viewmodel.removeEmptyConsumables(),
            this._updateItemList(this._viewmodel.getPageItems()))
          : this._requestItems();
      var e = this.getView();
      this._consumable &&
        (this._generatePinnedItemView(), e.setPinnedItemData(this._consumable)),
        this._pinnedListItem && this._pinnedListItem.viewDidAppear(),
        e.updateListTopPosition(),
        this._setupTelemetry();
    }
    this.superclass();
    var e = getDefaultDispatcher();
    e.addObserver(enums.Notification.ITEM_ACTIVATE, this, this._nItemActivated),
      e.addObserver(
        enums.Notification.UI_ITEM_STATE_CHANGE,
        this,
        this._nInfoStateChanged
      ),
      this._searchCriteria.type === enums.SearchType.PLAYER ||
      this._searchCriteria.type === enums.SearchType.STAFF
        ? services.Squad.requestSquadByType(enums.UserSquadId.ACTIVE).observe(
            this,
            function(e, t) {
              e.unobserve(this),
                t.success && this.setActiveSquadData(t.data.squad),
                _renderView.call(this);
            }
          )
        : _renderView.call(this);
  }),
  (controllers.club.ClubSearchResults.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass();
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.ITEM_ACTIVATE, this),
      e.removeObserver(enums.Notification.UI_ITEM_STATE_CHANGE, this),
      this._viewmodel && this._viewmodel.stopAuctionUpdates();
  }),
  (controllers.club.ClubSearchResults.prototype.getNavigationTitle = function getNavigationTitle() {
    return utils.JS.isValid(this._consumable)
      ? services.Localization.localize('panel.applyitem.button')
      : services.Localization.localize('navbar.label.club');
  }),
  (controllers.club.ClubSearchResults.prototype._generatePinnedItemView = function _generatePinnedItemView() {
    this._pinnedListItem ||
      ((this._pinnedListItem = new controllers.views.PinnedListItem()),
      this._pinnedListItem.initWithItem(this._consumable),
      this.addChildViewController(this._pinnedListItem),
      this.getView().appendPinnedItemView(this._pinnedListItem.getView()));
  }),
  (controllers.club.ClubSearchResults.prototype.setActiveSquadData = function setActiveSquadData(
    e
  ) {
    e &&
      ((this._activeSquad = e),
      this.getView().setActiveSquadData(this._activeSquad));
  }),
  (controllers.club.ClubSearchResults.prototype.setIterator = function setIterator(
    e
  ) {
    this._viewmodel = e;
  }),
  (controllers.club.ClubSearchResults.prototype.getIterator = function getIterator() {
    return this._viewmodel;
  }),
  (controllers.club.ClubSearchResults.prototype.setConsumableToApply = function setConsumableToApply(
    e
  ) {
    this._consumable = e;
  }),
  (controllers.club.ClubSearchResults.prototype._getItemTypeFromCriteria = function _getItemTypeFromCriteria() {
    switch (this._searchCriteria.type) {
      case enums.SearchType.PLAYER:
        return enums.ItemType.PLAYER;
      case enums.SearchType.STAFF:
        return enums.ItemType.MANAGER;
      case enums.SearchType.CLUB_INFO:
        return this._searchCriteria.category === enums.SearchCategory.KIT
          ? enums.ItemType.KIT
          : this._searchCriteria.category === enums.SearchCategory.BADGE
          ? enums.ItemType.BADGE
          : (utils.Debug.Assert(
              !1,
              'controllers.club.ClubSearchResults::_getItemTypeFromCriteria. Unsupported criteria category.'
            ),
            enums.ItemType.NONE);
      case enums.SearchType.BALL:
        return enums.ItemType.BALL;
      case enums.SearchType.STADIUM:
        return enums.ItemType.STADIUM;
      case enums.SearchType.CONSUMABLES_DEVELOPMENT:
      case enums.SearchType.CONSUMABLES_TRAINING:
        return enums.ItemType.TRAINING;
      case enums.SearchType.BANNER:
        return enums.ItemType.BANNER;
      case enums.SearchType.CELEBRATION:
        return enums.ItemType.CELEBRATION;
      case enums.SearchType.TIFO:
        return enums.ItemType.TIFO;
      case enums.SearchType.ANY:
        return enums.ItemType.NONE;
      default:
        return (
          utils.Debug.Assert(
            !1,
            "controllers.club.ClubSearchResults::_getItemTypeFromCriteria. Criteria type hasn't been defined."
          ),
          enums.ItemType.NONE
        );
    }
  }),
  (controllers.club.ClubSearchResults.prototype._updateClubHeader = function _updateClubHeader() {
    var e,
      t = this.getView(),
      i = [],
      s = this._getItemTypeFromCriteria();
    switch (s) {
      case enums.ItemType.PLAYER:
      case enums.ItemType.MANAGER:
        i.push(new UTImageView());
        break;
      case enums.ItemType.KIT:
        (e = enums.UIActiveItemImgType.HOME_KIT),
          i.push(this._viewmodel.getActiveItemImg(e)),
          (e = enums.UIActiveItemImgType.AWAY_KIT);
        break;
      case enums.ItemType.BADGE:
        e = enums.UIActiveItemImgType.BADGE_NORMAL;
        break;
      case enums.ItemType.BALL:
        e = enums.UIActiveItemImgType.BALL;
        break;
      case enums.ItemType.STADIUM:
        e = enums.UIActiveItemImgType.STADIUM;
        break;
      case enums.ItemType.BANNER:
        e = enums.UIActiveItemImgType.BANNER;
        break;
      case enums.ItemType.CELEBRATION:
        e = enums.UIActiveItemImgType.CELEBRATION;
        break;
      case enums.ItemType.TIFO:
        e = enums.UIActiveItemImgType.TIFO;
    }
    e && i.push(this._viewmodel.getActiveItemImg(e)),
      !utils.JS.isValid(this._consumable) &&
        0 < i.length &&
        t.setItemTypeHeader(s, i);
  }),
  (controllers.club.ClubSearchResults.prototype._setupHeader = function _setupHeader() {
    if (!utils.JS.isValid(this._consumable)) {
      this._updateClubHeader();
      var e = this._getItemTypeFromCriteria(),
        t = 'navbar.label.club';
      if (e === enums.ItemType.PLAYER) t += 'players';
      else if (e === enums.ItemType.MANAGER) t += 'staff';
      else if (e === enums.ItemType.TRAINING) {
        var i = this._viewmodel.get(0);
        utils.JS.isValid(i)
          ? i.isContract()
            ? (t = 'card.title.contract')
            : i.isPlayerPositionModifier()
            ? (t = 'card.title.advtraining')
            : i.isStyleModifier()
            ? (t = 'trainingtype.playStyle')
            : i.isManagerLeagueModifier()
            ? (t = 'card.title.leagueModifier')
            : i.isInjuryHealing()
            ? (t = 'navbar.label.club.healing')
            : i.isFitness()
            ? (t = 'devtype.fitness')
            : i.isTraining() && (t = 'search.filters.training')
          : (t += 'consumables');
      } else e !== enums.ItemType.NONE && (t += 'items');
      this.getNavigationController() &&
        this.getNavigationController().setNavigationTitle(
          services.Localization.localize(t)
        );
    }
  }),
  (controllers.club.ClubSearchResults.prototype._setupTelemetry = function _setupTelemetry() {
    var e = this._getItemTypeFromCriteria();
    if (e !== enums.ItemType.NONE) {
      var t = 'Club - ';
      e === enums.ItemType.PLAYER
        ? (t += 'Players')
        : e === enums.ItemType.MANAGER
        ? (t += 'Staff')
        : e === enums.ItemType.TRAINING
        ? (t += 'Consumables')
        : (t += 'Club Items'),
        (t += ' - List View'),
        services.PIN.sendData(enums.PIN.EVENT.PAGE_VIEW, {
          type: PIN_PAGEVIEW_EVT_TYPE,
          pgid: t
        }),
        TelemetryManager.trackPage(TelemetryManager.Sections.CLUB, t);
    }
  }),
  (controllers.club.ClubSearchResults.prototype._requestItems = function _requestItems(
    n
  ) {
    services.Item.searchClub(this._searchCriteria).observe(
      this,
      function _onClubItemRetrievalComplete(e, t) {
        if ((e.unobserve(this), t.success)) {
          var i = this._viewmodel.getIndex(),
            s = this._searchCriteria.acquiredDate !== enums.SearchSort.NONE;
          (this._viewmodel.sortByRecency = s),
            (this._viewmodel.sort = s
              ? this._searchCriteria.acquiredDate
              : this._searchCriteria.sort),
            this._viewmodel.addArray(t.data.items),
            (this._viewmodel.isFull = t.data.retrievedAll),
            this._viewmodel.setIndex(i),
            this._updateItemList(this._viewmodel.getPageItems(), n);
        } else
          services.Notification.queue([
            services.Localization.localize('notification.club.failedToLoad'),
            enums.UINotificationType.NEGATIVE
          ]),
            this.getNavigationController() &&
              this.getNavigationController().popViewController(!0);
      }
    );
  }),
  (controllers.club.ClubSearchResults.prototype._updateItemList = function _updateItemList(
    e,
    t
  ) {
    var i = this.getView();
    if (
      ((utils.JS.isBoolean(t) && !t) ||
        this.onDataChange.notify({
          items: e
        }),
      0 < e.length)
    ) {
      if (
        (i.setItems(e),
        i.toggleHeaderSearchBtn(0 < e.length),
        this.displayAsDetails ||
          isPhone() ||
          i.selectListRow(this._viewmodel.current().id),
        this._setRowsCallback(),
        utils.JS.isValid(this._consumable))
      ) {
        var s = e.map(function(e) {
          return this._consumable.canApplyTo(e);
        }, this);
        i.setActionableStates(s);
      }
    } else
      i.setEmptyListMessage(this._searchCriteria.isModified()),
        i.toggleHeaderSearchBtn(!1);
    i.setPaginationState(
      this._viewmodel.hasPreviousPage(),
      this._viewmodel.hasNextPage()
    ),
      this._refreshPinnedItem();
  }),
  (controllers.club.ClubSearchResults.prototype.refreshList = function refreshList() {
    this._getItemTypeFromCriteria() === enums.ItemType.TRAINING &&
      this._viewmodel.removeEmptyConsumables(),
      this._viewmodel.shouldRequestItems()
        ? ((this._searchCriteria.offset += this._searchCriteria.count),
          this._requestItems(!1))
        : this._updateItemList(this._viewmodel.getPageItems(), !isPhone());
  }),
  (controllers.club.ClubSearchResults.prototype._refreshPinnedItem = function _refreshPinnedItem() {
    utils.JS.isValid(this._pinnedListItem) && this._pinnedListItem.refresh();
  }),
  (controllers.club.ClubSearchResults.prototype._setRowsCallback = function _setRowsCallback() {
    utils.JS.isValid(this._consumable)
      ? this.getView().setRowActionCallback(null)
      : this.getView().setRowTapCallback(null);
  }),
  (controllers.club.ClubSearchResults.prototype.onSearch = function onSearch() {
    if (utils.JS.isValid(this._consumable))
      this.getNavigationController().popViewController();
    else {
      var e = this.getNavigationController();
      if (e) {
        var t = new UTMyClubSearchFiltersViewController();
        t.initWithSearchCriteria(this._searchCriteria),
          t.setSearchResultViewModel(this._viewmodel),
          e.pushViewController(t);
      }
    }
  }),
  (controllers.club.ClubSearchResults.prototype._ePrevPage = function _ePrevPage(
    e,
    t,
    i
  ) {
    this._viewmodel.hasPreviousPage() &&
      this._updateItemList(this._viewmodel.previousPage(), !0);
  }),
  (controllers.club.ClubSearchResults.prototype._eNextPage = function _eNextPage(
    e,
    t,
    i
  ) {
    this._viewmodel.hasNextPage() &&
      (this._viewmodel.nextPage(),
      this._viewmodel.shouldRequestItems()
        ? ((this._searchCriteria.offset += this._searchCriteria.count),
          this._requestItems())
        : this._updateItemList(this._viewmodel.getPageItems(), !0));
  }),
  (controllers.club.ClubSearchResults.prototype._eRowActionSelected = function _eRowActionSelected(
    e,
    t,
    i
  ) {
    var s = i.item || null;
    if (utils.JS.isValid(this._consumable) && s) {
      var n = this.getNavigationController();
      services.Item.applyTo(this._consumable, s).observe(this, function(e, t) {
        if (
          (e.unobserve(this), NetworkErrorManager.checkCriticalStatus(t.status))
        )
          NetworkErrorManager.handleStatus(t.status);
        else if (
          (t.success
            ? services.Notification.queue([
                services.Localization.localize(
                  'notification.item.appliedConsumable'
                ),
                enums.UINotificationType.NEUTRAL
              ])
            : services.Notification.queue([
                services.Localization.localize(
                  'notification.item.unableToApplyConsumable'
                ),
                enums.UINotificationType.NEGATIVE
              ]),
          n)
        )
          if (isPhone()) {
            var i = 0 < repositories.Item.getUnassignedItems().length ? 3 : 2,
              s = n.getPreviousController(i);
            utils.JS.isValid(s)
              ? n.popToViewController(s)
              : n.popToRootViewController(!0);
          } else n.popToRootViewController(!0);
      });
    }
  }),
  (controllers.club.ClubSearchResults.prototype._eRowSelected = function _eRowSelected(
    e,
    t,
    i
  ) {
    var s = i.item || null,
      n = this._viewmodel.indexOf(function(e) {
        return e.id === s.id;
      });
    if (s) {
      var o = n !== this._viewmodel.getIndex();
      if (
        (o && this._viewmodel.setIndex(n),
        isPhone() && !utils.JS.isValid(this._consumable))
      ) {
        var a = this.getNavigationController();
        if (a) {
          var r = new controllers.navigation.ItemDetails();
          r.initWithIterator(this._viewmodel), a.pushViewController(r);
        }
      } else
        o &&
          (this.onItemSelected.notify(s), this.getView().selectListRow(s.id));
    }
  }),
  (controllers.club.ClubSearchResults.prototype._nItemActivated = function _nItemActivated(
    e,
    t,
    i
  ) {
    this._updateClubHeader();
  }),
  (controllers.club.ClubSearchResults.prototype._nInfoStateChanged = function _nInfoStateChanged(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.CLUB,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Item Info Switch Button - Club Search Results'
    );
  }),
  utils.JS.inherits(UTSplitView, UTView),
  (UTSplitView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-split-view'),
        (this.__body = document.createElement('div')),
        this.__body.classList.add('ut-content'),
        e.appendChild(this.__body),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSplitView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__body = null);
  }),
  (UTSplitView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSplitView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSplitView.prototype.dealloc = function dealloc() {
    this.superclass(), (this._lView = null), (this._rView = null);
  }),
  (UTSplitView.prototype.appendLeft = function appendLeft(e) {
    this._lView !== e &&
      ((this._lView = e),
      this.addSubview(this._lView, this.__body),
      this.__body.appendChild(this._lView.getRootElement()),
      this._rView &&
        (this._lView.addClass(enums.UILayout.LEFT),
        this._rView.addClass(enums.UILayout.RIGHT)));
  }),
  (UTSplitView.prototype.appendRight = function appendRight(e) {
    this._rView !== e &&
      ((this._rView = e),
      this.addSubview(this._rView, this.__body),
      this.__body.appendChild(this._rView.getRootElement()),
      this._lView &&
        (this._lView.addClass(enums.UILayout.LEFT),
        this._rView.addClass(enums.UILayout.RIGHT)));
  }),
  (UTSplitView.prototype.removeLeft = function removeLeft() {
    this._lView &&
      (this._lView.removeFromSuperview(),
      this.layoutSubviews(),
      this._lView.removeClass(enums.UILayout.LEFT),
      this._rView && this._rView.removeClass(enums.UILayout.RIGHT),
      (this._lView = null));
  }),
  (UTSplitView.prototype.removeRight = function removeRight() {
    this._rView &&
      (this._rView.removeFromSuperview(),
      this.layoutSubviews(),
      this._rView.removeClass(enums.UILayout.RIGHT),
      this._lView && this._lView.removeClass(enums.UILayout.LEFT),
      (this._rView = null));
  }),
  utils.JS.inherits(UTSplitViewController, UTViewController),
  (UTSplitViewController.Layout = {
    SIDEBAR_LEFT: 'sidebar-left',
    SIDEBAR_RIGHT: 'sidebar-right'
  }),
  (UTSplitViewController.prototype.init = function init() {
    this.initialized || (this.superclass(), this._applyLayout(this._layout));
  }),
  (UTSplitViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSplitView();
  }),
  (UTSplitViewController.prototype._getLeftController = function _getLeftController() {
    return this._leftController;
  }),
  (UTSplitViewController.prototype._getRightController = function _getRightController() {
    return this._rightController;
  }),
  (UTSplitViewController.prototype._setLeftController = function _setLeftController(
    e,
    t
  ) {
    if (this._leftController !== e) {
      var i = this._leftController;
      if (((this._leftController = e), i)) {
        i.viewWillDisappear();
        var s = i.getView();
        s && s.removeFromSuperview(t);
      }
      this._leftController.viewWillAppear();
      var n = this.getView(),
        o = e.getView();
      o.getSuperview() !== n && n.appendLeft(o),
        i && i.viewDidDisappear(),
        this._leftController.viewDidAppear();
    }
  }),
  (UTSplitViewController.prototype._setRightController = function _setRightController(
    e,
    t
  ) {
    if (this._rightController !== e) {
      var i = this._rightController;
      if (((this._rightController = e), i)) {
        i.viewWillDisappear();
        var s = i.getView();
        s && s.removeFromSuperview(t);
      }
      this._rightController.viewWillAppear();
      var n = this.getView(),
        o = e.getView();
      o.getSuperview() !== n && n.appendRight(o),
        i && i.viewDidDisappear(),
        this._rightController.viewDidAppear();
    }
  }),
  (UTSplitViewController.prototype._removeLeftController = function _removeLeftController() {
    utils.JS.isValid(this._leftController) &&
      (this._leftController.viewWillDisappear(),
      this.getView().removeLeft(),
      this._leftController.viewDidDisappear(),
      (this._leftController = null));
  }),
  (UTSplitViewController.prototype._removeRightController = function _removeRightController() {
    utils.JS.isValid(this._rightController) &&
      (this._rightController.viewWillDisappear(),
      this.getView().removeRight(),
      this._rightController.viewDidDisappear(),
      (this._rightController = null));
  }),
  (UTSplitViewController.prototype.hideLeftController = function hideLeftController() {
    this._removeLeftController();
  }),
  (UTSplitViewController.prototype.hideRightController = function hideRightController() {
    this._removeRightController();
  }),
  (UTSplitViewController.prototype.viewDidLoad = function viewDidLoad() {
    this.superclass(),
      this._leftController && this._leftController.viewDidLoad(),
      this._rightController && this._rightController.viewDidLoad();
  }),
  (UTSplitViewController.prototype.viewWillAppear = function viewWillAppear() {
    this.superclass(),
      this._leftController && this._leftController.viewWillAppear(),
      this._rightController && this._rightController.viewWillAppear();
  }),
  (UTSplitViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      this._leftController && this._leftController.viewWillDisappear(),
      this._rightController && this._rightController.viewWillDisappear();
  }),
  (UTSplitViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._leftController && this._leftController.viewDidAppear(),
      this._rightController && this._rightController.viewDidAppear();
  }),
  (UTSplitViewController.prototype.viewDidDisappear = function viewDidDisappear() {
    this.superclass(),
      this._leftController && this._leftController.viewDidDisappear(),
      this._rightController && this._rightController.viewDidDisappear();
  }),
  (UTSplitViewController.prototype._applyLayout = function _applyLayout() {
    var e = this.getView();
    e.hasClass(this._layout) ||
      (e.removeClass(
        utils.JS.getObjectValues(UTSplitViewController.Layout).join(' ')
      ),
      e.addClass(this._layout));
  }),
  (UTSplitViewController.prototype.setLayout = function setLayout(e) {
    (this._layout = e), this.initialized && this._applyLayout(e);
  }),
  NamespaceManager.Register('views.items'),
  (views.items.CompareDetails = function() {
    UTView.call(this),
      (this._item = null),
      (this._otherItem = null),
      this._generate();
  }),
  utils.JS.inherits(views.items.CompareDetails, UTView),
  (views.items.CompareDetails.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('CompareDetails'), e.classList.add('DetailView');
      var t = document.createElement('section');
      t.classList.add('detail-carousel'),
        t.classList.add('panelContainer'),
        (this.__itemContainer = document.createElement('div')),
        this.__itemContainer.classList.add('item-container'),
        t.appendChild(this.__itemContainer),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.CompareDetails.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__itemContainer = null);
  }),
  (views.items.CompareDetails.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.CompareDetails.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.CompareDetails.prototype.render = function render(e, t) {
    this._item &&
      !this._item.canRender(e) &&
      (this._item.dealloc(), (this._item = null)),
      this._otherItem &&
        !this._otherItem.canRender(t || null) &&
        (this._otherItem.dealloc(), (this._otherItem = null)),
      utils.JS.isValid(this._item)
        ? this._item.render(utils.JS.isValid(e) ? e : new entities.NullItem())
        : ((this._item = this._generateItemView(
            utils.JS.isValid(e) ? e : new factories.Item.createItem()
          )),
          this.__itemContainer.insertBefore(
            this._item.getRootElement(),
            this.__itemContainer.firstChild
          )),
      utils.JS.isValid(this._otherItem)
        ? this._otherItem.render(
            utils.JS.isValid(t) ? t : new factories.Item.createItem()
          )
        : ((this._otherItem = this._generateItemView(
            utils.JS.isValid(t) ? t : new factories.Item.createItem()
          )),
          this.__itemContainer.appendChild(this._otherItem.getRootElement()));
  }),
  (views.items.CompareDetails.prototype.dealloc = function dealloc() {
    utils.JS.isValid(this._item) && (this._item.destroy(), (this._item = null)),
      utils.JS.isValid(this._otherItem) &&
        (this._otherItem.destroy(), (this._otherItem = null)),
      this.superclass();
  }),
  (views.items.CompareDetails.prototype._generateItemView = function _generateItemView(
    e
  ) {
    var t = factories.ItemView.createLargeItem(e);
    return t.init(), t.render(e), t.getRoot().addClass('sm'), t;
  }),
  (views.items.CompareDetails.prototype.appendPanel = function appendPanel(e) {
    this.addSubview(e);
  }),
  (views.items.CompareDetails.prototype.setAsSBC = function setAsSBC(e) {
    this.toggleClass(enums.SquadPitchModes.SBC, e);
  }),
  utils.JS.inherits(UTPseudoTableView, UTView),
  (UTPseudoTableView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('table'), (this.__root = e), (this._generated = !0);
    }
  }),
  (UTPseudoTableView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTPseudoTableView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPseudoTableView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPseudoTableView.CLASS = {
    TABLE_ROW: 'table-row',
    TABLE_HEAD: 'table-header-group',
    TABLE_BODY: 'table-row-group',
    TABLE_DATA: 'table-cell'
  }),
  (UTPseudoTableView.Style = {
    NONE: '',
    ALTERNATING: 'alternating'
  }),
  (UTPseudoTableView.prototype.dealloc = function dealloc() {
    this.superclass(), (this._rowGroups = []);
  }),
  (UTPseudoTableView.prototype.addRowGroup = function(e) {
    if (utils.JS.isValid(e)) {
      var s = document.createElement('ul');
      DOMKit.addClass(s, UTPseudoTableView.CLASS.TABLE_HEAD),
        this.__root.appendChild(s),
        e.forEach(function(e, t) {
          var i = document.createElement('li');
          (i.textContent = e),
            DOMKit.addClass(i, UTPseudoTableView.CLASS.TABLE_DATA),
            s.appendChild(i);
        });
    }
    var t = document.createElement('ul');
    return (
      DOMKit.addClass(t, UTPseudoTableView.CLASS.TABLE_BODY),
      this.__root.appendChild(t),
      this._rowGroups.push(t),
      this._rowGroups.length
    );
  }),
  (UTPseudoTableView.prototype.addRowData = function(e, s, t) {
    0 === this._rowGroups.length && this.addRowGroup();
    var i = utils.JS.isValid(t)
        ? this._rowGroups[t]
        : this._rowGroups[this._rowGroups.length - 1],
      n = document.createElement('li');
    DOMKit.addClass(n, UTPseudoTableView.CLASS.TABLE_ROW),
      i.appendChild(n),
      e.forEach(function(e, t) {
        var i = document.createElement('div');
        DOMKit.addClass(i, UTPseudoTableView.CLASS.TABLE_DATA),
          utils.JS.isString(e) || utils.JS.isNumber(e)
            ? (i.textContent = e)
            : e instanceof UTView
            ? (i.appendChild(e.getRootElement()), this.addSubview(e, i))
            : e instanceof jQuery
            ? i.appendChild(e.get(0))
            : i.appendChild(e),
          n.appendChild(i),
          utils.JS.isValid(s) &&
            t < s.length &&
            utils.JS.isValid(s[t]) &&
            DOMKit.addClass(i, s[t]);
      }, this);
  }),
  utils.JS.inherits(UTProgressBarView, UTView),
  (UTProgressBarView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-progress-bar'),
        (this.__fill = document.createElement('div')),
        this.__fill.classList.add('ut-progress-bar--fill'),
        e.appendChild(this.__fill),
        (this.__label = document.createElement('span')),
        this.__label.classList.add('ut-progress-bar--label'),
        e.appendChild(this.__label),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTProgressBarView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__fill = null),
      (this.__label = null);
  }),
  (UTProgressBarView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTProgressBarView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTProgressBarView.prototype.setProgress = function setProgress(e) {
    utils.JS.isNumber(e)
      ? (e = Math.max(Math.min(e, 100), 0)) !== this._progress &&
        ((this._progress = e),
        (this.__fill.style.width = this._progress + '%'),
        this.toggleClass('completed', 100 <= this._progress))
      : utils.Debug.Assert(
          !1,
          'Invalid input; progress bar expected a number.'
        );
  }),
  (UTProgressBarView.prototype.setProgressLabel = function setProgressLabel(e) {
    this.__label.textContent = e;
  }),
  (UTProgressBarView.prototype.setFeedbackState = function setFeedbackState(e) {
    var t = utils.JS.getObjectValues(enums.UIFeedbackState);
    0 <= t.indexOf(e) && (this.removeClass(t.join(' ')), this.addClass(e));
  }),
  NamespaceManager.Register('views.items'),
  (views.items.CompareActionPanel = function CompareActionPanelView() {
    UTView.call(this),
      (this._progressBars = []),
      (this._progressBarsOther = []),
      (this._stats = []),
      (this._statsOther = []),
      (this._labels = []),
      this._generate();
  }),
  utils.JS.inherits(views.items.CompareActionPanel, UTView),
  (views.items.CompareActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('ut-compare-items-panel-view'),
        e.classList.add('DetailPanel'),
        (this.__infoContainer = document.createElement('div')),
        this.__infoContainer.classList.add('extended');
      var t = document.createElement('div');
      t.classList.add('compare-positions');
      var i = document.createElement('div');
      i.classList.add('compare-positions--position-cell'),
        (this.__positionLabel = document.createElement('span')),
        i.appendChild(this.__positionLabel),
        (this.__position = document.createElement('span')),
        i.appendChild(this.__position),
        t.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('compare-positions--position-cell'),
        (this.__positionLabelOther = document.createElement('span')),
        s.appendChild(this.__positionLabelOther),
        (this.__positionOther = document.createElement('span')),
        s.appendChild(this.__positionOther),
        t.appendChild(s),
        this.__infoContainer.appendChild(t),
        e.appendChild(this.__infoContainer),
        (this._table = new UTPseudoTableView()),
        this._table.getRootElement().classList.add('stats-table'),
        e.appendChild(this._table.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.CompareActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__infoContainer = null),
      (this.__positionLabel = null),
      (this.__position = null),
      (this.__positionLabelOther = null),
      (this.__positionOther = null),
      this._table.destroy();
  }),
  (views.items.CompareActionPanel.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.CompareActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.CompareActionPanel.prototype.init = function init() {
    var i = ['value', null, null, null, 'value'];
    enums.Localization.STATS_LABELS_PLAYER.forEach(function(e, t) {
      this._progressBars.push(new UTProgressBarView()),
        DOMKit.addClass(
          this._progressBars[t].getRootElement(),
          enums.UIProgressBar.STATS + ' ' + enums.UIProgressBar.REVERSE
        ),
        this._progressBarsOther.push(new UTProgressBarView()),
        DOMKit.addClass(
          this._progressBarsOther[t].getRootElement(),
          enums.UIProgressBar.STATS
        ),
        this._labels.push(document.createElement('span')),
        this._stats.push(document.createElement('span')),
        this._statsOther.push(document.createElement('span')),
        this._table.addRowData(
          [
            this._stats[t],
            this._progressBars[t].getRoot(),
            this._labels[t],
            this._progressBarsOther[t].getRootElement(),
            this._statsOther[t]
          ],
          i
        );
    }, this),
      this.layoutSubviews(),
      this.superclass();
  }),
  (views.items.CompareActionPanel.prototype._canCompare = function _canCompare(
    e,
    t
  ) {
    return (
      utils.JS.isValid(e) &&
      utils.JS.isValid(t) &&
      e.compareType(t) &&
      e.isGK() === t.isGK()
    );
  }),
  (views.items.CompareActionPanel.prototype.render = function render(e, t) {
    (this.__positionLabel.textContent =
      services.Localization.localize('card.title.position') + ':'),
      (this.__positionLabelOther.textContent =
        services.Localization.localize('card.title.position') + ':'),
      (this.__position.textContent = ''),
      (this.__positionOther.textContent = '');
    var i = 'statIncrease',
      s = e.getAttributes(),
      n = this._canCompare(e, t),
      o = null,
      a = 0,
      r = !(
        (utils.JS.isValid(e) && e.isManager()) ||
        (utils.JS.isValid(t) && t.isManager())
      );
    if ((this._table.setDisplay(r), utils.JS.isValid(t))) {
      (o = t.isGK()
        ? enums.Localization.STATS_LABELS_GK
        : enums.Localization.STATS_LABELS_PLAYER),
        t.isValid() &&
          (t.isManager()
            ? (this.__positionOther.textContent = services.Localization.localize(
                'extendedPlayerInfo.positions.manager'
              ))
            : (this.__positionOther.textContent = utils.FUTLocalization.getLocalizedPositionStringById(
                t.preferredPosition
              )));
      var l = t.getAttributes();
      for (a = 0; a < l.length; a++)
        (this._labels[a].textContent = services.Localization.localize(o[a])),
          this._progressBarsOther[a].toggleClass(i, s[a] < l[a] && n),
          this._progressBars[a].toggleClass(i, s[a] > l[a] && n),
          this._progressBarsOther[a].setProgress(l[a]),
          (this._statsOther[a].textContent = l[a]),
          DOMKit.toggleClass(this._statsOther[a], i, s[a] < l[a] && n),
          DOMKit.toggleClass(this._stats[a], i, s[a] > l[a] && n),
          this._progressBars[a].setProgressLabel(
            s[a] > l[a] && n ? utils.TextUtils.addSignToNum(s[a] - l[a]) : ''
          ),
          this._progressBarsOther[a].setProgressLabel(
            s[a] < l[a] && n ? utils.TextUtils.addSignToNum(l[a] - s[a]) : ''
          );
    } else
      for (a = 0; a < s.length; a++)
        this._progressBarsOther[a].setProgress(0),
          this._progressBarsOther[a].setProgressLabel(''),
          this._progressBarsOther[a].removeClass(i),
          (this._statsOther[a].textContent = enums.Localization.BLANK_STR),
          DOMKit.removeClass(this._statsOther[a], i);
    if (e.isValid())
      for (
        o = e.isGK()
          ? enums.Localization.STATS_LABELS_GK
          : enums.Localization.STATS_LABELS_PLAYER,
          e.isValid() &&
            (e.isManager()
              ? (this.__position.textContent = services.Localization.localize(
                  'extendedPlayerInfo.positions.manager'
                ))
              : (this.__position.textContent = utils.FUTLocalization.getLocalizedPositionStringById(
                  e.preferredPosition
                ))),
          a = 0;
        a < s.length;
        a++
      )
        (this._labels[a].textContent = services.Localization.localize(o[a])),
          this._progressBars[a].setProgress(s[a]),
          (this._stats[a].textContent = s[a]);
    else
      for (a = 0; a < s.length; a++)
        this._progressBars[a].setProgress(0),
          this._progressBars[a].setProgressLabel(''),
          this._progressBars[a].removeClass(i),
          (this._stats[a].textContent = enums.Localization.BLANK_STR),
          DOMKit.removeClass(this._stats[a], i);
  }),
  (views.items.CompareActionPanel.prototype.appendSwapButton = function appendSwapButton(
    e
  ) {
    this.addSubview(e, this.__infoContainer);
  }),
  utils.JS.inherits(UTCompareActionPanelViewController, UTViewController),
  (UTCompareActionPanelViewController.prototype.initWithSwapButton = function initWithSwapButton() {
    (this._btnSwap = new UTStandardButtonControl()),
      this._btnSwap.addTarget(this, this._eSwapPlayers, enums.Event.TAP),
      this._btnSwap.init(),
      this.init();
  }),
  (UTCompareActionPanelViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      utils.JS.isValid(this._btnSwap) &&
        (this._btnSwap.dealloc(), (this._btnSwap = null));
  }),
  (UTCompareActionPanelViewController.prototype.setItems = function setItems(
    e,
    t
  ) {
    if (
      (this.getView().render(e, t),
      utils.JS.isValid(this._btnSwap) && utils.JS.isValid(t))
    ) {
      var i = !(t.isValid() && e.isValid() && !e.compareType(t));
      this._btnSwap.setInteractionState(i),
        this._btnSwap.setText(
          e.isManager()
            ? services.Localization.localize('search.pagination.header.manager')
            : services.Localization.localize('search.pagination.header')
        );
    }
  }),
  (UTCompareActionPanelViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.CompareActionPanel();
  }),
  (UTCompareActionPanelViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    this._btnSwap &&
      !this._btnSwap.isSubview(e) &&
      (this._btnSwap.getRoot().addClass(enums.UIButtonState.CALL_TO_ACTION),
      e.appendSwapButton(this._btnSwap),
      e.layoutSubviews());
  }),
  (UTCompareActionPanelViewController.prototype._eSwapPlayers = function _eSwapPlayers(
    e,
    t,
    i
  ) {
    this.onSwap.notify();
  }),
  NamespaceManager.Register('controllers.club'),
  (controllers.club.SwapComparePlayers = function SwapComparePlayersController() {
    UTViewController.call(this),
      (this._panel = new UTCompareActionPanelViewController()),
      (this.eOnAccept = new UTObservable());
  }),
  utils.JS.inherits(controllers.club.SwapComparePlayers, UTViewController),
  (controllers.club.SwapComparePlayers.prototype.init = function init() {
    this.initialized ||
      (this._panel.initWithSwapButton(),
      this.addChildViewController(this._panel),
      this._panel.onSwap.observe(this, this._eSwapSelected),
      this.superclass());
  }),
  (controllers.club.SwapComparePlayers.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._panel.dealloc(),
      this.eOnAccept.dealloc(),
      (this._panel = null),
      (this.eOnAccept = null);
  }),
  (controllers.club.SwapComparePlayers.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.CompareDetails();
  }),
  (controllers.club.SwapComparePlayers.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('leaderboard.compare.Title');
  }),
  (controllers.club.SwapComparePlayers.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    this._panel &&
      !this._panel.getView().isSubview(e) &&
      (e.appendPanel(this._panel.getView()),
      e.layoutSubviews(),
      this._panel.viewDidAppear());
  }),
  (controllers.club.SwapComparePlayers.prototype.setItemData = function setItemData(
    e,
    t
  ) {
    this.getView().render(e, t), this._panel.setItems(e, t);
  }),
  (controllers.club.SwapComparePlayers.prototype._eSwapSelected = function _eSwapSelected(
    e
  ) {
    this.eOnAccept.notify();
  }),
  NamespaceManager.Register('controllers.club'),
  (controllers.club.SelectItemFromClub = function SelectItemFromClubViewController() {
    UTViewController.call(this),
      (this._searchCriteria = null),
      (this._squad = null),
      (this._challenge = null),
      (this._slotIndex = 0),
      (this._iterator = null),
      (this._viewmodel = new viewmodels.Club([])),
      (this._pinnedListItem = null),
      (this._clubSearchType = enums.ItemSearchFeature.CLUB),
      (this.onItemChange = new UTObservable()),
      Object.defineProperty(this, 'onItemChange', {
        writable: !1
      });
  }),
  utils.JS.inherits(controllers.club.SelectItemFromClub, UTViewController),
  (controllers.club.SelectItemFromClub.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        TelemetryManager.trackPage(
          TelemetryManager.Sections.CLUB,
          'Swap Club Results'
        );
      var e = this.getView();
      e.onSearch.observe(this, this._eModifySearchSelected),
        e.addTarget(this, this._eRowSelected, enums.UIListEvent.ROW_SELECT),
        e.addTarget(
          this,
          this._eRowActionSelected,
          enums.UIListEvent.ROW_ACTION
        ),
        e.addTarget(this, this._eNextPage, enums.UIPaginationEvent.NEXT),
        e.addTarget(this, this._ePrevPage, enums.UIPaginationEvent.PREVIOUS);
    }
  }),
  (controllers.club.SelectItemFromClub.prototype.initWithSearchCriteria = function initWithSearchCriteria(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof transferobjects.SearchCriteria,
        'Expected a search criteria DTO during initialization.'
      ),
      (this._searchCriteria = e),
      (this._searchCriteria.count = this._viewmodel.numItemsPerPage + 1),
      this.init());
  }),
  (controllers.club.SelectItemFromClub.prototype.initWithCriteriaAndSquad = function initWithCriteriaAndSquad(
    e,
    t,
    i
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        t instanceof entities.Squad,
        'Expected a squad entity during initialization.'
      ),
      utils.Debug.Assert(
        utils.JS.isNumber(i),
        'Expected a numeric slot index during initialization.'
      ),
      (this._squad = t),
      (this._slotIndex = i),
      (this._pinnedListItem = new controllers.views.PinnedListItem()),
      utils.JS.isValid(this._iterator)
        ? (this._pinnedListItem.initWithItem(
            this._iterator.current().getItem()
          ),
          this._pinnedListItem.onItemChange.observe(this, this._eOnItemChange))
        : this._pinnedListItem.initWithItem(
            this._squad.getSlot(this._slotIndex).getItem()
          ),
      this.addChildViewController(this._pinnedListItem),
      this.initWithSearchCriteria(e));
  }),
  (controllers.club.SelectItemFromClub.prototype.initWithCriteriaAndSBCChallenge = function initWithCriteriaAndSBCChallenge(
    e,
    t,
    i
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        t instanceof entities.SBCChallenge,
        'Expected a challenge entity during initialization.'
      ),
      (this._challenge = t),
      this.getView().addClass(enums.SquadPitchModes.SBC),
      this.initWithCriteriaAndSquad(e, this._challenge.squad, i));
  }),
  (controllers.club.SelectItemFromClub.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this._searchCriteria = null),
      (this._squad = null),
      (this._challenge = null),
      (this._viewmodel = null),
      utils.JS.isValid(this._pinnedListItem) &&
        (this._pinnedListItem.dealloc(), (this._pinnedListItem = null)),
      this.onItemChange.dealloc(),
      (this.onItemChange = null);
  }),
  (controllers.club.SelectItemFromClub.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.club.ClubSearchResults();
  }),
  (controllers.club.SelectItemFromClub.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.clubsearch');
  }),
  (controllers.club.SelectItemFromClub.prototype.viewWillAppear = function viewWillAppear() {
    this.superclass(), this._requestItems();
  }),
  (controllers.club.SelectItemFromClub.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    this._pinnedListItem &&
      (e.appendPinnedItemView(this._pinnedListItem.getView()),
      e.setPinnedItemData(this._pinnedListItem.getItem()),
      this._pinnedListItem.viewDidAppear()),
      e.updateListTopPosition();
  }),
  (controllers.club.SelectItemFromClub.prototype.setIterator = function setIterator(
    e
  ) {
    this._iterator = e;
  }),
  (controllers.club.SelectItemFromClub.prototype.setItemSearchType = function setItemSearchType(
    e
  ) {
    this._clubSearchType = e;
  }),
  (controllers.club.SelectItemFromClub.prototype._updateItemList = function _updateItemList(
    e
  ) {
    var t = this.getView();
    0 < e.length
      ? t.setItems(e)
      : t.setEmptyListMessage(this._searchCriteria.isModified()),
      t.setPaginationState(
        this._viewmodel.hasPreviousPage(),
        this._viewmodel.hasNextPage()
      ),
      t.setRowActionCallback(null),
      t.setRowTapCallback(null);
  }),
  (controllers.club.SelectItemFromClub.prototype._handleItemRetrieval = function _handleItemRetrieval(
    t,
    i
  ) {
    var s = this._viewmodel.getIndex(),
      a = services.Configuration.getFeatureSetting(
        enums.ServerFeature.SBC_ALLOW_UNTRADEABLE
      );
    (function _filterAndUpdate() {
      if (this._squad) {
        var o = this._iterator.current().getItem();
        t = t.filter(function(e) {
          var t =
              !this._squad.isSBC() ||
              (!e.isLoaned() &&
                !entities.Item.isAlex(e.resourceId) &&
                !entities.Item.isJim(e.resourceId) &&
                !entities.Item.isDanny(e.resourceId) &&
                (a || !e.untradeable)),
            i = !0;
          if (this._squad.containsItem(e)) {
            var s = e.compareResourceTo(o),
              n = e.compareResourceTo(o, !0);
            i = s && (!n || e.isLoaned() !== o.isLoaned());
          }
          return t && i;
        }, this);
      }
      var e = this._searchCriteria.acquiredDate !== enums.SearchSort.NONE;
      (this._viewmodel.sortByRecency = e),
        (this._viewmodel.sort = e
          ? this._searchCriteria.acquiredDate
          : this._searchCriteria.sort),
        this._viewmodel.addArray(t),
        (this._viewmodel.isFull = i),
        this._viewmodel.setIndex(s),
        !this._viewmodel.canShowPage(this._viewmodel.getCurrentPage()) ||
        this._viewmodel.shouldRequestItems()
          ? ((this._searchCriteria.offset += this._searchCriteria.count),
            this._requestItems())
          : this._updateItemList(this._viewmodel.getPageItems());
    }.call(this));
  }),
  (controllers.club.SelectItemFromClub.prototype._onGetConceptItemsComplete = function _onGetConceptItemsComplete(
    e,
    t
  ) {
    e.unobserve(this),
      t.success
        ? this._handleItemRetrieval(t.data.items, t.data.endOfList)
        : NetworkErrorManager.handleStatus(t.status);
  }),
  (controllers.club.SelectItemFromClub.prototype._onClubItemRetrievalComplete = function _onClubItemRetrievalComplete(
    e,
    t
  ) {
    e.unobserve(this),
      t.success
        ? this._handleItemRetrieval(t.data.items, t.data.retrievedAll)
        : t.data.error &&
          NetworkErrorManager.handle(
            NetworkErrorManager.generateDefaultStatusMessage(t.status),
            !1
          );
  }),
  (controllers.club.SelectItemFromClub.prototype._requestItems = function _requestItems() {
    this._viewmodel.canShowPage() && !this._viewmodel.shouldRequestItems()
      ? this._updateItemList(this._viewmodel.getPageItems())
      : this._searchCriteria &&
        (this._searchCriteria.type === enums.SearchType.PLAYER &&
        this._clubSearchType === enums.ItemSearchFeature.CONCEPT
          ? services.Item.searchConceptItems(this._searchCriteria).observe(
              this,
              this._onGetConceptItemsComplete
            )
          : services.Item.searchClub(this._searchCriteria).observe(
              this,
              this._onClubItemRetrievalComplete
            ));
  }),
  (controllers.club.SelectItemFromClub.prototype._addItemToSlot = function _addItemToSlot(
    e
  ) {
    var t = this._challenge ? this._challenge.squad : this._squad;
    t.addItemToSlot(this._slotIndex, e),
      this._challenge
        ? services.SBC.saveChallenge(this._challenge).observe(
            this,
            this._onSBCSaveComplete
          )
        : t.save(),
      services.Notification.queue([
        services.Localization.localize('infopanel.label.swapped'),
        enums.UINotificationType.POSITIVE
      ]);
  }),
  (controllers.club.SelectItemFromClub.prototype._onSBCSaveComplete = function _onSBCSaveComplete(
    e,
    t
  ) {
    if ((e.unobserve(this), !t.success)) {
      var i = 'notification.sbcChallenges.failedToSave';
      utils.JS.isValid(this._challenge) && this._challenge.hasExpired(!0)
        ? (i = 'notification.sbcChallenges.expired')
        : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
          (i = 'sbc.notification.disabled'),
        services.Notification.queue([
          services.Localization.localize(i),
          enums.UINotificationType.NEGATIVE
        ]);
    }
  }),
  (controllers.club.SelectItemFromClub.prototype._eRowSelected = function _eRowSelected(
    e,
    t,
    i
  ) {
    var s = i.item || null;
    if (
      !(
        !s ||
        (s.isManager() &&
          this._slotIndex !== entities.Squad.MANAGER_SLOT_INDEX) ||
        (s.isPlayer() && this._slotIndex === entities.Squad.MANAGER_SLOT_INDEX)
      )
    ) {
      var n = this.getNavigationController(),
        o = n.getPreviousController(),
        a = new controllers.club.SwapComparePlayers();
      a.init(),
        a.setItemData(this._squad.getSlot(this._slotIndex).getItem(), s),
        a.eOnAccept.observe(this, function _onCompareSwap() {
          this._addItemToSlot(s),
            this._pinnedListItem &&
              this._pinnedListItem.setSlot(this._iterator.current()),
            n.popToViewController(o);
        }),
        n.pushViewController(a);
    }
  }),
  (controllers.club.SelectItemFromClub.prototype._eRowActionSelected = function _eRowActionSelected(
    e,
    t,
    i
  ) {
    function _addToSlot(e) {
      this._addItemToSlot(e),
        (this._searchCriteria.defId = []),
        this.getNavigationController().popViewController();
    }
    var s = i.item || null;
    if (
      (utils.Debug.Assert(
        s instanceof entities.Item,
        'Expected to receive an item entity.'
      ),
      s)
    )
      if (s.concept) {
        var n = s.getDefId(),
          o = new transferobjects.SearchCriteria();
        (o.type = enums.SearchType.PLAYER),
          (o.defId = [n]),
          services.Item.searchClub(o).observe(this, function(e, t) {
            e.unobserve(this);
            var i =
              0 < t.data.items.length
                ? utils.JS.find(t.data.items, function(e) {
                    return e.getDefId() === n;
                  })
                : null;
            _addToSlot.call(
              this,
              null === i || (i.isLoaned() && this._squad.isSBC()) ? s : i
            );
          });
      } else _addToSlot.call(this, s);
  }),
  (controllers.club.SelectItemFromClub.prototype._eModifySearchSelected = function _eModifySearchSelected(
    e
  ) {
    this.getNavigationController().popViewController();
  }),
  (controllers.club.SelectItemFromClub.prototype._eNextPage = function _eNextPage(
    e,
    t,
    i
  ) {
    this._viewmodel.hasNextPage() &&
      (this._viewmodel.nextPage(),
      this._viewmodel.shouldRequestItems()
        ? ((this._searchCriteria.offset += this._searchCriteria.count),
          this._requestItems())
        : this._updateItemList(this._viewmodel.getPageItems()));
  }),
  (controllers.club.SelectItemFromClub.prototype._ePrevPage = function _ePrevPage(
    e,
    t,
    i
  ) {
    this._viewmodel.hasPreviousPage() &&
      this._updateItemList(this._viewmodel.previousPage());
  }),
  (controllers.club.SelectItemFromClub.prototype._eOnItemChange = function _eOnItemChange(
    e,
    t
  ) {
    this.getView().setPinnedItemData(t.getItem()),
      (this._slotIndex = t.getIndex()),
      this.onItemChange.notify(t);
  }),
  NamespaceManager.Register('controllers.club'),
  (controllers.club.ClubSearchFilters = function ClubSearchFiltersViewController() {
    UTViewController.call(this),
      (this._item = null),
      (this._squad = null),
      (this._challenge = null),
      (this._iterator = null),
      (this._viewmodel = new viewmodels.ItemSearch()),
      (this._pinnedListItem = null),
      (this._clubSearchType = enums.ItemSearchFeature.CLUB),
      (this.displayAsDetails = !1),
      (this.onItemChange = new UTObservable()),
      Object.defineProperty(this, 'onItemChange', {
        writable: !1
      });
  }),
  utils.JS.inherits(controllers.club.ClubSearchFilters, UTViewController),
  (controllers.club.ClubSearchFilters.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        TelemetryManager.trackPage(
          TelemetryManager.Sections.CLUB,
          'Club Search Filters'
        );
      var e = this.getView();
      e
        .getSearchButton()
        .addTarget(this, this._eSearchSelected, enums.Event.TAP),
        e
          .getResetButton()
          .addTarget(this, this._eResetSelected, enums.Event.TAP),
        e
          .getPlayerNameSearch()
          .addTarget(this, this._ePlayerNameChange, enums.Event.CHANGE),
        e
          .getSortOptions()
          .addTarget(this, this._eSortToggled, enums.Event.CHANGE),
        e
          .getSortDropDown()
          .addTarget(this, this._eDropDownChanged, enums.Event.CHANGE),
        e.onSearchModeChange.observe(this, this._eSearchModeChanged),
        e.onFilterChange.observe(this, this._eFilterChanged);
      var t = !(
          this._challenge &&
          !services.Configuration.getFeatureSetting(
            enums.ServerFeature.SBC_ALLOW_UNTRADEABLE
          )
        ),
        i = !(utils.JS.isValid(this._squad) && this._squad.isActive());
      e.setupSortOptions(t, i),
        t ||
          (this._viewmodel.searchCriteria.untradeables =
            enums.SearchUntradeables.EXCLUDE);
    }
  }),
  (controllers.club.ClubSearchFilters.prototype.initWithItem = function initWithItem(
    e
  ) {
    this.initialized ||
      (this._setItem(e),
      (this._pinnedListItem = new controllers.views.PinnedListItem()),
      this._pinnedListItem.initWithItem(e),
      this.addChildViewController(this._pinnedListItem),
      this.init());
  }),
  (controllers.club.ClubSearchFilters.prototype.initWithSquad = function initWithSquad(
    e,
    t
  ) {
    if (!this.initialized) {
      utils.Debug.Assert(
        e instanceof entities.Squad,
        'Initialization expected a squad entity.'
      ),
        (this._squad = e);
      var i = this._viewmodel.defaultSearchCriteria;
      (i.position = t.current().getGeneralPositionName()),
        this._viewmodel.updateSearchCriteria(i),
        this.initWithItem(t.current().getItem()),
        (this._pinnedListItem = new controllers.views.PinnedListItem()),
        (this._iterator = t),
        utils.JS.isValid(t)
          ? (this._pinnedListItem.initWithIterator(t),
            this._pinnedListItem.onItemChange.observe(
              this,
              this._eOnItemChange
            ))
          : this._pinnedListItem.init(),
        this.addChildViewController(this._pinnedListItem),
        this._adaptFiltersToItem();
    }
  }),
  (controllers.club.ClubSearchFilters.prototype.initWithSBCChallenge = function initWithSBCChallenge(
    e,
    t
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.SBCChallenge,
        'Initialization expected a challenge entity'
      ),
      (this._challenge = e),
      this.getView().addClass(enums.SquadPitchModes.SBC),
      this.initWithSquad(this._challenge.squad, t));
  }),
  (controllers.club.ClubSearchFilters.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this._item = null),
      (this._squad = null),
      (this._challenge = null),
      (this._iterator = null),
      (this._viewmodel = null),
      utils.JS.isValid(this._pinnedListItem) &&
        (this._pinnedListItem.dealloc(), (this._pinnedListItem = null)),
      this.onItemChange.dealloc(),
      (this.onItemChange = null);
  }),
  (controllers.club.ClubSearchFilters.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.club.ClubSearchFilters();
  }),
  (controllers.club.ClubSearchFilters.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    this.getNavigationController().setNavigationVisibility(!0, !0),
      this._iterator && this._setItem(this._iterator.current().getItem()),
      this._viewmodel.updateSearchCriteria(this._viewmodel.searchCriteria),
      e.setFilters(this._viewmodel),
      this._adaptFiltersToItem(),
      this._pinnedListItem &&
        (utils.JS.isValid(this._iterator) &&
          this._pinnedListItem.setSlot(this._iterator.current()),
        e.appendPinnedItemView(this._pinnedListItem.getView()),
        this._pinnedListItem.viewDidAppear());
  }),
  (controllers.club.ClubSearchFilters.prototype._adaptFiltersToItem = function _adaptFiltersToItem() {
    if (this._item) {
      var e = this.getView();
      e.togglePileFilter(this._item.isPlayer()),
        this._item.isPlayer()
          ? (e.setPileFilter(
              factories.DataProvider.getSearchPileDP(),
              this._clubSearchType
            ),
            this._item.isCustomBrick() && e.setInteractionState(!1))
          : this._item.isManager() || this._item.isManagerConsumable()
          ? (e.setFilterDefaultValue(
              enums.UISearchFilters.TYPE,
              enums.SearchCategory.MANAGER
            ),
            e.setFilterValue(
              enums.UISearchFilters.TYPE,
              enums.SearchCategory.MANAGER
            ),
            e.setFilterLock(enums.UISearchFilters.TYPE, !0))
          : this._item.isGKTraining()
          ? (e.setFilterDefaultValue(
              enums.UISearchFilters.POSITION,
              enums.PlayerPositions.GK
            ),
            e.setFilterValue(
              enums.UISearchFilters.POSITION,
              enums.PlayerPositions.GK
            ),
            e.setFilterLock(enums.UISearchFilters.POSITION, !0))
          : this._item.isPlayerPositionModifier()
          ? (e.setFilterDefaultValue(
              enums.UISearchFilters.POSITION,
              this._item.getStaticData().trainPosFrom
            ),
            e.setFilterValue(
              enums.UISearchFilters.POSITION,
              this._item.getStaticData().trainPosFrom
            ),
            e.setFilterLock(enums.UISearchFilters.POSITION, !0))
          : this._item.isGKStyleModifier() &&
            (e.setFilterDefaultValue(
              enums.UISearchFilters.POSITION,
              enums.PlayerPositions.GK
            ),
            e.setFilterValue(
              enums.UISearchFilters.POSITION,
              enums.PlayerPositions.GK
            ),
            e.setFilterLock(enums.UISearchFilters.POSITION, !0));
    }
  }),
  (controllers.club.ClubSearchFilters.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.clubsearch');
  }),
  (controllers.club.ClubSearchFilters.prototype.setSearchCriteria = function setSearchCriteria(
    e
  ) {
    this._viewmodel.updateSearchCriteria(e);
  }),
  (controllers.club.ClubSearchFilters.prototype._setItem = function _setItem(
    e
  ) {
    utils.Debug.Assert(
      e instanceof entities.Item,
      'Initialization expected an item entity.'
    );
    var t = !utils.JS.isValid(this._item) || this._item.type !== e.type;
    if (((this._item = e), !t)) return !1;
    var i = this._viewmodel.defaultSearchCriteria,
      s = e.isManager() || e.isManagerConsumable();
    return (
      (i.type = enums.SearchType.PLAYER),
      s
        ? ((i.type = enums.SearchType.STAFF),
          (i.category = enums.SearchCategory.MANAGER))
        : this._item.isPlayerTraining() || this._item.isPlayerStyleModifier()
        ? (i.zone = ZONE_NO_GK_VALUE)
        : this._item.isGKTraining() || this._item.isGKStyleModifier()
        ? (i.position = enums.PlayerPositions.GK)
        : this._item.isPlayerPositionModifier() &&
          (i.position = this._item.getStaticData().trainPosFrom),
      this._viewmodel.updateSearchCriteria(i),
      !0
    );
  }),
  (controllers.club.ClubSearchFilters.prototype._eSearchModeChanged = function _eSearchModeChanged(
    e,
    t
  ) {
    this._clubSearchType = t;
    var i = this.getView(),
      s = t === enums.ItemSearchFeature.CONCEPT;
    s
      ? (i.setFilterValue(enums.UISearchFilters.PLAYSTYLE, -1),
        i.setFilterDefaultValue(enums.UISearchFilters.PLAYSTYLE, -1))
      : i.setFilterLock(enums.UISearchFilters.POSITION, !1),
      i.setFilterLock(enums.UISearchFilters.PLAYSTYLE, s),
      i.toggleExcludeSquadSlider(!s);
  }),
  (controllers.club.ClubSearchFilters.prototype._eSortToggled = function _eSortToggled(
    e,
    t,
    i
  ) {
    i.id === enums.UISortOptionType.UNTRADEABLE
      ? (this._viewmodel.searchCriteria.untradeables = i.checked
          ? enums.SearchUntradeables.ONLY
          : enums.SearchUntradeables.DEFAULT)
      : i.id === enums.UISortOptionType.EXCLUDE_SQUAD &&
        (i.checked
          ? this._viewmodel
              .requestActiveSquadDefIds()
              .observe(this, function(e, t) {
                e.unobserve(this),
                  (this._viewmodel.searchCriteria.excludeDefIds =
                    t.data.defIds);
              })
          : (this._viewmodel.searchCriteria.excludeDefIds = []));
  }),
  (controllers.club.ClubSearchFilters.prototype._eDropDownChanged = function _eDropDownChanged(
    e,
    t,
    i
  ) {
    var s = 'Club Search Filters - Sort By DropDown changed to: ';
    switch (e.getId()) {
      case enums.SearchSortType.VALUE_DESC:
        (this._viewmodel.searchCriteria.sort = e.getValue()),
          (s += "'Highest Quick Sell'");
        break;
      case enums.SearchSortType.VALUE_ASC:
        (this._viewmodel.searchCriteria.sort = e.getValue()),
          (s += "'Lowest Quick Sell'");
        break;
      case enums.SearchSortType.RECENCY_DESC:
        (this._viewmodel.searchCriteria.acquiredDate = e.getValue()),
          (s += "'Most Recent'");
        break;
      default:
        utils.Debug.Assert(
          !1,
          'ClubSearchFilters :: Passed an invalid SearchSort Enums.'
        );
    }
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.CLUB,
      TelemetryManager.Categories.FILTER,
      s
    );
  }),
  (controllers.club.ClubSearchFilters.prototype._eFilterChanged = function _eFilterChanged(
    e,
    t,
    i,
    s
  ) {
    this._viewmodel.updateFromFilterChange(t, i, s),
      this.getView().setFilters(this._viewmodel);
  }),
  (controllers.club.ClubSearchFilters.prototype._eResetSelected = function _eResetSelected(
    e,
    t
  ) {
    this._viewmodel.resetSearch();
    var i = this.getView(),
      s = i.getSortDropDown();
    i.setFilters(this._viewmodel),
      i.getSortOptions().reset(),
      s.setIndex(s.getDefaultIndex()),
      services.User.getUser().squadSearchCriteria.reset();
  }),
  (controllers.club.ClubSearchFilters.prototype._ePlayerNameChange = function _ePlayerNameChange(
    e,
    t
  ) {
    var i = this.getView()
        .getPlayerNameSearch()
        .getSelected(),
      s = this.getView();
    utils.JS.isValid(i)
      ? this._viewmodel.setPlayerData(i)
      : this._viewmodel.clearPlayerData(),
      s.setFilters(this._viewmodel),
      this._adaptFiltersToItem(),
      utils.JS.isValid(i) &&
        (s.setFilterValue(enums.UISearchFilters.NATION, -1),
        s.setFilterValue(enums.UISearchFilters.LEAGUE, -1),
        s.setFilterValue(enums.UISearchFilters.CLUB, -1));
  }),
  (controllers.club.ClubSearchFilters.prototype._eSearchSelected = function _eSearchSelected(
    e,
    t,
    i
  ) {
    if (hasConnection()) {
      var s = this._item && this._item.isConsumable(),
        n = s
          ? new controllers.club.ClubSearchResults()
          : new controllers.club.SelectItemFromClub(),
        o = this._viewmodel.searchCriteria;
      (o.offset = 0),
        s
          ? (n.setConsumableToApply(this._item),
            n.initWithSearchCriteria(o),
            (n.displayAsDetails = this.displayAsDetails))
          : (n.setItemSearchType(this._clubSearchType),
            n.setIterator(this._iterator),
            n.onItemChange.observe(this, this._eOnItemChange),
            this._challenge
              ? n.initWithCriteriaAndSBCChallenge(
                  o,
                  this._challenge,
                  this._iterator.current().getIndex()
                )
              : this._squad
              ? n.initWithCriteriaAndSquad(
                  o,
                  this._squad,
                  this._iterator.current().getIndex()
                )
              : n.initWithSearchCriteria(o));
      var a = services.User.getUser().squadSearchCriteria;
      a.update(o),
        (a.defId = []),
        (a.sort = enums.SearchSort.DESCENDING),
        (a.untradeables = enums.SearchUntradeables.DEFAULT),
        this.getNavigationController().pushViewController(n);
    } else
      utils.PopupManager.ShowAlert(
        utils.PopupManager.Alerts.NO_INTERNET_CONNECTION
      );
  }),
  (controllers.club.ClubSearchFilters.prototype._eOnItemChange = function _eOnItemChange(
    e,
    t
  ) {
    var i = this._setItem(t.getItem()),
      s = this._viewmodel.searchCriteria;
    (s.position = t.getGeneralPositionName() || enums.SearchType.ANY),
      i
        ? this.getView().setFilters(this._viewmodel)
        : this.getView().setFilterValue(
            enums.UISearchFilters.POSITION,
            s.position
          ),
      this._adaptFiltersToItem(),
      this.onItemChange.notify(t);
  }),
  NamespaceManager.Register('views.items'),
  (views.items.ApplicableConsumableList = function ApplicableConsumableListView() {
    UTView.call(this),
      (this._pinnedRow = null),
      Object.defineProperty(this, '_pinnedRow', {
        writable: !0,
        enumerable: !1
      }),
      (this._consumableRows = []),
      Object.defineProperty(this, '_consumableRows', {
        writable: !0,
        enumerable: !1
      }),
      (this.onApply = new UTObservable()),
      Object.defineProperty(this, 'onApply', {
        writable: !1,
        enumerable: !0
      }),
      this._generate();
  }),
  utils.JS.inherits(views.items.ApplicableConsumableList, UTView),
  (views.items.ApplicableConsumableList.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-pinned-list-container'),
        e.classList.add('SquadConsumablesSection'),
        (this.__pinnedDiv = document.createElement('ul')),
        this.__pinnedDiv.classList.add('ut-pinned-item'),
        this.__pinnedDiv.classList.add('pinnedDiv'),
        e.appendChild(this.__pinnedDiv),
        (this.__consumableList = document.createElement('ul')),
        this.__consumableList.classList.add('ut-pinned-list'),
        this.__consumableList.classList.add('searchResults'),
        e.appendChild(this.__consumableList),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.ApplicableConsumableList.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__pinnedDiv = null),
      (this.__consumableList = null);
  }),
  (views.items.ApplicableConsumableList.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.ApplicableConsumableList.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.ApplicableConsumableList.prototype.dealloc = function dealloc() {
    this.onApply.clearObservers(),
      this._removeListRows(),
      this._pinnedRow && (this._pinnedRow.destroy(), (this._pinnedRow = null)),
      this.superclass();
  }),
  (views.items.ApplicableConsumableList.prototype._generateItemRow = function _generateItemRow(
    e
  ) {
    var t = new components.ListRowItem();
    return (
      t.setData(e),
      t.render(),
      this._consumableRows.push(t),
      this.__consumableList.appendChild(t.getRootElement()),
      t
    );
  }),
  (views.items.ApplicableConsumableList.prototype._removeListRows = function _removeListRows() {
    0 < this._consumableRows.length &&
      (this._consumableRows.forEach(function(e) {
        e.destroy();
      }),
      (this._consumableRows = []));
  }),
  (views.items.ApplicableConsumableList.prototype._setItemRowAction = function _setItemRowAction(
    e,
    t
  ) {
    e.setAction(enums.UIRowActionClass.ADD, t);
  }),
  (views.items.ApplicableConsumableList.prototype._setItemRowTapCB = function _setItemRowTapCB(
    e,
    t
  ) {
    e.setTapCallback(t);
  }),
  (views.items.ApplicableConsumableList.prototype.setItems = function setItems(
    e
  ) {
    DOMKit.empty(this.__consumableList),
      this._removeListRows(),
      e.forEach(function(e) {
        var t = this._generateItemRow(e);
        this._setItemRowAction(t, this.onApply.notify.bind(this.onApply, e)),
          t.setActionState(
            this._pinnedRow && e.canApplyTo(this._pinnedRow.getData())
          );
      }, this);
  }),
  (views.items.ApplicableConsumableList.prototype.setPinnedItem = function setPinnedItem(
    e
  ) {
    DOMKit.empty(this.__pinnedDiv),
      this._pinnedRow && this._pinnedRow.destroy(),
      (this._pinnedRow = new components.ListRowItem()),
      this._pinnedRow.setData(e),
      this._pinnedRow.render(),
      this.__pinnedDiv.appendChild(this._pinnedRow.getRootElement()),
      (this.__consumableList.style.top = this.__pinnedDiv.offsetHeight + 'px');
  }),
  NamespaceManager.Register('controllers.items'),
  (controllers.items.ApplicableConsumableList = function ApplicableConsumableListViewController() {
    UTViewController.call(this),
      (this._items = []),
      (this._pinnedItem = null),
      (this._squad = null);
  }),
  utils.JS.inherits(
    controllers.items.ApplicableConsumableList,
    UTViewController
  ),
  (controllers.items.ApplicableConsumableList.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      TelemetryManager.trackPage(
        this._squad && this._squad.isSBC()
          ? TelemetryManager.Sections.SBC
          : TelemetryManager.Sections.SQUADS,
        'Squad Consumables'
      ),
      this.getView().onApply.observe(this, this._eApplyConsumable));
  }),
  (controllers.items.ApplicableConsumableList.prototype.initWithItems = function initWithItems(
    e,
    t
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        Array.isArray(e),
        'Initialization expected an array of item entities.'
      ),
      utils.Debug.Assert(
        t instanceof entities.Item,
        'Initialization expected an item entity.'
      ),
      this._squad ||
        (e = e.filter(function(e) {
          return !e.isTeamFitness();
        })),
      (this._items = e),
      (this._pinnedItem = t),
      this.init());
  }),
  (controllers.items.ApplicableConsumableList.prototype.initWithItemsAndSquad = function initWithItemsAndSquad(
    e,
    t,
    i
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        i instanceof entities.Squad,
        'Initialization expected a squad entity.'
      ),
      (this._squad = i),
      this.initWithItems(e, t));
  }),
  (controllers.items.ApplicableConsumableList.prototype.initWithItemsAndSBCChallenge = function initWithItemsAndSBCChallenge(
    e,
    t,
    i
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        i instanceof entities.SBCChallenge,
        'Initialization expected a challenge entity.'
      ),
      (this._challenge = i),
      this.initWithItemsAndSquad(e, t, this._challenge.squad));
  }),
  (controllers.items.ApplicableConsumableList.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this._items = []),
      (this._pinnedItem = null),
      (this._squad = null),
      (this._challenge = null);
  }),
  (controllers.items.ApplicableConsumableList.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.ApplicableConsumableList();
  }),
  (controllers.items.ApplicableConsumableList.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('panel.applyitem.button');
  }),
  (controllers.items.ApplicableConsumableList.prototype.viewDidAppear = function viewDidAppear() {
    this.getNavigationController().setNavigationVisibility(!0, !0),
      this._refreshView(),
      this.superclass();
  }),
  (controllers.items.ApplicableConsumableList.prototype._refreshView = function _refreshView() {
    var e = this.getView();
    this._pinnedItem && e.setPinnedItem(this._pinnedItem),
      e.setItems(this._items);
  }),
  (controllers.items.ApplicableConsumableList.prototype._eApplyConsumable = function(
    e,
    s
  ) {
    var n = this.getView();

    function _onApplyConsumableComplete(e, t) {
      if ((e.unobserve(this), t.success)) {
        var i = this._challenge ? this._challenge.squad : this._squad;
        services.Notification.queue([
          services.Localization.localize('notification.item.appliedConsumable'),
          enums.UINotificationType.NEUTRAL
        ]),
          i &&
            (s.isPlayerPositionModifier() || s.isManagerLeagueModifier()) &&
            i.updateChemistry(),
          this._challenge
            ? services.SBC.saveChallenge(this._challenge).observe(
                this,
                this._onSBCSaveComplete
              )
            : this._squad && this._squad.save(),
          (this._items = this._items.filter(function(e) {
            return 0 < e.stackCount;
          })),
          0 < this._items.length
            ? this._refreshView()
            : this.getNavigationController().popViewController(!0),
          this.isViewDisplayed() && n.setInteractionState(!0);
      } else NetworkErrorManager.handleStatus(t.status);
      gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
    }
    if ((n.setInteractionState(!1), s.isTeamFitness())) {
      if (
        (utils.Debug.Assert(
          this._squad instanceof entities.Squad,
          'Attempted to apply team fitness when no target squad set.'
        ),
        this._squad)
      ) {
        var t = this._squad.getPlayers().reduce(function(e, t) {
          var i = t.getItem();
          return t.isValid() && i.fitness < 99 && e.push(i), e;
        }, []);
        0 < t.length
          ? (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
            services.Item.applyTo(s, t).observe(
              this,
              _onApplyConsumableComplete
            ))
          : services.Notification.queue([
              services.Localization.localize(
                'notification.item.unableToApplySquadFitnessConsumable'
              ),
              enums.UINotificationType.NEGATIVE
            ]);
      }
    } else
      this._pinnedItem
        ? (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
          services.Item.applyTo(s, this._pinnedItem).observe(
            this,
            _onApplyConsumableComplete
          ))
        : (utils.Debug.Assert(
            !1,
            'Attempted to apply consumable when no target set.'
          ),
          n.setInteractionState(!0),
          this.getNavigationController().popToRootViewController(!0));
  }),
  (controllers.items.ApplicableConsumableList.prototype._onSBCSaveComplete = function _onSBCSaveComplete(
    e,
    t
  ) {
    if ((e.unobserve(this), !t.success)) {
      var i = 'notification.sbcChallenges.failedToSave';
      this._challenge.hasExpired(!0)
        ? (i = 'notification.sbcChallenges.expired')
        : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
          (i = 'sbc.notification.disabled'),
        services.Notification.queue([
          services.Localization.localize(i),
          enums.UINotificationType.NEGATIVE
        ]);
    }
  }),
  NamespaceManager.Register('components'),
  (views.lists.ClubCategoryRow = function ListRowClubCategoryView() {
    UTTargetActionView.call(this), this._generate();
  }),
  utils.JS.inherits(views.lists.ClubCategoryRow, UTTargetActionView),
  (views.lists.ClubCategoryRow.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('has-tap-callback'),
        e.classList.add('rowContent'),
        e.classList.add('ListRowClubCategory'),
        (this.__imageContainer = document.createElement('div')),
        this.__imageContainer.classList.add('icon'),
        e.appendChild(this.__imageContainer);
      var t = document.createElement('header');
      (this.__title = document.createElement('h1')),
        this.__title.classList.add('categoryTitle'),
        t.appendChild(this.__title),
        (this.__stack = document.createElement('h2')),
        this.__stack.classList.add('stackValue'),
        t.appendChild(this.__stack),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.lists.ClubCategoryRow.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__imageContainer = null),
      (this.__title = null),
      (this.__stack = null);
  }),
  (views.lists.ClubCategoryRow.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.lists.ClubCategoryRow.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.lists.ClubCategoryRow.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (views.lists.ClubCategoryRow.prototype.show = function show() {
    this.setDisplay(!0);
  }),
  (views.lists.ClubCategoryRow.prototype.hide = function hide() {
    this.setDisplay(!1);
  }),
  (views.lists.ClubCategoryRow.prototype.setTitle = function setTitle(e) {
    this.__title.textContent = e;
  }),
  (views.lists.ClubCategoryRow.prototype.setStackCount = function setStackCount(
    e
  ) {
    if (0 === e)
      this.__stack.textContent = services.Localization.localize(
        'club.consumables.NA'
      );
    else {
      var t =
        1 === e
          ? services.Localization.localize('dock.label.item')
          : services.Localization.localize('dock.label.items');
      this.__stack.textContent = e.toString() + ' ' + t;
    }
  }),
  (views.lists.ClubCategoryRow.prototype.showStackCount = function showStackCount(
    e
  ) {
    DOMKit.toggleDisplayStyle(this.__stack, e);
  }),
  (views.lists.ClubCategoryRow.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass(
      [enums.UIState.ACTIVE, enums.UIButtonState.HOVER].join(' ')
    );
  }),
  (views.lists.ClubCategoryRow.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIButtonState.HOVER);
  }),
  (views.lists.ClubCategoryRow.prototype._touchStarted = function _touchStarted(
    e
  ) {
    this.superclass(), this.addClass(enums.UIState.ACTIVE);
  }),
  (views.lists.ClubCategoryRow.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE);
  }),
  (views.lists.ClubCategoryRow.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE);
  }),
  (views.lists.ClubCategoryRow.prototype._touchCancelled = function _touchCancelled(
    e
  ) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE);
  }),
  (views.lists.ClubCategoryRow.prototype._tapDetected = function _tapDetected(
    e
  ) {
    this.superclass(), this._triggerActions(enums.Event.TAP);
  }),
  NamespaceManager.Register('views.items'),
  (views.items.ConsumableCategories = function ConsumableCategoriesView() {
    UTTargetActionView.call(this),
      (this._pinnedRow = null),
      Object.defineProperty(this, '_pinnedRow', {
        writable: !0,
        enumerable: !1
      }),
      (this._noResultsView = null),
      this._generate();
  }),
  utils.JS.inherits(views.items.ConsumableCategories, UTTargetActionView),
  (views.items.ConsumableCategories.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-pinned-list-container'),
        e.classList.add('SquadConsumables'),
        (this.__pinnedDiv = document.createElement('ul')),
        this.__pinnedDiv.classList.add('ut-pinned-item'),
        e.appendChild(this.__pinnedDiv),
        (this.__categoryList = document.createElement('div')),
        this.__categoryList.classList.add('ut-pinned-list'),
        this.__categoryList.classList.add('consumablesFilterOptions'),
        this.__categoryList.classList.add('searchFilterOptions'),
        (this._training = new views.lists.ClubCategoryRow()),
        this._training.getRootElement().classList.add('consumable'),
        this._training.getRootElement().classList.add('training'),
        this.__categoryList.appendChild(this._training.getRootElement()),
        (this._contract = new views.lists.ClubCategoryRow()),
        this._contract.getRootElement().classList.add('consumable'),
        this._contract.getRootElement().classList.add('contracts'),
        this.__categoryList.appendChild(this._contract.getRootElement()),
        (this._fitness = new views.lists.ClubCategoryRow()),
        this._fitness.getRootElement().classList.add('consumable'),
        this._fitness.getRootElement().classList.add('fitness'),
        this.__categoryList.appendChild(this._fitness.getRootElement()),
        (this._healing = new views.lists.ClubCategoryRow()),
        this._healing.getRootElement().classList.add('consumable'),
        this._healing.getRootElement().classList.add('healing'),
        this.__categoryList.appendChild(this._healing.getRootElement()),
        (this._positioning = new views.lists.ClubCategoryRow()),
        this._positioning.getRootElement().classList.add('consumable'),
        this._positioning.getRootElement().classList.add('positioning'),
        this.__categoryList.appendChild(this._positioning.getRootElement()),
        (this._leaguemod = new views.lists.ClubCategoryRow()),
        this._leaguemod.getRootElement().classList.add('consumable'),
        this._leaguemod.getRootElement().classList.add('leaguemodifier'),
        this.__categoryList.appendChild(this._leaguemod.getRootElement()),
        (this._chemstyle = new views.lists.ClubCategoryRow()),
        this._chemstyle.getRootElement().classList.add('consumable'),
        this._chemstyle.getRootElement().classList.add('chemstyles'),
        this.__categoryList.appendChild(this._chemstyle.getRootElement()),
        e.appendChild(this.__categoryList),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.ConsumableCategories.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__pinnedDiv = null),
      (this.__categoryList = null),
      this._training.destroy(),
      this._contract.destroy(),
      this._fitness.destroy(),
      this._healing.destroy(),
      this._positioning.destroy(),
      this._leaguemod.destroy(),
      this._chemstyle.destroy();
  }),
  (views.items.ConsumableCategories.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.ConsumableCategories.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.ConsumableCategories.prototype.init = function init() {
    this.superclass(),
      this._training.init(),
      this._training.setTitle(
        services.Localization.localize('search.filters.training')
      ),
      this._training.setDisplay(!1),
      this._contract.init(),
      this._contract.setTitle(
        services.Localization.localize('card.title.contract')
      ),
      this._contract.setDisplay(!1),
      this._fitness.init(),
      this._fitness.setTitle(services.Localization.localize('devtype.fitness')),
      this._fitness.setDisplay(!1),
      this._healing.init(),
      this._healing.setTitle(
        services.Localization.localize('club.category.healing')
      ),
      this._healing.setDisplay(!1),
      this._positioning.init(),
      this._positioning.setTitle(
        services.Localization.localize('card.title.advtraining')
      ),
      this._positioning.setDisplay(!1),
      this._chemstyle.init(),
      this._chemstyle.setTitle(
        services.Localization.localize('trainingtype.playStyle')
      ),
      this._chemstyle.setDisplay(!1),
      this._leaguemod.init(),
      this._leaguemod.setTitle(
        services.Localization.localize('card.title.leagueModifier')
      ),
      this._leaguemod.setDisplay(!1);
  }),
  (views.items.ConsumableCategories.prototype.dealloc = function dealloc() {
    this._pinnedRow && (this._pinnedRow.destroy(), (this._pinnedRow = null)),
      this._noResultsView &&
        (this._noResultsView.destroy(), (this._noResultsView = null)),
      this.superclass();
  }),
  (views.items.ConsumableCategories.prototype.setCategoryValues = function setCategoryValues(
    e
  ) {
    function _setupCategoryRow(e, t) {
      0 !== t
        ? (e.setStackCount(t),
          e.setDisplay(!0),
          e.addTarget(this, this._eCategorySelected, enums.Event.TAP))
        : e.setDisplay(!1);
    }
    0 < e.total
      ? (_setupCategoryRow.call(this, this._contract, e.contracts),
        _setupCategoryRow.call(this, this._fitness, e.fitness),
        _setupCategoryRow.call(this, this._healing, e.healing),
        _setupCategoryRow.call(this, this._leaguemod, e.managerLeagueModifier),
        _setupCategoryRow.call(this, this._chemstyle, e.playStyle),
        _setupCategoryRow.call(this, this._positioning, e.position),
        _setupCategoryRow.call(this, this._training, e.training))
      : ((this._noResultsView = new UTListNoResultsView()),
        this._noResultsView.init(),
        this._noResultsView.setText(
          services.Localization.localize('consumables.empty')
        ),
        DOMKit.empty(this.__categoryList),
        this.__categoryList.appendChild(this._noResultsView.getRootElement()));
  }),
  (views.items.ConsumableCategories.prototype.setPinnedItem = function setPinnedItem(
    e
  ) {
    DOMKit.empty(this.__pinnedDiv),
      this._pinnedRow && this._pinnedRow.destroy(),
      (this._pinnedRow = new components.ListRowItem()),
      this._pinnedRow.setData(e),
      this._pinnedRow.render(),
      this.__pinnedDiv.appendChild(this._pinnedRow.getRootElement()),
      (this.__categoryList.style.top = this.__pinnedDiv.offsetHeight + 'px'),
      e.isLoaned() && this._contract.setDisplay(!1);
  }),
  (views.items.ConsumableCategories.prototype._eCategorySelected = function _eCategorySelected(
    e,
    t,
    i
  ) {
    var s;
    e === this._contract
      ? (s = enums.UIConsumableCategory.CONTRACTS)
      : e === this._fitness
      ? (s = enums.UIConsumableCategory.FITNESS)
      : e === this._healing
      ? (s = enums.UIConsumableCategory.HEALING)
      : e === this._leaguemod
      ? (s = enums.UIConsumableCategory.LEAGUEMOD)
      : e === this._chemstyle
      ? (s = enums.UIConsumableCategory.PLAYSTYLE)
      : e === this._positioning
      ? (s = enums.UIConsumableCategory.POSITION)
      : e === this._training && (s = enums.UIConsumableCategory.TRAINING),
      this._triggerActions(t, {
        category: s
      });
  }),
  NamespaceManager.Register('transferobjects'),
  (transferobjects.ConsumablesStats = function UTConsumableStatsDTO(e) {
    (this.contracts = (e && e.contracts) || 0),
      (this.fitness = (e && e.fitness) || 0),
      (this.healing = (e && e.healing) || 0),
      (this.managerLeagueModifier = (e && e.managerLeagueModifier) || 0),
      (this.playStyle = (e && e.playStyle) || 0),
      (this.position = (e && e.position) || 0),
      (this.training = (e && e.training) || 0),
      (this.total = 0),
      Object.defineProperty(this, 'total', {
        get: function() {
          return (
            this.contracts +
            this.fitness +
            this.healing +
            this.managerLeagueModifier +
            this.playStyle +
            this.position +
            this.training
          );
        },
        enumerable: !0
      });
  }),
  (viewmodels.ConsumableCategories = function ConsumableCategoriesViewModel(e) {
    viewmodels.Club.call(this, e), this._organizeItems();
  }),
  utils.JS.inherits(viewmodels.ConsumableCategories, viewmodels.Club),
  (viewmodels.ConsumableCategories.prototype.getTotals = function getTotals(
    t,
    e
  ) {
    var i = new transferobjects.ConsumablesStats(),
      s = !utils.JS.isValid(e) || e;
    return (
      this.values().forEach(function(e) {
        (utils.JS.isValid(t) && !e.canApplyTo(t)) ||
          (e.isContract()
            ? (i.contracts += e.stackCount)
            : e.isFitness() && s
            ? (i.fitness += e.stackCount)
            : e.isInjuryHealing()
            ? (i.healing += e.stackCount)
            : e.isManagerLeagueModifier()
            ? (i.managerLeagueModifier += e.stackCount)
            : e.isStyleModifier()
            ? (i.playStyle += e.stackCount)
            : e.isPlayerPositionModifier()
            ? (i.position += e.stackCount)
            : (e.isPlayerTraining() || e.isGKTraining()) &&
              (i.training += e.stackCount));
      }, this),
      i
    );
  }),
  (viewmodels.ConsumableCategories.prototype.getItems = function getItems(
    e,
    t
  ) {
    function _checkItemFilter(e) {
      return !t || e.canApplyTo(t);
    }
    if (utils.JS.isNumber(e))
      switch (e) {
        case enums.UIConsumableCategory.CONTRACTS:
          return this.values().filter(function(e) {
            return e.isContract() && _checkItemFilter(e);
          });
        case enums.UIConsumableCategory.FITNESS:
          return this.values().filter(function(e) {
            return e.isFitness() && _checkItemFilter(e);
          });
        case enums.UIConsumableCategory.HEALING:
          return this.values().filter(function(e) {
            return e.isInjuryHealing() && _checkItemFilter(e);
          });
        case enums.UIConsumableCategory.LEAGUEMOD:
          return this.values().filter(function(e) {
            return e.isManagerLeagueModifier() && _checkItemFilter(e);
          });
        case enums.UIConsumableCategory.PLAYSTYLE:
          return this.values().filter(function(e) {
            return e.isStyleModifier() && _checkItemFilter(e);
          });
        case enums.UIConsumableCategory.POSITION:
          return this.values().filter(function(e) {
            return e.isPlayerPositionModifier() && _checkItemFilter(e);
          });
        case enums.UIConsumableCategory.TRAINING:
          return this.values().filter(function(e) {
            return (
              (e.isPlayerTraining() || e.isGKTraining()) && _checkItemFilter(e)
            );
          });
      }
    return t ? this.values().filter(_checkItemFilter) : this.values();
  }),
  NamespaceManager.Register('controllers.items'),
  (controllers.items.ConsumableCategories = function ConsumableCategoriesController() {
    UTViewController.call(this),
      (this._item = null),
      (this._squad = null),
      (this._challenge = null),
      (this._viewmodel = null);
  }),
  utils.JS.inherits(controllers.items.ConsumableCategories, UTViewController),
  (controllers.items.ConsumableCategories.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this._challenge
          ? TelemetryManager.Sections.SBC
          : TelemetryManager.Sections.SQUADS,
        t = (this._challenge ? 'SBC' : 'Active') + ' Squad - Apply Consumables';
      TelemetryManager.trackPage(e, t),
        services.PIN.sendData(enums.PIN.EVENT.PAGE_VIEW, {
          type: PIN_PAGEVIEW_EVT_TYPE,
          pgid: t
        }),
        this.getView().addTarget(
          this,
          this._eCategorySelected,
          enums.Event.TAP
        );
    }
  }),
  (controllers.items.ConsumableCategories.prototype.initWithItem = function initWithItem(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.Item,
        'Initialization expected an item entity.'
      ),
      (this._item = e),
      this.init());
  }),
  (controllers.items.ConsumableCategories.prototype.initWithSquad = function initWithSquad(
    e,
    t
  ) {
    if (!this.initialized) {
      utils.Debug.Assert(
        e instanceof entities.Squad,
        'Initialization expected a squad entity.'
      ),
        utils.Debug.Assert(
          utils.JS.isNumber(t),
          'Initialization expected a number for current squad slot.'
        );
      var i = (this._squad = e).getSlot(t).getItem();
      utils.Debug.Assert(
        i.isValid(),
        'Initialization expected a valid item in the current squad slot.'
      ),
        this.initWithItem(i);
    }
  }),
  (controllers.items.ConsumableCategories.prototype.initWithSBCChallenge = function initWithSBCChallenge(
    e,
    t
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.SBCChallenge,
        'Initialization expected a challenge entity.'
      ),
      utils.Debug.Assert(
        utils.JS.isNumber(t),
        'Initialization expected a number for current squad slot.'
      ),
      (this._challenge = e),
      this.initWithSquad(this._challenge.squad, t));
  }),
  (controllers.items.ConsumableCategories.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this._item = null),
      (this._squad = null),
      (this._challenge = null),
      (this._viewmodel = null);
  }),
  (controllers.items.ConsumableCategories.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.ConsumableCategories();
  }),
  (controllers.items.ConsumableCategories.prototype.viewDidAppear = function viewDidAppear() {
    this.getNavigationController().setNavigationVisibility(!0, !0),
      this._refreshView(),
      this.superclass();
  }),
  (controllers.items.ConsumableCategories.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('panel.applyitem.button');
  }),
  (controllers.items.ConsumableCategories.prototype._refreshView = function _refreshView() {
    var s = this.getView();
    if ((this._item && s.setPinnedItem(this._item), this._viewmodel))
      s.setCategoryValues(
        this._viewmodel.getTotals(this._item, utils.JS.isValid(this._squad))
      );
    else {
      var e = new transferobjects.SearchCriteria();
      (e.type = enums.SearchType.CONSUMABLES_DEVELOPMENT),
        services.Item.searchClub(e).observe(this, function _onGetConsumables(
          e,
          t
        ) {
          if ((e.unobserve(this), t.success))
            (this._viewmodel = new viewmodels.ConsumableCategories(
              t.data.items
            )),
              s.setCategoryValues(
                this._viewmodel.getTotals(
                  this._item,
                  utils.JS.isValid(this._squad)
                )
              );
          else {
            services.Notification.queue([
              services.Localization.localize(
                'notification.error.loadConsumables'
              ),
              enums.UINotificationType.NEGATIVE
            ]);
            var i = this.getNavigationController();
            i && i.popViewController();
          }
        });
    }
  }),
  (controllers.items.ConsumableCategories.prototype._eCategorySelected = function _eCategorySelected(
    e,
    t,
    i
  ) {
    if (i && utils.JS.isNumber(i.category)) {
      var s = this._viewmodel.getItems(i.category, this._item),
        n = new controllers.items.ApplicableConsumableList();
      this._challenge
        ? n.initWithItemsAndSBCChallenge(s, this._item, this._challenge)
        : this._squad
        ? n.initWithItemsAndSquad(s, this._item, this._squad)
        : this._item
        ? n.initWithItems(s, this._item)
        : n.init(),
        this.getNavigationController().pushViewController(n);
    }
  }),
  NamespaceManager.Register('views.lists'),
  (views.lists.ProgressListItem = function ProgressListItemView() {
    UTView.call(this), (this.value = ''), (this.title = ''), this._generate();
  }),
  utils.JS.inherits(views.lists.ProgressListItem, UTView),
  (views.lists.ProgressListItem.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('li');
      e.classList.add('ut-progress-list-view');
      var t = document.createElement('div');
      t.classList.add('bar-container'),
        (this.__title = document.createElement('span')),
        this.__title.classList.add('title'),
        t.appendChild(this.__title),
        (this._progressBar = new UTProgressBarView()),
        this._progressBar.getRootElement().classList.add('mini'),
        t.appendChild(this._progressBar.getRootElement()),
        e.appendChild(t),
        (this.__value = document.createElement('span')),
        this.__value.classList.add('value'),
        e.appendChild(this.__value),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.lists.ProgressListItem.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      this._progressBar.destroy(),
      (this.__value = null);
  }),
  (views.lists.ProgressListItem.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.lists.ProgressListItem.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.lists.ProgressListItem.prototype.setProgress = function setProgress(
    e
  ) {
    this._progressBar.setProgress(e),
      75 <= e
        ? this._progressBar.setFeedbackState(enums.UIFeedbackState.HIGH)
        : 25 <= e
        ? this._progressBar.setFeedbackState(enums.UIFeedbackState.MEDIUM)
        : this._progressBar.setFeedbackState(enums.UIFeedbackState.LOW);
  }),
  (views.lists.ProgressListItem.prototype.render = function render() {
    (this.__value.textContent = this.value),
      (this.__title.textContent = this.title);
  }),
  utils.JS.inherits(UTPlayerBioView, UTView),
  (UTPlayerBioView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('article');
      e.classList.add('ut-pinned-list-container'),
        e.classList.add('ut-player-bio-view'),
        (this.__pinnedDiv = document.createElement('div')),
        e.appendChild(this.__pinnedDiv),
        (this.__scrollerDiv = document.createElement('div')),
        this.__scrollerDiv.classList.add('ut-pinned-list'),
        (this._navigation = new components.TabMenu()),
        this.__scrollerDiv.appendChild(this._navigation.getRootElement()),
        (this.__dataDisplay = document.createElement('div')),
        this.__scrollerDiv.appendChild(this.__dataDisplay),
        e.appendChild(this.__scrollerDiv),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTPlayerBioView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__pinnedDiv = null),
      (this.__scrollerDiv = null),
      this._navigation.destroy(),
      (this.__dataDisplay = null);
  }),
  (UTPlayerBioView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPlayerBioView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPlayerBioView.CLASS = {
    ISOLATED_SECTION: 'isolated-section',
    PSEUDO_TABLE: 'pseudo-table'
  }),
  (UTPlayerBioView.prototype.dealloc = function dealloc() {
    this._clearComponentList(this._tables),
      this._clearComponentList(this._headers),
      (this._tables = null),
      (this._headers = null),
      (this._pinnedRow = null),
      this.superclass();
  }),
  (UTPlayerBioView.prototype.setupNavigation = function setupNavigation(e, t) {
    this._navigation.addTab(
      enums.PlayerBioDisplayGroup.INFO,
      services.Localization.localize('extendedPlayerInfo.tab.general')
    ),
      this._navigation.addTab(
        enums.PlayerBioDisplayGroup.ATTRIBUTES,
        services.Localization.localize('extendedPlayerInfo.tab.stats')
      ),
      t &&
        this._navigation.addTab(
          enums.PlayerBioDisplayGroup.LEGENDS,
          services.Localization.localize('extendedPlayerInfo.tab.legend')
        ),
      this._navigation.setActiveTab(enums.PlayerBioDisplayGroup.INFO),
      this._navigation.addTarget(this, e, enums.Event.TAP),
      this._navigation.layoutSubviews();
  }),
  (UTPlayerBioView.prototype.render = function render(e, t) {
    switch (
      (DOMKit.empty(this.__dataDisplay),
      this._clearComponentList(this._tables),
      this._clearComponentList(this._headers),
      e)
    ) {
      case enums.PlayerBioDisplayGroup.INFO:
        this.renderInfo(t);
        break;
      case enums.PlayerBioDisplayGroup.ATTRIBUTES:
        this.renderAttributes(t);
        break;
      case enums.PlayerBioDisplayGroup.LEGENDS:
        this.renderLegends(t);
    }
  }),
  (UTPlayerBioView.prototype.renderInfo = function renderInfo(e) {
    var t = e.getYellowCards(),
      i = e.getTotalYellowCards(),
      s = e.getRedCards(),
      n = e.getTotalRedCards(),
      o = e.getStaticData(),
      a = e.getMetaData(),
      r = new Date(1e3 * a.birthday),
      l = services.Localization.localize('extendedPlayerInfo.details.cards', [
        i,
        Math.max(0, i - t),
        t
      ]),
      c = services.Localization.localize('extendedPlayerInfo.details.cards', [
        n,
        Math.max(0, n - s),
        s
      ]),
      u = 'extendedPlayerInfo.stats.' + (e.isLeftFoot() ? 'Left' : 'Right');

    function _generateWorkRateHALString(e) {
      return 2 <= e
        ? 'extendedPlayerInfo.workrate.high'
        : 1 <= e
        ? 'extendedPlayerInfo.workrate.low'
        : 'extendedPlayerInfo.workrate.medium';
    }
    this._createHeader(
      this.__dataDisplay,
      services.Localization.localize('extendedPlayerInfo.header'),
      this._headers
    );
    var d = document.createElement('ul');
    d.classList.add(UTPlayerBioView.CLASS.PSEUDO_TABLE),
      this.__dataDisplay.appendChild(d);
    var h = '';
    e.isSpecial() ||
      (h = services.Localization.localize(
        'search.cardLevels.cardLevel' + e.getTier()
      ));
    var p =
      services.Localization.localize('item.raretype' + e.rareflag) + ' ' + h;
    this._createRow(
      d,
      services.Localization.localize('extendedPlayerInfo.general.rarity'),
      p
    ),
      this._createRow(
        d,
        services.Localization.localize('extendedPlayerInfo.general.firstName'),
        o.firstName + ' ' + o.lastName
      ),
      this._createRow(
        d,
        services.Localization.localize('extendedPlayerInfo.general.knownAs'),
        o.knownAs
      ),
      this._createRow(
        d,
        services.Localization.localize(
          'extendedPlayerInfo.general.dateOfBirth'
        ),
        services.Localization.localize('date.mmddyyyy', [
          r.getUTCMonth() + 1,
          r.getUTCDate(),
          r.getUTCFullYear()
        ])
      ),
      this._createRow(
        d,
        services.Localization.localize('extendedPlayerInfo.general.height'),
        services.Localization.localizeHeight(a.height)
      ),
      this._createRow(
        d,
        services.Localization.localize(
          'extendedPlayerInfo.general.preferredPosition'
        ),
        services.Localization.localize(
          'extendedPlayerInfo.positions.position' + e.preferredPosition
        )
      ),
      e.isGK()
        ? this._createRow(
            d,
            services.Localization.localize(
              'extendedPlayerInfo.general.saveTechnique'
            ),
            utils.FUTLocalization.getSaveTechniqueString(a.saveTechnique)
          )
        : this._createRow(
            d,
            services.Localization.localize(
              'extendedPlayerInfo.general.workrate'
            ),
            services.Localization.localize(
              'extendedPlayerInfo.workrate.values',
              [
                services.Localization.localize(
                  _generateWorkRateHALString(e.getOffensiveWorkRate())
                ),
                services.Localization.localize(
                  _generateWorkRateHALString(e.getDefensiveWorkRate())
                )
              ]
            )
          ),
      this._createRow(
        d,
        services.Localization.localize(
          'extendedPlayerInfo.general.preferredFoot'
        ),
        services.Localization.localize(u)
      ),
      this._createRatingRow(
        d,
        services.Localization.localize('extendedPlayerInfo.stats.weakfoot'),
        e.getWeakFoot()
      ),
      this._createRatingRow(
        d,
        services.Localization.localize('extendedPlayerInfo.stats.skillmoves'),
        e.getSkillMoves()
      ),
      this._createRow(
        d,
        services.Localization.localize('extendedPlayerInfo.general.nation'),
        utils.FUTLocalization.getNationNameById(e.nationId)
      ),
      this._createRow(
        d,
        services.Localization.localize('extendedPlayerInfo.general.club'),
        utils.FUTLocalization.getTeamAbb15ByID(e.teamId, e.getYear())
      ),
      this._createRow(
        d,
        services.Localization.localize('extendedPlayerInfo.general.league'),
        utils.FUTLocalization.getLeagueNameByID(e.leagueId, e.getYear())
      ),
      this._createHeader(
        this.__dataDisplay,
        services.Localization.localize(
          'extendedPlayerInfo.general.itemDetails'
        ),
        this._headers
      ),
      (d = document.createElement('ul')).classList.add(
        UTPlayerBioView.CLASS.PSEUDO_TABLE
      ),
      this.__dataDisplay.appendChild(d),
      this._createRow(
        d,
        services.Localization.localize('extendedPlayerInfo.general.playstyle'),
        utils.FUTLocalization.getPlaystyleByID(e.playStyle, e.getYear())
      ),
      this._createRow(
        d,
        services.Localization.localize('extendedPlayerInfo.stats.fitness'),
        e.fitness
      ),
      this._createRow(
        d,
        services.Localization.localize(
          'extendedPlayerInfo.general.numberOfOwners'
        ),
        e.owners
      ),
      this._createRow(
        d,
        services.Localization.localize('extendedPlayerInfo.general.contract'),
        e.contract
      ),
      this._createRow(
        d,
        services.Localization.localize(
          'extendedPlayerInfo.general.gamesPlayed'
        ),
        e.getTotalGamesPlayed()
      ),
      this._createRow(
        d,
        services.Localization.localize(
          'extendedPlayerInfo.general.goalsScored'
        ),
        e.getTotalGoals()
      ),
      this._createRow(
        d,
        services.Localization.localize(
          'extendedPlayerInfo.general.totalYellowCards'
        ),
        l
      ),
      this._createRow(
        d,
        services.Localization.localize(
          'extendedPlayerInfo.general.totalRedCards'
        ),
        c
      );
  }),
  (UTPlayerBioView.prototype.renderAttributes = function renderAttributes(e) {
    var i = e.isGK()
      ? [
          'extendedPlayerInfo.stats.diving',
          'extendedPlayerInfo.stats.handling',
          'extendedPlayerInfo.stats.kicking',
          'extendedPlayerInfo.stats.reflexes',
          'extendedPlayerInfo.stats.acceleration',
          'extendedPlayerInfo.stats.positioning'
        ]
      : [
          'extendedPlayerInfo.stats.pace',
          'extendedPlayerInfo.stats.shooting',
          'extendedPlayerInfo.stats.passing',
          'extendedPlayerInfo.stats.dribbling',
          'extendedPlayerInfo.stats.defending',
          'extendedPlayerInfo.stats.heading'
        ];
    this._createHeader(
      this.__dataDisplay,
      services.Localization.localize('extendedPlayerInfo.tab.stats'),
      this._headers
    );
    var s = document.createElement('ul');
    s.classList.add(UTPlayerBioView.CLASS.PSEUDO_TABLE),
      this.__dataDisplay.appendChild(s),
      this._createProgressListRow(
        s,
        services.Localization.localize('extendedPlayerInfo.general.overall'),
        e.rating,
        e.rating
      ),
      (s = document.createElement('ul')).classList.add(
        UTPlayerBioView.CLASS.PSEUDO_TABLE
      ),
      this.__dataDisplay.appendChild(s),
      e.getAttributes().forEach(function(e, t) {
        this._createProgressListRow(
          s,
          services.Localization.localize(i[t]),
          e,
          (e / 99) * 100
        );
      }, this),
      this._createHeader(
        this.__dataDisplay,
        services.Localization.localize('extendedPlayerInfo.stats.status'),
        this._headers
      ),
      (s = document.createElement('ul')).classList.add(
        UTPlayerBioView.CLASS.PSEUDO_TABLE
      ),
      this.__dataDisplay.appendChild(s),
      this._createProgressListRow(
        s,
        services.Localization.localize('extendedPlayerInfo.stats.fitness'),
        e.fitness,
        (e.fitness / 99) * 100
      ),
      (s = document.createElement('ul')).classList.add(
        UTPlayerBioView.CLASS.PSEUDO_TABLE
      ),
      this.__dataDisplay.appendChild(s),
      this._createRow(
        s,
        services.Localization.localize('extendedPlayerInfo.general.injury'),
        services.Localization.localize(
          'extendedPlayerInfo.general.injury.' + e.injuryType
        )
      ),
      this._createRow(
        s,
        services.Localization.localize(
          'extendedPlayerInfo.general.injuryDuration'
        ),
        e.injuryGames
      ),
      this._createRow(
        s,
        services.Localization.localize('extendedPlayerInfo.currentYellowCards'),
        e.getYellowCards()
      ),
      this._createRow(
        s,
        services.Localization.localize('extendedPlayerInfo.currentRedCards'),
        e.getRedCards()
      );
  }),
  (UTPlayerBioView.prototype.renderLegends = function renderLegends(i) {
    var e = i.getMetaData().legendBio;
    this._createHeader(
      this.__dataDisplay,
      services.Localization.localize(
        'extendedPlayerInfo.legend.clubCareerTitle'
      ),
      this._headers
    );
    var s = new UTPseudoTableView();
    s.addClass(UTPseudoTableView.Style.ALTERNATING),
      this._tables.push(s),
      this.__dataDisplay.appendChild(s.getRootElement()),
      s.addRowGroup([
        services.Localization.localize('extendedPlayerInfo.legend.years'),
        services.Localization.localize('extendedPlayerInfo.legend.team'),
        services.Localization.localize('extendedPlayerInfo.legend.appearances'),
        services.Localization.localize('extendedPlayerInfo.legend.goals')
      ]),
      e.clubCareer.forEach(function(e, t) {
        s.addRowData([
          e.endYear - e.startYear,
          (function getTeamName(e, t) {
            if (
              ((!t || (utils.JS.isNumber(t) && t > enums.Year.ASSET)) &&
                (t = enums.Year.ASSET),
              t <= enums.Year.YEAR_2009)
            )
              return enums.Localization.BLANK_STR;
            var i = utils.FUTLocalization.getTeamAbb15ByID(e, t);
            return -1 !== i.indexOf('*') ? getTeamName(e, t - 1) : i;
          })(e.teamId, i.getYear()),
          e.matches,
          e.goals
        ]);
      }),
      this._createHeader(
        this.__dataDisplay,
        services.Localization.localize(
          'extendedPlayerInfo.legend.nationalCareerTitle'
        ),
        this._headers
      ),
      (s = new UTPseudoTableView()),
      this._tables.push(s),
      this.__dataDisplay.appendChild(s.getRootElement()),
      s.addRowGroup([
        services.Localization.localize('extendedPlayerInfo.legend.years'),
        services.Localization.localize('extendedPlayerInfo.legend.team'),
        services.Localization.localize('extendedPlayerInfo.legend.appearances'),
        services.Localization.localize('extendedPlayerInfo.legend.goals')
      ]),
      e.nationalCareer.forEach(function(e, t) {
        s.addRowData([
          e.endYear - e.startYear,
          utils.FUTLocalization.getTeamAbb15ByID(e.teamId, i.getYear()),
          e.matches,
          e.goals
        ]);
      }),
      this._createHeader(
        this.__dataDisplay,
        services.Localization.localize(
          'extendedPlayerInfo.legend.claimToFameTitle'
        ),
        this._headers
      );
    var t = document.createElement('p');
    t.classList.add(UTPlayerBioView.CLASS.ISOLATED_SECTION),
      (t.textContent = services.Localization.localize(
        'FUT_LEGEND_DESCR_' + i.getMaskedResourceId()
      )),
      this.__dataDisplay.appendChild(t);
  }),
  (UTPlayerBioView.prototype._createHeader = function _createHeader(e, t, i) {
    var s = new components.SectionHeader();
    s.hideButton(), s.setText(t), e.appendChild(s.getRootElement()), i.push(s);
  }),
  (UTPlayerBioView.prototype._createRow = function _createRow(e, t, i) {
    var s = document.createElement('li'),
      n = document.createElement('h1'),
      o = document.createElement('h2');
    (n.textContent = t),
      (o.textContent = i),
      s.appendChild(n),
      s.appendChild(o),
      e.appendChild(s);
  }),
  (UTPlayerBioView.prototype._createProgressListRow = function _createProgressListRow(
    e,
    t,
    i,
    s
  ) {
    var n = new views.lists.ProgressListItem();
    (n.value = i),
      (n.title = t),
      n.setProgress(s),
      e.appendChild(n.getRootElement()),
      n.render();
  }),
  (UTPlayerBioView.prototype._createRatingRow = function _createRatingRow(
    e,
    t,
    i
  ) {
    var s = document.createElement('li'),
      n = document.createElement('h1'),
      o = new UTStarRatingView();
    (n.textContent = t),
      o.setRatingPercent((i / 5) * 100),
      s.appendChild(n),
      s.appendChild(o.getRootElement()),
      e.appendChild(s);
  }),
  (UTPlayerBioView.prototype._clearComponentList = function _clearComponentList(
    e
  ) {
    this._tables.forEach(function(e, t) {
      e.dealloc();
    }),
      this._tables.splice(0, this._tables.length);
  }),
  (UTPlayerBioView.prototype.appendPinnedItemView = function appendPinnedItemView(
    e
  ) {
    (this._pinnedRow = e), this.addSubview(e, this.__pinnedDiv);
  }),
  (UTPlayerBioView.prototype.calculateHeights = function calculateHeights() {
    this._pinnedRow &&
      (this.__scrollerDiv.style.top =
        this._pinnedRow.getRootElement().clientHeight + 'px');
  }),
  NamespaceManager.Register('controllers.items'),
  utils.JS.inherits(UTPlayerBioViewController, UTViewController),
  (UTPlayerBioViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      TelemetryManager.trackPage(TelemetryManager.Sections.MISC, 'PlayerBio'));
  }),
  (UTPlayerBioViewController.prototype.initWithItem = function initWithItem(e) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.Item,
        'Initialization expected an item entity.'
      ),
      (this._pinnedItem = e),
      this._viewModel.add(e),
      this._pinnedItemController.initWithItem(e),
      this.init());
  }),
  (UTPlayerBioViewController.prototype.dealloc = function dealloc() {
    this._pinnedItemController.dealloc(),
      this._viewModel.resetCollection([]),
      this._viewModel.stopAuctionUpdates(),
      (this._pinnedItemController = null),
      (this._pinnedItem = null),
      (this._viewModel = null),
      this.superclass();
  }),
  (UTPlayerBioViewController.prototype.viewDidDisappear = function viewDidDisappear() {
    this.superclass(), this._viewModel.stopAuctionUpdates();
  }),
  (UTPlayerBioViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    this._pinnedItem &&
    this._pinnedItem.isPlayer() &&
    this._pinnedItem.getMetaData()
      ? (e.setupNavigation(
          this._eNavSelected.bind(this),
          this._pinnedItem.isLegend()
        ),
        e.appendPinnedItemView(this._pinnedItemController.getView()),
        e.render(enums.PlayerBioDisplayGroup.INFO, this._pinnedItem))
      : (utils.Debug.Assert(
          !1,
          'UTPlayerBioViewController::viewDidAppear. Requires a player item with proper meta data to be initialized with.'
        ),
        services.Notification.queue([
          services.Localization.localize('playerbio.unavailable'),
          enums.UINotificationType.NEGATIVE
        ])),
      isPhone() && this._viewModel.startAuctionUpdates(),
      e.layoutSubviews(),
      e.calculateHeights(),
      this.getNavigationController().setNavigationVisibility(!0);
  }),
  (UTPlayerBioViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTPlayerBioView();
  }),
  (UTPlayerBioViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.playerBio');
  }),
  (UTPlayerBioViewController.prototype._eNavSelected = function _eNavSelected(
    e,
    t,
    i
  ) {
    this.getView().render(i.id, this._pinnedItem);
  }),
  NamespaceManager.Register('views.popups'),
  (views.popups.InGameRewards = function InGameRewardsView() {
    UTTargetActionView.call(this), this._generate();
  }),
  utils.JS.inherits(views.popups.InGameRewards, UTTargetActionView),
  (views.popups.InGameRewards.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.setAttribute('id', 'InGameRewards');
      var t = document.createElement('header'),
        i = document.createElement('strong');
      (this.__title = document.createElement('h1')),
        i.appendChild(this.__title),
        t.appendChild(i),
        e.appendChild(t);
      var s = document.createElement('div');
      s.classList.add('content-container'),
        (this.__description = document.createElement('div')),
        this.__description.classList.add('description'),
        s.appendChild(this.__description);
      var n = document.createElement('section');
      n.classList.add('rewards-container'),
        (this._rewardsCarousel = new UTRewardsCarouselView()),
        n.appendChild(this._rewardsCarousel.getRootElement()),
        s.appendChild(n),
        e.appendChild(s);
      var o = document.createElement('footer');
      (this._actionBtn = new UTStandardButtonControl()),
        this._actionBtn.getRootElement().classList.add('call-to-action'),
        o.appendChild(this._actionBtn.getRootElement()),
        e.appendChild(o),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.popups.InGameRewards.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      (this.__description = null),
      this._rewardsCarousel.destroy(),
      this._actionBtn.destroy();
  }),
  (views.popups.InGameRewards.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.popups.InGameRewards.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.popups.InGameRewards.prototype.init = function init() {
    this.superclass(),
      this._actionBtn.init(),
      this._actionBtn.addTarget(this, this._eBtnTapped, enums.Event.TAP);
  }),
  (views.popups.InGameRewards.prototype.setTitle = function setTitle(e) {
    this.__title.textContent = e;
  }),
  (views.popups.InGameRewards.prototype.setDescription = function setDescription(
    e
  ) {
    this.__description.textContent = e;
  }),
  (views.popups.InGameRewards.prototype.setButtonText = function setButtonText(
    e
  ) {
    this._actionBtn.setText(e);
  }),
  (views.popups.InGameRewards.prototype.setupRewardsCarousel = function setupRewardsCarousel(
    e
  ) {
    0 < e.length && this._rewardsCarousel.setupRewards(e);
  }),
  (views.popups.InGameRewards.prototype.resetRewardsCarousel = function resetRewardsCarousel() {
    this._rewardsCarousel.reset();
  }),
  (views.popups.InGameRewards.prototype._eBtnTapped = function _eBtnTapped(
    e,
    t,
    i
  ) {
    this._triggerActions(enums.Event.TAP);
  }),
  utils.JS.inherits(UTPackGraphicView, UTView),
  (UTPackGraphicView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('basePack'),
        e.classList.add('ut-pack-graphic-view'),
        (this._packBackgroundImage = new UTImageView()),
        this._packBackgroundImage
          .getRootElement()
          .classList.add('ut-pack-graphic-view--background'),
        e.appendChild(this._packBackgroundImage.getRootElement()),
        (this._packForegroundImage = new UTImageView()),
        this._packForegroundImage
          .getRootElement()
          .classList.add('ut-pack-graphic-view--foreground'),
        e.appendChild(this._packForegroundImage.getRootElement()),
        (this.__promoText = document.createElement('div')),
        this.__promoText.classList.add('ut-pack-graphic-view--promo'),
        e.appendChild(this.__promoText),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTPackGraphicView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._packBackgroundImage.destroy(),
      this._packForegroundImage.destroy(),
      (this.__promoText = null);
  }),
  (UTPackGraphicView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPackGraphicView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPackGraphicView.prototype.setPackBackground = function setPackBackground(
    e,
    t
  ) {
    var i = utils.JS.isEmpty(t) ? e : t;
    this._packBackgroundImage.setResource(
      utils.AssetLocator.getPackBackgroundImageURI(
        utils.AssetLocator.IMAGE_TYPE_PACKS_BACKGROUND,
        enums.Year.ASSET,
        i
      )
    );
  }),
  (UTPackGraphicView.prototype.setPackForeground = function setPackForeground(
    e
  ) {
    if (utils.PackUtils.hasForeground(e)) {
      var t = utils.PackUtils.getForegroundId(e);
      this._packForegroundImage.setResource(
        utils.AssetLocator.getPackForegroundImageURI(
          utils.AssetLocator.IMAGE_TYPE_PACKS_FOREGROUND,
          enums.Year.ASSET,
          e,
          t
        )
      );
    }
  }),
  (UTPackGraphicView.prototype.setPromo = function setPromo(e, t) {
    if ((DOMKit.toggleClass(this.__promoText, 'limited', t), t))
      (this.__promoText.textContent = services.Localization.localize(
        'store.sale.limited'
      )),
        DOMKit.toggleDisplayStyle(this.__promoText, !0);
    else
      switch (e) {
        case enums.Purchase.DealType.DEAL:
          (this.__promoText.textContent = services.Localization.localize(
            'store.sale.deal'
          )),
            DOMKit.toggleDisplayStyle(this.__promoText, !0);
          break;
        case enums.Purchase.DealType.PROMO:
          (this.__promoText.textContent = services.Localization.localize(
            'store.sale.promo'
          )),
            DOMKit.toggleDisplayStyle(this.__promoText, !0);
          break;
        case enums.Purchase.DealType.BESTDEAL:
          (this.__promoText.textContent = services.Localization.localize(
            'store.sale.bestdeal'
          )),
            DOMKit.toggleDisplayStyle(this.__promoText, !0);
          break;
        default:
          (this.__promoText.textContent = ''),
            DOMKit.toggleDisplayStyle(this.__promoText, !1);
      }
  }),
  utils.JS.inherits(TNSContainerView, UTView),
  (TNSContainerView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('slider'), (this.__root = e), (this._generated = !0);
    }
  }),
  (TNSContainerView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (TNSContainerView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (TNSContainerView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (TNSContainerView.prototype.dealloc = function dealloc() {
    (this._afterChangeCallback = null), this.destroySlider(), this.superclass();
  }),
  (TNSContainerView.prototype.destroySlider = function destroySlider(e) {
    this.isOn() &&
      (this.slider.destroy(),
      (this.slider = null),
      utils.JS.isValid(e) &&
        (this.__root = e.getElementsByClassName('slider')[0]));
  }),
  (TNSContainerView.prototype.setup = function setup(e) {
    var t = e instanceof TNSPropertiesDTO;
    utils.Debug.Assert(
      t,
      'Trying to setup a TNSContainer without a defined set of TNSProperties.'
    ),
      utils.Debug.Assert(
        !utils.JS.isValid(this.slider),
        'Trying to setup a TNSContainer when it has already been setup.'
      ),
      t &&
        ((this.properties = e),
        (this.slider = tns(this.properties)),
        this.slider.events.on('indexChanged', this._eventHandler));
  }),
  (TNSContainerView.prototype.teardown = function teardown(e) {
    this.isOn() && this.destroySlider(e), this.emptyCarousel();
  }),
  (TNSContainerView.prototype.emptyCarousel = function emptyCarousel() {
    DOMKit.empty(this.getRootElement());
  }),
  (TNSContainerView.prototype.isOn = function isOn() {
    return !!this.slider && !!this.slider.isOn;
  }),
  (TNSContainerView.prototype.getCurrentSlide = function getCurrentSlide() {
    return this.isOn() ? this.slider.getInfo().displayIndex - 1 : -1;
  }),
  (TNSContainerView.prototype.getNumOfSlides = function getNumOfSlides() {
    return this.isOn() ? this.slider.getInfo().slideCountNew : 0;
  }),
  (TNSContainerView.prototype.afterChange = function afterChange(e) {
    utils.JS.isFunction(e) && (this._afterChangeCallback = e);
  }),
  (TNSContainerView.prototype.goTo = function goTo(e) {
    this.isOn() && this.getCurrentSlide() !== e && this.slider.goTo(e);
  }),
  (TNSContainerView.prototype.appendElem = function appendElem(e, t) {
    var i = document.createElement('div');
    utils.JS.isEmpty(t) || DOMKit.addClass(i, t),
      utils.JS.valToArray(e).forEach(function(e) {
        i.appendChild(e);
      }, this),
      this.getRootElement().appendChild(i);
  }),
  (TNSContainerView.prototype.dynamicSlideChange = function dynamicSlideChange(
    e,
    t
  ) {
    var i = this.getRootElement().children[e];
    if (utils.JS.isValid(i)) {
      var s = i.childNodes[0];
      if (s) return void i.replaceChild(t, s);
      utils.Debug.Assert(
        !1,
        "TNSContainerView::dynamicSlideChange. Can't find the slide that belongs to the provided index. Nothing being replaced."
      );
    }
  }),
  (TNSContainerView.prototype._handleSliderEvent = function _handleSliderEvent(
    e,
    t
  ) {
    'indexChanged' === t &&
      this._afterChangeCallback &&
      this._afterChangeCallback(e.displayIndex - 1);
  }),
  utils.JS.inherits(UTRewardsCarouselView, UTView),
  (UTRewardsCarouselView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('rewards-carousel'),
        (this.__tapAreaLeft = document.createElement('a')),
        this.__tapAreaLeft.classList.add('btn-flat'),
        this.__tapAreaLeft.classList.add('tapLeft'),
        e.appendChild(this.__tapAreaLeft),
        (this._tnsCarousel = new TNSContainerView()),
        this._tnsCarousel
          .getRootElement()
          .classList.add('rewards-slider-container'),
        e.appendChild(this._tnsCarousel.getRootElement()),
        (this.__tapAreaRight = document.createElement('a')),
        this.__tapAreaRight.classList.add('btn-flat'),
        this.__tapAreaRight.classList.add('tapRight'),
        e.appendChild(this.__tapAreaRight),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTRewardsCarouselView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__tapAreaLeft = null),
      this._tnsCarousel.destroy(),
      (this.__tapAreaRight = null);
  }),
  (UTRewardsCarouselView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTRewardsCarouselView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTRewardsCarouselView.Class = {
    REWARD: 'reward',
    TITLE: 'reward-title',
    COIN: 'coin-reward',
    COIN_BOOST: 'coin_boost-reward',
    XP: 'xp-reward',
    CHAMPION_POINTS: 'champions_qualification_points-reward'
  }),
  (UTRewardsCarouselView.prototype.dealloc = function dealloc() {
    this._playerItems.concat(this._packs).forEach(function(e) {
      e.dealloc();
    }, this),
      (this._playerItems = []),
      (this._packs = []),
      (this._afterChangeFn = null),
      this.reset(),
      this.superclass();
  }),
  (UTRewardsCarouselView.prototype.reset = function reset() {
    this._tnsCarousel.teardown(this.getRootElement()),
      (this.__tapAreaLeft = this.getRootElement().getElementsByClassName(
        'tapLeft'
      )[0]),
      (this.__tapAreaRight = this.getRootElement().getElementsByClassName(
        'tapRight'
      )[0]);
  }),
  (UTRewardsCarouselView.prototype.setMobileTitle = function setMobileTitle(e) {
    this._mobileTitle = e;
  }),
  (UTRewardsCarouselView.prototype.setNumVisibleItems = function setNumVisibleItems(
    e
  ) {
    this._visibleItems = e;
  }),
  (UTRewardsCarouselView.prototype.setAfterChangeFunction = function setAfterChangeFunction(
    e
  ) {
    this._afterChangeFn = e;
  }),
  (UTRewardsCarouselView.prototype.isOn = function isOn() {
    return this._tnsCarousel.isOn();
  }),
  (UTRewardsCarouselView.prototype.getCurrentSlide = function getCurrentSlide() {
    return this._tnsCarousel.getCurrentSlide();
  }),
  (UTRewardsCarouselView.prototype.getTapAreaRight = function getTapAreaRight() {
    return this.__tapAreaRight;
  }),
  (UTRewardsCarouselView.prototype.getTapAreaLeft = function __tapAreaLeft() {
    return this.__tapAreaLeft;
  }),
  (UTRewardsCarouselView.prototype._preSetup = function _preSetup(e) {
    this._tnsCarousel.emptyCarousel(),
      this._toggleLeftArrow(!1),
      this._toggleRightArrow(!1),
      (this._numOfRewards = e);
  }),
  (UTRewardsCarouselView.prototype.setupRewards = function setupRewards(e) {
    this._preSetup(e.length);
    var r = document.createElement('p');
    DOMKit.addClass(r, 'textField'),
      e.forEach(function(e) {
        var t = UTRewardsCarouselView.Class.REWARD,
          i = document.createElement('p'),
          s = [];
        if (
          (DOMKit.addClass(i, 'textField'),
          isPhone() &&
            0 < this._mobileTitle.length &&
            ((r.textContent = this._mobileTitle), s.push(r)),
          e.isCoin)
        )
          (t += ' ' + UTRewardsCarouselView.Class.COIN),
            (i.textContent = services.Localization.localizeNumber(e.value));
        else if (e.isItem)
          if (e.itemData.isCoinBoost())
            (t += ' ' + UTRewardsCarouselView.Class.COIN_BOOST),
              (i.textContent = services.Localization.localize(
                'FUT_SCMP_COIN_BOOST_' + e.itemData.resourceId
              ));
          else {
            var n = this._generateItemView(e.itemData, !1);
            s.push(n.getRootElement()),
              this._playerItems.push(n),
              (i.textContent = e.buildString());
          }
        else if (e.isPack) {
          var o = this._generatePackGraphicView(e);
          s.push(o.getRootElement()),
            this._packs.push(o),
            (i.textContent = e.buildString());
        } else if (e.isChampionQualificationPoints || e.isXP) {
          t +=
            ' ' +
            (e.isXP
              ? UTRewardsCarouselView.Class.XP
              : UTRewardsCarouselView.Class.CHAMPION_POINTS);
          var a =
            services.Localization.localizeNumber(e.value) +
            ' ' +
            e.buildString();
          i.textContent = a;
        }
        s.push(i), this._tnsCarousel.appendElem(s, t);
      }, this),
      isPhone() && DOMKit.addClass(r, UTRewardsCarouselView.Class.TITLE),
      1 < this._numOfRewards && this._instantiateCarousel();
  }),
  (UTRewardsCarouselView.prototype._instantiateCarousel = function _instantiateCarousel() {
    utils.JS.isValid(this.__tapAreaLeft) && this._toggleLeftArrow(!1),
      utils.JS.isValid(this.__tapAreaRight) && this._toggleRightArrow(!0),
      this._tnsCarousel.setup(this._generateTNSPropertiesDTO()),
      this._tnsCarousel.afterChange(this._afterChange.bind(this));
  }),
  (UTRewardsCarouselView.prototype._generateTNSPropertiesDTO = function _generateTNSPropertiesDTO() {
    var e = new TNSPropertiesDTO();
    return (
      (e.nav = 1 === this._visibleItems),
      (e.speed = 600),
      (e.prevButton = this.__tapAreaLeft),
      (e.nextButton = this.__tapAreaRight),
      (e.items = this._visibleItems),
      (e.container = this._tnsCarousel.getRootElement()),
      e
    );
  }),
  (UTRewardsCarouselView.prototype._afterChange = function _afterChange() {
    this._toggleArrows(this.getCurrentSlide()),
      utils.JS.isFunction(this._afterChangeFn) && this._afterChangeFn();
  }),
  (UTRewardsCarouselView.prototype._toggleArrows = function _toggleArrows(e) {
    var t = 0 === e,
      i = !1;
    (i =
      1 === this._visibleItems
        ? e === this._numOfRewards - 1
        : e >= this._numOfRewards - this._visibleItems),
      this._toggleLeftArrow(!t),
      this._toggleRightArrow(!i);
  }),
  (UTRewardsCarouselView.prototype._generateItemView = function _generateItemView(
    e,
    t
  ) {
    var i = t
      ? factories.ItemView.createSmallItem(e)
      : factories.ItemView.createLargeItem(e);
    return i.init(), i.showSecondaryViews(!1), i.render(e), i;
  }),
  (UTRewardsCarouselView.prototype._generatePackGraphicView = function _generatePackGraphicView(
    e
  ) {
    var t = new UTPackGraphicView(),
      i = utils.JS.isValid(e.assetId) ? e.assetId : e.halId;
    return (
      t.setPackBackground(i),
      t.setPackForeground(i),
      t.setPromo(enums.Purchase.DealType.REGULAR),
      t
    );
  }),
  (UTRewardsCarouselView.prototype._toggleLeftArrow = function _toggleLeftArrow(
    e
  ) {
    (e = !!e),
      (this.__tapAreaLeft.style.display = e ? '' : 'none'),
      (this.__tapAreaLeft.style.opacity = e ? 1 : 0),
      DOMKit.toggleClass(this.__tapAreaLeft, 'disabled', !e);
  }),
  (UTRewardsCarouselView.prototype._toggleRightArrow = function _toggleRightArrow(
    e
  ) {
    (e = !!e),
      (this.__tapAreaRight.style.display = e ? '' : 'none'),
      (this.__tapAreaRight.style.opacity = e ? 1 : 0),
      DOMKit.toggleClass(this.__tapAreaRight, 'disabled', !e);
  }),
  (controllers.views.popups.InGameRewards = function InGameRewardsController(
    e
  ) {
    controllers.views.popups.BasePopup.call(this),
      (this._rewards = e || []),
      (this.hasCoinsReward = !1),
      (this.hasItemReward = !1),
      (this.hasPackReward = !1),
      (this.hasChampionsQualificationPoints = !1),
      (this._rewardsCarouselSetup = !1);
  }),
  utils.JS.inherits(
    controllers.views.popups.InGameRewards,
    controllers.views.popups.BasePopup
  ),
  (controllers.views.popups.InGameRewards.prototype.init = function init() {
    this.superclass(),
      this.getView().addTarget(this, this._eBtnTapped, enums.Event.TAP);
  }),
  (controllers.views.popups.InGameRewards.prototype.dealloc = function dealloc() {
    (this._rewards = []), this.superclass();
  }),
  (controllers.views.popups.InGameRewards.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.InGameRewards();
  }),
  (controllers.views.popups.InGameRewards.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      !this._rewardsCarouselSetup &&
        0 < this._rewards.length &&
        (this.getView().setupRewardsCarousel(this._rewards),
        this._checkRewards(this._rewards),
        (this._rewardsCarouselSetup = !0));
  }),
  (controllers.views.popups.InGameRewards.prototype.setTitle = function setTitle(
    e
  ) {
    this.getView().setTitle(e);
  }),
  (controllers.views.popups.InGameRewards.prototype.setDescription = function setDescription(
    e
  ) {
    this.getView().setDescription(e);
  }),
  (controllers.views.popups.InGameRewards.prototype.setButtonText = function setButtonText(
    e
  ) {
    this.getView().setButtonText(e);
  }),
  (controllers.views.popups.InGameRewards.prototype._checkRewards = function _checkRewards(
    e
  ) {
    e.forEach(function(e) {
      (this.hasCoinsReward = this.hasCoinsReward || e.isCoin),
        (this.hasItemReward =
          this.hasItemReward || (e.isItem && !e.isCoinBoost)),
        (this.hasPackReward = this.hasPackReward || e.isPack),
        (this.hasChampionsQualificationPoints =
          this.hasChampionsQualificationPoints ||
          e.isChampionQualificationPoints);
    }, this);
  }),
  (controllers.views.popups.InGameRewards.prototype._eBtnTapped = function _eBtnTapped(
    e,
    t,
    i
  ) {
    this.closePopup(),
      this.hasItemReward &&
        (services.Notification.queue([
          services.Localization.localize('notification.item.added'),
          enums.UINotificationType.POSITIVE
        ]),
        repositories.Item.setDirty(enums.FUTItemPile.PURCHASED),
        getDefaultDispatcher().notify(
          enums.Notification.UNASSIGNED_ITEM_ADDED,
          this
        )),
      this.hasPackReward &&
        (services.Notification.queue([
          services.Localization.localize('notification.pack.added'),
          enums.UINotificationType.POSITIVE
        ]),
        services.User.getUser().incrementNumUnopenedPacks()),
      this.hasCoinsReward &&
        (services.Notification.queue([
          services.Localization.localize('notification.coins.added'),
          enums.UINotificationType.POSITIVE
        ]),
        services.User.requestCurrencies()),
      this.hasChampionsQualificationPoints &&
        services.Notification.queue([
          services.Localization.localize('notification.championsPoints.added'),
          enums.UINotificationType.POSITIVE
        ]);
  }),
  (controllers.views.popups.InGameRewards.prototype.handleKeyUpEvent = function handleKeyUpEvent(
    e
  ) {
    (e.key !== enums.KeyboardKey.ESCAPE &&
      e.key !== enums.KeyboardKey.MS_ESCAPE &&
      e.key !== enums.KeyboardKey.ENTER) ||
      this.onExit.notify(enums.UIDialogOptions.OK);
  }),
  utils.JS.inherits(
    UTPlayerPickRewardsController,
    controllers.views.popups.InGameRewards
  ),
  (UTPlayerPickRewardsController.prototype.init = function init() {
    this.setTitle(services.Localization.localize('playerpicks.rewards.title')),
      this.setDescription(
        services.Localization.localize('playerpicks.rewards.description')
      ),
      this.setButtonText(
        services.Localization.localize('playerpicks.rewards.claim')
      ),
      this.superclass();
  }),
  (UTPlayerPickRewardsController.prototype._eBtnTapped = function _eBtnTapped(
    e,
    t,
    i
  ) {
    this.closePopup(),
      this.hasItemReward &&
        (services.Notification.queue([
          services.Localization.localize('notification.item.added'),
          enums.UINotificationType.POSITIVE
        ]),
        repositories.Item.setDirty(enums.FUTItemPile.PURCHASED),
        getDefaultDispatcher().notify(
          enums.Notification.UNASSIGNED_ITEM_ADDED,
          this,
          {
            item: this._rewards[0].itemData
          }
        ));
  }),
  utils.JS.inherits(UTPlayerPickOptionView, UTTargetActionView),
  (UTPlayerPickOptionView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      (this.__optionContainer = document.createElement('div')),
        this.__optionContainer.classList.add('player-pick-option'),
        e.appendChild(this.__optionContainer),
        (this.__ownershipText = document.createElement('span')),
        e.appendChild(this.__ownershipText),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTPlayerPickOptionView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__optionContainer = null),
      (this.__ownershipText = null);
  }),
  (UTPlayerPickOptionView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPlayerPickOptionView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPlayerPickOptionView.prototype.init = function init() {
    this.superclass(),
      (this.__ownershipText.textContent = services.Localization.localize(
        'playerpicks.modal.option.owned'
      ));
  }),
  (UTPlayerPickOptionView.prototype.dealloc = function dealloc() {
    this._itemView.dealloc(), (this._itemView = null), this.superclass();
  }),
  (UTPlayerPickOptionView.prototype.getItemView = function getItemView() {
    return this._itemView;
  }),
  (UTPlayerPickOptionView.prototype.setSelected = function setSelected(e) {
    DOMKit.toggleClass(this.__optionContainer, enums.UIState.SELECTED, e);
  }),
  (UTPlayerPickOptionView.prototype.createItem = function createItem(e, t) {
    utils.JS.isValid(this._itemView) && this._itemView.dealloc(),
      (this._itemView = t
        ? factories.ItemView.createSmallItem(e)
        : factories.ItemView.createLargeItem(e)),
      this._itemView.init(),
      this._itemView.render(e),
      this.addSubview(this._itemView, this.__optionContainer),
      this.layoutSubviews();
  }),
  (UTPlayerPickOptionView.prototype.toggleOwnership = function toggleOwnership(
    e
  ) {
    DOMKit.toggleDisplayStyle(this.__ownershipText, e);
  }),
  (UTPlayerPickOptionView.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(e), this._triggerActions(enums.Event.TAP);
  }),
  utils.JS.inherits(UTPlayerPicksView, UTTargetActionView),
  (UTPlayerPicksView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('player-picks-modal');
      var t = document.createElement('header'),
        i = document.createElement('strong');
      (this.__title = document.createElement('h1')),
        i.appendChild(this.__title),
        t.appendChild(i),
        (this._itemInfoSwitchBtn = new UTItemInfoChangeButtonControl()),
        t.appendChild(this._itemInfoSwitchBtn.getRootElement()),
        e.appendChild(t),
        (this.__description = document.createElement('div')),
        this.__description.classList.add('description'),
        e.appendChild(this.__description);
      var s = document.createElement('div');
      s.classList.add('content-container'),
        (this.__smallPicksContainer = document.createElement('section')),
        this.__smallPicksContainer.classList.add('small-picks-container'),
        s.appendChild(this.__smallPicksContainer),
        (this.__largePicksContainer = document.createElement('section')),
        this.__largePicksContainer.classList.add('large-picks-container'),
        s.appendChild(this.__largePicksContainer),
        e.appendChild(s);
      var n = document.createElement('footer');
      (this._actionBtn = new UTStandardButtonControl()),
        this._actionBtn.getRootElement().classList.add('call-to-action'),
        n.appendChild(this._actionBtn.getRootElement()),
        e.appendChild(n),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTPlayerPicksView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      this._itemInfoSwitchBtn.destroy(),
      (this.__description = null),
      (this.__smallPicksContainer = null),
      (this.__largePicksContainer = null),
      this._actionBtn.destroy();
  }),
  (UTPlayerPicksView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPlayerPicksView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPlayerPicksView.Event = {
    SELECT_PICK: 'UTPlayerPicksView.Event.SELECT_PICK',
    CONFIRM_PICK: 'UTPlayerPicksView.Event.CONFIRM_PICK'
  }),
  (UTPlayerPicksView.prototype.init = function init() {
    this.superclass(),
      (this.__title.textContent = services.Localization.localize(
        'playerpicks.modal.title'
      )),
      this.setDescription(
        services.Localization.localize('playerpicks.modal.description.default')
      ),
      this._itemInfoSwitchBtn.init(),
      this._itemInfoSwitchBtn.setInteractionState(!0),
      this._actionBtn.init(),
      this._actionBtn.setInteractionState(!1),
      this._actionBtn.setText(
        services.Localization.localize('common.dialog.confirm')
      ),
      this._actionBtn.addTarget(this, this._eBtnTapped, enums.Event.TAP);
  }),
  (UTPlayerPicksView.prototype.dealloc = function dealloc() {
    this._playerPickViews.forEach(function(e) {
      e.dealloc();
    }, this),
      this._phoneLargeItem &&
        (this._phoneLargeItem.dealloc(), (this._phoneLargeItem = null)),
      this.superclass();
  }),
  (UTPlayerPicksView.prototype.setDescription = function setDescription(e) {
    this.__description.textContent = e;
  }),
  (UTPlayerPicksView.prototype.setItems = function setItems(e, s) {
    var n = isPhone(),
      o = n ? this.__smallPicksContainer : this.__largePicksContainer;
    e.forEach(function(e, t) {
      var i = new UTPlayerPickOptionView();
      i.init(),
        i.createItem(e, n),
        i.toggleOwnership(!n && s[t]),
        i.addTarget(this, this._eSelectPlayerPickOption, enums.Event.TAP),
        i.setInteractionState(!0),
        this._playerPickViews.push(i),
        this.addSubview(i, o);
    }, this),
      DOMKit.toggleDisplayStyle(this.__smallPicksContainer, n),
      this._actionBtn.setInteractionState(!0),
      this.layoutSubviews();
  }),
  (UTPlayerPicksView.prototype.getItemInfoSwitchButton = function getItemInfoSwitchButton() {
    return this._itemInfoSwitchBtn;
  }),
  (UTPlayerPicksView.prototype.selectPickOption = function selectPickOption(
    e,
    t,
    i
  ) {
    if ((this._playerPickViews[e].setSelected(!0), isPhone())) {
      if (this._phoneLargeItem) {
        var s = this._phoneLargeItem.getItemView();
        if (s.canRender(t))
          return s.render(t), void this._phoneLargeItem.toggleOwnership(i);
        this._phoneLargeItem.dealloc(), (this._phoneLargeItem = null);
      }
      (this._phoneLargeItem = new UTPlayerPickOptionView()),
        this._phoneLargeItem.init(),
        this._phoneLargeItem.createItem(t, !1),
        this._phoneLargeItem.toggleOwnership(i),
        this.__largePicksContainer.appendChild(
          this._phoneLargeItem.getRootElement()
        );
    }
  }),
  (UTPlayerPicksView.prototype._eSelectPlayerPickOption = function _eSelectPlayerPickOption(
    i,
    e,
    t
  ) {
    this._playerPickViews.forEach(function(e, t) {
      i === e
        ? this._triggerActions(UTPlayerPicksView.Event.SELECT_PICK, {
            index: t
          })
        : e.setSelected(!1);
    }, this);
  }),
  (UTPlayerPicksView.prototype._eBtnTapped = function _eBtnTapped(e, t, i) {
    this._actionBtn.setInteractionState(!1),
      this._triggerActions(UTPlayerPicksView.Event.CONFIRM_PICK);
  }),
  utils.JS.inherits(UTPlayerPicksViewController, UTViewController),
  (UTPlayerPicksViewController.prototype.init = function init() {
    if (!this.initialized) {
      utils.Debug.Assert(
        0 < this._picks.length,
        'UTPlayerPicksViewController expects at least one item.'
      );
      var e = this.getView();
      e.addTarget(
        this,
        this._eConfirmSelection,
        UTPlayerPicksView.Event.CONFIRM_PICK
      ),
        e.addTarget(
          this,
          this._eOnSelection,
          UTPlayerPicksView.Event.SELECT_PICK
        ),
        e
          .getItemInfoSwitchButton()
          .addTarget(
            this,
            this._eItemInfoSwitchButtonSelected,
            enums.Event.TAP
          ),
        this.superclass();
    }
  }),
  (UTPlayerPicksViewController.prototype.initWithPicks = function initWithPicks(
    e
  ) {
    this.initialized || ((this._picks = e), this.init());
  }),
  (UTPlayerPicksViewController.prototype.dealloc = function dealloc() {
    (this._picks = []),
      (this._itemInfoStateViewModel = null),
      this.superclass();
  }),
  (UTPlayerPicksViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTPlayerPicksView();
  }),
  (UTPlayerPicksViewController.prototype.viewDidAppear = function viewDidAppear() {
    var e = new transferobjects.SearchCriteria();
    (e.type = enums.SearchType.PLAYER),
      (e.defId = this._picks.map(function(e) {
        return e.getDefId();
      })),
      services.Item.searchClub(e).observe(this, function(e, t) {
        e.unobserve(this),
          (this._ownership = function _generateOwnershipArray(e) {
            var t = [];
            return (
              0 < e.length
                ? (t = this._picks.map(function(t) {
                    return utils.JS.isValid(
                      utils.JS.find(
                        e,
                        function(e) {
                          return e.getDefId() === t.getDefId();
                        },
                        this
                      )
                    );
                  }, this))
                : ((t.length = this._picks.length),
                  t.fill(!1, 0, this._picks.length)),
              t
            );
          }.call(this, t.data.items));
        var i = this.getView();
        i.setItems(this._picks, this._ownership),
          i.selectPickOption(
            this._index,
            this._picks[this._index],
            this._ownership[this._index]
          ),
          i
            .getItemInfoSwitchButton()
            .setCurrentState(this._itemInfoStateViewModel.getState());
      }),
      this.superclass();
  }),
  (UTPlayerPicksViewController.prototype.isPendingSelectionContext = function isPendingSelectionContext() {
    return this._isPendingSelection;
  }),
  (UTPlayerPicksViewController.prototype.setPendingSelectionContext = function setPendingSelectionContext() {
    (this._isPendingSelection = !0),
      this.getView().setDescription(
        services.Localization.localize('playerpicks.modal.description.pending')
      );
  }),
  (UTPlayerPicksViewController.prototype._eItemInfoSwitchButtonSelected = function _eItemInfoSwitchButtonSelected(
    e,
    t,
    i
  ) {
    this.getView()
      .getItemInfoSwitchButton()
      .setCurrentState(this._itemInfoStateViewModel.nextState());
  }),
  (UTPlayerPicksViewController.prototype._eConfirmSelection = function _eConfirmSelection(
    e,
    t,
    i
  ) {
    services.Item.confirmPlayerPickItemSelection(
      this._picks[this._index]
    ).observe(this, function(e, t) {
      e.unobserve(this),
        t.success
          ? (this._isPendingSelection ||
              TelemetryManager.trackEvent(
                TelemetryManager.Sections.MISC,
                TelemetryManager.Categories.PLAYER_PICKS,
                'Claimed draft item and confirmed player selection.'
              ),
            gPopupClickShield.setActivePopup(
              new UTPlayerPickRewardsController(t.data.items[0])
            ))
          : services.Notification.queue([
              services.Localization.localize(
                'notification.playerpicks.confirmFailed'
              ),
              enums.UINotificationType.NEGATIVE
            ]),
        this.getParentViewController().dismissViewController();
    });
  }),
  (UTPlayerPicksViewController.prototype._eOnSelection = function _eOnSelection(
    e,
    t,
    i
  ) {
    (this._index = i.index),
      this.getView().selectPickOption(
        this._index,
        this._picks[this._index],
        this._ownership[this._index]
      );
  }),
  NamespaceManager.Register('components'),
  (components.SectionHeader = function() {
    this._generate(),
      (this.onAction = new UTObservable()),
      Object.defineProperty(this, 'onAction', {
        writable: !1
      }),
      this._optionButton.init(),
      this._optionButton.addTarget(
        this,
        function onAction() {
          this.onAction.notify();
        },
        enums.Event.TAP
      );
  }),
  (components.SectionHeader.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('header');
      e.classList.add('ut-section-header-view'),
        (this.__text = document.createElement('h2')),
        this.__text.classList.add('title'),
        e.appendChild(this.__text),
        (this._optionButton = new UTStandardButtonControl()),
        this._optionButton.getRootElement().classList.add('section-header-btn'),
        this._optionButton.getRootElement().classList.add('mini'),
        this._optionButton.getRootElement().classList.add('call-to-action'),
        e.appendChild(this._optionButton.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.SectionHeader.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__text = null),
      this._optionButton.destroy();
  }),
  (components.SectionHeader.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.SectionHeader.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.SectionHeader.prototype.destroy = function destroy() {
    this.onAction.dealloc(), this.destroyGeneratedElements();
  }),
  (components.SectionHeader.prototype.setButtonText = function setButtonText(
    e
  ) {
    this._optionButton.setText(e);
  }),
  (components.SectionHeader.prototype.hideButton = function hideButton() {
    this._optionButton.hide();
  }),
  (components.SectionHeader.prototype.showButton = function showButton() {
    this._optionButton.show();
  }),
  (components.SectionHeader.prototype.toggleButton = function toggleButton(e) {
    this._optionButton.setDisplay(e);
  }),
  (components.SectionHeader.prototype.toggleButtonEnabled = function toggleButtonEnabled(
    e
  ) {
    this._optionButton.setInteractionState(e);
  }),
  (components.SectionHeader.prototype.setText = function setText(e) {
    this.__text.textContent = e;
  }),
  utils.JS.inherits(UTEmptySectionMessageView, UTView),
  (UTEmptySectionMessageView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-empty-section-view');
      var t = document.createElement('span');
      t.classList.add('icon_squad'),
        t.classList.add('fut_icon'),
        e.appendChild(t),
        (this.__header = document.createElement('h1')),
        this.__header.classList.add('ut-empty-section-view--title'),
        e.appendChild(this.__header),
        (this.__body = document.createElement('p')),
        this.__body.classList.add('ut-empty-section-view--body'),
        e.appendChild(this.__body),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTEmptySectionMessageView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__header = null),
      (this.__body = null);
  }),
  (UTEmptySectionMessageView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTEmptySectionMessageView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTEmptySectionMessageView.prototype.render = function render(e, t) {
    (this.__header.textContent = e), (this.__body.innerHTML = t);
  }),
  NamespaceManager.Register('views.lists'),
  (views.lists.SectionedItemList = function SectionedItemListView() {
    UTView.call(this),
      this._generate(),
      (this._listRows = []),
      (this._footerBtn = null),
      (this._footerCallback = null),
      (this._emptyHeaderMessage = services.Localization.localize(
        'squads.setEmptyMessage.defaultHeader'
      )),
      (this._emptyBodyMessage = services.Localization.localize(
        'squads.setEmptyMessage.defaultBody'
      )),
      (this._emptyMessage = null),
      (this._selectedIndex = -1);
  }),
  utils.JS.inherits(views.lists.SectionedItemList, UTView),
  (views.lists.SectionedItemList.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('sectioned-item-list'),
        (this._header = new components.SectionHeader()),
        e.appendChild(this._header.getRootElement()),
        (this.__list = document.createElement('ul')),
        this.__list.classList.add('itemList'),
        e.appendChild(this.__list),
        (this.__buttonGroup = document.createElement('div')),
        this.__buttonGroup.classList.add('ut-button-group'),
        e.appendChild(this.__buttonGroup),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.lists.SectionedItemList.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._header.destroy(),
      (this.__list = null),
      (this.__buttonGroup = null);
  }),
  (views.lists.SectionedItemList.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.lists.SectionedItemList.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.lists.SectionedItemList.prototype.init = function init() {
    this.superclass(),
      this._header.hideButton(),
      this.__buttonGroup && (this.__buttonGroup.style.display = 'none');
  }),
  (views.lists.SectionedItemList.prototype.dealloc = function dealloc() {
    (this._footerCallback = null),
      this._removeEmptyMessage(),
      this.clearList(),
      this.removeFooter(),
      this.superclass();
  }),
  (views.lists.SectionedItemList.prototype.clearList = function clearList() {
    this._listRows.forEach(function(e) {
      e.destroy();
    }),
      (this._listRows = []);
  }),
  (views.lists.SectionedItemList.prototype._showEmptyMessage = function _showEmptyMessage() {
    this._emptyMessage ||
      (this._emptyMessage = new UTEmptySectionMessageView()),
      this.getRootElement().appendChild(this._emptyMessage.getRootElement()),
      this._emptyMessage.render(
        this._emptyHeaderMessage,
        this._emptyBodyMessage
      );
  }),
  (views.lists.SectionedItemList.prototype._removeEmptyMessage = function _removeEmptyMessage() {
    this._emptyMessage &&
      (this._emptyMessage.destroy(), (this._emptyMessage = null));
  }),
  (views.lists.SectionedItemList.prototype.setHeader = function setHeader(
    e,
    t,
    i
  ) {
    this._header.setText(e),
      this._header.setButtonText(t),
      utils.JS.isFunction(i) &&
        (this._header.onAction.unobserve(this).observe(this, i),
        this._header.showButton());
  }),
  (views.lists.SectionedItemList.prototype.setFooter = function setFooter(
    e,
    t,
    i,
    s
  ) {
    this._footerBtn ||
      ((this._footerBtn = new UTGroupButtonControl()),
      this._footerBtn.init(),
      this.__buttonGroup &&
        this.__buttonGroup.appendChild(this._footerBtn.getRootElement())),
      DOMKit.toggleClass(
        this._footerBtn.getRootElement(),
        'ut-group-button cta',
        i
      ),
      this._footerBtn.setText(e),
      this._footerBtn.setSubtext(t),
      this._footerBtn.displayCurrencyIcon(!0),
      this._footerCallback &&
        this._footerBtn.removeTarget(
          this,
          this._footerCallback,
          enums.Event.TAP
        ),
      (this._footerCallback = s),
      this._footerBtn.addTarget(this, this._footerCallback, enums.Event.TAP),
      this.__buttonGroup && (this.__buttonGroup.style.display = '');
  }),
  (views.lists.SectionedItemList.prototype.removeFooter = function removeFooter() {
    this._footerBtn &&
      (this._footerBtn.dealloc(),
      (this._footerBtn = null),
      this.__buttonGroup && (this.__buttonGroup.style.display = ''));
  }),
  (views.lists.SectionedItemList.prototype.setEmptyMessage = function setEmptyMessage(
    e,
    t
  ) {
    (this._emptyHeaderMessage = e),
      (this._emptyBodyMessage = t),
      utils.JS.isValid(this._emptyMessage) &&
        this._emptyMessage.render(
          this._emptyHeaderMessage,
          this._emptyBodyMessage
        );
  }),
  (views.lists.SectionedItemList.prototype.addItems = function addItems(
    e,
    t,
    i
  ) {
    return (
      (i = i || enums.UIListItemPriority.DEFAULT),
      e.forEach(function(e) {
        this._listRows.push(this._generateListRow(e, t, i));
      }, this),
      this._listRows
    );
  }),
  (views.lists.SectionedItemList.prototype.removeItemsById = function removeItemsById(
    e
  ) {
    e.forEach(function _removeItemById(t) {
      var e = utils.JS.find(this._listRows, function(e) {
        return e.getData().id === t;
      });
      e && (e.destroy(), this._listRows.splice(this._listRows.indexOf(e), 1));
    }, this),
      this.render();
  }),
  (views.lists.SectionedItemList.prototype.render = function render() {
    0 === this._listRows.length
      ? this._showEmptyMessage()
      : (this._removeEmptyMessage(),
        this._listRows.forEach(function(e) {
          e.render(), this.__list.appendChild(e.getRootElement());
        }, this));
  }),
  (views.lists.SectionedItemList.prototype._generateListRow = function _generateListRow(
    e,
    t,
    i
  ) {
    var s = new components.ListRowItem();
    return (
      s.setData(e.getItemData(), null, i),
      utils.JS.isFunction(t) && s.setTapCallback(t),
      s
    );
  }),
  (views.lists.SectionedItemList.prototype.toggleHeaderButtonEnabled = function toggleHeaderButtonEnabled(
    e
  ) {
    this._header.toggleButtonEnabled(e);
  }),
  (views.lists.SectionedItemList.prototype.toggleHeaderButton = function toggleHeaderButton(
    e
  ) {
    this._header.toggleButton(e);
  }),
  (views.lists.SectionedItemList.prototype.selectRowByIndex = function selectRowByIndex(
    i
  ) {
    var s = -1;
    0 <= i &&
      i < this._listRows.length &&
      this._listRows.forEach(function(e) {
        var t = e === this._listRows[i];
        e.setSelected(t), t && (s = i);
      }, this),
      (this._selectedIndex = s);
  }),
  (views.lists.SectionedItemList.prototype.selectRowByItemId = function selectRowByItemId(
    i
  ) {
    var s = -1;
    this._listRows.forEach(function(e) {
      var t = e.getData().id === i;
      e.setSelected(t), t && (s = this._listRows.indexOf(e));
    }, this),
      (this._selectedIndex = s);
  }),
  (views.lists.SectionedItemList.prototype.getNumOfRows = function getNumOfRows() {
    return this._listRows.length;
  }),
  (views.lists.SectionedItemList.prototype.getSelectedRow = function getSelectedRow() {
    return this._listRows[this._selectedIndex] || null;
  }),
  (views.lists.SectionedItemList.prototype.onTimedUpdate = function onTimedUpdate() {
    this._listRows.forEach(function(e) {
      e instanceof components.ListRowItem && e.onTimedUpdate();
    });
  }),
  utils.JS.inherits(UTSectionedSlotList, views.lists.SectionedItemList),
  (views.lists.SectionedItemList.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('sectioned-item-list'),
        (this._header = new components.SectionHeader()),
        e.appendChild(this._header.getRootElement()),
        (this.__list = document.createElement('ul')),
        this.__list.classList.add('itemList'),
        e.appendChild(this.__list),
        (this.__buttonGroup = document.createElement('div')),
        this.__buttonGroup.classList.add('ut-button-group'),
        e.appendChild(this.__buttonGroup),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.lists.SectionedItemList.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._header.destroy(),
      (this.__list = null),
      (this.__buttonGroup = null);
  }),
  (views.lists.SectionedItemList.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.lists.SectionedItemList.prototype.getRootElement = function getRootElement() {
    return this.__root;
  });

function UTUnassignedItemsViewController() {
  UTViewController.call(this),
    (this._itemListViewDelegate = null),
    Object.defineProperty(this, '_itemListViewDelegate', {
      writable: !0,
      enumerable: !1
    }),
    (this._viewmodel = null),
    Object.defineProperty(this, '_viewmodel', {
      writable: !0,
      enumerable: !1
    }),
    (this.onDataChange = new UTObservable()),
    Object.defineProperty(this, 'onDataChange', {
      writable: !1,
      enumerable: !0
    });
}

function UTUnassignedItemsSplitViewController() {
  UTSplitViewController.call(this),
    (this._listViewController = new UTUnassignedItemsViewController()),
    (this._itemDetailsController = null);
}

function UTLeaderboardsEntryView() {
  UTView.call(this);
}

function UTLeaderboardsHubView() {
  UTView.call(this),
    (this._pinnedEntryView = null),
    Object.defineProperty(this, '_pinnedEntryView', {
      writable: !0,
      enumerable: !1
    }),
    (this._entryViews = []),
    Object.defineProperty(this, '_entryViews', {
      writable: !0,
      enumerable: !1
    });
}

function UTLeaderboardsViewModel() {
  UTObject.call(this),
    (this._permutation = new UTLeaderboardPermutationDTO()),
    Object.defineProperty(this, '_permutation', {
      writable: !1,
      enumerable: !1
    }),
    (this._requests = []),
    Object.defineProperty(this, '_permutation', {
      writable: !0,
      enumerable: !1
    });
}

function UTLeaderboardsHubViewController() {
  UTViewController.call(this), (this._viewmodel = null);
}

function UTObjectiveRewardsViewController(e, t) {
  controllers.views.popups.InGameRewards.call(this),
    (this._scmpEntry = e || null),
    Object.defineProperty(this, '_scmpEntry', {
      writable: !1
    }),
    (this._rewards = t || []),
    (this.hasXPReward = !1);
}

function UTObjectiveGroupProgressionView() {
  UTTargetActionView.call(this), (this._id = -1);
}

function UTObjectiveEntryView(e) {
  UTTileView.call(this),
    (this._id = -1),
    (this._rewards = []),
    (this._isGroup = e),
    (this._actionBtnEvent = UTObjectiveEntryView.Event.CLAIM_REWARD);
}

function UTObjectiveGroupView() {
  UTTargetActionView.call(this),
    (this._objectives = []),
    Object.defineProperty(this, '_objectives', {
      writable: !0,
      enumerable: !0
    });
}

function UTObjectivesViewModel(e) {
  UTViewModel.call(this),
    (this._objectivesServiceObject = e),
    Object.defineProperty(this, '_objectivesServiceObject', {
      writable: !1,
      enumerable: !1
    }),
    (this._campaign = null),
    Object.defineProperty(this, '_campaign', {
      writable: !0,
      enumerable: !1
    }),
    (this._categories = []),
    (this._currentCategoryId = UTCampaignCategoryEntity.THIS_SEASON_ID),
    Object.defineProperty(this, '_currentCategoryId', {
      writable: !0,
      enumerable: !1
    }),
    (this._selectedRewardId = -1),
    Object.defineProperty(this, '_selectedRewardId', {
      writable: !0,
      enumerable: !1
    }),
    (this._currentGroup = null),
    Object.defineProperty(this, '_currentGroup', {
      writable: !0,
      enumerable: !1
    });
}

function UTObjectiveGroupViewController() {
  UTViewController.call(this),
    (this._viewmodel = null),
    (this._goToLinkController = null),
    (this._timer = new utils.UTTimer()),
    Object.defineProperty(this, '_timer', {
      writable: !1,
      enumerable: !1
    });
}

function UTSeasonalCampaignPopupView() {
  UTView.call(this);
}

function UTSeasonalCampaignPopupViewController(e) {
  controllers.views.popups.BasePopup.call(this);
  var t = UTSeasonalCampaignPopupViewController.EVENTS.CLAIM_GROUP_EXPIRED;
  utils.JS.isBoolean(e) &&
    (t = e
      ? UTSeasonalCampaignPopupViewController.EVENTS.CLAIM_CAMPAIGN_EXPIRED
      : UTSeasonalCampaignPopupViewController.EVENTS.CAMPAIGN_EXPIRED),
    (this._event = t),
    Object.defineProperty(this, '_event', {
      writable: !1,
      enumerable: !1
    });
}

function UTCampaignRewardsCarouselView() {
  UTRewardsCarouselView.call(this),
    (this._defaultIndex = 0),
    (this._showDots = !1);
}

function UTCampaignTierView() {
  UTTargetActionView.call(this), (this._id = -1), (this._rewardOptions = []);
}

function UTTierProgressBarView() {
  UTProgressBarView.call(this),
    (this._progress = 0),
    Object.defineProperty(this, '_progress', {
      writable: !0,
      enumerable: !1
    });
}

function UTObjectivesHubView() {
  UTTargetActionView.call(this),
    (this._levels = []),
    Object.defineProperty(this, '_levels', {
      writable: !0,
      enumerable: !0
    }),
    (this._progressBars = []),
    Object.defineProperty(this, '_progressBars', {
      writable: !0,
      enumerable: !0
    }),
    (this._groups = []),
    Object.defineProperty(this, '_groups', {
      writable: !0,
      enumerable: !0
    });
}

function UTRewardView(e) {
  UTView.call(this),
    (this.data = e),
    Object.defineProperty(this, 'data', {
      writable: !1
    });
}

function UTRewardSelectionView(e, t) {
  UTTargetActionView.call(this),
    (this.id = t.id),
    (this.index = e),
    (this.rewards = t.awards.map(function(e) {
      return new UTRewardView(e);
    })),
    (this.primaryReward = this.rewards.shift().data),
    this._generate();
}

function UTRewardSelectionChoiceView(e) {
  UTTargetActionView.call(this),
    (this.categoryAwardViews = new UTHashTable()),
    e.forEach(function(e, t) {
      this.categoryAwardViews.set(e.id, new UTRewardSelectionView(t + 1, e));
    }, this),
    (this._selectedId = -1);
}

function UTRewardSelectionChoiceViewController(e) {
  controllers.views.popups.BasePopup.call(this),
    (this.rewardSets = e || []),
    (this._selectedRewardIndex = -1),
    (this._titleText = ''),
    (this._claimable = !0);
}

function UTObjectivesHubViewController() {
  UTViewController.call(this),
    (this._viewmodel = null),
    (this._timer = new utils.UTTimer()),
    Object.defineProperty(this, '_timer', {
      writable: !1,
      enumerable: !1
    });
}

function UTSquadActionsView() {
  UTTargetActionView.call(this),
    (this._imgLoaders = []),
    (this._formationsAdded = !1);
}

function UTSquadTacticsViewModel(e) {
  UTViewModel.call(this),
    (this.onDataUpdated = new UTObservable()),
    Object.defineProperty(this, 'onDataUpdated', {
      enumerable: !0,
      writable: !1
    }),
    (this._squad = null),
    Object.defineProperty(this, '_squad', {
      enumerable: !1,
      writable: !0
    }),
    (this._selectedMentalityId = UTSquadMentalityEntity.TYPE.BALANCED),
    Object.defineProperty(this, '_selectedMentalityId', {
      enumerable: !1,
      writable: !0
    }),
    (this._selectedStyleId = UTSquadMentalityEntity.STYLE.OFFENSIVE_STYLE),
    Object.defineProperty(this, '_selectedStyleId', {
      enumerable: !1,
      writable: !0
    }),
    (this._selectedSlotId = 0),
    Object.defineProperty(this, '_selectedSlotId', {
      enumerable: !1,
      writable: !0
    }),
    (this._selectedInstructionGroup = null),
    Object.defineProperty(this, '_selectedInstructionGroup', {
      enumerable: !1,
      writable: !0
    }),
    (this._squadServiceObject = e),
    Object.defineProperty(this, '_squadServiceObject', {
      enumerable: !1,
      writable: !0
    });
}

function UTSquadBuilderView() {
  UTView.call(this),
    (this.onFilterChange = new UTObservable()),
    Object.defineProperty(this, 'onFilterChange', {
      writable: !1,
      enumerable: !0
    });
}

function UTSquadBuilderViewController() {
  UTViewController.call(this),
    (this._squadBuilder = null),
    (this._viewmodel = null),
    (this._formation = ''),
    (this._squad = null),
    (this._challenge = null),
    (this._useConceptPlayers = !1),
    (this._replacePlayers = !1);
}

function UTTacticsFormationPopupView() {
  UTTargetActionView.call(this);
}

function UTTacticsFormationPopupViewController() {
  controllers.views.popups.BasePopup.call(this);
}

function UTSquadSlotPedestalView() {
  UTView.call(this),
    (this._states = {
      NONE: 'state-none',
      RED: 'state-poor',
      ORANGE: 'state-medium',
      GREEN: 'state-high'
    }),
    Object.defineProperty(this, '_states', {
      writable: !1,
      enumerable: !1
    }),
    (this._currentState = this._states.NONE);
}

function UTSquadSlotView() {
  UTTargetActionView.call(this),
    (this._itemView = null),
    (this._slotIndex = -1),
    (this._uniquePosition = -1),
    (this._isManager = !1);
}

function UTSquadPitchView() {
  UTTargetActionView.call(this),
    (this._slots = []),
    Object.defineProperty(this, '_slots', {
      enumerable: !1
    }),
    (this._currentTheme = enums.SquadPitchThemes.NONE),
    Object.defineProperty(this, '_currentTheme', {
      enumerable: !1
    }),
    (this._currentType = enums.SquadPitchTypes.REGULAR),
    Object.defineProperty(this, '_currentType', {
      enumerable: !1
    }),
    (this._currentMode = enums.SquadPitchModes.REGULAR),
    Object.defineProperty(this, '_currentMode', {
      enumerable: !1
    }),
    (this._currentFormation = ''),
    Object.defineProperty(this, '_currentFormation', {
      enumerable: !1
    }),
    (this._cachedLinks = []),
    (this._windowResizeCallback = this._eWindowResize.bind(this)),
    (this._isAnimating = !1),
    (this._animationDuration = 300),
    (this._animationTimeout = 0),
    (this._delayedDrawTimeout = 0),
    (this.renderChemistry = !0);
}

function UTTacticsPositionAdjustmentView() {
  UTTargetActionView.call(this),
    (this._utilDragDrop = null),
    (this._windowResizeCallback = this._eWindowResize.bind(this)),
    (this._animationDuration = 500);
}

function UTTacticsPositionAdjustmentViewController() {
  UTViewController.call(this),
    (this._tacticsViewModel = null),
    Object.defineProperty(this, '_tacticsViewModel', {
      enumerable: !1,
      writable: !0
    });
}

function UTTacticsFormationSelectView() {
  UTTargetActionView.call(this), (this._formationDropDown = null);
}

function UTTacticsFormationSelectViewController() {
  UTViewController.call(this),
    (this._tacticsViewModel = null),
    Object.defineProperty(this, '_tacticsViewModel', {
      enumerable: !1,
      writable: !0
    });
}

function UTPlayerInstructionTableCellView() {
  UTTargetActionView.call(this), (this._id = -1);
}

function UTTacticsInstructionSelectView() {
  UTTargetActionView.call(this),
    (this._instructionCellViews = []),
    Object.defineProperty(this, '_instructionCellViews', {
      enumerable: !1,
      writable: !0
    });
}

function UTTacticsInstructionSelectViewController() {
  UTViewController.call(this),
    (this._tacticsViewModel = null),
    Object.defineProperty(this, '_tacticsViewModel', {
      enumerable: !1,
      writable: !0
    });
}

function UTPlayerInstructionGroupCellView() {
  UTTargetActionView.call(this);
}

function UTTacticsInstructionMenuView() {
  UTTargetActionView.call(this), (this._cells = []), (this._item = null);
}

function UTTacticsInstructionMenuViewController() {
  UTViewController.call(this),
    (this._tacticsViewModel = null),
    Object.defineProperty(this, '_tacticsViewModel', {
      enumerable: !1,
      writable: !0
    }),
    (this._instructionGroups = []),
    Object.defineProperty(this, '_instructionGroups', {
      enumerable: !1,
      writable: !0
    }),
    (this._squadSlots = []),
    Object.defineProperty(this, '_squadSlots', {
      enumerable: !1,
      writable: !0
    }),
    (this._instructionSelectViewController = null),
    Object.defineProperty(this, '_instructionSelectViewController', {
      enumerable: !1,
      writable: !0
    });
}

function UTTacticsInstructionSlotSelectViewController() {
  UTViewController.call(this),
    (this._tacticsViewModel = null),
    Object.defineProperty(this, '_tacticsViewModel', {
      enumerable: !1,
      writable: !0
    });
}

function UTMentalityTableCellView() {
  UTTargetActionView.call(this), (this._id = -1);
}

function UTTacticsMentalitySelectView() {
  UTTargetActionView.call(this),
    (this._mentalityCellViews = []),
    Object.defineProperty(this, '_mentalityCellViews', {
      enumerable: !1,
      writable: !0
    });
}

function UTTacticsMentalitySelectViewController() {
  UTViewController.call(this),
    (this._tacticsViewModel = null),
    Object.defineProperty(this, '_tacticsViewModel', {
      enumerable: !1,
      writable: !0
    });
}

function UTRangeControl() {
  UTControl.call(this);
}
(UTSectionedSlotList.prototype.addItems = function addItems(e, t) {
  return (
    e.forEach(function(e) {
      this._listRows.push(this._generateListRow(e.getItem(), t));
    }, this),
    this._listRows
  );
}),
  utils.JS.inherits(UTSendToSquadView, UTView),
  (UTSendToSquadView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('article');
      e.setAttribute('id', 'SendToActiveSquad'),
        e.classList.add('ut-pinned-list-container'),
        (this.__pinnedDiv = document.createElement('ul')),
        this.__pinnedDiv.classList.add('ut-pinned-item'),
        e.appendChild(this.__pinnedDiv),
        (this.__scrollerDiv = document.createElement('div')),
        this.__scrollerDiv.classList.add('ut-pinned-list'),
        e.appendChild(this.__scrollerDiv),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSendToSquadView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__pinnedDiv = null),
      (this.__scrollerDiv = null);
  }),
  (UTSendToSquadView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSendToSquadView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSendToSquadView.prototype.init = function init() {
    this.superclass();
  }),
  (UTSendToSquadView.prototype.dealloc = function dealloc() {
    this._pinnedRow && (this._pinnedRow.destroy(), (this._pinnedRow = null)),
      this.getSubviews().forEach(function(e) {
        e.dealloc();
      }),
      this.onSlotSelected.dealloc(),
      (this.onSlotSelected = null),
      this.superclass();
  }),
  (UTSendToSquadView.prototype.setPinnedItem = function setPinnedItem(e) {
    DOMKit.empty(this.__pinnedDiv),
      this._pinnedRow && this._pinnedRow.destroy(),
      (this._pinnedRow = new components.ListRowItem()),
      this._pinnedRow.setData(e),
      this._pinnedRow.render(),
      this.__pinnedDiv.appendChild(this._pinnedRow.getRootElement()),
      requestAnimationFrame(
        function() {
          this.__scrollerDiv.style.top = this.__pinnedDiv.offsetHeight + 'px';
        }.bind(this)
      );
  }),
  (UTSendToSquadView.prototype.renderSections = function renderSections(e, s) {
    this.getSubviews().forEach(function(e) {
      e.dealloc();
    }),
      e.forEach(function(i) {
        var e = new UTSectionedSlotList();
        e.init(),
          e.setHeader(i.sectionTitle, ''),
          e.addItems(i.slots).forEach(function(e, t) {
            (e.slotData = i.slots[t]),
              e.setComparisonData(this._pinnedRow.getData()),
              e.slotData.getIndex() === s && e.addClass('selectedSlot'),
              e.setAction(
                e.getData().isValid()
                  ? enums.UIRowActionClass.SWAP
                  : enums.UIRowActionClass.ADD,
                this._onActionCB.bind(this, e.slotData.getIndex())
              );
          }, this),
          e.render(),
          this.addSubview(e, this.__scrollerDiv);
      }, this),
      this.layoutSubviews();
  }),
  (UTSendToSquadView.prototype._onActionCB = function _onActionCB(e) {
    this.onSlotSelected.notify(e);
  }),
  NamespaceManager.Register('viewmodels'),
  (viewmodels.ItemSectionList = function(e) {
    viewmodels.ItemList.call(this, e), (this._sections = new UTHashTable());
  }),
  utils.JS.inherits(viewmodels.ItemSectionList, viewmodels.ItemList),
  (viewmodels.ItemSectionList.prototype.setSection = function(e, t, i) {
    this._sections.set(e, {
      filter: t,
      priority: i
    });
  }),
  (viewmodels.ItemSectionList.prototype.getSectionItems = function(e) {
    return this._sections.has(e)
      ? this.values().filter(this._sections.get(e).filter)
      : this.values();
  }),
  (viewmodels.ItemSectionList.prototype._organizeItems = function() {
    if (0 !== this.length && 0 !== this._sections.length) {
      var t = [],
        i = [];
      this._sections.forEach(function(e) {
        t[e.priority] = this.values().filter(e.filter);
      }, this),
        t.forEach(function(e) {
          e.sort(this.sortByType.bind(this)), (i = i.concat(e));
        }, this),
        this.resetCollection(i);
    }
  }),
  utils.JS.inherits(UTSquadSectionListViewModel, viewmodels.ItemSectionList),
  (UTSquadSectionListViewModel.SECTION = {
    STARTING_ELEVEN: 0,
    SUBS: 1,
    RESERVES: 2
  }),
  (UTSquadSectionListViewModel.prototype.getStartingEleven = function getStartingEleven() {
    return this.getSectionItems(
      UTSquadSectionListViewModel.SECTION.STARTING_ELEVEN
    );
  }),
  (UTSquadSectionListViewModel.prototype.getSubs = function getSubs() {
    return this.getSectionItems(UTSquadSectionListViewModel.SECTION.SUBS);
  }),
  (UTSquadSectionListViewModel.prototype.getReserves = function getReserves() {
    return this.getSectionItems(UTSquadSectionListViewModel.SECTION.RESERVES);
  }),
  (UTSquadSectionListViewModel.prototype._organizeItems = function _organizeItems() {}),
  NamespaceManager.Register('controllers.items'),
  utils.JS.inherits(UTSendToSquadViewController, UTViewController),
  (UTSendToSquadViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      this.getView().onSlotSelected.observe(this, this._eAddSwap));
  }),
  (UTSendToSquadViewController.prototype.initWithItem = function initWithItem(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.Item,
        'Initialization expected an item entity.'
      ),
      (this._pinnedItem = e),
      this.init());
  }),
  (UTSendToSquadViewController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._viewmodel = null);
  }),
  (UTSendToSquadViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSendToSquadView();
  }),
  (UTSendToSquadViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._squad && this._squad.isSBC()
      ? services.Localization.localize('navbar.label.SBCSquad')
      : this._squad
      ? this._squad.getName()
      : services.Localization.localize('navbar.label.activesquad');
  }),
  (UTSendToSquadViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this.getNavigationController().setNavigationVisibility(!0, !0),
      this._pinnedItem && this.getView().setPinnedItem(this._pinnedItem);
    var n = this.getView();
    if (this._squad) {
      this._viewmodel = new UTSquadSectionListViewModel(
        this._squad.getPlayers()
      );
      var i = [];
      this._viewmodel.getStartingEleven().forEach(function(e, t) {
        e.isBrick() || i.push(e);
      }),
        this._squad.isSBC()
          ? n.renderSections(
              [
                {
                  sectionTitle: services.Localization.localize(
                    'dock.label.startingeleven'
                  ),
                  slots: i.reverse()
                },
                {
                  sectionTitle: services.Localization.localize(
                    'dock.label.workArea'
                  ),
                  slots: this._viewmodel
                    .getSubs()
                    .concat(this._viewmodel.getReserves())
                }
              ],
              this._selectedSlotIndex
            )
          : n.renderSections(
              [
                {
                  sectionTitle: services.Localization.localize(
                    'dock.label.startingeleven'
                  ),
                  slots: i.reverse()
                },
                {
                  sectionTitle: services.Localization.localize(
                    'dock.label.substitutes'
                  ),
                  slots: this._viewmodel.getSubs()
                },
                {
                  sectionTitle: services.Localization.localize(
                    'dock.label.reserves'
                  ),
                  slots: this._viewmodel.getReserves()
                }
              ],
              this._selectedSlotIndex
            );
    } else
      services.Squad.requestSquadByType(enums.UserSquadId.ACTIVE).observe(
        this,
        function(e, t) {
          e.unobserve(this);
          var i = t.success ? t.data.squad : null;
          (this._defaultedToActiveSquad = !0), this.setSquad(i);
          var s = i ? i.getPlayers() : [];
          (this._viewmodel = new UTSquadSectionListViewModel(s)),
            n.renderSections(
              [
                {
                  sectionTitle: services.Localization.localize(
                    'dock.label.startingeleven'
                  ),
                  slots: this._viewmodel.getStartingEleven().reverse()
                },
                {
                  sectionTitle: services.Localization.localize(
                    'dock.label.substitutes'
                  ),
                  slots: this._viewmodel.getSubs()
                },
                {
                  sectionTitle: services.Localization.localize(
                    'dock.label.reserves'
                  ),
                  slots: this._viewmodel.getReserves()
                }
              ],
              this._selectedSlotIndex
            );
        }
      );
    TelemetryManager.trackPage(
      TelemetryManager.Sections.SQUADS,
      'MyClubSquadSwap'
    );
  }),
  (UTSendToSquadViewController.prototype.setSquad = function setSquad(e) {
    e instanceof entities.Squad && (this._squad = e);
  }),
  (UTSendToSquadViewController.prototype.setSelectedSlotIndex = function setSelectedSlotIndex(
    e
  ) {
    this._selectedSlotIndex = e;
  }),
  (UTSendToSquadViewController.prototype._eAddSwap = function _eAddSwap(e, i) {
    var s = this.getNavigationController(),
      n = new transferobjects.Notification(
        services.Localization.localize('notification.item.toActiveSquadFailed'),
        enums.UINotificationType.NEGATIVE
      ),
      o = null;

    function _onSaveAddSwap(e, t) {
      e.unobserve(this),
        t.success
          ? this._defaultedToActiveSquad
            ? services.Notification.queue([
                services.Localization.localize(
                  'notification.item.toActiveSquad'
                ),
                enums.UINotificationType.NEUTRAL
              ])
            : (TelemetryManager.trackEvent(
                TelemetryManager.Sections.SQUADS,
                TelemetryManager.Categories.BUTTON_PRESS,
                'Squad Slot Detail View - Sent to Current Squad'
              ),
              services.Notification.queue([
                services.Localization.localize(
                  'notification.item.toCurrentSquad'
                ),
                enums.UINotificationType.NEUTRAL
              ]))
          : (o && this._squad.addItemToSlot(i, o),
            services.Notification.queue(n)),
        s.popViewController();
    }
    this.getView().setInteractionState(!1);
    var t = this._squad.getSlot(i).getItem(),
      a = this._squad.containsVariationOfCard(this._pinnedItem),
      r =
        t.compareDream(this._pinnedItem) ||
        (a && t.compareResourceTo(this._pinnedItem));
    !a || r
      ? this._pinnedItem.pile !== enums.FUTItemPile.CLUB
        ? services.Item.move(this._pinnedItem, enums.FUTItemPile.CLUB).observe(
            this,
            function(e, t) {
              e.unobserve(this),
                t.success
                  ? ((o = this._squad.addItemToSlot(i, this._pinnedItem)),
                    this._squad.save().observe(this, _onSaveAddSwap))
                  : (services.Notification.queue(n),
                    NetworkErrorManager.handleStatus(t.status),
                    s.popViewController());
            }
          )
        : ((o = this._squad.addItemToSlot(i, this._pinnedItem)),
          this._squad.save().observe(this, _onSaveAddSwap))
      : (utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.DUPLICATE_ITEM),
        s.popViewController());
  }),
  utils.JS.inherits(UTMarketSearchView, UTTargetActionView),
  (UTMarketSearchView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('ut-pinned-list-container'),
        e.classList.add('SearchResults'),
        (this.__pinnedDiv = document.createElement('ul')),
        this.__pinnedDiv.classList.add('ut-pinned-item'),
        e.appendChild(this.__pinnedDiv),
        (this._list = new views.lists.PaginatedItemList()),
        this._list.getRootElement().classList.add('ut-pinned-list'),
        e.appendChild(this._list.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTMarketSearchView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__pinnedDiv = null),
      this._list.destroy();
  }),
  (UTMarketSearchView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTMarketSearchView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTMarketSearchView.prototype.init = function init() {
    this.superclass(),
      this._list.init(),
      this._list.addTarget(
        this,
        this._bubbleEvent,
        enums.UIListEvent.ROW_SELECT
      ),
      this._list.addTarget(
        this,
        this._bubbleEvent,
        enums.UIPaginationEvent.NEXT
      ),
      this._list.addTarget(
        this,
        this._bubbleEvent,
        enums.UIPaginationEvent.PREVIOUS
      ),
      this.setInteractionState(!0);
  }),
  (UTMarketSearchView.prototype.dealloc = function dealloc() {
    (this._pinnedItemView = null), this.superclass();
  }),
  (UTMarketSearchView.prototype.updateListTopPosition = function updateListTopPosition() {
    var e = this._pinnedItemView
      ? this._pinnedItemView.getRoot().outerHeight()
      : 0;
    requestAnimationFrame(
      function() {
        this._list.getRoot().css('top', e);
      }.bind(this)
    );
  }),
  (UTMarketSearchView.prototype.setItems = function setItems(e) {
    0 < e.length
      ? (this._list.setItems(e),
        this._list.renderItems(),
        this._list.setRowTapCallback())
      : this.setEmptyListMessage(utils.JS.isValid(this._pinnedItemView));
  }),
  (UTMarketSearchView.prototype.removeItemsById = function removeItemsById(e) {
    this._list.removeItemsById(e);
  }),
  (UTMarketSearchView.prototype.setEmptyListMessage = function setEmptyListMessage(
    e
  ) {
    var t = services.Localization.localize(
      e
        ? 'popup.error.searchauctions.retrysearchfromsquad'
        : 'popup.error.searchauctions.retrysearch'
    );
    this._list.appendEmptyListMessage(t);
  }),
  (UTMarketSearchView.prototype.setRowTapCallback = function setRowTapCallback(
    e
  ) {
    this._list.setRowTapCallback(e);
  }),
  (UTMarketSearchView.prototype.setPaginationState = function setPaginationState(
    e,
    t
  ) {
    this._list.setPaginationState(e, t);
  }),
  (UTMarketSearchView.prototype.appendPinnedItemView = function appendPinnedItemView(
    e
  ) {
    this._pinnedItemView = e;
    var t = this.getRootElement();
    t.insertBefore(e.getRootElement(), t.firstChild),
      this.updateListTopPosition();
  }),
  (UTMarketSearchView.prototype.onTimedUpdate = function onTimedUpdate() {
    this._list.onTimedUpdate(),
      utils.JS.isValid(this._pinnedItemView) &&
        this._pinnedItemView.onTimedUpdate();
  }),
  (UTMarketSearchView.prototype.selectListRow = function selectListRow(e) {
    this._list.selectRow(e);
  }),
  (UTMarketSearchView.prototype._bubbleEvent = function _bubbleEvent(e, t, i) {
    this.isInteractionEnabled() && this._triggerActions(t, i);
  }),
  NamespaceManager.Register('interfaces'),
  (interfaces.ItemListViewDelegate = function IItemListViewDelegate() {}),
  (interfaces.ItemListViewDelegate.prototype.conforms = function conforms(
    e
  ) {}),
  (interfaces.ItemListViewDelegate.prototype.selectListRow = function selectListRow(
    e,
    t,
    i
  ) {}),
  utils.JS.inherits(UTSquadMarketSearchViewModel, UTObject),
  (UTSquadMarketSearchViewModel.prototype.setSquad = function setSquad(e) {
    e instanceof entities.Squad && (this._squad = e);
  }),
  (UTSquadMarketSearchViewModel.prototype.setCurrentSlotIndex = function setCurrentSlotIndex(
    e
  ) {
    this._slotIndex = e;
  }),
  (UTSquadMarketSearchViewModel.prototype.getSquad = function getSquad() {
    return this._squad;
  }),
  (UTSquadMarketSearchViewModel.prototype.getCurrentSlot = function getCurrentSlot() {
    return this._squad ? this._squad.getSlot(this._slotIndex) : null;
  }),
  (UTSquadMarketSearchViewModel.prototype.isActiveSquad = function isActiveSquad() {
    return (
      !!this._squad && this._squad.getId() === services.Squad.getActiveSquadId()
    );
  }),
  utils.JS.inherits(UTTransferMarketPaginationViewModel, UTViewModel),
  (UTTransferMarketPaginationViewModel.prototype.init = function init() {
    this.superclass(),
      (this._paginationList = new viewmodels.PaginatedItemList(
        [],
        this.getNumItemsPerPage()
      ));
  }),
  (UTTransferMarketPaginationViewModel.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._paginationList &&
        (this._paginationList.stopAuctionUpdates(),
        this._paginationList.dataUpdated.clearObservers(),
        (this._paginationList = null));
  }),
  (UTTransferMarketPaginationViewModel.prototype.getIterator = function getIterator() {
    return this._paginationList;
  }),
  (UTTransferMarketPaginationViewModel.prototype.setPageItems = function setPageItems(
    e
  ) {
    this._paginationList.resetCollection(e);
  }),
  (UTTransferMarketPaginationViewModel.prototype.setPinnedItem = function setPinnedItem(
    e
  ) {
    this._paginationList.setPinnedItem(e);
  }),
  (UTTransferMarketPaginationViewModel.prototype.addAuctionUpdateObserver = function addAuctionUpdateObserver(
    e,
    t
  ) {
    this._paginationList.dataUpdated.observe(e, t);
  }),
  (UTTransferMarketPaginationViewModel.prototype.removeAuctionUpdateObserver = function removeAuctionUpdateObserver(
    e,
    t
  ) {
    this._paginationList.dataUpdated.unobserve(e, t);
  }),
  (UTTransferMarketPaginationViewModel.prototype.startAuctionUpdates = function startAuctionUpdates() {
    this._paginationList.startAuctionUpdates();
  }),
  (UTTransferMarketPaginationViewModel.prototype.stopAuctionUpdates = function stopAuctionUpdates() {
    this._paginationList.stopAuctionUpdates();
  }),
  (UTTransferMarketPaginationViewModel.prototype.getIndexByItemId = function getIndexByItemId(
    t
  ) {
    return this._paginationList.indexOf(function(e) {
      return e.id === t;
    });
  }),
  (UTTransferMarketPaginationViewModel.prototype.getCurrentPageItems = function getCurrentPageItems() {
    return this._paginationList.values();
  }),
  (UTTransferMarketPaginationViewModel.prototype.getCurrentItem = function getCurrentItem() {
    return this._paginationList.current();
  }),
  (UTTransferMarketPaginationViewModel.prototype.getItemCount = function getItemCount() {
    return this._paginationList.length;
  }),
  (UTTransferMarketPaginationViewModel.prototype.getCurrentPageIndex = function getCurrentPageIndex() {
    return this._pageIndex;
  }),
  (UTTransferMarketPaginationViewModel.prototype.getNextPageIndex = function getNextPageIndex() {
    return this._pageIndex + 1;
  }),
  (UTTransferMarketPaginationViewModel.prototype.getPrevPageIndex = function getPrevPageIndex() {
    return Math.max(this._pageIndex - 1, 1);
  }),
  (UTTransferMarketPaginationViewModel.prototype.setPageIndex = function setPageIndex(
    e
  ) {
    utils.JS.isNumber(e) && (this._pageIndex = 1 <= e ? e : 1);
  }),
  (UTTransferMarketPaginationViewModel.prototype.setIndex = function setIndex(
    e
  ) {
    this._paginationList.setIndex(e);
  }),
  (UTTransferMarketPaginationViewModel.prototype.getIndex = function getIndex() {
    return this._paginationList.getIndex();
  }),
  (UTTransferMarketPaginationViewModel.prototype.getNumItemsPerPage = function getNumItemsPerPage() {
    var e = gConfigurationModel.getConfigObject(
      models.ConfigurationModel.KEY_ITEMS_PER_PAGE
    );
    return utils.JS.isValid(e)
      ? e[models.ConfigurationModel.ITEMS_PER_PAGE.TRANSFER_MARKET]
      : 20;
  }),
  utils.JS.inherits(UTMarketSearchResultsViewController, UTViewController),
  (UTMarketSearchResultsViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        (this._paginationViewModel = new UTTransferMarketPaginationViewModel()),
        this._paginationViewModel.init(),
        this._paginationViewModel.addAuctionUpdateObserver(
          this,
          this._eViewmodelDataUpdated
        ),
        this._searchCriteria &&
          (this._searchCriteria.count =
            this._paginationViewModel.getNumItemsPerPage() + 1);
      var e = this.getView();
      e.addTarget(this, this._eRowSelected, enums.UIListEvent.ROW_SELECT),
        e.addTarget(this, this._eNextPage, enums.UIPaginationEvent.NEXT),
        e.addTarget(this, this._ePrevPage, enums.UIPaginationEvent.PREVIOUS);
    }
  }),
  (UTMarketSearchResultsViewController.prototype.initWithSearchCriteria = function initWithSearchCriteria(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof transferobjects.SearchCriteria,
        'Initialization expected a search criteria DTO.'
      ),
      (this._searchCriteria = e),
      this.init());
  }),
  (UTMarketSearchResultsViewController.prototype.setSquadContext = function setSquadContext(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof UTSquadMarketSearchViewModel,
        'Initialization expected a squad market search VM.'
      ),
      (this._squadContext = e),
      this._squadContext &&
        this.setPinnedItem(this._squadContext.getCurrentSlot().getItem()));
  }),
  (UTMarketSearchResultsViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this.onDataChange.dealloc(),
      (this._searchCriteria = null),
      (this._squadContext = null),
      (this._compareItem = null),
      (this._selectedItem = null),
      utils.JS.isValid(this._pinnedListItem) &&
        (this._pinnedListItem.dealloc(), (this._pinnedListItem = null)),
      this._itemListViewDelegate && (this._itemListViewDelegate = null),
      this._paginationViewModel &&
        (this._paginationViewModel.dealloc(),
        (this._paginationViewModel = null)),
      getDefaultDispatcher().removeObserver(
        enums.Notification.UI_ITEM_STATE_CHANGE,
        this
      );
  }),
  (UTMarketSearchResultsViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTMarketSearchView();
  }),
  (UTMarketSearchResultsViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Transfer Market Results - List View';
  }),
  (UTMarketSearchResultsViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.searchresults');
  }),
  (UTMarketSearchResultsViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      getDefaultDispatcher().addObserver(
        enums.Notification.UI_ITEM_STATE_CHANGE,
        this,
        this._nInfoStateChanged
      ),
      this._requestItems(this._paginationViewModel.getCurrentPageIndex()),
      this._compareItem &&
        !this._pinnedListItem &&
        this._generatePinnedItemView(),
      this._pinnedListItem && this._pinnedListItem.viewDidAppear(),
      (this._arbitraryInterval = setInterval(
        this._arbitraryViewUpdate.bind(this),
        5e3
      )),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.AUCTIONS,
        'Transfer Market Search Results'
      );
  }),
  (UTMarketSearchResultsViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      getDefaultDispatcher().removeObserver(
        enums.Notification.UI_ITEM_STATE_CHANGE,
        this
      ),
      this._paginationViewModel.stopAuctionUpdates(),
      this._paginationViewModel.removeAuctionUpdateObserver(this),
      clearInterval(this._arbitraryInterval);
  }),
  (UTMarketSearchResultsViewController.prototype.setItemListViewDelegate = function setItemListViewDelegate(
    e
  ) {
    e.conforms(interfaces.ItemListViewDelegate) &&
      (this._itemListViewDelegate = e);
  }),
  (UTMarketSearchResultsViewController.prototype.setPinnedItem = function setPinnedItem(
    e
  ) {
    (this._compareItem = e),
      this.hasLoaded && !this._pinnedListItem && this._generatePinnedItemView();
  }),
  (UTMarketSearchResultsViewController.prototype.setSelectedItem = function setSelectedItem(
    e
  ) {
    this._selectedItem = e;
  }),
  (UTMarketSearchResultsViewController.prototype.getSelectedItem = function getSelectedItem() {
    return this._paginationViewModel.getCurrentItem();
  }),
  (UTMarketSearchResultsViewController.prototype._generatePinnedItemView = function _generatePinnedItemView() {
    (this._pinnedListItem = new controllers.views.PinnedListItem()),
      this._pinnedListItem.initWithItem(this._compareItem),
      this.addChildViewController(this._pinnedListItem),
      this.getView().appendPinnedItemView(this._pinnedListItem.getView());
  }),
  (UTMarketSearchResultsViewController.prototype._requestItems = function _requestItems(
    r
  ) {
    this._paginationViewModel.stopAuctionUpdates(),
      services.Item.searchTransferMarket(this._searchCriteria, r).observe(
        this,
        function _onRequestItemsComplete(e, t) {
          if ((e.unobserve(this), !t.success))
            return NetworkErrorManager.checkCriticalStatus(t.status)
              ? void NetworkErrorManager.handleStatus(t.status)
              : (services.Notification.queue([
                  services.Localization.localize('popup.error.searcherror'),
                  enums.UINotificationType.NEGATIVE
                ]),
                void this.getNavigationController().popViewController());
          if (0 < this._searchCriteria.offset && 0 === t.data.items.length)
            this._requestItems(r - 1);
          else {
            var i = this._paginationViewModel.getNumItemsPerPage(),
              s = t.data.items.slice();
            if (
              (this.onDataChange.notify({
                items: s
              }),
              s.length > i && (s = s.slice(0, i)),
              this._paginationViewModel.setPageItems(s),
              this._paginationViewModel.setPageIndex(r),
              this._selectedItem && 0 < s.length)
            ) {
              var n = this._paginationViewModel.getIndexByItemId(
                this._selectedItem.id
              );
              0 < n && this._paginationViewModel.setIndex(n),
                (this._selectedItem = null);
            }
            var o = this.getView();
            if (
              (o.setItems(this._paginationViewModel.getCurrentPageItems()),
              o.setPaginationState(1 < r, t.data.items.length > i),
              utils.JS.isValid(this._compareItem) && !this._squadContext)
            ) {
              var a = utils.JS.find(
                s,
                function(e) {
                  return (
                    e.getAuctionData().tradeId ===
                    this._compareItem.getAuctionData().tradeId
                  );
                }.bind(this)
              );
              utils.JS.isValid(a)
                ? this._pinnedListItem.setItem(a)
                : this._paginationViewModel.setPinnedItem(this._compareItem);
            } else
              !isPhone() &&
                0 < s.length &&
                o.selectListRow(this._paginationViewModel.getCurrentItem().id);
          }
          this._paginationViewModel.startAuctionUpdates();
        }
      );
  }),
  (UTMarketSearchResultsViewController.prototype.getIterator = function getIterator() {
    return this._paginationViewModel.getIterator();
  }),
  (UTMarketSearchResultsViewController.prototype.removeItemsById = function removeItemsById(
    e
  ) {
    if (0 < this._paginationViewModel.getItemCount()) {
      var t = this.getView();
      t.removeItemsById(e),
        t.selectListRow(this._paginationViewModel.getCurrentItem().id);
    } else this.refreshList();
  }),
  (UTMarketSearchResultsViewController.prototype.refreshList = function refreshList() {
    var e = this.getView();
    if (
      this._compareItem &&
      -1 === this._paginationViewModel.getIndexByItemId(this._compareItem.id)
    )
      return void this.getNavigationController().popViewController();
    e.setItems(this._paginationViewModel.getCurrentPageItems()),
      utils.JS.isValid(this._pinnedListItem)
        ? this._pinnedListItem.refresh()
        : e.selectListRow(this._paginationViewModel.getCurrentItem().id);
  }),
  (UTMarketSearchResultsViewController.prototype._ePrevPage = function _ePrevPage(
    e,
    t,
    i
  ) {
    this._requestItems(this._paginationViewModel.getPrevPageIndex());
  }),
  (UTMarketSearchResultsViewController.prototype._eNextPage = function _eNextPage(
    e,
    t,
    i
  ) {
    this._requestItems(this._paginationViewModel.getNextPageIndex());
  }),
  (UTMarketSearchResultsViewController.prototype._eRowSelected = function _eRowSelected(
    e,
    t,
    i
  ) {
    var s = i.item || null,
      n = utils.JS.isValid(s)
        ? this._paginationViewModel.getIndexByItemId(s.id)
        : 0;
    if (s) {
      var o = s.getAuctionData();
      if (
        !services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.TRADING_ENABLED
        ) &&
        (o.isActiveTrade() || o.isClosedTrade())
      )
        return void utils.PopupManager.ShowAlert(
          utils.PopupManager.Alerts.TRADING_DISABLED
        );
      var a = n !== this._paginationViewModel.getIndex();
      if (
        (a && this._paginationViewModel.setIndex(n),
        utils.JS.isValid(this._itemListViewDelegate))
      )
        a && this._itemListViewDelegate.selectListRow(this, n, s);
      else {
        var r = this.getNavigationController();
        if (r) {
          var l = new controllers.items.ItemDetails();
          this._squadContext && l.setSquadContext(this._squadContext),
            l.initWithIterator(this._paginationViewModel.getIterator()),
            l.enablePriceComparison(!utils.JS.isValid(this._pinnedListItem)),
            r.pushViewController(l, !0);
        }
      }
    }
  }),
  (UTMarketSearchResultsViewController.prototype._eViewmodelDataUpdated = function _eViewmodelDataUpdated(
    e
  ) {
    this.getView().onTimedUpdate();
  }),
  (UTMarketSearchResultsViewController.prototype._arbitraryViewUpdate = function _arbitraryViewUpdate() {
    this.getView().onTimedUpdate();
  }),
  (UTMarketSearchResultsViewController.prototype._nInfoStateChanged = function _nInfoStateChanged(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.AUCTIONS,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Item Info Switch Button - Transfer Market Search Results'
    );
  }),
  utils.JS.inherits(
    UTMarketSearchResultsSplitViewController,
    UTSplitViewController
  ),
  (UTMarketSearchResultsSplitViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        this._listController.init(),
        this._listController.setItemListViewDelegate(this),
        this._listController.onDataChange.observe(this, this._eListDataChanged);
      var e = this._listController.getView();
      e.addTarget(this, this._ePageChange, enums.UIPaginationEvent.NEXT),
        e.addTarget(this, this._ePageChange, enums.UIPaginationEvent.PREVIOUS),
        this._itemDetailController.initWithIterator(
          this._listController.getIterator()
        ),
        this._itemDetailController.enableSwiping(!1),
        this.addChildViewController(this._listController),
        this.addChildViewController(this._itemDetailController);
      var t = getDefaultDispatcher();
      t.addObserver(
        enums.Notification.ITEM_DISCARD,
        this,
        this._nItemDiscarded
      ),
        t.addObserver(enums.Notification.ITEM_LIST, this, this._nItemListed),
        t.addObserver(enums.Notification.ITEM_MOVE, this, this._nItemMoved);
    }
  }),
  (UTMarketSearchResultsSplitViewController.prototype.initWithSearchCriteria = function initWithSearchCriteria(
    e
  ) {
    this.initialized ||
      (this._listController.initWithSearchCriteria(e), this.init());
  }),
  (UTMarketSearchResultsSplitViewController.prototype.dealloc = function dealloc() {
    this._itemDetailController.dealloc(),
      (this._itemDetailController = null),
      this._listController.dealloc(),
      (this._listController = null);
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.ITEM_DISCARD, this),
      e.removeObserver(enums.Notification.ITEM_LIST, this),
      e.removeObserver(enums.Notification.ITEM_MOVE, this),
      this.superclass();
  }),
  (UTMarketSearchResultsSplitViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._listController.getNavigationTitle();
  }),
  (UTMarketSearchResultsSplitViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._setLeftController(this._listController),
      this._itemDetailController.setNavigationStyle(
        enums.UINavigationBarStyle.SECONDARY
      );
  }),
  (UTMarketSearchResultsSplitViewController.prototype.setPinnedItem = function setPinnedItem(
    e
  ) {
    this._listController && this._listController.setPinnedItem(e);
  }),
  (UTMarketSearchResultsSplitViewController.prototype.setSelectedItem = function setSelectedItem(
    e
  ) {
    this._listController.setSelectedItem(e);
  }),
  (UTMarketSearchResultsSplitViewController.prototype.getSelectedItem = function getSelectedItem() {
    return this._listController.getSelectedItem();
  }),
  (UTMarketSearchResultsSplitViewController.prototype.selectListRow = function selectListRow(
    e,
    t,
    i
  ) {
    e === this._listController &&
      (this._listController.getView().selectListRow(i.id),
      this._itemDetailController.setIndex(t));
  }),
  (UTMarketSearchResultsSplitViewController.prototype._eListDataChanged = function _eListDataChanged(
    e,
    t
  ) {
    t.items &&
      (0 < t.items.length
        ? (this._setRightController(this._itemDetailController),
          this._itemDetailController.setIndex(
            this._listController.getIterator().getIndex()
          ))
        : this.hideRightController());
  }),
  (UTMarketSearchResultsSplitViewController.prototype._ePageChange = function _ePageChange(
    e,
    t,
    i
  ) {
    this._itemDetailController.onPageChange();
  }),
  (UTMarketSearchResultsSplitViewController.prototype._nItemDiscarded = function _nItemDiscarded(
    e,
    t,
    i
  ) {
    this._listController.removeItemsById(i.itemIds || []);
  }),
  (UTMarketSearchResultsSplitViewController.prototype._nItemListed = function _nItemListed(
    e,
    t,
    i
  ) {
    this._listController.removeItemsById(i.itemIds || []);
  }),
  (UTMarketSearchResultsSplitViewController.prototype._nItemMoved = function _nItemMoved(
    e,
    t,
    i
  ) {
    this._listController.removeItemsById(i.itemIds || []);
  }),
  utils.JS.inherits(UTPlayerSearchControl, UTControl),
  (UTPlayerSearchControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('inline-list-select'),
        e.classList.add('ut-player-search-control'),
        (this.__animatedContainer = document.createElement('div')),
        this.__animatedContainer.classList.add('inline-container');
      var t = document.createElement('span');
      t.classList.add('fut_icon'),
        t.classList.add('icon_magnifier'),
        this.__animatedContainer.appendChild(t),
        (this._clearButton = new UTFlatButtonControl()),
        this._clearButton.getRootElement().classList.add('inline-list-btn'),
        this._clearButton.getRootElement().classList.add('icon_close'),
        this._clearButton.getRootElement().classList.add('fut_icon'),
        this._clearButton.getRootElement().classList.add('exit-btn'),
        this._clearButton.getRootElement().classList.add('icon-btn'),
        this.__animatedContainer.appendChild(
          this._clearButton.getRootElement()
        ),
        (this._playerNameInput = new UTTextInputControl()),
        this.__animatedContainer.appendChild(
          this._playerNameInput.getRootElement()
        ),
        (this.__playerResults = document.createElement('div')),
        this.__playerResults.classList.add('inline-list');
      var i = document.createElement('div');
      i.classList.add('sectionHeader'),
        (this.__playerNameTitle = document.createElement('span')),
        this.__playerNameTitle.classList.add('playerNameTitle'),
        i.appendChild(this.__playerNameTitle),
        (this.__ratingTitle = document.createElement('span')),
        this.__ratingTitle.classList.add('ratingTitle'),
        i.appendChild(this.__ratingTitle),
        this.__playerResults.appendChild(i),
        (this.__playerResultsList = document.createElement('ul')),
        this.__playerResultsList.classList.add('ut-button-group'),
        this.__playerResultsList.classList.add('playerResultsList'),
        this.__playerResults.appendChild(this.__playerResultsList),
        (this.__playerResultsEmpty = document.createElement('div')),
        this.__playerResultsEmpty.classList.add('icon_negative'),
        this.__playerResultsEmpty.classList.add('fut_icon'),
        this.__playerResultsEmpty.classList.add('playerResultsEmpty'),
        this.__playerResults.appendChild(this.__playerResultsEmpty),
        this.__animatedContainer.appendChild(this.__playerResults),
        e.appendChild(this.__animatedContainer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTPlayerSearchControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__animatedContainer = null),
      this._clearButton.destroy(),
      this._playerNameInput.destroy(),
      (this.__playerResults = null),
      (this.__playerNameTitle = null),
      (this.__ratingTitle = null),
      (this.__playerResultsList = null),
      (this.__playerResultsEmpty = null);
  }),
  (UTPlayerSearchControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPlayerSearchControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPlayerSearchControl.prototype.init = function init() {
    this._playerNameInput.init(),
      this._playerNameInput.addTarget(
        this,
        this._handleInputChange,
        enums.Event.INPUT
      ),
      this._playerNameInput.setPlaceholder(
        services.Localization.localize(
          'searchauctions.playersearch.inputcaption'
        )
      ),
      this._playerNameInput.setMaxLength(50),
      (this.__playerNameTitle.textContent = services.Localization.localize(
        'searchauctions.label.playername'
      )),
      (this.__ratingTitle.textContent = services.Localization.localize(
        'squads.rating'
      )),
      (this.__playerResultsEmpty.textContent = services.Localization.localize(
        'searchauctions.playersearch.noresults'
      )),
      DOMKit.toggleDisplayStyle(this.__playerResultsEmpty, !1),
      DOMKit.toggleDisplayStyle(this.__playerResults, !1),
      this._clearButton.init(),
      this._clearButton.addTarget(this, this._eClearInput, enums.Event.TAP),
      this.superclass();
  }),
  (UTPlayerSearchControl.prototype.dealloc = function dealloc() {
    clearTimeout(this._timeout),
      clearTimeout(this._closeTimeout),
      clearTimeout(this._inputChangeTimeout),
      this._clearList(),
      this._removeWindowListener(),
      (this._searchEngine = null),
      (this._windowListener = null),
      this.superclass();
  }),
  (UTPlayerSearchControl.prototype._inputChange = function _inputChange(e) {
    var t = !utils.JS.isEmpty(e);
    this.toggleClass('has-selection', t),
      clearTimeout(this._inputChangeTimeout),
      t
        ? this.addClass('contract-text-input')
        : (this._inputChangeTimeout = setTimeout(
            function() {
              this.removeClass('contract-text-input');
            }.bind(this),
            this._tapDelay
          ));
  }),
  (UTPlayerSearchControl.prototype.setPlayerData = function setPlayerData(e) {
    (this._selected = e),
      this.setInput(
        utils.JS.isValid(e.commonName)
          ? e.commonName
          : e.firstName + ' ' + e.lastName
      );
  }),
  (UTPlayerSearchControl.prototype.getSelected = function getSelected() {
    return this._selected;
  }),
  (UTPlayerSearchControl.prototype.setInput = function setInput(e) {
    this._playerNameInput.setValue(e),
      (this._currentName = e),
      this._inputChange(e);
  }),
  (UTPlayerSearchControl.prototype.clearInput = function clearInput() {
    this.setInput(''), (this._selected = null);
  }),
  (UTPlayerSearchControl.prototype._handleInputChange = function _handleInputChange(
    e,
    t,
    i
  ) {
    utils.JS.isEmpty(i.value) &&
      (this.clearInput(), this._triggerActions(enums.Event.CHANGE)),
      clearTimeout(this._timeout),
      (this._timeout = setTimeout(
        function() {
          var e = i.value;
          this._inputChange(e),
            this._updateList(e, this._searchEngine.getEntriesForString(e, 5)),
            clearTimeout(this._timeout);
        }.bind(this),
        500
      ));
  }),
  (UTPlayerSearchControl.prototype._clearList = function _clearList() {
    this._currentQuery.forEach(function(e) {
      e.dealloc();
    }),
      (this._currentQuery = []);
  }),
  (UTPlayerSearchControl.prototype._updateList = function _updateList(e, t) {
    this._clearList(),
      DOMKit.toggleDisplayStyle(
        this.__playerResultsList,
        !utils.JS.isEmpty(e) && 0 < t.length
      ),
      DOMKit.toggleDisplayStyle(
        this.__playerResultsEmpty,
        0 === t.length || utils.JS.isEmpty(e)
      ),
      this._open(),
      utils.JS.isValid(e) &&
        t.forEach(function _generateListRow(e) {
          var t = utils.JS.isValid(e.commonName)
              ? e.commonName
              : e.firstName + ' ' + e.lastName,
            i = new UTGroupButtonControl();
          i.init(),
            i.setText(t),
            i.setSubtext(e.rating.toString()),
            i.addTarget(
              this,
              this._ePlayerEntryClicked.bind(this, e, t),
              enums.Event.TAP
            ),
            this._currentQuery.push(i),
            this.__playerResultsList.appendChild(i.getRootElement());
        }, this);
  }),
  (UTPlayerSearchControl.prototype._open = function _open() {
    this._isOpen ||
      ((this._isOpen = !0),
      clearTimeout(this._closeTimeout),
      requestAnimationFrame(
        function() {
          this.addClass('is-open'),
            this._addWindowListener(),
            DOMKit.toggleDisplayStyle(this.__playerResults, !0);
        }.bind(this)
      ));
  }),
  (UTPlayerSearchControl.prototype._close = function _close() {
    this._isOpen &&
      ((this._isOpen = !1),
      clearTimeout(this._closeTimeout),
      (this._closeTimeout = setTimeout(
        function() {
          this.removeClass('is-open'),
            DOMKit.toggleDisplayStyle(this.__playerResults, !1),
            this._clearList(),
            this.setInput(this._currentName),
            this._removeWindowListener(),
            clearTimeout(this._timeout),
            clearTimeout(this._closeTimeout);
        }.bind(this),
        this._tapDelay
      )));
  }),
  (UTPlayerSearchControl.prototype._windowClick = function _windowClick(e) {
    for (var t = e.target; t; ) {
      if (t === this.__root) return;
      t = t.parentNode;
    }
    this._close();
  }),
  (UTPlayerSearchControl.prototype._addWindowListener = function _addWindowListener() {
    this._removeWindowListener(),
      window.addEventListener(enums.Event.MOUSEUP, this._windowListener, !1),
      window.addEventListener(enums.Event.TOUCHEND, this._windowListener, !1);
  }),
  (UTPlayerSearchControl.prototype._removeWindowListener = function _removeWindowListener() {
    window.removeEventListener(enums.Event.MOUSEUP, this._windowListener, !1),
      window.removeEventListener(
        enums.Event.TOUCHEND,
        this._windowListener,
        !1
      );
  }),
  (UTPlayerSearchControl.prototype._eClearInput = function _eClearInput(
    e,
    t,
    i
  ) {
    this.clearInput(), this._triggerActions(enums.Event.CHANGE), this._close();
  }),
  (UTPlayerSearchControl.prototype._ePlayerEntryClicked = function _ePlayerEntryClicked(
    e,
    t
  ) {
    (this._selected = e),
      this.setInput(t),
      this._triggerActions(enums.Event.CHANGE),
      this._close();
  }),
  NamespaceManager.Register('views.items'),
  (views.items.ItemSearch = function ItemSearchView() {
    UTView.call(this),
      (this._searchFilters = new UTHashTable()),
      (this._filters = []),
      (this._filterIconTables = new UTHashTable()),
      (this._pileFilterIcons = new UTHashTable()),
      (this._bucketFilterIconTables = new UTHashTable()),
      (this._pileFilter = null),
      (this._searchBucket = 0),
      (this.onFilterChange = new UTObservable()),
      Object.defineProperty(this, 'onFilterChange', {
        writable: !1,
        enumerable: !0
      }),
      (this.onSearchModeChange = new UTObservable()),
      Object.defineProperty(this, 'onSearchModeChange', {
        writable: !1,
        enumerable: !0
      }),
      this._generate();
  }),
  utils.JS.inherits(views.items.ItemSearch, UTView),
  (views.items.ItemSearch.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-item-search-view'),
        (this._playerNameSearch = new UTPlayerSearchControl()),
        e.appendChild(this._playerNameSearch.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.ItemSearch.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._playerNameSearch.destroy();
  }),
  (views.items.ItemSearch.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.ItemSearch.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.ItemSearch.prototype.init = function init() {
    this.superclass(), this._playerNameSearch.init();
  }),
  (views.items.ItemSearch.prototype.dealloc = function dealloc() {
    function _clearTable(e) {
      e.clear();
    }
    this._pileFilter &&
      (this._pileFilter.removeTarget(
        this,
        this._eSearchModeChanged,
        enums.Event.CHANGE
      ),
      this._pileFilter.dealloc(),
      (this._pileFilter = null)),
      this._pileFilterIcons.clear(),
      this.clearFilters(),
      this._filterIconTables.forEach(_clearTable),
      this._filterIconTables.clear(),
      (this._filterIconTables = null),
      this._bucketFilterIconTables.forEach(function(e) {
        e.forEach(_clearTable), e.clear();
      }),
      this._bucketFilterIconTables.clear(),
      (this._bucketFilterIconTables = null),
      this.superclass();
  }),
  (views.items.ItemSearch.prototype.setInteractionState = function setInteractionState(
    t
  ) {
    this._filters.forEach(function(e) {
      e.enabled = t;
    }, this),
      this._playerNameSearch.setInteractionState(t),
      utils.JS.isValid(this._pileFilter) && (this._pileFilter.enabled = t),
      this.superclass(t);
  }),
  (views.items.ItemSearch.prototype.clearFilters = function clearFilters() {
    this._searchFilters.forEach(function(e) {
      e.dealloc();
    }),
      this._searchFilters.clear(),
      (this._filters = []);
  }),
  (views.items.ItemSearch.prototype.resetFilters = function resetFilters() {
    this._searchFilters.forEach(function(e) {
      e.setIndex(e.getDefaultIndex());
    }),
      this.resetPlayerName();
  }),
  (views.items.ItemSearch.prototype.setFilterLock = function setFilterLock(
    e,
    t
  ) {
    this._searchFilters.has(e) && (this._searchFilters.get(e).enabled = !t);
  }),
  (views.items.ItemSearch.prototype._setFilterImage = function _setFilterImage(
    e
  ) {
    e.image = this._generateFilterImage(e.setId, e.getId(), e.getValue());
  }),
  (views.items.ItemSearch.prototype._generatePileFilterIconTable = function _generatePileFilterIconTable() {
    return (
      this._pileFilterIcons.set(
        enums.ItemSearchFeature.CLUB,
        this._generatePileFilterImage(enums.ItemSearchFeature.CLUB)
      ),
      this._pileFilterIcons.set(
        enums.ItemSearchFeature.CONCEPT,
        this._generatePileFilterImage(enums.ItemSearchFeature.CONCEPT)
      ),
      this._pileFilterIcons
    );
  }),
  (views.items.ItemSearch.prototype._generatePileFilterImage = function _generatePileFilterImage(
    e
  ) {
    return e === enums.ItemSearchFeature.CLUB
      ? 'images/SearchFilters/players_club.png'
      : e === enums.ItemSearchFeature.CONCEPT
      ? 'images/SearchFilters/players_concept.png'
      : '';
  }),
  (views.items.ItemSearch.prototype._generateFilterIconTable = function _generateFilterIconTable(
    e,
    i,
    t
  ) {
    var s = null,
      n = !1;
    if (this._useBucketTables(i)) {
      var o = this._bucketFilterIconTables.has(t)
        ? this._bucketFilterIconTables.get(t)
        : new UTHashTable();
      (n = o.has(i)),
        (s = n ? o.get(i) : new UTHashTable()),
        o.set(i, s),
        this._bucketFilterIconTables.set(t, o);
    } else
      (n = this._filterIconTables.has(i)),
        (s = n ? this._filterIconTables.get(i) : new UTHashTable()),
        this._filterIconTables.set(i, s);
    return (
      n ||
        e.forEach(function(e, t) {
          s.set(e.value, this._generateFilterImage(i, e.id, e.value));
        }, this),
      s
    );
  }),
  (views.items.ItemSearch.prototype._useBucketTables = function _useBucketTables(
    e
  ) {
    switch (e) {
      case enums.UISearchFilters.YEAR:
      case enums.UISearchFilters.LEVEL:
      case enums.UISearchFilters.TYPE:
        return !0;
      default:
        return !1;
    }
  }),
  (views.items.ItemSearch.prototype._generateFilterImage = function _generateFilterImage(
    e,
    t,
    i
  ) {
    switch (e) {
      case enums.UISearchFilters.YEAR:
        return utils.AssetLocator.getFilterImage(
          utils.AssetLocator.FILTER.YEAR,
          i
        );
      case enums.UISearchFilters.LEVEL:
        return utils.AssetLocator.getFilterImage(
          utils.AssetLocator.FILTER.LEVEL,
          i
        );
      case enums.UISearchFilters.POSITION:
      case enums.UISearchFilters.POSITION_MOD:
        return utils.AssetLocator.getFilterImage(
          utils.AssetLocator.FILTER.POSITION,
          0 <= t ? t : 'default'
        );
      case enums.UISearchFilters.PLAYSTYLE:
        return utils.AssetLocator.getFilterImage(
          utils.AssetLocator.FILTER.PLAYSTYLE,
          0 <= t ? t : 'default'
        );
      case enums.UISearchFilters.LEAGUE:
        return utils.AssetLocator.getFilterImage(
          utils.AssetLocator.FILTER.LEAGUE,
          0 <= t ? t : 'default'
        );
      case enums.UISearchFilters.NATION:
        return utils.AssetLocator.getFilterImage(
          utils.AssetLocator.FILTER.NATION,
          0 <= t ? t : 'default'
        );
      case enums.UISearchFilters.CLUB:
        return utils.AssetLocator.getFilterImage(
          utils.AssetLocator.FILTER.CLUB,
          0 <= t ? t : 'default'
        );
      case enums.UISearchFilters.TYPE:
        return utils.AssetLocator.getFilterImage(
          utils.AssetLocator.FILTER.TYPE,
          0 <= t ? t : 'default',
          this._searchBucket
        );
    }
    return '';
  }),
  (views.items.ItemSearch.prototype.setFilterValue = function setFilterValue(
    e,
    t
  ) {
    if (this._searchFilters.has(e)) {
      var i = this._searchFilters.get(e);
      utils.JS.isNumber(t)
        ? i.setIndexById(t)
        : utils.JS.isString(t) && i.setIndexByValue(t);
    }
  }),
  (views.items.ItemSearch.prototype.setFilterDefaultValue = function setFilterDefaultValue(
    e,
    t
  ) {
    if (this._searchFilters.has(e)) {
      var i = this._searchFilters.get(e);
      utils.JS.isNumber(t)
        ? i.setDefaultIndexById(t)
        : utils.JS.isString(t) && i.setDefaultIndexByValue(t);
    }
  }),
  (views.items.ItemSearch.prototype._getFilterTitle = function _getFilterTitle(
    e
  ) {
    switch (e) {
      case enums.UISearchFilters.TYPE:
        return services.Localization.localize('search.details.type');
      case enums.UISearchFilters.LEVEL:
        return services.Localization.localize('search.pagination.level');
      case enums.UISearchFilters.POSITION:
        return services.Localization.localize('search.pagination.position');
      case enums.UISearchFilters.PLAYSTYLE:
        return services.Localization.localize('search.pagination.playerstyle');
      case enums.UISearchFilters.NATION:
        return services.Localization.localize(
          'controlbar.cardview.Nationality'
        );
      case enums.UISearchFilters.LEAGUE:
        return services.Localization.localize('controlbar.cardview.League');
      case enums.UISearchFilters.CLUB:
        return services.Localization.localize('controlbar.cardview.Club');
      case enums.UISearchFilters.POSITION_MOD:
        return services.Localization.localize('search.pagination.position');
    }
    return '';
  }),
  (views.items.ItemSearch.prototype._getFilterHasDefault = function _getFilterHasDefault(
    e
  ) {
    return e === enums.UISearchFilters.TYPE
      ? this._searchBucket === enums.SearchBucket.STAFF
      : e !== enums.UISearchFilters.YEAR;
  }),
  (views.items.ItemSearch.prototype._normalizeCriteria = function _normalizeCriteria(
    e
  ) {
    e.type !== enums.SearchType.PLAYER &&
      e.level === enums.SearchLevel.SPECIAL &&
      (e.level = enums.SearchLevel.GOLD);
  }),
  (views.items.ItemSearch.prototype._generateFilter = function _generateFilter(
    e,
    t,
    i
  ) {
    var s;
    this._searchFilters.has(e)
      ? (s = this._searchFilters.get(e)).removeTarget(
          this,
          this._eFilterChange,
          enums.Event.CHANGE
        )
      : ((s = new UTSearchFilterControl()).init(),
        (s.setId = e),
        s.setDefaultLabel(this._getFilterTitle(e)),
        s.setInteractionState(!0),
        this._searchFilters.set(e, s)),
      s.setHasDefault(this._getFilterHasDefault(e)),
      s.setIconTable(this._generateFilterIconTable(t, e, this._searchBucket)),
      s.setOptions(t),
      this._filters.push(s),
      utils.JS.isValid(i) && this.setFilterValue(e, i),
      s.addTarget(this, this._eFilterChange, enums.Event.CHANGE);
  }),
  (views.items.ItemSearch.prototype.setFilters = function setFilters(e, t) {
    var i = e.searchCriteria;
    if (
      ((this._searchBucket = e.getBucketFromType(i.type)),
      this._normalizeCriteria(i),
      this._filters.forEach(function(e) {
        e.blur(), e.getRoot().detach();
      }, this),
      (this._filters = []),
      this._searchBucket === enums.SearchBucket.STAFF)
    )
      this._generateFilter(
        enums.UISearchFilters.TYPE,
        factories.DataProvider.getStaffTypeDP(),
        i.category
      );
    else if (this._searchBucket === enums.SearchBucket.CLUB) {
      var s = i.type === enums.SearchType.CLUB_INFO ? i.category : i.type;
      this._generateFilter(
        enums.UISearchFilters.TYPE,
        factories.DataProvider.getClubTypeDP(),
        s
      );
    } else
      this._searchBucket === enums.SearchBucket.CONSUMABLE &&
        (this._generateFilter(
          enums.UISearchFilters.TYPE,
          factories.DataProvider.getConsumableTypeDP(),
          i.category
        ),
        i.category === enums.SearchCategory.MANAGER_LEAGUE &&
          this._generateFilter(
            enums.UISearchFilters.LEAGUE,
            factories.DataProvider.getLeagueDP(!0),
            i.league
          ));
    if (
      (i.type === enums.SearchType.PLAYER
        ? this._generateFilter(
            enums.UISearchFilters.LEVEL,
            factories.DataProvider.getItemLevelDP(!0),
            i.level
          )
        : this._generateFilter(
            enums.UISearchFilters.LEVEL,
            factories.DataProvider.getItemLevelDP(!1),
            i.level
          ),
      i.type === enums.SearchType.PLAYER)
    ) {
      var n = i.zone !== enums.SearchType.ANY ? i.zone : i.position,
        o = n !== enums.SearchType.ANY ? n === enums.PlayerPositions.GK : null;
      this._generateFilter(
        enums.UISearchFilters.POSITION,
        factories.DataProvider.getPlayerPositionDP(t),
        n
      ),
        this._generateFilter(
          enums.UISearchFilters.PLAYSTYLE,
          factories.DataProvider.getPlayStyleDP(o),
          i.playStyle
        ),
        this._generateFilter(
          enums.UISearchFilters.NATION,
          factories.DataProvider.getNationDP(),
          i.nation
        ),
        this._generateFilter(
          enums.UISearchFilters.LEAGUE,
          factories.DataProvider.getLeagueDP(!0),
          i.league
        ),
        this._generateFilter(
          enums.UISearchFilters.CLUB,
          factories.DataProvider.getTeamDP(i.league),
          i.club
        ),
        e.playerData
          ? this.setPlayerSearch(e.playerData)
          : this.resetPlayerName();
    } else
      i.category === enums.SearchCategory.MANAGER
        ? (this._generateFilter(
            enums.UISearchFilters.NATION,
            factories.DataProvider.getNationDP(),
            i.nation
          ),
          this._generateFilter(
            enums.UISearchFilters.LEAGUE,
            factories.DataProvider.getLeagueDP(e.isMarketSearch),
            i.league
          ))
        : i.category === enums.SearchCategory.POSITION
        ? this._generateFilter(
            enums.UISearchFilters.POSITION_MOD,
            factories.DataProvider.getPositionModifierDP(),
            i.position
          )
        : i.category === enums.SearchCategory.PLAYSTYLE
        ? this._generateFilter(
            enums.UISearchFilters.PLAYSTYLE,
            factories.DataProvider.getPlayStyleDP(),
            i.playStyle
          )
        : (i.category !== enums.SearchCategory.KIT &&
            i.category !== enums.SearchCategory.BADGE) ||
          (this._generateFilter(
            enums.UISearchFilters.LEAGUE,
            factories.DataProvider.getLeagueDP(!0),
            i.league
          ),
          this._generateFilter(
            enums.UISearchFilters.CLUB,
            factories.DataProvider.getTeamDP(i.league),
            i.club
          ));
    var a = utils.JS.isValid(e.playerData);
    this.setFilterLock(enums.UISearchFilters.NATION, a),
      this.setFilterLock(enums.UISearchFilters.LEAGUE, a),
      this.setFilterLock(enums.UISearchFilters.CLUB, a),
      this._searchFilters.forEach(function(e) {
        this._setFilterImage(e);
      }, this),
      this._filters.forEach(function(e) {
        this.getRoot().append(e.getRoot());
      }, this);
  }),
  (views.items.ItemSearch.prototype.setPlayerSearch = function setPlayerSearch(
    e
  ) {
    this._playerNameSearch.setPlayerData(e),
      this.setFilterValue(enums.UISearchFilters.NATION, -1),
      this.setFilterValue(enums.UISearchFilters.LEAGUE, -1),
      this.setFilterValue(enums.UISearchFilters.CLUB, -1),
      this.setFilterLock(enums.UISearchFilters.NATION, !0),
      this.setFilterLock(enums.UISearchFilters.LEAGUE, !0),
      this.setFilterLock(enums.UISearchFilters.CLUB, !0);
  }),
  (views.items.ItemSearch.prototype.resetPlayerName = function resetPlayerName() {
    this._playerNameSearch.clearInput(),
      this.setFilterLock(enums.UISearchFilters.NATION, !1),
      this.setFilterLock(enums.UISearchFilters.LEAGUE, !1),
      this.setFilterLock(enums.UISearchFilters.CLUB, !1);
  }),
  (views.items.ItemSearch.prototype.togglePlayerNameRow = function togglePlayerNameRow(
    e
  ) {
    this._playerNameSearch.setDisplay(e);
  }),
  (views.items.ItemSearch.prototype.togglePileFilter = function togglePileFilter(
    e
  ) {
    this._pileFilter && this._pileFilter.setDisplay(e);
  }),
  (views.items.ItemSearch.prototype.setPileFilter = function setPileFilter(
    e,
    t
  ) {
    this._pileFilter ||
      ((this._pileFilter = new UTSearchFilterControl()),
      this._pileFilter.init(),
      this._pileFilter.setIconTable(this._generatePileFilterIconTable()),
      this._pileFilter.setOptions(e),
      this._pileFilter.addTarget(
        this,
        this._eSearchModeChanged,
        enums.Event.CHANGE
      ),
      this._pileFilter.setInteractionState(!0),
      this._playerNameSearch.getRoot().after(this._pileFilter.getRoot())),
      this._pileFilter.setIndexByValue(t),
      this._pileFilter.setDefaultLabel(
        services.Localization.localize('search.pagination.searchmode')
      ),
      this.setPileFilterImage();
  }),
  (views.items.ItemSearch.prototype.setPileFilterImage = function setPileFilterImage() {
    utils.Debug.Assert(
      utils.JS.isValid(this._pileFilter),
      'Attempted to set search pile image when no pile filter exists.'
    ),
      this._pileFilter &&
        (this._pileFilter.image = this._generatePileFilterImage(
          this._pileFilter.getValue().toString()
        ));
  }),
  (views.items.ItemSearch.prototype.getPlayerNameSearch = function getPlayerNameSearch() {
    return this._playerNameSearch;
  }),
  (views.items.ItemSearch.prototype._eFilterChange = function _eFilterChange(
    e,
    t,
    i
  ) {
    this._setFilterImage(e),
      this.onFilterChange.notify(e.setId, e.getId(), e.getValue());
  }),
  (views.items.ItemSearch.prototype._eSearchModeChanged = function _eSearchModeChanged(
    e,
    t,
    i
  ) {
    this.setPileFilterImage(),
      this.onSearchModeChange.notify(this._pileFilter.getValue());
  }),
  utils.JS.inherits(UTNumberInputControl, UTControl),
  (UTNumberInputControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('input');
      e.setAttribute('type', 'tel'),
        e.classList.add('numericInput'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTNumberInputControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTNumberInputControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTNumberInputControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTNumberInputControl.prototype.init = function init() {
    this.superclass(),
      this.setPlaceholder(services.Localization.localize('roles.defaultRole')),
      this.setInteractionState(!0);
  }),
  (UTNumberInputControl.prototype.dealloc = function dealloc() {
    clearTimeout(this._selectionTimeout),
      (this._selectionTimeout = 0),
      this.superclass();
  }),
  (UTNumberInputControl.prototype._startHandlingEvents = function _startHandlingEvents(
    e
  ) {
    this.superclass(e),
      this._addListener(
        enums.Event.CHANGE,
        this._eventElement,
        this._handleChangeEvent.bind(this)
      ),
      this._addListener(
        enums.Event.FOCUS,
        this._eventElement,
        this._handleFocusEvent.bind(this)
      ),
      this._addListener(
        enums.Event.BLUR,
        this._eventElement,
        this._handleBlurEvent.bind(this)
      );
  }),
  (UTNumberInputControl.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    if (this._setInteractionStateFlag(e)) {
      var t = this.getRootElement();
      this._interactionState
        ? this._startHandlingEvents(this.getRootElement())
        : this._stopHandlingEvents(!0),
        (t.disabled = !this._interactionState),
        this.toggleClass(enums.UIState.DISABLED, !this._interactionState),
        this._interactionState || t !== document.activeElement || t.blur();
    }
  }),
  (UTNumberInputControl.prototype.reset = function reset() {
    this.setValue(0);
  }),
  (UTNumberInputControl.prototype.setPlaceholder = function setPlaceholder(e) {
    this.getRootElement().setAttribute('placeholder', e);
  }),
  (UTNumberInputControl.prototype.setValue = function setValue(e) {
    utils.JS.isNumber(e)
      ? (e > this._maxValue
          ? (e = this._maxValue)
          : e < this._minValue && (e = this._minValue),
        (this.getRootElement().value = services.Localization.localizeNumber(e)))
      : utils.Debug.Assert(!1, 'Expected a number to assign as value.');
  }),
  (UTNumberInputControl.prototype.getValue = function getValue() {
    var e = utils.JS.parseNumber(
      this.getRootElement().value,
      services.Localization.getLocale().toBCPString()
    );
    return utils.JS.isNumber(e) ? e : 0;
  }),
  (UTNumberInputControl.prototype.setMinValue = function setMinValue(e) {
    utils.JS.isNumber(e)
      ? (e < Number.MIN_SAFE_INTEGER
          ? (this._minValue = Number.MIN_SAFE_INTEGER)
          : e > Number.MAX_SAFE_INTEGER
          ? (this._minValue = Number.MAX_SAFE_INTEGER)
          : e !== this._minValue && (this._minValue = e),
        this._maxValue < this._minValue && (this._maxValue = this._minValue),
        this.getValue() < this._minValue && this.setValue(this._minValue))
      : utils.Debug.Assert(!1, 'Expected a number to assign as minimum value.');
  }),
  (UTNumberInputControl.prototype.getMinValue = function getMinValue() {
    return this._minValue;
  }),
  (UTNumberInputControl.prototype.setMaxValue = function setMaxValue(e) {
    utils.JS.isNumber(e)
      ? (e > Number.MAX_SAFE_INTEGER
          ? (this._maxValue = Number.MAX_SAFE_INTEGER)
          : e < Number.MIN_SAFE_INTEGER
          ? (this._maxValue = Number.MIN_SAFE_INTEGER)
          : e !== this._maxValue &&
            ((this._maxValue = e),
            (this._minValue = Math.min(this._minValue, this._maxValue))),
        this._minValue > this._maxValue && (this._minValue = this._maxValue),
        this.getValue() > this._maxValue && this.setValue(this._maxValue))
      : utils.Debug.Assert(!1, 'Expected a number to assign as maximum value.');
  }),
  (UTNumberInputControl.prototype.getMaxValue = function getMaxValue() {
    return this._maxValue;
  }),
  (UTNumberInputControl.prototype._sanitizeValue = function _sanitizeValue() {
    var e = utils.JS.parseNumber(
      this.getRootElement().value,
      services.Localization.getLocale().toBCPString()
    );
    return (
      utils.JS.isNumber(e)
        ? e > this._maxValue
          ? (e = this._maxValue)
          : e < this._minValue && (e = this._minValue)
        : (e = 0),
      (this.getRootElement().value = services.Localization.localizeNumber(e)),
      e
    );
  }),
  (UTNumberInputControl.prototype._handleFocusEvent = function _handleFocusEvent(
    e
  ) {
    var t = this.getRootElement();
    (t.value = t.value.replace(/\D/g, '')),
      (this._selectionTimeout = setTimeout(function() {
        t.setSelectionRange(0, t.value.length);
      }, 50)),
      this._triggerActions(enums.Event.FOCUS);
  }),
  (UTNumberInputControl.prototype._handleBlurEvent = function _handleBlurEvent(
    e
  ) {
    clearTimeout(this._selectionTimeout),
      (this._selectionTimeout = 0),
      this._sanitizeValue(),
      this._triggerActions(enums.Event.BLUR);
  }),
  (UTNumberInputControl.prototype._handleChangeEvent = function _handleChangeEvent(
    e
  ) {
    var t = this._sanitizeValue();
    this._triggerActions(enums.Event.CHANGE, t);
  }),
  utils.JS.inherits(UTCurrencyInputControl, UTNumberInputControl),
  (UTCurrencyInputControl.PRICE_TIERS = [
    {
      min: 1e5,
      inc: 1e3
    },
    {
      min: 5e4,
      inc: 500
    },
    {
      min: 1e4,
      inc: 250
    },
    {
      min: 1e3,
      inc: 100
    },
    {
      min: 150,
      inc: 50
    },
    {
      min: 0,
      inc: 150
    }
  ]),
  (UTCurrencyInputControl.prototype._roundToNearestStep = function _roundToNearestStep(
    t
  ) {
    var e = utils.JS.find(UTCurrencyInputControl.PRICE_TIERS, function(e) {
      return t >= e.min;
    });
    return Math.round(t / e.inc) * e.inc;
  }),
  (UTCurrencyInputControl.prototype.setValue = function setValue(e) {
    var t = utils.JS.isNumber(e);
    if ((utils.Debug.Assert(t, 'Expected a number to assign as value.'), t)) {
      var i = Math.max(
          Math.min(
            this._roundToNearestStep(0 === e ? this._defaultValue : e),
            this._maxValue
          ),
          this._minValue
        ),
        s = this.getValue();
      this.toggleClass('filled', 0 !== i),
        (this.getRootElement().value =
          0 < i ? services.Localization.localizeNumber(i) : ''),
        i !== s &&
          this._triggerActions(enums.Event.CHANGE, {
            value: i,
            from: s,
            delta: i - s
          });
    }
  }),
  (UTCurrencyInputControl.prototype.setMinValue = function setMinValue(e) {
    if (utils.JS.isNumber(e)) {
      var t = this._roundToNearestStep(e);
      t !== this._minValue &&
        ((this._minValue = t),
        (this._maxValue = Math.max(this._maxValue, this._minValue)),
        this.setValue(Math.max(this.getValue(), this._minValue)));
    } else
      utils.Debug.Assert(!1, 'Expected a number to assign as minimum value.');
  }),
  (UTCurrencyInputControl.prototype.setMaxValue = function setMaxValue(e) {
    if (utils.JS.isNumber(e)) {
      var t = this._roundToNearestStep(e);
      t !== this._maxValue &&
        ((this._maxValue = t),
        (this._minValue = Math.min(this._minValue, this._maxValue)),
        this.setValue(Math.min(this.getValue(), this._maxValue)));
    } else
      utils.Debug.Assert(!1, 'Expected a number to assign as maximum value.');
  }),
  (UTCurrencyInputControl.prototype.setDefaultValue = function setDefaultValue(
    e
  ) {
    var t = utils.JS.isNumber(e);
    utils.Debug.Assert(t, 'Expected a number to assign as default value.'),
      t && (this._defaultValue = e);
  }),
  (UTCurrencyInputControl.prototype.getDefaultValue = function getDefaultValue() {
    return this._defaultValue;
  }),
  (UTCurrencyInputControl.prototype.increase = function increase(e) {
    var t = utils.JS.isNumber(e) ? e : this.getValue();
    this.setValue(UTCurrencyInputControl.getIncrementAboveVal(t));
  }),
  (UTCurrencyInputControl.prototype.decrease = function decrease(e) {
    var t = utils.JS.isNumber(e) ? e : this.getValue();
    this.setValue(UTCurrencyInputControl.getIncrementBelowVal(t));
  }),
  (UTCurrencyInputControl.getIncrementBelowVal = function getIncrementBelowVal(
    t
  ) {
    var e = utils.JS.isNumber(t);
    if (
      (utils.Debug.Assert(e, 'Expected a number to determine lower increment.'),
      !e)
    )
      return 0;
    if (
      (utils.Debug.Assert(
        0 <= t,
        'Expected a number value greater than or equal to zero.'
      ),
      t <= 0)
    )
      return 0;
    var i = utils.JS.find(UTCurrencyInputControl.PRICE_TIERS, function(e) {
      return t > e.min;
    });
    return 0 < t - i.inc ? Math.round((t - i.inc) / i.inc) * i.inc : 0;
  }),
  (UTCurrencyInputControl.getIncrementAboveVal = function getIncrementAboveVal(
    t
  ) {
    var e = utils.JS.isNumber(t);
    if (
      (utils.Debug.Assert(e, 'Expected a number to determine lower increment.'),
      !e)
    )
      return 0;
    if (
      (utils.Debug.Assert(
        t <= AUCTION_MAX_BID,
        'Expected a number value no greater than the maximum auction limit.'
      ),
      t >= AUCTION_MAX_BID)
    )
      return AUCTION_MAX_BID;
    var i = utils.JS.find(UTCurrencyInputControl.PRICE_TIERS, function(e) {
      return t >= e.min;
    });
    return t + i.inc < AUCTION_MAX_BID
      ? Math.round((t + i.inc) / i.inc) * i.inc
      : AUCTION_MAX_BID;
  }),
  (UTCurrencyInputControl.prototype._sanitizeValue = function _sanitizeValue() {
    var e = utils.JS.parseNumber(
        this.getRootElement().value,
        services.Localization.getLocale().toBCPString()
      ),
      t = Math.max(
        Math.min(
          this._roundToNearestStep(
            0 !== e && utils.JS.isNumber(e) ? e : this._defaultValue
          ),
          this._maxValue
        ),
        this._minValue
      );
    return (
      (this.getRootElement().value =
        0 < t ? services.Localization.localizeNumber(t) : ''),
      e
    );
  }),
  utils.JS.inherits(UTNumericInputSpinnerControl, UTView),
  (UTNumericInputSpinnerControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-numeric-input-spinner-control'),
        (this._decrementBtn = new UTStandardButtonControl()),
        this._decrementBtn.getRootElement().classList.add('decrement-value'),
        e.appendChild(this._decrementBtn.getRootElement()),
        (this._currencyInput = new UTCurrencyInputControl()),
        e.appendChild(this._currencyInput.getRootElement()),
        (this._incrementBtn = new UTStandardButtonControl()),
        this._incrementBtn.getRootElement().classList.add('increment-value'),
        e.appendChild(this._incrementBtn.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTNumericInputSpinnerControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._decrementBtn.destroy(),
      this._currencyInput.destroy(),
      this._incrementBtn.destroy();
  }),
  (UTNumericInputSpinnerControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTNumericInputSpinnerControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTNumericInputSpinnerControl.prototype.init = function init() {
    var t, i;
    this.superclass();
    var s = 250,
      n = 50,
      o = 0;

    function endIncrease() {
      (t = clearTimeout(t)), (o = 0);
    }

    function endDecrease() {
      (i = clearTimeout(i)), (o = 0);
    }
    this._currencyInput.init(),
      this._currencyInput.setPlaceholder(
        services.Localization.localize('post.spinnerDefaultValue')
      ),
      this._currencyInput.addTarget(
        this,
        function() {
          var e = this.getValue();
          this._decrementBtn.setInteractionState(
            e > this._currencyInput.getMinValue()
          ),
            this._incrementBtn.setInteractionState(
              e < this._currencyInput.getMaxValue()
            );
        },
        enums.Event.CHANGE
      );
    var e = this.getValue();
    this._decrementBtn.init(),
      this._decrementBtn.addTarget(
        this,
        function beginDecrease() {
          if (!t)
            if (
              this._currencyInput.getValue() > this._currencyInput.getMinValue()
            ) {
              this._currencyInput.decrease();
              var e = ++o <= 4 ? s : n;
              i = setTimeout(beginDecrease.bind(this), e);
            } else endDecrease.call(this);
        },
        enums.Event.TOUCHSTART
      ),
      this._decrementBtn.addTarget(this, endDecrease, enums.Event.TOUCHEND),
      this._decrementBtn.addTarget(this, endDecrease, enums.Event.TOUCHCANCEL),
      this._decrementBtn.setInteractionState(
        e > this._currencyInput.getMinValue()
      ),
      this._incrementBtn.init(),
      this._incrementBtn.addTarget(
        this,
        function beginIncrease() {
          if (!i)
            if (
              this._currencyInput.getValue() < this._currencyInput.getMaxValue()
            ) {
              this._currencyInput.increase();
              var e = ++o <= 4 ? s : n;
              t = setTimeout(beginIncrease.bind(this), e);
            } else endIncrease.call(this);
        },
        enums.Event.TOUCHSTART
      ),
      this._incrementBtn.addTarget(this, endIncrease, enums.Event.TOUCHEND),
      this._incrementBtn.addTarget(this, endIncrease, enums.Event.TOUCHCANCEL),
      this._incrementBtn.setInteractionState(
        e < this._currencyInput.getMaxValue()
      );
  }),
  (UTNumericInputSpinnerControl.prototype.reset = function reset() {
    this._currencyInput.reset();
  }),
  (UTNumericInputSpinnerControl.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    var t = this.getValue();
    this.superclass(e),
      this._currencyInput.setInteractionState(e),
      this._decrementBtn.setInteractionState(
        e && t > this._currencyInput.getMinValue()
      ),
      this._incrementBtn.setInteractionState(
        e && t < this._currencyInput.getMaxValue()
      );
  }),
  (UTNumericInputSpinnerControl.prototype.getInput = function getInput() {
    return this._currencyInput;
  }),
  (UTNumericInputSpinnerControl.prototype.getValue = function getValue() {
    return this._currencyInput.getValue();
  }),
  (UTNumericInputSpinnerControl.prototype.setValue = function setValue(e) {
    this._currencyInput.setValue(e);
  }),
  (UTNumericInputSpinnerControl.prototype.getDefaultValue = function getDefaultValue() {
    return this._currencyInput.getDefaultValue();
  }),
  (UTNumericInputSpinnerControl.prototype.setDefaultValue = function setDefaultValue(
    e
  ) {
    this._currencyInput.setDefaultValue(e);
  }),
  (UTNumericInputSpinnerControl.prototype.getMinValue = function getMinValue() {
    return this._currencyInput.getMinValue();
  }),
  (UTNumericInputSpinnerControl.prototype.setMinValue = function setMinValue(
    e
  ) {
    this._currencyInput.setMinValue(e);
  }),
  (UTNumericInputSpinnerControl.prototype.getMaxValue = function getMaxValue() {
    return this._currencyInput.getMaxValue();
  }),
  (UTNumericInputSpinnerControl.prototype.setMaxValue = function setMaxValue(
    e
  ) {
    this._currencyInput.setMaxValue(e);
  }),
  (UTNumericInputSpinnerControl.prototype.setLimits = function setLimits(e, t) {
    var i = this.getValue();
    this._currencyInput.setMinValue(e),
      this._currencyInput.setMaxValue(t),
      this._decrementBtn.setInteractionState(e < i),
      this._incrementBtn.setInteractionState(i < t);
  }),
  NamespaceManager.Register('components'),
  (components.SearchCriteriaPriceRow = function UTSearchCriteriaPriceRowView() {
    var t;
    UTView.call(this),
      this._generate(),
      Object.defineProperty(this, 'minPrice', {
        get: function() {
          return this._currencyInput.getMinValue();
        },
        set: function(e) {
          this._currencyInput.setMinValue(e);
        }
      }),
      Object.defineProperty(this, 'maxPrice', {
        get: function() {
          return this._currencyInput.getMaxValue();
        },
        set: function(e) {
          this._currencyInput.setMaxValue(e);
        }
      }),
      Object.defineProperty(this, 'label', {
        get: function() {
          return t;
        },
        set: function(e) {
          utils.JS.isString(e) && ((t = e), (this.__label.textContent = t));
        }
      }),
      Object.defineProperty(this, 'value', {
        get: function() {
          return this._currencyInput.getValue();
        },
        set: function(e) {
          this._currencyInput.setValue(e);
        }
      }),
      (this.label = ''),
      (this.minPrice = 0),
      (this.maxPrice = AUCTION_MAX_BID),
      (this.value = 0);
  }),
  utils.JS.inherits(components.SearchCriteriaPriceRow, UTView),
  (components.SearchCriteriaPriceRow.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('price-filter');
      var t = document.createElement('div');
      t.classList.add('info'),
        (this.__label = document.createElement('span')),
        this.__label.classList.add('label'),
        t.appendChild(this.__label),
        e.appendChild(t),
        (this._currencyInput = new UTNumericInputSpinnerControl()),
        e.appendChild(this._currencyInput.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.SearchCriteriaPriceRow.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__label = null),
      this._currencyInput.destroy();
  }),
  (components.SearchCriteriaPriceRow.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.SearchCriteriaPriceRow.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.SearchCriteriaPriceRow.prototype.init = function init() {
    this.superclass(), this._currencyInput.init();
  }),
  (components.SearchCriteriaPriceRow.prototype.reset = function reset() {
    this._currencyInput.reset();
  }),
  (components.SearchCriteriaPriceRow.prototype.getCurrencyInput = function getCurrencyInput() {
    return this._currencyInput.getInput();
  }),
  NamespaceManager.Register('components'),
  (components.TabMenuItem = function TabMenuItemView() {
    UTTargetActionView.call(this),
      (this._id = 0),
      Object.defineProperty(this, '_id', {
        writable: !0,
        enumerable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(components.TabMenuItem, UTTargetActionView),
  (components.TabMenuItem.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('a');
      e.setAttribute('href', '#'),
        e.setAttribute('draggable', 'false'),
        e.classList.add('tab-menu-item'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.TabMenuItem.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (components.TabMenuItem.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.TabMenuItem.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.TabMenuItem.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (components.TabMenuItem.prototype.getTitle = function getTitle() {
    return this.getRootElement().textContent;
  }),
  (components.TabMenuItem.prototype.setTitle = function setTitle(e) {
    var t = utils.JS.isString(e);
    utils.Debug.Assert(t, 'Expected a string'),
      t && (this.getRootElement().textContent = e);
  }),
  (components.TabMenuItem.prototype.getId = function getId() {
    return this._id;
  }),
  (components.TabMenuItem.prototype.setId = function setId(e) {
    var t = utils.JS.isNumber(e) || utils.JS.isString(e);
    utils.Debug.Assert(t, 'Expected a number or string'), t && (this._id = e);
  }),
  (components.TabMenuItem.prototype._touchStarted = function _touchStarted(e) {
    this.addClass(enums.UIButtonState.ACTIVE);
  }),
  (components.TabMenuItem.prototype._touchMoved = function _touchMoved(e) {
    this.removeClass(enums.UIButtonState.ACTIVE);
  }),
  (components.TabMenuItem.prototype._touchEnded = function _touchEnded(e) {
    this.removeClass(enums.UIButtonState.ACTIVE);
  }),
  (components.TabMenuItem.prototype._touchCancelled = function _touchCancelled(
    e
  ) {
    this.removeClass(enums.UIButtonState.ACTIVE);
  }),
  (components.TabMenuItem.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass(enums.UIState.ACTIVE),
      this.removeClass(enums.UIState.HOVER);
  }),
  (components.TabMenuItem.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIState.HOVER);
  }),
  (components.TabMenuItem.prototype._tapDetected = function _tapDetected(e) {
    this._triggerActions(enums.Event.TAP, {
      id: this._id
    });
  }),
  NamespaceManager.Register('components'),
  (components.TabMenu = function TabMenuView() {
    UTTargetActionView.call(this),
      (this._tabs = []),
      (this._activeId = 0),
      this._generate();
  }),
  utils.JS.inherits(components.TabMenu, UTTargetActionView),
  (components.TabMenu.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('tab-menu'),
        (this.__menuContainer = document.createElement('div')),
        this.__menuContainer.classList.add('menu-container'),
        e.appendChild(this.__menuContainer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.TabMenu.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__menuContainer = null);
  }),
  (components.TabMenu.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.TabMenu.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.TabMenu.prototype.dealloc = function dealloc() {
    this.superclass(), this.clearTabs();
  }),
  (components.TabMenu.prototype.setInteractionState = function setInteractionState(
    t
  ) {
    this._setInteractionStateFlag(t),
      this._tabs.forEach(function(e) {
        e.setInteractionState(t);
      });
  }),
  (components.TabMenu.prototype.clearTabs = function clearTabs() {
    this._tabs.forEach(function(e) {
      e.dealloc();
    }),
      (this._tabs = []);
  }),
  (components.TabMenu.prototype.addTab = function addTab(e, t) {
    var i = new components.TabMenuItem();
    i.init(),
      i.setId(e),
      i.setTitle(t),
      i.addTarget(this, this._eMenuItemTapped, enums.Event.TAP),
      this.addSubview(i, this.__menuContainer),
      this._tabs.push(i),
      1 === this._tabs.length && ((this._activeId = e), this._updateTabState());
  }),
  (components.TabMenu.prototype._updateTabState = function _updateTabState() {
    var i = null;
    this._tabs.forEach(function(e) {
      var t = e.getId() === this._activeId;
      e.toggleClass(enums.UIState.SELECTED, t), t && (i = e);
    }, this),
      i && this._animateTabShift(i);
  }),
  (components.TabMenu.prototype.setActiveTab = function setActiveTab(e) {
    e !== this._activeId && ((this._activeId = e), this._updateTabState());
  }),
  (components.TabMenu.prototype.getActiveTab = function getActiveTab() {
    return this._activeId;
  }),
  (components.TabMenu.prototype.setTabInteractionState = function setTabInteractionState(
    t,
    e
  ) {
    if (e || t !== this._activeId) {
      var i = utils.JS.find(this._tabs, function(e) {
        return e.getId() === t;
      });
      i &&
        (i.toggleClass(enums.UIState.DISABLED, !e), i.setInteractionState(e));
    }
  }),
  (components.TabMenu.prototype._animateTabShift = function _animateTabShift(
    e
  ) {
    var t = this.getRoot(),
      i = e.getBoundingClientRect(),
      s = this.getBoundingClientRect(),
      n = this.getRootElement().scrollLeft;
    i.left < s.left
      ? t.animate(
          {
            scrollLeft: n + Math.round(i.left - s.left)
          },
          250
        )
      : Math.round(i.right) > s.right &&
        t.animate(
          {
            scrollLeft: n + Math.round(i.right - s.right)
          },
          250
        );
  }),
  (components.TabMenu.prototype._eMenuItemTapped = function _eMenuItemTapped(
    e,
    t,
    i
  ) {
    i.id !== this._activeId &&
      (this.setActiveTab(i.id),
      this._triggerActions(enums.Event.TAP, {
        tab: e,
        id: i.id,
        index: this._tabs.indexOf(e)
      }));
  }),
  utils.JS.inherits(UTMarketSearchFiltersView, UTTargetActionView),
  (UTMarketSearchFiltersView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-market-search-filters-view'),
        (this._tabMenu = new components.TabMenu()),
        e.appendChild(this._tabMenu.getRootElement());
      var t = document.createElement('div');
      t.classList.add('ut-pinned-list-container'),
        t.classList.add('ut-content-container'),
        (this.__searchContainer = document.createElement('div')),
        this.__searchContainer.classList.add('ut-content');
      var i = document.createElement('div');
      i.classList.add('ut-pinned-list'),
        (this.__pinnedItem = document.createElement('ul')),
        this.__pinnedItem.classList.add('ut-pinned-item'),
        i.appendChild(this.__pinnedItem),
        (this._searchFilters = new views.items.ItemSearch()),
        i.appendChild(this._searchFilters.getRootElement());
      var s = document.createElement('div');
      s.classList.add('search-prices');
      var n = document.createElement('div');
      n.classList.add('search-price-header'),
        (this.__clearBidHeader = document.createElement('h1')),
        n.appendChild(this.__clearBidHeader),
        (this._clearBidPrice = new UTFlatButtonControl()),
        this._clearBidPrice.getRootElement().classList.add('camel-case'),
        n.appendChild(this._clearBidPrice.getRootElement()),
        s.appendChild(n),
        (this._minBidPriceRow = new components.SearchCriteriaPriceRow()),
        s.appendChild(this._minBidPriceRow.getRootElement()),
        (this._maxBidPriceRow = new components.SearchCriteriaPriceRow()),
        s.appendChild(this._maxBidPriceRow.getRootElement());
      var o = document.createElement('div');
      o.classList.add('search-price-header'),
        (this.__clearBuyHeader = document.createElement('h1')),
        o.appendChild(this.__clearBuyHeader),
        (this._clearBuyPrice = new UTFlatButtonControl()),
        this._clearBuyPrice.getRootElement().classList.add('camel-case'),
        o.appendChild(this._clearBuyPrice.getRootElement()),
        s.appendChild(o),
        (this._minBuyNowPriceRow = new components.SearchCriteriaPriceRow()),
        s.appendChild(this._minBuyNowPriceRow.getRootElement()),
        (this._maxBuyNowPriceRow = new components.SearchCriteriaPriceRow()),
        s.appendChild(this._maxBuyNowPriceRow.getRootElement()),
        i.appendChild(s),
        this.__searchContainer.appendChild(i);
      var a = document.createElement('div');
      a.classList.add('button-container'),
        (this._resetButton = new UTStandardButtonControl()),
        a.appendChild(this._resetButton.getRootElement()),
        (this._searchButton = new UTStandardButtonControl()),
        this._searchButton.getRootElement().classList.add('call-to-action'),
        a.appendChild(this._searchButton.getRootElement()),
        this.__searchContainer.appendChild(a),
        t.appendChild(this.__searchContainer),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTMarketSearchFiltersView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._tabMenu.destroy(),
      (this.__searchContainer = null),
      (this.__pinnedItem = null),
      this._searchFilters.destroy(),
      (this.__clearBidHeader = null),
      this._clearBidPrice.destroy(),
      this._minBidPriceRow.destroy(),
      this._maxBidPriceRow.destroy(),
      (this.__clearBuyHeader = null),
      this._clearBuyPrice.destroy(),
      this._minBuyNowPriceRow.destroy(),
      this._maxBuyNowPriceRow.destroy(),
      this._resetButton.destroy(),
      this._searchButton.destroy();
  }),
  (UTMarketSearchFiltersView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTMarketSearchFiltersView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTMarketSearchFiltersView.Event = {
    FILTER_CHANGE: 'UTMarketSearchFiltersView.Event.FILTER_CHANGE',
    MIN_BID_PRICE_CHANGE:
      'UTMarketSearchFiltersView.Event.MIN_BID_PRICE_CHANGE',
    MAX_BID_PRICE_CHANGE:
      'UTMarketSearchFiltersView.Event.MAX_BID_PRICE_CHANGE',
    MIN_BUY_PRICE_CHANGE:
      'UTMarketSearchFiltersView.Event.MIN_BUY_PRICE_CHANGE',
    MAX_BUY_PRICE_CHANGE:
      'UTMarketSearchFiltersView.Event.MAX_BUY_PRICE_CHANGE',
    RESET: 'UTMarketSearchFiltersView.Event.RESET',
    SEARCH: 'UTMarketSearchFiltersView.Event.SEARCH'
  }),
  (UTMarketSearchFiltersView.prototype.init = function init() {
    this.superclass(),
      this._minBidPriceRow.init(),
      (this._minBidPriceRow.label = services.Localization.localize(
        'abbr.minimum'
      )),
      this._maxBidPriceRow.init(),
      (this._maxBidPriceRow.label = services.Localization.localize(
        'abbr.maximum'
      )),
      this._minBuyNowPriceRow.init(),
      (this._minBuyNowPriceRow.label = services.Localization.localize(
        'abbr.minimum'
      )),
      this._maxBuyNowPriceRow.init(),
      (this._maxBuyNowPriceRow.label = services.Localization.localize(
        'abbr.maximum'
      ));
    var e = this._minBidPriceRow.getCurrencyInput();
    e.addTarget(this, this._eMinBidPriceChanged, enums.Event.CHANGE),
      e.setPlaceholder(services.Localization.localize('roles.defaultRole'));
    var t = this._maxBidPriceRow.getCurrencyInput();
    t.addTarget(this, this._eMaxBidPriceChanged, enums.Event.CHANGE),
      t.setPlaceholder(services.Localization.localize('roles.defaultRole'));
    var i = this._minBuyNowPriceRow.getCurrencyInput();
    i.addTarget(this, this._eMinBuyPriceChanged, enums.Event.CHANGE),
      i.setPlaceholder(services.Localization.localize('roles.defaultRole'));
    var s = this._maxBuyNowPriceRow.getCurrencyInput();
    s.addTarget(this, this._eMaxBuyPriceChanged, enums.Event.CHANGE),
      s.setPlaceholder(services.Localization.localize('roles.defaultRole')),
      (this.__clearBidHeader.textContent = services.Localization.localize(
        'auctioninfo.bidprice'
      )),
      (this.__clearBuyHeader.textContent = services.Localization.localize(
        'auctioninfo.buynowprice'
      )),
      this._clearBidPrice.init(),
      this._clearBidPrice.setText(
        services.Localization.localize('search.button.clear')
      ),
      this._clearBidPrice.addTarget(
        this,
        this._eClearButtonSelected,
        enums.Event.TAP
      ),
      this._clearBidPrice.setInteractionState(!1),
      this._clearBuyPrice.init(),
      this._clearBuyPrice.setText(
        services.Localization.localize('search.button.clear')
      ),
      this._clearBuyPrice.addTarget(
        this,
        this._eClearButtonSelected,
        enums.Event.TAP
      ),
      this._clearBuyPrice.setInteractionState(!1),
      this._resetButton.init(),
      this._resetButton.addTarget(
        this,
        this._eResetButtonSelected,
        enums.Event.TAP
      ),
      this._resetButton.setText(
        services.Localization.localize('search.pagination.reset')
      ),
      this._searchButton.init(),
      this._searchButton.addTarget(
        this,
        this._eSearchButtonSelected,
        enums.Event.TAP
      ),
      this._searchButton.setText(
        services.Localization.localize('button.search')
      ),
      this._searchFilters.init(),
      this._searchFilters.onFilterChange.observe(this, this._eFilterChanged);
  }),
  (UTMarketSearchFiltersView.prototype.dealloc = function dealloc() {
    this._pinnedListRowItem &&
      (this._pinnedListRowItem.destroy(), (this._pinnedListRowItem = null)),
      this.superclass();
  }),
  (UTMarketSearchFiltersView.prototype.initTabMenuComponent = function initTabMenuComponent() {
    this._tabMenu.addTab(
      enums.SearchBucket.PLAYER,
      services.Localization.localize('search.filters.players')
    ),
      this._tabMenu.addTab(
        enums.SearchBucket.STAFF,
        services.Localization.localize('search.filters.staff')
      ),
      this._tabMenu.addTab(
        enums.SearchBucket.CLUB,
        services.Localization.localize('search.filters.club')
      ),
      this._tabMenu.addTab(
        enums.SearchBucket.CONSUMABLE,
        services.Localization.localize('search.filters.consumables')
      ),
      this._tabMenu.setActiveTab(enums.SearchBucket.PLAYER),
      this._tabMenu.layoutSubviews();
  }),
  (UTMarketSearchFiltersView.prototype.setPinnedItem = function setPinnedItem(
    e
  ) {
    this._pinnedListRowItem &&
      (this._pinnedListRowItem.destroy(), (this._pinnedListRowItem = null)),
      (this._pinnedListRowItem = new components.ListRowItem()),
      this._pinnedListRowItem.setData(e),
      this._pinnedListRowItem.render(),
      this.__pinnedItem.appendChild(this._pinnedListRowItem.getRootElement());
  }),
  (UTMarketSearchFiltersView.prototype.getTabMenuComponent = function getTabMenuComponent() {
    return this._tabMenu;
  }),
  (UTMarketSearchFiltersView.prototype.getPlayerNameSearch = function getPlayerNameSearch() {
    return this._searchFilters.getPlayerNameSearch();
  }),
  (UTMarketSearchFiltersView.prototype.getFilters = function getFilters() {
    return this._searchFilters;
  }),
  (UTMarketSearchFiltersView.prototype.setFilters = function setFilters(e, t) {
    this._searchFilters.setFilters(e, t),
      this._searchFilters.togglePlayerNameRow(
        e.searchCriteria.type === enums.SearchType.PLAYER
      );
  }),
  (UTMarketSearchFiltersView.prototype.setFilterValue = function setFilterValue(
    e,
    t
  ) {
    this._searchFilters.setFilterValue(e, t);
  }),
  (UTMarketSearchFiltersView.prototype.setPlayerSearch = function setPlayerSearch(
    e
  ) {
    this._searchFilters.setPlayerSearch(e);
  }),
  (UTMarketSearchFiltersView.prototype.resetPlayerName = function resetPlayerName() {
    this._searchFilters.resetPlayerName();
  }),
  (UTMarketSearchFiltersView.prototype.setMinBidPrice = function setMinBidPrice(
    e
  ) {
    this._minBidPriceRow.value = e;
  }),
  (UTMarketSearchFiltersView.prototype.setMaxBidPrice = function setMaxBidPrice(
    e
  ) {
    this._maxBidPriceRow.value = e;
  }),
  (UTMarketSearchFiltersView.prototype.setMinBuyNowPrice = function setMinBuyNowPrice(
    e
  ) {
    this._minBuyNowPriceRow.value = e;
  }),
  (UTMarketSearchFiltersView.prototype.setMaxBuyNowPrice = function setMaxBuyNowPrice(
    e
  ) {
    this._maxBuyNowPriceRow.value = e;
  }),
  (UTMarketSearchFiltersView.prototype._eClearButtonSelected = function _eClearButtonSelected(
    e,
    t,
    i
  ) {
    e === this._clearBidPrice
      ? ((this._minBidPriceRow.value = 0), (this._maxBidPriceRow.value = 0))
      : e === this._clearBuyPrice &&
        ((this._minBuyNowPriceRow.value = 0),
        (this._maxBuyNowPriceRow.value = 0));
  }),
  (UTMarketSearchFiltersView.prototype._eMinBidPriceChanged = function _eMinBidPriceChanged(
    e,
    t,
    i
  ) {
    var s = this._minBidPriceRow.value,
      n = this._maxBidPriceRow.value,
      o = this._minBuyNowPriceRow.value;
    this._clearBidPrice.setInteractionState(0 < s || 0 < n),
      0 !== n &&
        n <= s &&
        this.setMaxBidPrice(UTCurrencyInputControl.getIncrementAboveVal(s)),
      0 !== o &&
        o <= s &&
        this.setMinBuyNowPrice(UTCurrencyInputControl.getIncrementAboveVal(s)),
      this._triggerActions(
        UTMarketSearchFiltersView.Event.MIN_BID_PRICE_CHANGE,
        {
          value: s
        }
      );
  }),
  (UTMarketSearchFiltersView.prototype._eMaxBidPriceChanged = function _eMaxBidPriceChanged(
    e,
    t,
    i
  ) {
    var s = this._minBidPriceRow.value,
      n = this._maxBidPriceRow.value,
      o = this._maxBuyNowPriceRow.value;
    this._clearBidPrice.setInteractionState(0 < s || 0 < n),
      0 !== n &&
        n <= s &&
        this.setMinBidPrice(UTCurrencyInputControl.getIncrementBelowVal(n)),
      0 !== o &&
        o <= n &&
        this.setMaxBuyNowPrice(UTCurrencyInputControl.getIncrementAboveVal(n)),
      this._triggerActions(
        UTMarketSearchFiltersView.Event.MAX_BID_PRICE_CHANGE,
        {
          value: n
        }
      );
  }),
  (UTMarketSearchFiltersView.prototype._eMinBuyPriceChanged = function _eMinBuyPriceChanged(
    e,
    t,
    i
  ) {
    var s = this._minBidPriceRow.value,
      n = this._minBuyNowPriceRow.value,
      o = this._maxBuyNowPriceRow.value;
    this._clearBuyPrice.setInteractionState(0 < n || 0 < o),
      0 !== n && n < AUCTION_MIN_BUY
        ? this.setMinBuyNowPrice(0 < i.delta ? AUCTION_MIN_BUY : 0)
        : (0 !== n &&
            n <= s &&
            this.setMinBidPrice(UTCurrencyInputControl.getIncrementBelowVal(n)),
          0 !== o &&
            o <= n &&
            this.setMaxBuyNowPrice(
              UTCurrencyInputControl.getIncrementAboveVal(n)
            ),
          this._triggerActions(
            UTMarketSearchFiltersView.Event.MIN_BUY_PRICE_CHANGE,
            {
              value: n
            }
          ));
  }),
  (UTMarketSearchFiltersView.prototype._eMaxBuyPriceChanged = function _eMaxBuyPriceChanged(
    e,
    t,
    i
  ) {
    var s = this._maxBidPriceRow.value,
      n = this._minBuyNowPriceRow.value,
      o = this._maxBuyNowPriceRow.value;
    this._clearBuyPrice.setInteractionState(0 < n || 0 < o),
      0 !== o && o < AUCTION_MIN_BUY
        ? this.setMaxBuyNowPrice(0 < i.delta ? AUCTION_MIN_BUY : 0)
        : (0 !== o &&
            o <= s &&
            this.setMaxBidPrice(UTCurrencyInputControl.getIncrementBelowVal(o)),
          0 !== o &&
            o <= n &&
            this.setMinBuyNowPrice(
              UTCurrencyInputControl.getIncrementBelowVal(o)
            ),
          this._triggerActions(
            UTMarketSearchFiltersView.Event.MAX_BUY_PRICE_CHANGE,
            {
              value: o
            }
          ));
  }),
  (UTMarketSearchFiltersView.prototype._eResetButtonSelected = function _eResetButtonSelected(
    e,
    t,
    i
  ) {
    this._triggerActions(UTMarketSearchFiltersView.Event.RESET);
  }),
  (UTMarketSearchFiltersView.prototype._eSearchButtonSelected = function _eSearchButtonSelected(
    e,
    t,
    i
  ) {
    this._triggerActions(UTMarketSearchFiltersView.Event.SEARCH);
  }),
  (UTMarketSearchFiltersView.prototype._eFilterChanged = function _eFilterChanged(
    e,
    t,
    i,
    s
  ) {
    this._triggerActions(UTMarketSearchFiltersView.Event.FILTER_CHANGE, {
      id: i,
      setId: t,
      value: s
    });
  }),
  NamespaceManager.Register('viewmodels'),
  (viewmodels.BucketedItemSearch = function BucketedItemSearchViewmodel() {
    viewmodels.ItemSearch.call(this);
    var i = enums.SearchBucket.PLAYER;
    Object.defineProperty(this, 'searchBucket', {
      get: function() {
        return i;
      },
      set: function(e) {
        var t;
        for (t in enums.SearchBucket)
          enums.SearchBucket.hasOwnProperty(t) &&
            enums.SearchBucket[t] === e &&
            (i = e);
      },
      enumerable: !0
    }),
      (this.searchBucket = enums.SearchBucket.PLAYER),
      (this._showCategoryTab = !0);
  }),
  utils.JS.inherits(viewmodels.BucketedItemSearch, viewmodels.ItemSearch),
  (viewmodels.BucketedItemSearch.prototype.resetSearch = function resetSearch() {
    this.superclass(), this._updateSearchType();
  }),
  (viewmodels.BucketedItemSearch.prototype.updateSearchCriteria = function updateSearchCriteria(
    e
  ) {
    this.superclass(e), (this.searchBucket = this.getBucketFromType(e.type));
  }),
  (viewmodels.BucketedItemSearch.prototype._updateSearchType = function _updateSearchType() {
    this.searchBucket === enums.SearchBucket.PLAYER
      ? ((this.searchCriteria.type = enums.SearchType.PLAYER),
        (this.defaultSearchCriteria.type = enums.SearchType.PLAYER))
      : this.searchBucket === enums.SearchBucket.STAFF
      ? ((this.searchCriteria.type = enums.SearchType.STAFF),
        (this.defaultSearchCriteria.type = enums.SearchType.STAFF))
      : this.searchBucket === enums.SearchBucket.CLUB
      ? ((this.searchCriteria.type = enums.SearchType.CLUB_INFO),
        (this.defaultSearchCriteria.type = enums.SearchType.CLUB_INFO))
      : this.searchBucket === enums.SearchBucket.CONSUMABLE &&
        ((this.searchCriteria.type = enums.SearchType.CONSUMABLES_TRAINING),
        (this.defaultSearchCriteria.type =
          enums.SearchType.CONSUMABLES_TRAINING));
  }),
  (viewmodels.BucketedItemSearch.prototype.setSearchBucket = function setSearchBucket(
    e
  ) {
    (this.searchBucket = e), this._updateSearchType();
  }),
  (viewmodels.BucketedItemSearch.prototype.setCategoryTabVisible = function setCategoryTabVisible(
    e
  ) {
    this._showCategoryTab = e;
  }),
  (viewmodels.BucketedItemSearch.prototype.getCategoryTabVisible = function getCategoryTabVisible() {
    return this._showCategoryTab;
  }),
  utils.JS.inherits(UTMarketSearchFiltersViewController, UTViewController),
  (UTMarketSearchFiltersViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        this._viewmodel ||
          (this._viewmodel = new viewmodels.BucketedItemSearch()),
        this._viewmodel.searchCriteria.type === enums.SearchType.ANY &&
          (this._viewmodel.searchCriteria.type = enums.SearchType.PLAYER);
      var e = gConfigurationModel.getConfigObject(
          models.ConfigurationModel.KEY_ITEMS_PER_PAGE
        ),
        t =
          1 +
          (utils.JS.isValid(e)
            ? e[models.ConfigurationModel.ITEMS_PER_PAGE.TRANSFER_MARKET]
            : 20);
      (this._viewmodel.searchCriteria.count = t),
        (this._viewmodel.searchFeature = enums.ItemSearchFeature.MARKET);
      var i = this.getView();
      i.addTarget(
        this,
        this._eResetSelected,
        UTMarketSearchFiltersView.Event.RESET
      ),
        i.addTarget(
          this,
          this._eSearchSelected,
          UTMarketSearchFiltersView.Event.SEARCH
        ),
        i.addTarget(
          this,
          this._eFilterChanged,
          UTMarketSearchFiltersView.Event.FILTER_CHANGE
        ),
        i.addTarget(
          this,
          this._eMinBidPriceChanged,
          UTMarketSearchFiltersView.Event.MIN_BID_PRICE_CHANGE
        ),
        i.addTarget(
          this,
          this._eMaxBidPriceChanged,
          UTMarketSearchFiltersView.Event.MAX_BID_PRICE_CHANGE
        ),
        i.addTarget(
          this,
          this._eMinBuyPriceChanged,
          UTMarketSearchFiltersView.Event.MIN_BUY_PRICE_CHANGE
        ),
        i.addTarget(
          this,
          this._eMaxBuyPriceChanged,
          UTMarketSearchFiltersView.Event.MAX_BUY_PRICE_CHANGE
        ),
        this._viewmodel.getCategoryTabVisible() &&
          (i.initTabMenuComponent(),
          i
            .getTabMenuComponent()
            .addTarget(this, this._eSearchCategoryChanged, enums.Event.TAP)),
        this._squadContext
          ? isPhone() || i.addClass('narrow')
          : i.addClass('floating'),
        i
          .getPlayerNameSearch()
          .addTarget(this, this._ePlayerNameChanged, enums.Event.CHANGE),
        TelemetryManager.trackPage(
          TelemetryManager.Sections.AUCTIONS,
          'Transfer Market Search Filters'
        );
    }
  }),
  (UTMarketSearchFiltersViewController.prototype.initWithSearchCriteria = function initWithSearchCriteria(
    e
  ) {
    this.initialized ||
      ((this._viewmodel = new viewmodels.BucketedItemSearch()),
      (this._viewmodel.defaultSearchCriteria.type = e.type),
      (this._viewmodel.defaultSearchCriteria.category = e.category),
      this._viewmodel.updateSearchCriteria(e),
      this.init());
  }),
  (UTMarketSearchFiltersViewController.prototype.initWithSquadContext = function initWithSquadContext(
    e
  ) {
    if (!this.initialized) {
      this._squadContext = e;
      var t = new transferobjects.SearchCriteria(),
        i = this._squadContext.getCurrentSlot();
      if (0 <= i.getIndex()) {
        var s = i.getItem().isManager();
        (t.type = s ? enums.SearchType.STAFF : enums.SearchType.PLAYER),
          (t.category = s
            ? enums.SearchCategory.MANAGER
            : enums.SearchCategory.ANY),
          (t.position = i.getGeneralPositionName() || enums.SearchType.ANY);
      }
      this.initWithSearchCriteria(t), this._viewmodel.setCategoryTabVisible(!1);
    }
  }),
  (UTMarketSearchFiltersViewController.prototype.dealloc = function dealloc() {
    (this._viewmodel = null), (this._squadContext = null), this.superclass();
  }),
  (UTMarketSearchFiltersViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTMarketSearchFiltersView();
  }),
  (UTMarketSearchFiltersViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Transfer Market Search';
  }),
  (UTMarketSearchFiltersViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.search');
  }),
  (UTMarketSearchFiltersViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    if (
      (this._viewmodel.getCategoryTabVisible()
        ? e.getTabMenuComponent().setActiveTab(this._viewmodel.searchBucket)
        : e.getTabMenuComponent().clearTabs(),
      e.setFilters(this._viewmodel),
      this._viewmodel.playerData &&
        e.setPlayerSearch(this._viewmodel.playerData),
      this._squadContext &&
        (e.setPinnedItem(this._squadContext.getCurrentSlot().getItem()),
        this._squadContext
          .getCurrentSlot()
          .getItem()
          .isManager()))
    ) {
      var t = this.getView().getFilters();
      t.setFilterDefaultValue(
        enums.UISearchFilters.TYPE,
        enums.SearchCategory.MANAGER
      ),
        t.setFilterValue(
          enums.UISearchFilters.TYPE,
          enums.SearchCategory.MANAGER
        ),
        t.setFilterLock(enums.UISearchFilters.TYPE, !0);
    }
    e.setMinBidPrice(this._viewmodel.searchCriteria.minBid),
      e.setMaxBidPrice(this._viewmodel.searchCriteria.maxBid),
      e.setMinBuyNowPrice(this._viewmodel.searchCriteria.minBuy),
      e.setMaxBuyNowPrice(this._viewmodel.searchCriteria.maxBuy);
  }),
  (UTMarketSearchFiltersViewController.prototype._eMinBidPriceChanged = function _eMinBidPriceChanged(
    e,
    t,
    i
  ) {
    utils.JS.isNumber(i.value) &&
      (this._viewmodel.searchCriteria.minBid = i.value);
  }),
  (UTMarketSearchFiltersViewController.prototype._eMaxBidPriceChanged = function _eMaxBidPriceChanged(
    e,
    t,
    i
  ) {
    utils.JS.isNumber(i.value) &&
      (this._viewmodel.searchCriteria.maxBid = i.value);
  }),
  (UTMarketSearchFiltersViewController.prototype._eMinBuyPriceChanged = function _eMinBuyPriceChanged(
    e,
    t,
    i
  ) {
    utils.JS.isNumber(i.value) &&
      (this._viewmodel.searchCriteria.minBuy = i.value);
  }),
  (UTMarketSearchFiltersViewController.prototype._eMaxBuyPriceChanged = function _eMaxBuyPriceChanged(
    e,
    t,
    i
  ) {
    utils.JS.isNumber(i.value) &&
      (this._viewmodel.searchCriteria.maxBuy = i.value);
  }),
  (UTMarketSearchFiltersViewController.prototype._eResetSelected = function _eResetSelected(
    e,
    t,
    i
  ) {
    var s = this.getView();
    this._viewmodel.resetSearch(),
      s.setFilters(this._viewmodel),
      s._minBidPriceRow.reset(),
      s._maxBidPriceRow.reset(),
      s._minBuyNowPriceRow.reset(),
      s._maxBuyNowPriceRow.reset(),
      services.User.getUser().marketSearchCriteria.reset();
  }),
  (UTMarketSearchFiltersViewController.prototype._eSearchSelected = function _eSearchSelected(
    e,
    t,
    i
  ) {
    var s = this._viewmodel.searchCriteria,
      n = services.User.getUser().marketSearchCriteria;
    (s.offset = 0), n.update(s), (n.maskedDefId = 0);
    var o = this.getNavigationController();
    if (o) {
      var a = !(isPhone() || this._squadContext)
        ? new UTMarketSearchResultsSplitViewController()
        : new UTMarketSearchResultsViewController();
      this._squadContext &&
        (TelemetryManager.trackEvent(
          TelemetryManager.Sections.AUCTIONS,
          TelemetryManager.Categories.BUTTON_PRESS,
          'Squad Slot Detail View - Search from Transfer Market Filters'
        ),
        a.setSquadContext(this._squadContext)),
        services.Item.clearTransferMarketCache(),
        a.initWithSearchCriteria(s),
        o.pushViewController(a, !0);
    }
  }),
  (UTMarketSearchFiltersViewController.prototype._eFilterChanged = function _eFilterChanged(
    e,
    t,
    i
  ) {
    utils.JS.isValid(i.setId) &&
      utils.JS.isValid(i.id) &&
      utils.JS.isValid(i.value) &&
      (this._viewmodel.updateFromFilterChange(i.setId, i.id, i.value),
      this.getView().setFilters(this._viewmodel));
  }),
  (UTMarketSearchFiltersViewController.prototype._ePlayerNameChanged = function _ePlayerNameChanged(
    e,
    t,
    i
  ) {
    var s = this.getView(),
      n = s.getPlayerNameSearch().getSelected();
    utils.JS.isValid(n)
      ? this._viewmodel.setPlayerData(n)
      : this._viewmodel.clearPlayerData(),
      s.setFilters(this._viewmodel),
      utils.JS.isValid(n) &&
        (s.setFilterValue(enums.UISearchFilters.NATION, -1),
        s.setFilterValue(enums.UISearchFilters.LEAGUE, -1),
        s.setFilterValue(enums.UISearchFilters.CLUB, -1));
  }),
  (UTMarketSearchFiltersViewController.prototype._eSearchCategoryChanged = function _eSearchCategoryChanged(
    e,
    t,
    i
  ) {
    if (i.id !== this._viewmodel.searchBucket) {
      var s = this.getView();
      i.id !== enums.SearchBucket.PLAYER &&
        (this._viewmodel.clearPlayerData(), s.resetPlayerName()),
        this._viewmodel.setSearchBucket(i.id),
        s.setFilters(this._viewmodel);
    }
  }),
  services.URL.registerDeepLinkID(enums.DeepLinkSections.AUCTION, function(e) {
    var t =
        !gConfigurationModel.getConfigBoolean(
          models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET
        ) &&
        services.User.getUser().hasTradeAccess() &&
        services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.TRADING_ENABLED
        ),
      i = getAppMain().getRootViewController();
    if ((i.setGameViewTab(UTGameTabBarController.TabTag.TRANSFERS), t)) {
      var s,
        n = i.getPresentedViewController().getCurrentViewController();
      if ((services.Item.clearTransferMarketCache(), n && 0 === e.length))
        (s = new UTMarketSearchFiltersViewController()).initWithSearchCriteria(
          services.User.getUser().marketSearchCriteria
        ),
          n.pushViewController(s);
      else if (n) {
        var o = new transferobjects.SearchCriteria();
        (o.defId = [parseInt(e[0], 10)]),
          (s = isPhone()
            ? new UTMarketSearchResultsViewController()
            : new UTMarketSearchResultsSplitViewController()).initWithSearchCriteria(
            o
          ),
          n.pushViewController(s);
      }
    }
  }),
  NamespaceManager.Register('views.items'),
  (views.items.QuickListPanel = function QuickListPanelView() {
    UTTargetActionView.call(this),
      (this._priceLimitsSet = !1),
      Object.defineProperty(this, '_priceLimitsSet', {
        writable: !0,
        enumerable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.items.QuickListPanel, UTTargetActionView),
  (views.items.QuickListPanel.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-quick-list-panel-view');
      var t = document.createElement('div');
      t.classList.add('ut-button-group'),
        (this._btnToggle = new UTGroupButtonControl()),
        this._btnToggle.getRootElement().classList.add('accordian'),
        t.appendChild(this._btnToggle.getRootElement()),
        e.appendChild(t),
        (this.__panelActions = document.createElement('div')),
        this.__panelActions.classList.add('panelActions'),
        (this.__boughtPrice = document.createElement('div')),
        this.__boughtPrice.classList.add('boughtPrice'),
        this.__boughtPrice.classList.add('panelActionRow'),
        (this.__boughtPriceLabel = document.createElement('span')),
        this.__boughtPriceLabel.classList.add('boughtPriceLabel'),
        this.__boughtPrice.appendChild(this.__boughtPriceLabel),
        (this.__boughtPriceValue = document.createElement('span')),
        this.__boughtPriceValue.classList.add('currency-coins'),
        this.__boughtPriceValue.classList.add('boughtPriceValue'),
        this.__boughtPrice.appendChild(this.__boughtPriceValue),
        this.__panelActions.appendChild(this.__boughtPrice);
      var i = document.createElement('div');
      i.classList.add('panelActionRow');
      var s = document.createElement('div');
      s.classList.add('buttonInfoLabel'),
        (this.__minPriceLabel = document.createElement('span')),
        this.__minPriceLabel.classList.add('spinnerLabel'),
        s.appendChild(this.__minPriceLabel),
        (this.__minPrice = document.createElement('span')),
        this.__minPrice.classList.add('currency-coins'),
        this.__minPrice.classList.add('bandingLabel'),
        s.appendChild(this.__minPrice),
        i.appendChild(s),
        (this._bidNumericStepper = new UTNumericInputSpinnerControl()),
        i.appendChild(this._bidNumericStepper.getRootElement()),
        this.__panelActions.appendChild(i);
      var n = document.createElement('div');
      n.classList.add('panelActionRow');
      var o = document.createElement('div');
      o.classList.add('buttonInfoLabel'),
        (this.__maxPriceLabel = document.createElement('span')),
        this.__maxPriceLabel.classList.add('spinnerLabel'),
        o.appendChild(this.__maxPriceLabel),
        (this.__maxPrice = document.createElement('span')),
        this.__maxPrice.classList.add('currency-coins'),
        this.__maxPrice.classList.add('bandingLabel'),
        o.appendChild(this.__maxPrice),
        n.appendChild(o),
        (this._buyNowNumericStepper = new UTNumericInputSpinnerControl()),
        n.appendChild(this._buyNowNumericStepper.getRootElement()),
        this.__panelActions.appendChild(n);
      var a = document.createElement('div');
      a.classList.add('panelActionRow'),
        (this.__duration = document.createElement('div')),
        this.__duration.classList.add('durationLabel'),
        this.__duration.classList.add('buttonInfoLabel'),
        a.appendChild(this.__duration),
        (this._durationPicker = new UTDropDownControl()),
        a.appendChild(this._durationPicker.getRootElement()),
        this.__panelActions.appendChild(a),
        (this._listButton = new UTStandardButtonControl()),
        this._listButton.getRootElement().classList.add('call-to-action'),
        this.__panelActions.appendChild(this._listButton.getRootElement()),
        e.appendChild(this.__panelActions),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.QuickListPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._btnToggle.destroy(),
      (this.__panelActions = null),
      (this.__boughtPrice = null),
      (this.__boughtPriceLabel = null),
      (this.__boughtPriceValue = null),
      (this.__minPriceLabel = null),
      (this.__minPrice = null),
      this._bidNumericStepper.destroy(),
      (this.__maxPriceLabel = null),
      (this.__maxPrice = null),
      this._buyNowNumericStepper.destroy(),
      (this.__duration = null),
      this._durationPicker.destroy(),
      this._listButton.destroy();
  }),
  (views.items.QuickListPanel.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.QuickListPanel.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.QuickListPanel.prototype.init = function init() {
    this.superclass(),
      this._bidNumericStepper.init(),
      this._bidNumericStepper.setMinValue(AUCTION_MIN_BID),
      this._bidNumericStepper
        .getInput()
        .addTarget(this, this._onBidPriceChanged, enums.Event.CHANGE),
      this._buyNowNumericStepper.init(),
      this._buyNowNumericStepper.setMinValue(AUCTION_MIN_BUY),
      this._buyNowNumericStepper
        .getInput()
        .addTarget(this, this._onBuyPriceChanged, enums.Event.CHANGE),
      this._durationPicker.init(),
      this._durationPicker.setOptions([
        {
          id: 0,
          label: services.Localization.localize(
            'auctionduration.hour.singular'
          ),
          value: 3600
        },
        {
          id: 1,
          label: services.Localization.localize('auctionduration.hour.plural', [
            services.Localization.localizeNumber(3)
          ]),
          value: 10800
        },
        {
          id: 2,
          label: services.Localization.localize('auctionduration.hour.plural', [
            services.Localization.localizeNumber(6)
          ]),
          value: 21600
        },
        {
          id: 3,
          label: services.Localization.localize('auctionduration.hour.plural', [
            services.Localization.localizeNumber(12)
          ]),
          value: 43200
        },
        {
          id: 4,
          label: services.Localization.localize('auctionduration.day.singular'),
          value: 86400
        },
        {
          id: 5,
          label: services.Localization.localize('auctionduration.day.plural', [
            services.Localization.localizeNumber(3)
          ]),
          value: 259200
        }
      ]),
      this._durationPicker.setIndex(repositories.Item.cachedDurationIndex),
      this._durationPicker.addTarget(
        this,
        this._eDurationChanged,
        enums.Event.CHANGE
      ),
      (this.__boughtPriceLabel.textContent = services.Localization.localize(
        'auctioninfo.boughtfor'
      )),
      (this.__minPriceLabel.textContent = services.Localization.localize(
        'auctioninfo.startprice'
      )),
      (this.__maxPriceLabel.textContent = services.Localization.localize(
        'auctioninfo.buynowprice'
      )),
      (this.__duration.textContent = services.Localization.localize(
        'auctioninfo.duration'
      )),
      this._btnToggle.init(),
      this._btnToggle.addTarget(this, this._eToggle, enums.Event.TAP),
      this._listButton.init(),
      this._listButton.setText(
        services.Localization.localize('infopanel.label.listitem')
      ),
      this._listButton.addTarget(this, this._eListSelected, enums.Event.TAP);
  }),
  (views.items.QuickListPanel.prototype.dealloc = function dealloc() {
    this._durationPicker.removeTarget(
      this,
      this._eDurationChanged,
      enums.Event.CHANGE
    ),
      this.superclass();
  }),
  (views.items.QuickListPanel.prototype.setTitle = function setTitle(e) {
    this._btnToggle.setText(e);
  }),
  (views.items.QuickListPanel.prototype._onBidPriceChanged = function _onBidPriceChanged(
    e,
    t,
    i
  ) {
    var s = this._bidNumericStepper.getValue(),
      n = this._buyNowNumericStepper.getValue();
    n <= s &&
      (n < this._buyNowNumericStepper.getMaxValue()
        ? this._buyNowNumericStepper.getInput().increase(s)
        : this._bidNumericStepper.getInput().decrease(n));
  }),
  (views.items.QuickListPanel.prototype._onBuyPriceChanged = function _onBuyPriceChanged(
    e,
    t,
    i
  ) {
    var s = this._bidNumericStepper.getValue(),
      n = this._buyNowNumericStepper.getValue();
    n <= s &&
      s !== this._bidNumericStepper.getMinValue() &&
      this._bidNumericStepper.getInput().decrease(n);
  }),
  (views.items.QuickListPanel.prototype._eDurationChanged = function _eDurationChanged(
    e,
    t,
    i
  ) {
    repositories.Item.cachedDurationIndex = e.getIndex();
  }),
  (views.items.QuickListPanel.prototype.makeListButtonBusy = function makeListButtonBusy(
    e
  ) {
    e
      ? this._listButton.setInteractionState(!1)
      : this._listButton.setInteractionState(!0);
  }),
  (views.items.QuickListPanel.prototype.setPriceLimits = function setPriceLimits(
    e
  ) {
    this._priceLimitsSet = !!e;
    var t = e ? e.minimum : AUCTION_MIN_BID,
      i = UTCurrencyInputControl.getIncrementAboveVal(t),
      s = e ? e.maximum : AUCTION_MAX_BID,
      n = UTCurrencyInputControl.getIncrementBelowVal(s);
    (this.__minPrice.textContent =
      services.Localization.localize('auction.list.min') +
      ' ' +
      services.Localization.localizeNumber(t)),
      (this.__maxPrice.textContent =
        services.Localization.localize('auction.list.max') +
        ' ' +
        services.Localization.localizeNumber(s)),
      this._bidNumericStepper.setLimits(t, n),
      this._bidNumericStepper.setValue(t),
      this._buyNowNumericStepper.setLimits(i, s),
      this._buyNowNumericStepper.setDefaultValue(s),
      this._buyNowNumericStepper.setValue(s),
      DOMKit.HTMLCollectionToArray(
        this.getRootElement().getElementsByClassName('buttonInfoLabel')
      ).forEach(function(e) {
        DOMKit.toggleClass(e, 'hasPriceBanding', this._priceLimitsSet);
      }, this);
  }),
  (views.items.QuickListPanel.prototype.setBidValue = function setBidValue(e) {
    this._bidNumericStepper.setValue(
      0 < e
        ? Math.max(AUCTION_MIN_BID, Math.min(e, AUCTION_MAX_BID))
        : AUCTION_MIN_BID
    ),
      this._buyNowNumericStepper.getValue() <=
        this._bidNumericStepper.getValue() &&
        this._buyNowNumericStepper.setValue(
          Math.min(
            UTCurrencyInputControl.getIncrementAboveVal(
              this._bidNumericStepper.getValue()
            ),
            AUCTION_MAX_BID
          )
        );
  }),
  (views.items.QuickListPanel.prototype.setBuyNowValue = function setBuyNowValue(
    e
  ) {
    this._buyNowNumericStepper.setValue(
      0 < e
        ? Math.max(
            UTCurrencyInputControl.getIncrementAboveVal(AUCTION_MIN_BID),
            Math.min(e, AUCTION_MAX_BID)
          )
        : 0
    ),
      0 < this._buyNowNumericStepper.getValue() &&
        this._bidNumericStepper.getValue() >=
          this._buyNowNumericStepper.getValue() &&
        this._bidNumericStepper.setValue(
          UTCurrencyInputControl.getIncrementBelowVal(
            this._buyNowNumericStepper.getValue()
          )
        );
  }),
  (views.items.QuickListPanel.prototype.setBoughtPrice = function setBoughtPrice(
    e
  ) {
    (this.__boughtPriceValue.textContent =
      0 < e ? services.Localization.localizeNumber(e) : ''),
      DOMKit.toggleClass(this.__boughtPrice, 'hasPreviousPrice', 0 < e);
  }),
  (views.items.QuickListPanel.prototype.hasPriceLimits = function hasPriceLimits() {
    return this._priceLimitsSet;
  }),
  (views.items.QuickListPanel.prototype.toggle = function toggle() {
    this._btnToggle.toggleClass('open'),
      DOMKit.toggleClass(this.__panelActions, 'open');
  }),
  (views.items.QuickListPanel.prototype.open = function open() {
    this._btnToggle.addClass('open'),
      DOMKit.addClass(this.__panelActions, 'open');
  }),
  (views.items.QuickListPanel.prototype.close = function close() {
    this._btnToggle.removeClass('open'),
      DOMKit.removeClass(this.__panelActions, 'open');
  }),
  (views.items.QuickListPanel.prototype.toggleDisplay = function toggleDisplay(
    e
  ) {
    this.setDisplay(e);
  }),
  (views.items.QuickListPanel.prototype._eToggle = function _eToggle(e, t, i) {
    this._triggerActions('panelToggle', {
      openState: this.hasClass('open')
    });
  }),
  (views.items.QuickListPanel.prototype._eListSelected = function _eListSelected(
    e,
    t,
    i
  ) {
    this._triggerActions(enums.UIItemActionEvent.LIST_ON_MARKET, {
      bidAmount: this._bidNumericStepper.getValue(),
      buyAmount: this._buyNowNumericStepper.getValue(),
      duration: parseInt(this._durationPicker.value, 10)
    });
  }),
  NamespaceManager.Register('controllers.views'),
  (controllers.views.QuickListPanel = function() {
    UTViewController.call(this),
      (this._item = null),
      (this.onList = new UTObservable()),
      Object.defineProperty(this, 'onList', {
        writable: !1,
        enumerable: !0
      });
  }),
  utils.JS.inherits(controllers.views.QuickListPanel, UTViewController),
  (controllers.views.QuickListPanel.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      e.addTarget(this, this._onList, enums.UIItemActionEvent.LIST_ON_MARKET),
        e.addTarget(this, this._onOpen, 'panelToggle');
    }
  }),
  (controllers.views.QuickListPanel.prototype.initWithItem = function initWithItem(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.Item,
        'Initialization expected an Item entity.'
      ),
      (this._item = e),
      this.init());
  }),
  (controllers.views.QuickListPanel.prototype.dealloc = function dealloc() {
    this.onList.dealloc(), this.superclass();
  }),
  (controllers.views.QuickListPanel.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.QuickListPanel();
  }),
  (controllers.views.QuickListPanel.prototype._renderView = function _renderView() {
    var e = this.getView(),
      t = this._item.getAuctionData();
    e.setPriceLimits(this._item.getPriceLimits()),
      e.setBoughtPrice(this._item.lastSalePrice),
      t.isValid() &&
        t.isExpired() &&
        t.tradeOwner &&
        (e.setBidValue(0 < t.currentBid ? t.currentBid : t.startingBid),
        e.setBuyNowValue(t.buyNowPrice));
  }),
  (controllers.views.QuickListPanel.prototype.setItem = function setItem(e) {
    (this._item = e), this._renderView();
  }),
  (controllers.views.QuickListPanel.viewDidAppear = function viewDidAppear() {
    this._renderView();
  }),
  (controllers.views.QuickListPanel.prototype._onList = function _onList(
    e,
    t,
    i
  ) {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Item.list(
        this._item,
        i.bidAmount,
        i.buyAmount,
        i.duration
      ).observe(this, function _onListComplete(e, t) {
        if ((e.unobserve(this), t.success)) this.onList.notify();
        else if (NetworkErrorManager.checkCriticalStatus(t.status))
          NetworkErrorManager.handleStatus(t.status);
        else {
          var i;
          switch (t.status) {
            case enums.HTTPStatusCode.FORBIDDEN:
              i = 'popup.error.list.forbidden.message';
              break;
            case enums.HTTPStatusCode.PERMISSION_DENIED:
              i = 'popup.error.list.PermissionDenied';
              break;
            case enums.HTTPStatusCode.STATE_INVALID:
              i = 'popup.error.list.InvalidState';
              break;
            case enums.HTTPStatusCode.DESTINATION_FULL:
              i = 'popup.error.tradetoken.SellItemTradePileFull';
              break;
            case enums.HTTPStatusCode.CARD_IN_TRADE:
              i = 'popup.error.tradetoken.ItemInTradeOffer';
              break;
            default:
              i = 'popup.error.list.InvalidState';
          }
          services.Notification.queue([
            services.Localization.localize(i),
            enums.UINotificationType.NEGATIVE
          ]);
        }
        gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
      });
  }),
  (controllers.views.QuickListPanel.prototype._onOpen = function _onOpen(
    e,
    t,
    i
  ) {
    var s = this.getView();

    function _onGetMarketDataComplete(e, t) {
      gClickShield.hideShield(components.ClickShield.SHIELD.LOADING),
        NetworkErrorManager.checkCriticalStatus(t.status)
          ? NetworkErrorManager.handleStatus(t.status)
          : (this._renderView(), s.open());
    }
    i && !i.openState
      ? services.Item.requestTransferItems().observe(this, function(e, t) {
          e.unobserve(this);
          var i = t.data.items.filter(function(e) {
            e.getAuctionData().isSelling();
          });
          t.success && i.length >= services.User.maxAllowedAuctions
            ? utils.PopupManager.ShowAlert(
                utils.PopupManager.Alerts.HIT_MAX_LISTING
              )
            : s.hasPriceLimits()
            ? s.toggle()
            : this._item.hasPriceLimits()
            ? (this._renderView(), s.open())
            : (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
              services.Item.requestMarketData(this._item).observe(
                this,
                _onGetMarketDataComplete
              ));
        })
      : s.close();
  }),
  NamespaceManager.Register('views.popups'),
  (views.popups.ChangeKitOption = function ChangeKitOptionView() {
    UTTargetActionView.call(this), this._generate();
  }),
  utils.JS.inherits(views.popups.ChangeKitOption, UTTargetActionView),
  (views.popups.ChangeKitOption.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('change-kit-option');
      var t = document.createElement('div');
      t.classList.add('info'),
        (this.__imgKit = document.createElement('div')),
        this.__imgKit.classList.add('activeKitImg'),
        t.appendChild(this.__imgKit),
        (this.__txtName = document.createElement('h3')),
        t.appendChild(this.__txtName),
        (this.__txtLabel = document.createElement('span')),
        this.__txtLabel.classList.add('activeKitTitle'),
        t.appendChild(this.__txtLabel),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('swap-icon'),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.popups.ChangeKitOption.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__imgKit = null),
      (this.__txtName = null),
      (this.__txtLabel = null);
  }),
  (views.popups.ChangeKitOption.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.popups.ChangeKitOption.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.popups.ChangeKitOption.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (views.popups.ChangeKitOption.prototype.setKitName = function setKitName(e) {
    this.__txtName.textContent = e;
  }),
  (views.popups.ChangeKitOption.prototype.setKitImage = function setKitImage(
    e
  ) {
    this.__imgKit.appendChild(e.getRootElement());
  }),
  (views.popups.ChangeKitOption.prototype.setKitLabel = function setKitLabel(
    e
  ) {
    this.__txtLabel.textContent = e;
  }),
  (views.popups.ChangeKitOption.prototype._mouseLeave = function _mouseLeave(
    e
  ) {
    this.removeClass(
      [enums.UIState.ACTIVE, enums.UIButtonState.HOVER].join(' ')
    );
  }),
  (views.popups.ChangeKitOption.prototype._mouseEnter = function _mouseEnter(
    e
  ) {
    this.addClass(enums.UIButtonState.HOVER);
  }),
  (views.popups.ChangeKitOption.prototype._touchStarted = function _touchStarted(
    e
  ) {
    this.superclass(), this.addClass(enums.UIState.ACTIVE);
  }),
  (views.popups.ChangeKitOption.prototype._touchMoved = function _touchMoved(
    e
  ) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE);
  }),
  (views.popups.ChangeKitOption.prototype._touchEnded = function _touchEnded(
    e
  ) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE);
  }),
  (views.popups.ChangeKitOption.prototype._touchCancelled = function _touchCancelled(
    e
  ) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE);
  }),
  (views.popups.ChangeKitOption.prototype._tapDetected = function _tapDetected(
    e
  ) {
    this.superclass(), this._triggerActions(enums.Event.TAP);
  }),
  NamespaceManager.Register('views.popups'),
  (views.popups.ChangeKit = function ChangeKitView() {
    UTTargetActionView.call(this),
      (this.onExit = new UTObservable()),
      Object.defineProperty(this, 'onExit', {
        writable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.popups.ChangeKit, UTTargetActionView),
  (views.popups.ChangeKit.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('change-kit');
      var t = document.createElement('header');
      t.classList.add('change-kit-header'),
        (this._exitBtn = new UTImageButtonControl()),
        this._exitBtn.getRootElement().classList.add('exit-btn'),
        t.appendChild(this._exitBtn.getRootElement()),
        (this.__selectKit = document.createElement('h1')),
        this.__selectKit.classList.add('popupTitle'),
        t.appendChild(this.__selectKit),
        e.appendChild(t),
        (this.__selectKitTextInfo = document.createElement('p')),
        this.__selectKitTextInfo.classList.add('text-info'),
        e.appendChild(this.__selectKitTextInfo);
      var i = document.createElement('div');
      i.classList.add('kits'),
        (this._homeKitOption = new views.popups.ChangeKitOption()),
        i.appendChild(this._homeKitOption.getRootElement()),
        (this._awayKitOption = new views.popups.ChangeKitOption()),
        i.appendChild(this._awayKitOption.getRootElement()),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.popups.ChangeKit.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._exitBtn.destroy(),
      (this.__selectKit = null),
      (this.__selectKitTextInfo = null),
      this._homeKitOption.destroy(),
      this._awayKitOption.destroy();
  }),
  (views.popups.ChangeKit.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.popups.ChangeKit.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.popups.ChangeKit.prototype.init = function init() {
    this.superclass(),
      this._exitBtn.init(),
      this._exitBtn.addTarget(this.onExit, this.onExit.notify, enums.Event.TAP),
      this._homeKitOption.init(),
      this._awayKitOption.init(),
      this._homeKitOption.addTarget(
        this,
        this._eHomeKitSelected,
        enums.Event.TAP
      ),
      this._awayKitOption.addTarget(
        this,
        this._eAwayKitSelected,
        enums.Event.TAP
      ),
      this._homeKitOption.setKitLabel(
        services.Localization.localize('infopanel.label.yourhomekit')
      ),
      this._awayKitOption.setKitLabel(
        services.Localization.localize('infopanel.label.yourawaykit')
      ),
      (this.__selectKit.textContent = services.Localization.localize(
        'infopanel.label.selectKit'
      ));
  }),
  (views.popups.ChangeKit.prototype.dealloc = function dealloc() {
    this.onExit.dealloc(), this.superclass();
  }),
  (views.popups.ChangeKit.prototype.setHomeKit = function setHomeKit(e, t) {
    this._homeKitOption.setKitName(
      utils.FUTLocalization.getTeamAbb15ByID(e.teamId, e.getYear())
    ),
      this._homeKitOption.setKitImage(t);
  }),
  (views.popups.ChangeKit.prototype.setAwayKit = function setAwayKit(e, t) {
    this._awayKitOption.setKitName(
      utils.FUTLocalization.getTeamAbb15ByID(e.teamId, e.getYear())
    ),
      this._awayKitOption.setKitImage(t);
  }),
  (views.popups.ChangeKit.prototype.setSelectedItem = function setSelectedItem(
    e
  ) {
    this.__selectKitTextInfo.textContent = services.Localization.localize(
      'infopanel.text.selectKit',
      [utils.FUTLocalization.getTeamAbb15ByID(e.teamId, e.getYear())]
    );
  }),
  (views.popups.ChangeKit.prototype._eHomeKitSelected = function _eHomeKitSelected(
    e,
    t,
    i
  ) {
    this._triggerActions(t, {
      kit: enums.KitActivationSlot.HOME
    });
  }),
  (views.popups.ChangeKit.prototype._eAwayKitSelected = function _eAwayKitSelected(
    e,
    t,
    i
  ) {
    this._triggerActions(t, {
      kit: enums.KitActivationSlot.AWAY
    });
  }),
  (controllers.views.popups.ChangeKit = function ChangeKitViewController() {
    controllers.views.popups.BasePopup.call(this),
      (this._viewmodel = new viewmodels.Club([])),
      (this._item = null),
      (this.onKitSelected = new UTObservable()),
      Object.defineProperty(this, 'onKitSelected', {
        writable: !1
      });
  }),
  utils.JS.inherits(
    controllers.views.popups.ChangeKit,
    controllers.views.popups.BasePopup
  ),
  (controllers.views.popups.ChangeKit.prototype.init = function init() {
    this.superclass();
    var e = this.getView();
    e.addTarget(this, this._eKitSelected, enums.Event.TAP),
      e.onExit.observe(this, this.onExit.notify.bind(this.onExit));
  }),
  (controllers.views.popups.ChangeKit.prototype.dealloc = function dealloc() {
    this.onKitSelected.dealloc(), this.superclass();
  }),
  (controllers.views.popups.ChangeKit.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.ChangeKit();
  }),
  (controllers.views.popups.ChangeKit.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this._viewmodel.getActiveItemImg(
        enums.UIActiveItemImgType.HOME_KIT
      ),
      t = this._viewmodel.getActiveItemImg(enums.UIActiveItemImgType.AWAY_KIT),
      i = services.Item.getActiveClubItems(enums.ItemState.ACTIVE_HOME_KIT),
      s = services.Item.getActiveClubItems(enums.ItemState.ACTIVE_AWAY_KIT),
      n = this.getView();
    n.setHomeKit(i, e), n.setAwayKit(s, t), n.setSelectedItem(this._item);
  }),
  (controllers.views.popups.ChangeKit.prototype.setItem = function setItem(e) {
    this._item = e;
  }),
  (controllers.views.popups.ChangeKit.prototype._eKitSelected = function _eKitSelected(
    e,
    t,
    i
  ) {
    this.onKitSelected.notify(i.kit), this.closePopup();
  }),
  NamespaceManager.Register('views.popups'),
  (views.popups.QuickSell = function QuickSellPopupView() {
    UTTargetActionView.call(this);
  }),
  utils.JS.inherits(views.popups.QuickSell, UTTargetActionView),
  (views.popups.QuickSell.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-popup'), e.classList.add('ut-quick-sell');
      var t = document.createElement('header');
      (this.__titleText = document.createElement('h1')),
        t.appendChild(this.__titleText),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('bodySection'),
        (this.__quickSellMsg = document.createElement('p')),
        this.__quickSellMsg.classList.add('ut-quick-sell--msg'),
        i.appendChild(this.__quickSellMsg);
      var s = document.createElement('div');
      s.classList.add('ut-quick-sell--input-container'),
        (this.__quickSellInputLabel = document.createElement('label')),
        this.__quickSellInputLabel.classList.add('ut-sell-quick--label'),
        s.appendChild(this.__quickSellInputLabel);
      var n = document.createElement('div');
      n.classList.add('ut-quick-sell--input'),
        (this._minusBtn = new UTStandardButtonControl()),
        n.appendChild(this._minusBtn.getRootElement()),
        (this._quickSellInput = new UTNumberInputControl()),
        n.appendChild(this._quickSellInput.getRootElement()),
        (this._plusBtn = new UTStandardButtonControl()),
        n.appendChild(this._plusBtn.getRootElement());
      var o = document.createElement('div');
      o.classList.add('ut-quick-sell--total-coins'),
        (this.__quickSellTotalCoins = document.createElement('span')),
        o.appendChild(this.__quickSellTotalCoins),
        n.appendChild(o),
        s.appendChild(n);
      var a = document.createElement('div');
      (this.__total = document.createElement('span')),
        this.__total.classList.add('ut-quick-sell--total'),
        a.appendChild(this.__total),
        (this.__hint = document.createElement('span')),
        this.__hint.classList.add('ut-quick-sell--hint'),
        a.appendChild(this.__hint),
        s.appendChild(a),
        i.appendChild(s),
        e.appendChild(i);
      var r = document.createElement('div');
      r.classList.add('btn-container'),
        (this._confirmBtn = new UTFlatButtonControl()),
        this._confirmBtn.getRootElement().classList.add('call-to-action'),
        r.appendChild(this._confirmBtn.getRootElement()),
        (this._cancelBtn = new UTFlatButtonControl()),
        this._cancelBtn.getRootElement().classList.add('call-to-action'),
        r.appendChild(this._cancelBtn.getRootElement()),
        e.appendChild(r),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.popups.QuickSell.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__titleText = null),
      (this.__quickSellMsg = null),
      (this.__quickSellInputLabel = null),
      this._minusBtn.destroy(),
      this._quickSellInput.destroy(),
      this._plusBtn.destroy(),
      (this.__quickSellTotalCoins = null),
      (this.__total = null),
      (this.__hint = null),
      this._confirmBtn.destroy(),
      this._cancelBtn.destroy();
  }),
  (views.popups.QuickSell.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.popups.QuickSell.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.popups.QuickSell.Event = {
    CHANGE: 'change'
  }),
  (views.popups.QuickSell.prototype.init = function init() {
    this._cancelBtn.init(),
      this._cancelBtn.setText(
        services.Localization.localize('common.dialog.cancel')
      ),
      this._cancelBtn.setInteractionState(!0),
      this._confirmBtn.init(),
      this._confirmBtn.setInteractionState(!1),
      this._minusBtn.init(),
      this._minusBtn.setInteractionState(!0),
      this._plusBtn.init(),
      this._plusBtn.setInteractionState(!0),
      this._quickSellInput.init(),
      this._quickSellInput.setInteractionState(!0);
  }),
  (views.popups.QuickSell.prototype.dealloc = function dealloc() {
    this.superclass();
  }),
  (views.popups.QuickSell.prototype.focus = function focus() {
    this._quickSellInput.getRoot().focus();
  }),
  (views.popups.QuickSell.prototype.render = function render(e, t, i, s) {
    (this.__titleText.textContent = e),
      this._confirmBtn.setText(t),
      (this.__total.textContent = services.Localization.localize(
        'club.quicksell.total',
        [i]
      )),
      (this.__hint.textContent =
        '[' + services.Localization.localize('club.quicksell.hint', [s]) + ']'),
      (this.__quickSellMsg.textContent = services.Localization.localize(
        'club.quicksell.intro'
      )),
      (this.__quickSellInputLabel.textContent = services.Localization.localize(
        'club.quicksell.label'
      ));
  }),
  (views.popups.QuickSell.prototype.getSellCount = function getSellCount() {
    return this._quickSellInput.value;
  }),
  (views.popups.QuickSell.prototype.setSellCount = function setSellCount(e) {
    this._quickSellInput.value = e;
  }),
  (views.popups.QuickSell.prototype.getConfirmBtn = function getConfirmBtn() {
    return this._confirmBtn;
  }),
  (views.popups.QuickSell.prototype.getCancelBtn = function getCancelBtn() {
    return this._cancelBtn;
  }),
  (views.popups.QuickSell.prototype.getIncrementBtn = function getIncrementBtn() {
    return this._plusBtn;
  }),
  (views.popups.QuickSell.prototype.getDecrementBtn = function getDecrementBtn() {
    return this._minusBtn;
  }),
  (views.popups.QuickSell.prototype.getSellCountInput = function getSellCountInput() {
    return this._quickSellInput;
  }),
  (views.popups.QuickSell.prototype.setDiscardValue = function setDiscardValue(
    e
  ) {
    this.__quickSellTotalCoins.textContent = e;
  }),
  (views.popups.QuickSell.prototype.enableDisableIncrements = function enableDisableIncrements(
    e
  ) {
    this._minusBtn.setInteractionState(!1),
      this._plusBtn.setInteractionState(!1),
      1 < this.getSellCount() && this._minusBtn.setInteractionState(!0),
      this.getSellCount() < e && this._plusBtn.setInteractionState(!0);
  }),
  (views.popups.QuickSell.prototype.setConfirmButtonEnabled = function setConfirmButtonEnabled(
    e
  ) {
    this._confirmBtn.setInteractionState(e);
  }),
  (views.popups.QuickSell.prototype.onBackButton = function onBackButton() {
    return !0;
  }),
  NamespaceManager.Register('controllers.views.popups'),
  (controllers.views.popups.QuickSell = function QuickSell(e, t, i) {
    controllers.views.popups.BasePopup.call(this),
      (this._sellCount = e),
      Object.defineProperty(this, '_sellCount', {
        writable: !0
      }),
      (this._totalCount = e),
      Object.defineProperty(this, '_totalCount', {
        writable: !1
      }),
      (this._untradeableCount = t),
      Object.defineProperty(this, '_untradeableCount', {
        writable: !1
      }),
      (this._discardValue = i),
      Object.defineProperty(this, '_discardValue', {
        writable: !1
      }),
      (this.onConfirm = new UTObservable()),
      Object.defineProperty(this, 'onConfirm', {
        writable: !1
      }),
      (this.onDecrement = new UTObservable()),
      Object.defineProperty(this, 'onDecrement', {
        writable: !1
      }),
      (this.onIncrement = new UTObservable()),
      Object.defineProperty(this, 'onIncrement', {
        writable: !1
      });
  }),
  utils.JS.inherits(
    controllers.views.popups.QuickSell,
    controllers.views.popups.BasePopup
  ),
  (controllers.views.popups.QuickSell.prototype.init = function init() {
    this.superclass();
    var e = this.getView();
    e.getConfirmBtn().addTarget(this, this._eConfirm, enums.Event.TAP),
      e.getCancelBtn().addTarget(this, this._eCancel, enums.Event.TAP),
      e.getIncrementBtn().addTarget(this, this._eIncrement, enums.Event.TAP),
      e.getDecrementBtn().addTarget(this, this._eDecrement, enums.Event.TAP),
      e.getSellCountInput().addTarget(this, this._eChange, enums.Event.CHANGE);
  }),
  (controllers.views.popups.QuickSell.prototype.dealloc = function dealloc() {
    this.onConfirm.dealloc(),
      this.onDecrement.dealloc(),
      this.onIncrement.dealloc(),
      this.superclass();
  }),
  (controllers.views.popups.QuickSell.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    e.render(
      services.Localization.localize('club.quicksell.title'),
      services.Localization.localize('club.quicksell.title'),
      this._totalCount,
      this._untradeableCount
    ),
      e.getSellCountInput().setMinValue(1),
      e.getSellCountInput().setMaxValue(this._totalCount),
      e.setSellCount(1),
      e.getConfirmBtn().setInteractionState(!0),
      this.updateConfirmButtonStatus();
  }),
  (controllers.views.popups.QuickSell.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.QuickSell();
  }),
  (controllers.views.popups.QuickSell.prototype._eDecrement = function _eDecrement(
    e
  ) {
    this._updateAmount(-1);
  }),
  (controllers.views.popups.QuickSell.prototype._eIncrement = function _eIncrement(
    e
  ) {
    this._updateAmount(1);
  }),
  (controllers.views.popups.QuickSell.prototype._eChange = function _eChange(
    e
  ) {
    this.updateInterface(e);
  }),
  (controllers.views.popups.QuickSell.prototype._updateAmount = function _updateAmount(
    e
  ) {
    var t = this.getView(),
      i = t.getSellCount();
    utils.JS.isNumber(i),
      (i = i),
      (i += e) < 1 ? (i = 1) : i > this._totalCount && (i = this._totalCount),
      t.setSellCount(i),
      this._updateDiscardValue(),
      t.enableDisableIncrements(this._totalCount),
      this.updateConfirmButtonStatus();
  }),
  (controllers.views.popups.QuickSell.prototype._updateDiscardValue = function _updateDiscardValue() {
    var e = this.getView(),
      t = e.getSellCount(),
      i = t * this._discardValue;
    utils.JS.isNumber(i) || ((i = 1 * this._discardValue), e.setSellCount(1)),
      t > this._totalCount - this._untradeableCount &&
        (i = (this._totalCount - this._untradeableCount) * this._discardValue),
      e.setDiscardValue(i);
  }),
  (controllers.views.popups.QuickSell.prototype._eCancel = function _eCancel(
    e
  ) {
    this.onExit.notify(enums.UIDialogOptions.CANCEL);
  }),
  (controllers.views.popups.QuickSell.prototype.updateInterface = function updateInterface(
    e
  ) {
    this.updateConfirmButtonStatus();
  }),
  (controllers.views.popups.QuickSell.prototype.updateConfirmButtonStatus = function updateConfirmButtonStatus() {
    var e = this.getView();
    e.setConfirmButtonEnabled(!1);
    var t = e.getSellCountInput().getValue();
    utils.JS.isNumber(t) || e.setSellCount(1),
      t > this._totalCount
        ? e.setSellCount(this._totalCount)
        : t < 1 && e.setSellCount(1),
      e.setConfirmButtonEnabled(!0),
      this._updateDiscardValue(),
      e.enableDisableIncrements(this._totalCount);
  }),
  (controllers.views.popups.QuickSell.prototype._eConfirm = function _eConfirm(
    e
  ) {
    this._confirmCount();
  }),
  (controllers.views.popups.QuickSell.prototype._confirmCount = function _confirmCount() {
    var e = this.getView(),
      t = e.getSellCount();
    0 === t.length ||
      0 === t ||
      t > this._totalCount ||
      (e.setInteractionState(!1),
      this.onConfirm.notify(t),
      this.onExit.notify(enums.UIDialogOptions.OK));
  }),
  (controllers.views.popups.QuickSell.prototype.handleKeyUpEvent = function handleKeyUpEvent(
    e
  ) {
    e.key === enums.KeyboardKey.ESCAPE || e.key === enums.KeyboardKey.MS_ESCAPE
      ? this.onExit.notify(enums.UIDialogOptions.CANCEL)
      : e.key === enums.KeyboardKey.ENTER && this._confirmCount();
  }),
  NamespaceManager.Register('views.items'),
  (views.items.ItemDetails = function ItemDetailsView() {
    UTTargetActionView.call(this),
      this._generate(),
      (this._items = new UTIterator([])),
      (this._enableSwiping = !0);
  }),
  utils.JS.inherits(views.items.ItemDetails, UTTargetActionView),
  (views.items.ItemDetails.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('DetailView');
      var t = document.createElement('div');
      t.classList.add('detail-carousel'),
        (this.__btnPrev = document.createElement('a')),
        this.__btnPrev.classList.add('alt'),
        this.__btnPrev.classList.add('btn-flat'),
        this.__btnPrev.classList.add('tapLeft'),
        t.appendChild(this.__btnPrev),
        (this._tnsCarousel = new TNSContainerView()),
        t.appendChild(this._tnsCarousel.getRootElement()),
        (this.__btnNext = document.createElement('a')),
        this.__btnNext.classList.add('alt'),
        this.__btnNext.classList.add('btn-flat'),
        this.__btnNext.classList.add('tapRight'),
        t.appendChild(this.__btnNext),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.ItemDetails.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__btnPrev = null),
      this._tnsCarousel.destroy(),
      (this.__btnNext = null);
  }),
  (views.items.ItemDetails.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.ItemDetails.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.ItemDetails.Event = {
    INDEX_CHANGE: 'views.items.ItemDetails.Event.INDEX_CHANGE'
  }),
  (views.items.ItemDetails.prototype.init = function init() {
    this.setInteractionState(!0);
  }),
  (views.items.ItemDetails.prototype.dealloc = function dealloc() {
    this.resetItems(), this.superclass(), (this._items = null);
  }),
  (views.items.ItemDetails.prototype.resetItems = function resetItems() {
    this._items.values().forEach(function(e) {
      e.dealloc(), (e = null);
    }, this),
      this._items.resetCollection([]);
  }),
  (views.items.ItemDetails.prototype.appendPanel = function appendPanel(e) {
    this.removeSubviews(),
      this.addSubview(e),
      this.getRootElement().appendChild(e.getRootElement());
  }),
  (views.items.ItemDetails.prototype.toggleCarouselDisplay = function toggleCarouselDisplay(
    e
  ) {
    DOMKit.toggleDisplayStyle(this._tnsCarousel.getRootElement(), e);
  }),
  (views.items.ItemDetails.prototype.toggleCarouselSwiping = function toggleCarouselSwiping(
    e
  ) {
    (this._enableSwiping = e),
      DOMKit.toggleDisplayStyle(this.__btnPrev, e),
      DOMKit.toggleDisplayStyle(this.__btnNext, e);
  }),
  (views.items.ItemDetails.prototype._updatePrevNextState = function _updatePrevNextState() {
    var e = !this._items.startOfList,
      t = !this._items.endOfList;
    this.toggleClass('has-prev', e),
      this.toggleClass('has-next', t),
      this._enableSwiping
        ? (DOMKit.toggleDisplayStyle(this.__btnPrev, e),
          DOMKit.toggleDisplayStyle(this.__btnNext, t))
        : (DOMKit.toggleDisplayStyle(this.__btnPrev, !1),
          DOMKit.toggleDisplayStyle(this.__btnNext, !1));
  }),
  (views.items.ItemDetails.prototype.render = function render(e, t) {
    if (0 === this._items.length || this._items.length !== e.length)
      this._populateIterator(e, t);
    else if (
      this._tnsCarousel.getCurrentSlide() !== t &&
      t < this._tnsCarousel.getNumOfSlides()
    )
      this._tnsCarousel.goTo(t);
    else {
      var i = this._items.values();
      this._items.resetCollection(
        e.map(function(e) {
          return this._generateItemView(e);
        }, this)
      ),
        this._items.setIndex(t),
        this._items.values().forEach(function(e, t) {
          this._tnsCarousel.dynamicSlideChange(t, e.getRootElement()),
            i[t].dealloc();
        }, this);
    }
    this.toggleCarouselDisplay(!0);
  }),
  (views.items.ItemDetails.prototype.updateSlide = function updateSlide(e, t) {
    var i = this._items.get(e),
      s = this._generateItemView(t);
    this._items.set(s, e),
      this._tnsCarousel.dynamicSlideChange(e, s.getRootElement()),
      i.dealloc();
  }),
  (views.items.ItemDetails.prototype.setSlotChemistry = function setSlotChemistry(
    e
  ) {
    e.forEach(function(e, t) {
      var i = this._items.get(t);
      i &&
        e.isValid() &&
        i.renderChemistry(e.getItem(), e.getChemistry(), e.getManagerBonus());
    }, this);
  }),
  (views.items.ItemDetails.prototype._initializeIterator = function _initializeIterator() {
    this._tnsCarousel.emptyCarousel(),
      this._items.values().forEach(function(e) {
        this._tnsCarousel.appendElem(e.getRootElement());
      }, this),
      this._setupCarousel(this._items.getIndex());
  }),
  (views.items.ItemDetails.prototype._setupCarousel = function _setupCarousel(
    e
  ) {
    if (1 < this._items.length) {
      var t = new TNSPropertiesDTO();
      (t.controls = this._enableSwiping),
        (t.touch = this._enableSwiping),
        (t.mouseDrag = this._enableSwiping),
        (t.startIndex = e),
        (t.container = this._tnsCarousel.getRootElement()),
        this._tnsCarousel.setup(t),
        this._tnsCarousel.afterChange(
          function(e) {
            this._items.setIndex(e),
              this._updatePrevNextState(),
              this._triggerActions(views.items.ItemDetails.Event.INDEX_CHANGE, {
                index: e
              });
          }.bind(this)
        );
    }
    this._updatePrevNextState();
  }),
  (views.items.ItemDetails.prototype.destroyCarousel = function destroyCarousel() {
    DOMKit.toggleDisplayStyle(this._tnsCarousel.getRootElement(), !1),
      this._tnsCarousel.teardown(this.getRootElement());
  }),
  (views.items.ItemDetails.prototype._populateIterator = function _populateIterator(
    e,
    t
  ) {
    var i = this._items.values();
    this._items.resetCollection(
      e.map(function(e) {
        return this._generateItemView(e);
      }, this)
    ),
      this._items.setIndex(t),
      this._tnsCarousel.isOn()
        ? (this._tnsCarousel.teardown(this.getRootElement()),
          this._items.values().forEach(function(e) {
            this._tnsCarousel.appendElem(e.getRootElement());
          }, this),
          i.forEach(function(e) {
            e.dealloc();
          }, this),
          this._setupCarousel(t))
        : this._initializeIterator();
  }),
  (views.items.ItemDetails.prototype._generateItemView = function _generateItemView(
    e
  ) {
    var t = factories.ItemView.createLargeItem(e);
    return t.init(), t.render(e), t;
  }),
  (views.items.ItemDetails.prototype._tapDetected = function _tapDetected(e) {
    e.target === this.__btnPrev
      ? (this._items.previous(), this._tnsCarousel.goTo(this._items.getIndex()))
      : e.target === this.__btnNext &&
        (this._items.next(), this._tnsCarousel.goTo(this._items.getIndex()));
  }),
  NamespaceManager.Register('views.items'),
  (views.items.DefaultActionPanel = function UTDefaultActionPanelView() {
    UTTargetActionView.call(this),
      (this._quickListView = null),
      Object.defineProperty(this, '_quickListView', {
        writable: !0,
        enumerable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.items.DefaultActionPanel, UTTargetActionView),
  (views.items.DefaultActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('DetailPanel'),
        (this.__metadata = document.createElement('div')),
        this.__metadata.classList.add('ut-item-details--metadata'),
        (this.__activeSquadIndicator = document.createElement('div')),
        this.__activeSquadIndicator.classList.add(
          'ut-item-details--squad-indicator'
        );
      var t = document.createElement('span');
      t.classList.add('fut_icon'),
        t.classList.add('icon_squad'),
        this.__activeSquadIndicator.appendChild(t),
        (this.__activeSquadText = document.createElement('span')),
        this.__activeSquadIndicator.appendChild(this.__activeSquadText),
        this.__metadata.appendChild(this.__activeSquadIndicator),
        (this.__auctionInfo = document.createElement('div')),
        this.__auctionInfo.classList.add('auctionInfo');
      var i = document.createElement('div');
      i.classList.add('column'),
        (this.__textInfo = document.createElement('span')),
        this.__textInfo.classList.add('subHeading'),
        i.appendChild(this.__textInfo),
        (this.__valueInfo = document.createElement('span')),
        this.__valueInfo.classList.add('currency-coins'),
        this.__valueInfo.classList.add('subContent'),
        i.appendChild(this.__valueInfo),
        this.__auctionInfo.appendChild(i),
        this.__metadata.appendChild(this.__auctionInfo),
        e.appendChild(this.__metadata),
        (this.__itemActions = document.createElement('div')),
        this.__itemActions.classList.add('ut-button-group'),
        (this._playerBioButton = new UTGroupButtonControl()),
        this._playerBioButton.getRootElement().classList.add('more'),
        this.__itemActions.appendChild(this._playerBioButton.getRootElement()),
        (this._redeemButton = new UTGroupButtonControl()),
        this.__itemActions.appendChild(this._redeemButton.getRootElement()),
        (this._applyConsumableButton = new UTGroupButtonControl()),
        this.__itemActions.appendChild(
          this._applyConsumableButton.getRootElement()
        ),
        (this._makeItemActiveButton = new UTGroupButtonControl()),
        this.__itemActions.appendChild(
          this._makeItemActiveButton.getRootElement()
        ),
        (this._sendClubButton = new UTGroupButtonControl()),
        this.__itemActions.appendChild(this._sendClubButton.getRootElement()),
        (this._sendToSquadButton = new UTGroupButtonControl()),
        this.__itemActions.appendChild(
          this._sendToSquadButton.getRootElement()
        ),
        (this._sendTransferButton = new UTGroupButtonControl()),
        this.__itemActions.appendChild(
          this._sendTransferButton.getRootElement()
        ),
        (this._comparePriceButton = new UTGroupButtonControl()),
        this.__itemActions.appendChild(
          this._comparePriceButton.getRootElement()
        ),
        (this._discardButton = new UTGroupButtonControl()),
        this.__itemActions.appendChild(this._discardButton.getRootElement()),
        e.appendChild(this.__itemActions),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.DefaultActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__metadata = null),
      (this.__activeSquadIndicator = null),
      (this.__activeSquadText = null),
      (this.__auctionInfo = null),
      (this.__textInfo = null),
      (this.__valueInfo = null),
      (this.__itemActions = null),
      this._playerBioButton.destroy(),
      this._redeemButton.destroy(),
      this._applyConsumableButton.destroy(),
      this._makeItemActiveButton.destroy(),
      this._sendClubButton.destroy(),
      this._sendToSquadButton.destroy(),
      this._sendTransferButton.destroy(),
      this._comparePriceButton.destroy(),
      this._discardButton.destroy();
  }),
  (views.items.DefaultActionPanel.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.DefaultActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.DefaultActionPanel.prototype.init = function init() {
    this.superclass(),
      this._playerBioButton.init(),
      this._redeemButton.init(),
      this._applyConsumableButton.init(),
      this._makeItemActiveButton.init(),
      this._sendClubButton.init(),
      this._sendToSquadButton.init(),
      this._sendTransferButton.init(),
      this._comparePriceButton.init(),
      this._discardButton.init(),
      this._playerBioButton.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._redeemButton.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._applyConsumableButton.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._makeItemActiveButton.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._sendClubButton.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._sendToSquadButton.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._comparePriceButton.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._sendTransferButton.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._discardButton.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._playerBioButton.setText(
        services.Localization.localize('extendedPlayerInfo.general.playerBio')
      ),
      this._applyConsumableButton.setText(
        services.Localization.localize('panel.applyitem.button')
      ),
      this._makeItemActiveButton.setText(
        services.Localization.localize('navbar.label.makeactive.item')
      ),
      this._sendClubButton.setText(
        services.Localization.localize('infopanel.label.storeInClub')
      ),
      this._sendToSquadButton.setText(
        services.Localization.localize('infopanel.button.sendtosquad')
      ),
      this._sendTransferButton.setText(
        services.Localization.localize('infopanel.label.sendTradePile')
      ),
      this._comparePriceButton.setText(
        services.Localization.localize('infopanel.label.findallitems')
      ),
      this._discardButton.setText(
        services.Localization.localize('infopanel.label.quickSell')
      ),
      this._discardButton.displayCurrencyIcon(!0);
  }),
  (views.items.DefaultActionPanel.prototype.dealloc = function dealloc() {
    this._quickListView && this.removeQuickList(), this.superclass();
  }),
  (views.items.DefaultActionPanel.prototype.render = function render(
    e,
    t,
    i,
    s
  ) {
    if (e.isMiscItem()) {
      var n = '';
      return (
        e.isFreeCoins()
          ? (DOMKit.toggleDisplayStyle(this.__auctionInfo, !0),
            (n = 'infopanel.label.collectcoins'),
            (this.__textInfo.textContent = services.Localization.localize(
              'card.desc.FreeCreditsDesc'
            )),
            (this.__valueInfo.textContent = services.Localization.localizeNumber(
              e.getStaticData().amount
            )))
          : e.isFreePack()
          ? (DOMKit.toggleDisplayStyle(this.__auctionInfo, !1),
            (n = 'infopanel.label.claimpack'))
          : e.isDraftToken()
          ? (DOMKit.toggleDisplayStyle(this.__auctionInfo, !1),
            (n = 'infopanel.label.claimdrafttoken'))
          : e.isPlayerPickItem() &&
            (DOMKit.toggleDisplayStyle(this.__auctionInfo, !0),
            DOMKit.toggleDisplayStyle(this.__valueInfo, !1),
            (n = 'infopanel.label.claimdraftitem'),
            (this.__textInfo.textContent = e.getStaticData().description)),
        this._redeemButton.setText(services.Localization.localize(n)),
        this._redeemButton.setDisplay(!0),
        this._applyConsumableButton.setDisplay(!1),
        this._makeItemActiveButton.setDisplay(!1),
        this._sendClubButton.setDisplay(!1),
        this._sendToSquadButton.setDisplay(!1),
        this._sendTransferButton.setDisplay(!1),
        this._discardButton.setDisplay(!1),
        this._playerBioButton.setDisplay(!1),
        void this._comparePriceButton.setDisplay(!1)
      );
    }
    var o = e.isDuplicate(),
      a = e.isClubItem(),
      r = e.concept,
      l = !1;
    a &&
      !o &&
      ((l = e.isActiveClubItem()),
      this._makeItemActiveButton.setInteractionState(!l),
      this._makeItemActiveButton.setText(
        l
          ? services.Localization.localize('navbar.label.itemalreadyactive')
          : services.Localization.localize('navbar.label.makeactive.item')
      ));
    var c =
      e.pile !== enums.FUTItemPile.TRANSFER &&
      !l &&
      e.isValid() &&
      !e.isCustomItem();
    this._sendTransferButton.setDisplay(c),
      c && (e.untradeable || e.isLoaned())
        ? (this._sendTransferButton.setText(
            services.Localization.localize('infopanel.label.untradeable')
          ),
          this._sendTransferButton.setInteractionState(!1))
        : c &&
          i &&
          (this._sendTransferButton.setText(
            services.Localization.localize(
              'popup.error.tradetoken.SellItemTradePileFullTitle'
            )
          ),
          this._sendTransferButton.setInteractionState(!1)),
      this._sendClubButton.setText(
        services.Localization.localize(
          o ? 'infopanel.button.swap' : 'infopanel.label.storeInClub'
        )
      ),
      this._discardButton.setSubtext(
        services.Localization.localizeNumber(e.discardValue)
      ),
      e.isLoaned() &&
        this._comparePriceButton.setText(
          services.Localization.localize('infopanel.button.searchmarket')
        ),
      this._redeemButton.setDisplay(!1),
      this._makeItemActiveButton.setDisplay(a && !o),
      this._sendClubButton.setDisplay(!r && e.pile !== enums.FUTItemPile.CLUB),
      this._playerBioButton.setDisplay(e.isPlayer()),
      this._discardButton.setDisplay(!r && !l && e.isValid());
    var u =
      !gConfigurationModel.getConfigBoolean(
        models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET
      ) &&
      services.User.getUser().hasTradeAccess() &&
      services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.TRADING_ENABLED
      );
    this._comparePriceButton.setDisplay(
      !entities.Item.isStoryMode(e.resourceId) &&
        e.isValid() &&
        u &&
        !e.isCustomItem()
    );
    var d = e.getAuctionData(),
      h = e.lastSalePrice,
      p = d.startingBid,
      _ = d.currentBid,
      m =
        e.isConsumable() &&
        (!e.isTeamFitness() || (utils.JS.isValid(t) && !t.isDream())) &&
        e.isValid();
    s
      ? this._sendToSquadButton.setText(
          services.Localization.localize('infopanel.button.sendtosquad')
        )
      : t.isSBC()
      ? this._sendToSquadButton.setText(
          services.Localization.localize('infopanel.button.sendtosbc')
        )
      : this._sendToSquadButton.setText(
          services.Localization.localize('infopanel.button.sendtocurrentsquad')
        ),
      this._applyConsumableButton.setDisplay(
        m ||
          (e.pile === enums.FUTItemPile.CLUB && (e.isPlayer() || e.isManager()))
      ),
      this._sendToSquadButton.setDisplay(
        utils.JS.isValid(t) &&
          (e.isPlayer() || e.isManager()) &&
          !t.containsItem(e, !0) &&
          !r
      );
    var g = !0;
    d && 0 < _ && e.isValid()
      ? ((this.__textInfo.textContent = services.Localization.localize(
          'infopanel.label.congratulations'
        )),
        (this.__valueInfo.textContent = services.Localization.localizeNumber(
          _
        )))
      : d.isExpired()
      ? ((this.__textInfo.textContent = services.Localization.localize(
          'infopanel.label.lastListedPrice'
        )),
        (this.__valueInfo.textContent = services.Localization.localizeNumber(
          p
        )))
      : 0 < h && e.isValid()
      ? ((this.__textInfo.textContent = services.Localization.localize(
          'infopanel.label.prevBoughtPrice'
        )),
        (this.__valueInfo.textContent = services.Localization.localizeNumber(
          h
        )))
      : (g = !1),
      DOMKit.toggleDisplayStyle(this.__auctionInfo, g);
    var T = e.isManager()
        ? 'infopanel.label.managerInActiveSquad'
        : 'infopanel.label.inActiveSquad',
      S = utils.JS.isValid(t) && t.containsItem(e, !0);
    (this.__activeSquadText.textContent = services.Localization.localize(T)),
      DOMKit.toggleDisplayStyle(this.__activeSquadIndicator, S),
      DOMKit.toggleDisplayStyle(this.__metadata, S || g);
  }),
  (views.items.DefaultActionPanel.prototype.appendQuickList = function appendQuickList(
    e
  ) {
    (this._quickListView = e),
      DOMKit.insertBefore(e.getRootElement(), this.__itemActions);
  }),
  (views.items.DefaultActionPanel.prototype.removeQuickList = function removeQuickList() {
    this._quickListView &&
      (DOMKit.remove(this._quickListView.getRootElement()),
      (this._quickListView = null));
  }),
  (views.items.DefaultActionPanel.prototype._eButtonSelected = function _eButtonSelected(
    e,
    t,
    i
  ) {
    var s = enums.UIItemActionEvent.BIO;
    e === this._playerBioButton
      ? (s = enums.UIItemActionEvent.BIO)
      : e === this._redeemButton
      ? (s = enums.UIItemActionEvent.REDEEM)
      : e === this._applyConsumableButton
      ? (s = enums.UIItemActionEvent.APPLY_CONSUMABLE)
      : e === this._makeItemActiveButton
      ? (s = enums.UIItemActionEvent.ACTIVATE)
      : e === this._sendClubButton
      ? (s = enums.UIItemActionEvent.SEND_TO_CLUB)
      : e === this._sendToSquadButton
      ? (s = enums.UIItemActionEvent.SEND_TO_SQUAD)
      : e === this._sendTransferButton
      ? (s = enums.UIItemActionEvent.SEND_TO_TRANSFERS)
      : e === this._comparePriceButton
      ? (s = enums.UIItemActionEvent.COMPARE)
      : e === this._discardButton && (s = enums.UIItemActionEvent.DISCARD),
      this._triggerActions(s);
  }),
  NamespaceManager.Register('views.items'),
  (views.items.DuplicateLoanActionPanel = function DuplicateLoanActionPanelView() {
    UTView.call(this),
      (this.onDiscard = new UTObservable()),
      Object.defineProperty(this, 'onDiscard', {
        writable: !1
      }),
      (this.onPlayerBio = new UTObservable()),
      Object.defineProperty(this, 'onPlayerBio', {
        writable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.items.DuplicateLoanActionPanel, UTView),
  (views.items.DuplicateLoanActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('DetailPanel');
      var t = document.createElement('div');
      t.classList.add('ut-item-details--metadata');
      var i = document.createElement('div');
      i.classList.add('auctionInfo');
      var s = document.createElement('div');
      s.classList.add('column'),
        (this.__itemInfo1Label = document.createElement('span')),
        this.__itemInfo1Label.classList.add('subHeading'),
        s.appendChild(this.__itemInfo1Label),
        (this.__itemInfo1Value = document.createElement('span')),
        this.__itemInfo1Value.classList.add('subContent'),
        s.appendChild(this.__itemInfo1Value),
        i.appendChild(s);
      var n = document.createElement('div');
      n.classList.add('column'),
        (this.__itemInfo2Label = document.createElement('span')),
        this.__itemInfo2Label.classList.add('subHeading'),
        n.appendChild(this.__itemInfo2Label),
        (this.__itemInfo2Value = document.createElement('span')),
        this.__itemInfo2Value.classList.add('subContent'),
        n.appendChild(this.__itemInfo2Value),
        i.appendChild(n);
      var o = document.createElement('div');
      o.classList.add('column'),
        (this.__itemInfo3Label = document.createElement('span')),
        this.__itemInfo3Label.classList.add('subHeading'),
        o.appendChild(this.__itemInfo3Label),
        (this.__itemInfo3Value = document.createElement('span')),
        this.__itemInfo3Value.classList.add('subContent'),
        o.appendChild(this.__itemInfo3Value),
        i.appendChild(o),
        t.appendChild(i),
        e.appendChild(t),
        (this.__itemActions = document.createElement('div')),
        this.__itemActions.classList.add('loanPlayer'),
        (this.__infoText1 = document.createElement('p')),
        this.__infoText1.classList.add('infoText'),
        this.__itemActions.appendChild(this.__infoText1),
        (this.__infoText2 = document.createElement('p')),
        this.__infoText2.classList.add('infoText'),
        this.__itemActions.appendChild(this.__infoText2),
        (this._actionButton = new UTStandardButtonControl()),
        this._actionButton.getRootElement().classList.add('call-to-action'),
        this.__itemActions.appendChild(this._actionButton.getRootElement());
      var a = document.createElement('div');
      a.classList.add('ut-button-group'),
        (this._playerBioButton = new UTGroupButtonControl()),
        this._playerBioButton.getRootElement().classList.add('more'),
        a.appendChild(this._playerBioButton.getRootElement()),
        this.__itemActions.appendChild(a),
        e.appendChild(this.__itemActions),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.DuplicateLoanActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__itemInfo1Label = null),
      (this.__itemInfo1Value = null),
      (this.__itemInfo2Label = null),
      (this.__itemInfo2Value = null),
      (this.__itemInfo3Label = null),
      (this.__itemInfo3Value = null),
      (this.__itemActions = null),
      (this.__infoText1 = null),
      (this.__infoText2 = null),
      this._actionButton.destroy(),
      this._playerBioButton.destroy();
  }),
  (views.items.DuplicateLoanActionPanel.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.DuplicateLoanActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.DuplicateLoanActionPanel.prototype.init = function init() {
    this.superclass(),
      this._actionButton.init(),
      this._actionButton.setText(
        services.Localization.localize('common.dialog.ok').toUpperCase()
      ),
      this._actionButton.addTarget(
        this.onDiscard,
        this.onDiscard.notify,
        enums.Event.TAP
      ),
      this._playerBioButton.init(),
      this._playerBioButton.setText(
        services.Localization.localize('extendedPlayerInfo.general.playerBio')
      ),
      this._playerBioButton.addTarget(
        this.onPlayerBio,
        this.onPlayerBio.notify,
        enums.Event.TAP
      );
  }),
  (views.items.DuplicateLoanActionPanel.prototype.dealloc = function dealloc() {
    this.onDiscard.dealloc(), this.onPlayerBio.dealloc(), this.superclass();
  }),
  (views.items.DuplicateLoanActionPanel.prototype.render = function render(e) {
    function getNumGamesString(e) {
      return services.Localization.localize(
        'panel.label.game' + (1 < e ? 's' : ''),
        [e]
      );
    }
    utils.Debug.Assert(
      e.isDuplicateLoanPlayer(),
      '[views.items.DuplicateLoanActionPanel] Invalid item data, expected a duplicate loan player.'
    );
    var t = e.loans,
      i = e.duplicateItemLoans,
      s = i + t;
    (this.__itemInfo1Label.textContent = services.Localization.localize(
      'panel.label.currentContract'
    )),
      (this.__itemInfo1Value.textContent = getNumGamesString(i)),
      (this.__itemInfo2Label.textContent = services.Localization.localize(
        'panel.label.addContract'
      )),
      (this.__itemInfo2Value.textContent = getNumGamesString(t)),
      (this.__itemInfo3Label.textContent = services.Localization.localize(
        'panel.label.newContract'
      )),
      (this.__itemInfo3Value.textContent = getNumGamesString(s)),
      (this.__infoText1.textContent = services.Localization.localize(
        'panel.text.loanDuplicatePlayer1'
      )),
      (this.__infoText2.textContent = services.Localization.localize(
        'panel.text.loanDuplicatePlayer2'
      )),
      this._actionButton.setInteractionState(e.isDuplicateLoanPlayer());
  }),
  NamespaceManager.Register('views.items'),
  (views.items.TransferActionPanel = function TransferActionPanelView() {
    UTView.call(this),
      (this._timeRemaining = 0),
      (this._countdownTimer = null),
      (this.onClearSold = new UTObservable()),
      Object.defineProperty(this, 'onClearSold', {
        writable: !1
      }),
      (this.onPlayerBio = new UTObservable()),
      Object.defineProperty(this, 'onPlayerBio', {
        writable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.items.TransferActionPanel, UTView),
  (views.items.TransferActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('DetailPanel');
      var t = document.createElement('div');
      t.classList.add('ut-item-details--metadata'),
        (this.__activeTrade = document.createElement('div')),
        this.__activeTrade.classList.add('auctionInfo');
      var i = document.createElement('div');
      i.classList.add('column'),
        (this.__headerTimeRemaining = document.createElement('span')),
        this.__headerTimeRemaining.classList.add('subHeading'),
        i.appendChild(this.__headerTimeRemaining),
        (this.__txtTimeRemaining = document.createElement('span')),
        this.__txtTimeRemaining.classList.add('subContent'),
        i.appendChild(this.__txtTimeRemaining),
        this.__activeTrade.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('column'),
        (this.__headerCurrentBid = document.createElement('span')),
        this.__headerCurrentBid.classList.add('subHeading'),
        s.appendChild(this.__headerCurrentBid),
        (this.__txtBidValue = document.createElement('span')),
        this.__txtBidValue.classList.add('currency-coins'),
        this.__txtBidValue.classList.add('subContent'),
        s.appendChild(this.__txtBidValue),
        this.__activeTrade.appendChild(s);
      var n = document.createElement('div');
      n.classList.add('column'),
        (this.__headerCurrentBuyNow = document.createElement('span')),
        this.__headerCurrentBuyNow.classList.add('subHeading'),
        n.appendChild(this.__headerCurrentBuyNow),
        (this.__txtBuyValue = document.createElement('span')),
        this.__txtBuyValue.classList.add('currency-coins'),
        this.__txtBuyValue.classList.add('subContent'),
        n.appendChild(this.__txtBuyValue),
        this.__activeTrade.appendChild(n),
        t.appendChild(this.__activeTrade),
        e.appendChild(t),
        (this.__itemActions = document.createElement('div')),
        this.__itemActions.classList.add('tradeOptions'),
        (this.__strTradeStatus = document.createElement('p')),
        this.__strTradeStatus.classList.add('tradeStatus'),
        this.__itemActions.appendChild(this.__strTradeStatus),
        (this._removeButton = new UTStandardButtonControl()),
        this._removeButton.getRootElement().classList.add('call-to-action'),
        this.__itemActions.appendChild(this._removeButton.getRootElement());
      var o = document.createElement('div');
      o.classList.add('ut-button-group'),
        (this._playerBioButton = new UTGroupButtonControl()),
        this._playerBioButton.getRootElement().classList.add('more'),
        o.appendChild(this._playerBioButton.getRootElement()),
        this.__itemActions.appendChild(o),
        e.appendChild(this.__itemActions),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.TransferActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__activeTrade = null),
      (this.__headerTimeRemaining = null),
      (this.__txtTimeRemaining = null),
      (this.__headerCurrentBid = null),
      (this.__txtBidValue = null),
      (this.__headerCurrentBuyNow = null),
      (this.__txtBuyValue = null),
      (this.__itemActions = null),
      (this.__strTradeStatus = null),
      this._removeButton.destroy(),
      this._playerBioButton.destroy();
  }),
  (views.items.TransferActionPanel.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.TransferActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.TransferActionPanel.prototype.init = function init() {
    this.superclass(),
      this._removeButton.init(),
      this._removeButton.setText(
        services.Localization.localize('infopanel.button.remove')
      ),
      this._removeButton.addTarget(
        this.onClearSold,
        this.onClearSold.notify,
        enums.Event.TAP
      ),
      this._playerBioButton.init(),
      this._playerBioButton.setText(
        services.Localization.localize('extendedPlayerInfo.general.playerBio')
      ),
      this._playerBioButton.addTarget(
        this.onPlayerBio,
        this.onPlayerBio.notify,
        enums.Event.TAP
      ),
      (this.__headerTimeRemaining.textContent = services.Localization.localize(
        'auctioninfo.timeremaining'
      )),
      (this.__headerCurrentBuyNow.textContent = services.Localization.localize(
        'auctioninfo.buynowprice'
      )),
      (this.__strTradeStatus.textContent = services.Localization.localize(
        'auctioninfo.currentlylisted'
      ));
  }),
  (views.items.TransferActionPanel.prototype.dealloc = function dealloc() {
    this._stopCountdownTimer(),
      (this._countdownTimer = null),
      this.onClearSold.dealloc(),
      this.onPlayerBio.dealloc(),
      this.superclass();
  }),
  (views.items.TransferActionPanel.prototype.toggleRemove = function toggleRemove(
    e
  ) {
    this._removeButton.setDisplay(e);
  }),
  (views.items.TransferActionPanel.prototype.togglePlayerBio = function togglePlayerBio(
    e
  ) {
    this._playerBioButton.setDisplay(e);
  }),
  (views.items.TransferActionPanel.prototype.setBuyNowText = function setBuyNowText(
    e
  ) {
    this.__txtBuyValue.textContent = services.Localization.localizeNumber(e);
  }),
  (views.items.TransferActionPanel.prototype.setCurrentBidText = function setCurrentBidText(
    e,
    t
  ) {
    var i = e <= t;
    (this.__headerCurrentBid.textContent = services.Localization.localize(
      i ? 'auctioninfo.currentbid' : 'auctioninfo.startprice'
    )),
      (this.__txtBidValue.textContent = services.Localization.localizeNumber(
        i ? t : e
      ));
  }),
  (views.items.TransferActionPanel.prototype.render = function render(e) {
    var t = e.getAuctionData();
    this.toggleRemove(t.isClosedTrade()),
      this.togglePlayerBio(e.isPlayer()),
      DOMKit.toggleDisplayStyle(this.__strTradeStatus, !t.isClosedTrade()),
      this.setCurrentBidText(t.startingBid, t.currentBid),
      this.setBuyNowText(t.buyNowPrice),
      this.onTimedUpdate(t);
  }),
  (views.items.TransferActionPanel.prototype.onTimedUpdate = function onTimedUpdate(
    e,
    t
  ) {
    if (
      (this._stopCountdownTimer(),
      (this._timeRemaining = utils.JS.isNumber(t)
        ? t
        : e.getSecondsRemaining()),
      this._timeRemaining <= 0)
    ) {
      var i = e.isPendingExpiry()
        ? 'auctioninfo.timeremaining.pending'
        : 'watchlist.dock.categories.expired.condensed';
      DOMKit.removeClass(this.__txtTimeRemaining, 'alarm-txt'),
        (this.__txtTimeRemaining.textContent = services.Localization.localize(
          i
        ));
    } else
      this._updateTimeRemaining(),
        utils.JS.isNumber(t) || this._startCountdownTimer();
  }),
  (views.items.TransferActionPanel.prototype._updateTimeRemaining = function _updateTimeRemaining() {
    DOMKit.toggleClass(
      this.__txtTimeRemaining,
      'alarm-txt',
      this._timeRemaining < 15
    ),
      (this.__txtTimeRemaining.textContent = services.Localization.localizeTimeRemaining(
        this._timeRemaining
      ));
  }),
  (views.items.TransferActionPanel.prototype._startCountdownTimer = function _startCountdownTimer() {
    this._countdownTimer
      ? (this._countdownTimer.reset(),
        this._countdownTimer.setInterval(1e3),
        this._countdownTimer.setWorkFunc(this._updateClientTimer.bind(this)))
      : (this._countdownTimer = new utils.UTTimer(
          1e3,
          this._updateClientTimer.bind(this)
        )),
      this._countdownTimer.start();
  }),
  (views.items.TransferActionPanel.prototype._stopCountdownTimer = function _stopCountdownTimer() {
    this._countdownTimer && this._countdownTimer.reset();
  }),
  (views.items.TransferActionPanel.prototype._updateClientTimer = function _updateClientTimer() {
    this._updateTimeRemaining(),
      0 < this._timeRemaining && this._timeRemaining--;
  }),
  utils.JS.inherits(UTToggleButtonControl, UTButtonControl),
  (UTToggleButtonControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      e.classList.add('ut-toggle-button-control'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTToggleButtonControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTToggleButtonControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTToggleButtonControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTToggleButtonControl.prototype.setChecked = function setChecked(e) {
    var t = this._checked;
    (this._checked = e),
      this._updateText(),
      this.toggleClass('checked', this._checked),
      e !== t && this._triggerActions(enums.Event.CHANGE);
  }),
  (UTToggleButtonControl.prototype.getChecked = function getChecked() {
    return this._checked;
  }),
  (UTToggleButtonControl.prototype.setTextOn = function setTextOn(e) {
    (this._textOn = e), this._updateText();
  }),
  (UTToggleButtonControl.prototype.setTextOff = function setTextOff(e) {
    (this._textOff = e), this._updateText();
  }),
  (UTToggleButtonControl.prototype.setAllText = function setAllText(e) {
    this.setTextOff(e), this.setTextOn(e);
  }),
  (UTToggleButtonControl.prototype._updateText = function _updateText() {
    this.setText(this._checked ? this._textOn : this._textOff);
  }),
  (UTToggleButtonControl.prototype._tapDetected = function _tapDetected(e) {
    this.setChecked(!this._checked), this.superclass();
  }),
  NamespaceManager.Register('views.items'),
  (views.items.AuctionActionPanel = function AuctionActionPanelView() {
    UTView.call(this),
      (this._isOutbid = !1),
      (this._enablePriceComparison = !0),
      Object.defineProperty(this, '_enablePriceComparison', {
        writable: !0,
        enumerable: !1
      }),
      (this.onWatch = new UTObservable()),
      Object.defineProperty(this, 'onWatch', {
        writable: !1
      }),
      (this.onBid = new UTObservable()),
      Object.defineProperty(this, 'onBid', {
        writable: !1
      }),
      (this.onBuyNow = new UTObservable()),
      Object.defineProperty(this, 'onBuyNow', {
        writable: !1
      }),
      (this.onFindRelated = new UTObservable()),
      Object.defineProperty(this, 'onFindRelated', {
        writable: !1
      }),
      (this.onPlayerBio = new UTObservable()),
      Object.defineProperty(this, 'onPlayerBio', {
        writable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.items.AuctionActionPanel, UTView),
  (views.items.AuctionActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('DetailPanel');
      var t = document.createElement('div');
      t.classList.add('ut-item-details--metadata'),
        (this.__viewAuction = document.createElement('div')),
        this.__viewAuction.classList.add('auctionInfo');
      var i = document.createElement('div');
      i.classList.add('column'),
        (this.__timeRemainingTitle = document.createElement('span')),
        this.__timeRemainingTitle.classList.add('subHeading'),
        i.appendChild(this.__timeRemainingTitle),
        (this.__timeRemainingVal = document.createElement('span')),
        this.__timeRemainingVal.classList.add('subContent'),
        i.appendChild(this.__timeRemainingVal),
        this.__viewAuction.appendChild(i),
        (this.__currentBid = document.createElement('div')),
        this.__currentBid.classList.add('currentBid'),
        this.__currentBid.classList.add('column'),
        (this.__currentBidTitle = document.createElement('span')),
        this.__currentBidTitle.classList.add('subHeading'),
        this.__currentBid.appendChild(this.__currentBidTitle),
        (this.__detailCurrentBidVal = document.createElement('span')),
        this.__detailCurrentBidVal.classList.add('currency-coins'),
        this.__detailCurrentBidVal.classList.add('subContent'),
        this.__currentBid.appendChild(this.__detailCurrentBidVal);
      var s = document.createElement('span');
      s.classList.add('currencyArrow'),
        this.__currentBid.appendChild(s),
        this.__viewAuction.appendChild(this.__currentBid);
      var n = document.createElement('div');
      n.classList.add('column'),
        (this._watchButton = new UTToggleButtonControl()),
        this._watchButton.getRootElement().classList.add('watch'),
        n.appendChild(this._watchButton.getRootElement()),
        this.__viewAuction.appendChild(n),
        t.appendChild(this.__viewAuction),
        e.appendChild(t);
      var o = document.createElement('div');
      o.classList.add('bidOptions'),
        (this._bidNumericStepper = new UTNumericInputSpinnerControl()),
        o.appendChild(this._bidNumericStepper.getRootElement()),
        (this._bidButton = new UTStandardButtonControl()),
        this._bidButton.getRootElement().classList.add('call-to-action'),
        this._bidButton.getRootElement().classList.add('bidButton'),
        o.appendChild(this._bidButton.getRootElement()),
        (this._buyNowButton = new UTStandardButtonControl()),
        this._buyNowButton.getRootElement().classList.add('buyButton'),
        o.appendChild(this._buyNowButton.getRootElement()),
        e.appendChild(o);
      var a = document.createElement('div');
      a.classList.add('ut-button-group'),
        (this._playerBioButton = new UTGroupButtonControl()),
        this._playerBioButton.getRootElement().classList.add('more'),
        a.appendChild(this._playerBioButton.getRootElement()),
        (this._findRelatedButton = new UTGroupButtonControl()),
        a.appendChild(this._findRelatedButton.getRootElement()),
        e.appendChild(a),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.AuctionActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__viewAuction = null),
      (this.__timeRemainingTitle = null),
      (this.__timeRemainingVal = null),
      (this.__currentBid = null),
      (this.__currentBidTitle = null),
      (this.__detailCurrentBidVal = null),
      this._watchButton.destroy(),
      this._bidNumericStepper.destroy(),
      this._bidButton.destroy(),
      this._buyNowButton.destroy(),
      this._playerBioButton.destroy(),
      this._findRelatedButton.destroy();
  }),
  (views.items.AuctionActionPanel.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.AuctionActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.AuctionActionPanel.prototype.init = function init() {
    this.superclass(),
      this._bidNumericStepper.init(),
      this._watchButton.addTarget(
        this,
        function(e, t, i) {
          this.setWatchBusyState(!0), this.onWatch.notify();
        },
        enums.Event.TAP
      ),
      this._watchButton.setTextOn(
        services.Localization.localize('button.unwatch')
      ),
      this._watchButton.setTextOff(
        services.Localization.localize('button.watch')
      ),
      this._watchButton.init(),
      this._bidButton.addTarget(
        this,
        function(e, t, i) {
          this.setBidBuyBusyState(!0),
            this.onBid.notify(this._bidNumericStepper.getValue());
        },
        enums.Event.TAP
      ),
      this._bidButton.setText(
        services.Localization.localize('infopanel.button.placebid')
      ),
      this._bidButton.init(),
      this._buyNowButton.addTarget(
        this,
        function(e, t, i) {
          this.setBidBuyBusyState(!0), this.onBuyNow.notify();
        },
        enums.Event.TAP
      ),
      this._buyNowButton.setText(
        services.Localization.localize('infopanel.label.buynow')
      ),
      this._buyNowButton.init(),
      this._findRelatedButton.addTarget(
        this,
        function(e, t, i) {
          this.onFindRelated.notify();
        },
        enums.Event.TAP
      ),
      this._findRelatedButton.setText(
        services.Localization.localize('infopanel.label.findallitems')
      ),
      this._findRelatedButton.init(),
      this._playerBioButton.addTarget(
        this,
        function(e, t, i) {
          this.onPlayerBio.notify();
        },
        enums.Event.TAP
      ),
      this._playerBioButton.setText(
        services.Localization.localize('extendedPlayerInfo.general.playerBio')
      ),
      this._playerBioButton.init(),
      (this.__timeRemainingTitle.textContent = services.Localization.localize(
        'auctioninfo.timeremaining'
      ));
  }),
  (views.items.AuctionActionPanel.prototype.dealloc = function dealloc() {
    this.onWatch.dealloc(),
      this.onBid.dealloc(),
      this.onBuyNow.dealloc(),
      this.onFindRelated.dealloc(),
      this.onPlayerBio.dealloc(),
      this.superclass();
  }),
  (views.items.AuctionActionPanel.prototype.enablePriceComparison = function enablePriceComparison(
    e
  ) {
    this._enablePriceComparison = !!e;
  }),
  (views.items.AuctionActionPanel.prototype.togglePlayerBio = function togglePlayerBio(
    e
  ) {
    this._playerBioButton.setDisplay(e);
  }),
  (views.items.AuctionActionPanel.prototype.toggleBuyNow = function toggleBuyNow(
    e
  ) {
    0 < e
      ? (this._buyNowButton.setText(
          services.Localization.localize('infopanel.label.buynowfor', [
            services.Localization.localizeNumber(e)
          ])
        ),
        this._buyNowButton.setDisplay(!0),
        this._buyNowButton.addClass('currency-coins'))
      : (this._buyNowButton.setDisplay(!1),
        this._buyNowButton.removeClass('currency-coins'));
  }),
  (views.items.AuctionActionPanel.prototype.toggleWatchedState = function toggleWatchedState(
    e
  ) {
    this._watchButton.setChecked(e);
  }),
  (views.items.AuctionActionPanel.prototype.setBidLimits = function setBidLimits(
    e,
    t
  ) {
    this._bidNumericStepper.setLimits(e, t);
  }),
  (views.items.AuctionActionPanel.prototype.getMinBidFromAuction = function getMinBidFromAuction(
    e
  ) {
    var t = UTCurrencyInputControl.getIncrementAboveVal(e.currentBid);
    return 0 < e.currentBid ? t : e.startingBid;
  }),
  (views.items.AuctionActionPanel.prototype.getMaxBidFromAuction = function getMaxBidFromAuction(
    e
  ) {
    var t = UTCurrencyInputControl.getIncrementBelowVal(e.buyNowPrice),
      i = 0 < e.buyNowPrice ? t : AUCTION_MAX_BID;
    return Math.max(i, this.getMinBidFromAuction(e));
  }),
  (views.items.AuctionActionPanel.prototype.render = function render(e, t) {
    var i = e.getAuctionData(),
      s =
        0 < i.currentBid
          ? UTCurrencyInputControl.getIncrementAboveVal(i.currentBid)
          : i.startingBid,
      n = i.canBid(s, t);
    this._findRelatedButton.setDisplay(this._enablePriceComparison),
      this.togglePlayerBio(e.isPlayer()),
      this.toggleBuyNow(i.buyNowPrice),
      this.toggleWatchedState(i.watched),
      this.setBidLimits(
        this.getMinBidFromAuction(i),
        this.getMaxBidFromAuction(i)
      ),
      this.setCurrentBidText(i),
      this._watchButton.setInteractionState(i.canWatch() || i.watched),
      this._buyNowButton.setInteractionState(i.canBuy(t)),
      this._bidButton.setInteractionState(n),
      this._bidNumericStepper.setInteractionState(n),
      this.onTimedUpdate(i);
  }),
  (views.items.AuctionActionPanel.prototype.setCurrentBidText = function setCurrentBidText(
    e
  ) {
    var t = e.currentBid,
      i = e.startingBid,
      s = i <= t ? t : i,
      n = '';
    (n =
      i <= t
        ? e.isActiveTrade()
          ? 'auctioninfo.currentbid'
          : 'auctioninfo.finalprice'
        : 'auctioninfo.startprice'),
      (this.__currentBidTitle.textContent = services.Localization.localize(n)),
      (this.__detailCurrentBidVal.textContent = services.Localization.localizeNumber(
        s
      ));
  }),
  (views.items.AuctionActionPanel.prototype.onTimedUpdate = function onTimedUpdate(
    e,
    t
  ) {
    !this._isOutbid && e.isOutbid() && this.performOutbidAnimation(),
      (this._isOutbid = e.isOutbid());
    var i = '',
      s = utils.JS.isNumber(t) ? t : e.getSecondsRemaining();
    s <= 0
      ? ((i = services.Localization.localize(
          e.isPendingExpiry()
            ? 'auctioninfo.timeremaining.pending'
            : 'watchlist.dock.categories.expired.condensed'
        )),
        this._watchButton.setInteractionState(e.watched),
        this._buyNowButton.setInteractionState(!1),
        this._bidButton.setInteractionState(!1),
        this._bidNumericStepper.setInteractionState(!1))
      : (i =
          s > AUCTION_COUNTDOWN_THRESHOLD
            ? services.Localization.localizeAuctionTimeRemaining(s)
            : services.Localization.localizeTimeRemaining(s)),
      (this.__timeRemainingVal.textContent = i),
      0 < s && s < AUCTION_COUNTDOWN_FLASING_THRESHOLD
        ? (DOMKit.addClass(this.__timeRemainingVal, 'alarm-txt'),
          s <= AUCTION_COUNTDOWN_ALERT_THRESHOLD &&
            DOMKit.addClass(this.__timeRemainingVal, 'expiring'))
        : DOMKit.removeClass(this.__timeRemainingVal, 'expiring alarm-txt'),
      0 < s &&
        (this.setBidLimits(
          this.getMinBidFromAuction(e),
          this.getMaxBidFromAuction(e)
        ),
        this.setCurrentBidText(e));
  }),
  (views.items.AuctionActionPanel.prototype.setBidBusyState = function setBidBusyState(
    e
  ) {
    this._bidButton.setInteractionState(!e);
  }),
  (views.items.AuctionActionPanel.prototype.setBuyBusyState = function setBuyBusyState(
    e
  ) {
    this._buyNowButton.setInteractionState(!e);
  }),
  (views.items.AuctionActionPanel.prototype.setBidBuyBusyState = function setBidBuyBusyState(
    e
  ) {
    this.setBidBusyState(e), this.setBuyBusyState(e);
  }),
  (views.items.AuctionActionPanel.prototype.setWatchBusyState = function setWatchBusyState(
    e
  ) {
    this._watchButton.setInteractionState(!e);
  }),
  (views.items.AuctionActionPanel.prototype._performBidAnimation = function _performBidAnimation(
    e
  ) {
    requestAnimationFrame(
      function _addBidAnimationClass() {
        this.__currentBid.classList.add(e),
          setTimeout(
            function _removeBidAnimationClass() {
              this.__currentBid && this.__currentBid.classList.remove(e);
            }.bind(this),
            3e3
          );
      }.bind(this)
    );
  }),
  (views.items.AuctionActionPanel.prototype.performOutbidAnimation = function performOutbidAnimation() {
    this._performBidAnimation('currencyIncreaseRed');
  }),
  (views.items.AuctionActionPanel.prototype.performBidIncreaseAnimation = function performBidIncreaseAnimation() {
    this._performBidAnimation('currencyIncrease');
  }),
  NamespaceManager.Register('controllers.items'),
  (controllers.items.ItemDetails = function ItemDetailsViewController() {
    UTViewController.call(this),
      (this._panel = null),
      Object.defineProperty(this, '_panel', {
        writable: !0,
        enumerable: !1
      }),
      (this._quickListPanel = new controllers.views.QuickListPanel()),
      Object.defineProperty(this, '_quickListPanel', {
        writable: !0,
        enumerable: !1
      }),
      (this._viewmodel = null),
      Object.defineProperty(this, '_viewmodel', {
        writable: !0,
        enumerable: !1
      }),
      (this._squadContext = null),
      Object.defineProperty(this, '_squadContext', {
        writable: !0,
        enumerable: !1
      }),
      (this._currentSquad = null),
      Object.defineProperty(this, '_currentSquad', {
        writable: !0,
        enumerable: !1
      }),
      (this._currentAuction = null),
      Object.defineProperty(this, '_currentAuction', {
        writable: !0,
        enumerable: !1
      }),
      (this._requestedBid = 0),
      Object.defineProperty(this, '_requestedBid', {
        writable: !0,
        enumerable: !1
      }),
      (this._panelSwiping = !0),
      Object.defineProperty(this, '_panelSwiping', {
        writable: !0,
        enumerable: !1
      }),
      (this._clientCountdownTimer = null),
      Object.defineProperty(this, '_clientCountdownTimer', {
        writable: !0,
        enumerable: !1
      }),
      (this._clientCountdownAuctionId = '0'),
      Object.defineProperty(this, '_clientCountdownAuctionId', {
        writable: !0,
        enumerable: !1
      }),
      (this._clientCountdown = -1),
      Object.defineProperty(this, '_clientCountdown', {
        writable: !0,
        enumerable: !1
      }),
      (this._enablePriceComparison = !0),
      Object.defineProperty(this, '_enablePriceComparison', {
        writable: !0,
        enumerable: !1
      });
  }),
  utils.JS.inherits(controllers.items.ItemDetails, UTViewController),
  (controllers.items.ItemDetails.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        this._quickListPanel.init(),
        this.getView().addTarget(
          this,
          this._eIndexChange,
          views.items.ItemDetails.Event.INDEX_CHANGE
        );
      var e = getDefaultDispatcher();
      e.addObserver(enums.Notification.ITEM_LIST, this, this._nItemListed),
        e.addObserver(enums.Notification.ITEM_MOVE, this, this._nItemMoved);
    }
  }),
  (controllers.items.ItemDetails.prototype.initWithIterator = function initWithIterator(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof UTIterator,
        'Initialization expected an instance of UTIterator.'
      ),
      (this._viewmodel = e),
      this.init());
  }),
  (controllers.items.ItemDetails.prototype.setSquadContext = function setSquadContext(
    e
  ) {
    utils.Debug.Assert(
      e instanceof UTSquadMarketSearchViewModel,
      'Initialization expected an instance of UTSquadMarketSearchViewModel.'
    ),
      (this._squadContext = e);
  }),
  (controllers.items.ItemDetails.prototype.dealloc = function dealloc() {
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.ITEM_LIST, this),
      e.removeObserver(enums.Notification.ITEM_MOVE, this),
      (this._viewmodel = null),
      this._panel && (this._panel.dealloc(), (this._panel = null)),
      this._quickListPanel.dealloc(),
      this.superclass();
  }),
  (controllers.items.ItemDetails.prototype.enableSwiping = function enableSwiping(
    e
  ) {
    this._panelSwiping = e;
  }),
  (controllers.items.ItemDetails.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Item - Detail View';
  }),
  (controllers.items.ItemDetails.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.detailView');
  }),
  (controllers.items.ItemDetails.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.ItemDetails();
  }),
  (controllers.items.ItemDetails.prototype._getPanelViewInstanceFromData = function _getPanelViewInstanceFromData(
    e,
    t
  ) {
    this._panel && this._panel.dealloc();
    var i = services.User.getUser(),
      s = e.getAuctionData();
    if (e.isDuplicateLoanPlayer())
      (this._panel = new views.items.DuplicateLoanActionPanel()),
        this._panel.init(),
        this._panel.render(e),
        this._panel.onPlayerBio.observe(this, this._onPlayerBio),
        this._panel.onDiscard.observe(this, this._onCombineLoans);
    else if ((s.isSelling() && s.isActiveTrade()) || s.isSold())
      (this._panel = new views.items.TransferActionPanel()),
        this._panel.init(),
        this._panel.render(e),
        this._panel.onClearSold.observe(this, this._onClearSold),
        this._panel.onPlayerBio.observe(this, this._onPlayerBio);
    else if (!s.isValid() || s.isWon() || s.tradeOwner) {
      var n =
          services.Configuration.checkFeatureEnabled(
            enums.ServerFeature.TRADING_ENABLED
          ) &&
          !gConfigurationModel.getConfigBoolean(
            models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET
          ) &&
          i.hasTradeAccess(),
        o = repositories.Item.isPileFull(enums.FUTItemPile.TRANSFER);
      if (
        ((this._panel = new views.items.DefaultActionPanel()),
        this._panel.init(),
        this._panel.render(
          e,
          t,
          o,
          !this._squadContext || this._squadContext.isActiveSquad()
        ),
        this._panel.addTarget(
          this,
          this._onDiscard,
          enums.UIItemActionEvent.DISCARD
        ),
        this._panel.addTarget(
          this,
          this._onMove,
          enums.UIItemActionEvent.SEND_TO_CLUB
        ),
        this._panel.addTarget(
          this,
          this._onMove,
          enums.UIItemActionEvent.SEND_TO_TRANSFERS
        ),
        this._panel.addTarget(
          this,
          this._onCompare,
          enums.UIItemActionEvent.COMPARE
        ),
        this._panel.addTarget(
          this,
          this._onRedeem,
          enums.UIItemActionEvent.REDEEM
        ),
        this._panel.addTarget(
          this,
          this._onApply,
          enums.UIItemActionEvent.APPLY_CONSUMABLE
        ),
        this._panel.addTarget(
          this,
          this._onActivate,
          enums.UIItemActionEvent.ACTIVATE
        ),
        this._panel.addTarget(
          this,
          this._onSendToSquad,
          enums.UIItemActionEvent.SEND_TO_SQUAD
        ),
        this._panel.addTarget(
          this,
          this._onPlayerBio,
          enums.UIItemActionEvent.BIO
        ),
        n &&
          !e.untradeable &&
          !e.isActiveClubItem() &&
          !e.isInjured() &&
          !e.isPlayerPickItem() &&
          (!o || e.pile === enums.FUTItemPile.TRANSFER) &&
          e.isValid())
      ) {
        var a,
          r = this._quickListPanel.getView();
        (a = s.isExpired()
          ? 'infopanel.label.relistitem'
          : 'infopanel.label.quickList'),
          r.setTitle(services.Localization.localize(a)),
          r.close(),
          this._panel.appendQuickList(r);
      }
    } else
      (this._panel = new views.items.AuctionActionPanel()),
        this._panel.init(),
        this._panel.enablePriceComparison(this._enablePriceComparison),
        this._panel.render(e, i.getCurrency(enums.Currency.COINS).amount),
        this._panel.onWatch.observe(this, this._onWatch),
        this._panel.onBid.observe(this, this._onBid),
        this._panel.onBuyNow.observe(this, this._onBuyNow),
        this._panel.onFindRelated.observe(this, this._onFindRelated),
        this._panel.onPlayerBio.observe(this, this._onPlayerBio);
  }),
  (controllers.items.ItemDetails.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    e && e.toggleCarouselSwiping(this._panelSwiping),
      services.Squad.requestSquadByType(enums.UserSquadId.ACTIVE).observe(
        this,
        function(e, t) {
          if (
            (e.unobserve(this),
            t.success && (this._currentSquad = t.data.squad),
            this.isViewDisplayed() &&
              (this._renderView(), this._refreshPanel()),
            this._viewmodel)
          ) {
            var i = this._viewmodel.current();
            isPhone() &&
              i.isClubConsumable() &&
              0 === i.stackCount &&
              this._handleRemove([i.id]),
              this._viewmodel.conforms(interfaces.AuctionUpdater) &&
                this._viewmodel.startAuctionUpdates();
          }
        }
      );
  }),
  (controllers.items.ItemDetails.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass();
    var e = this.getView();
    e.resetItems(),
      e.destroyCarousel(),
      this._viewmodel &&
        this._viewmodel.conforms(interfaces.AuctionUpdater) &&
        this._viewmodel.stopAuctionUpdates(),
      this._stopClientTimer(),
      this._currentAuction &&
        (this._currentAuction.onDataUpdated.unobserve(this),
        (this._currentAuction = null));
  }),
  (controllers.items.ItemDetails.prototype.didDismiss = function didDismiss(e) {
    this.superclass(),
      e instanceof UTPlayerPicksViewController &&
        e.isPendingSelectionContext() &&
        !services.User.getUser().hasPlayerPicksPending &&
        services.Item.redeem(this._viewmodel.current()).observe(
          this,
          this._eRedeemComplete
        ),
      e.dealloc();
  }),
  (controllers.items.ItemDetails.prototype.enablePriceComparison = function enablePriceComparison(
    e
  ) {
    (this._enablePriceComparison = !!e),
      this._panel &&
        this._panel instanceof views.items.AuctionActionPanel &&
        (this._panel.enablePriceComparison(this._enablePriceComparison),
        this._refreshPanel());
  }),
  (controllers.items.ItemDetails.prototype._getViewIteratorItems = function _getViewIteratorItems() {
    return this._viewmodel instanceof viewmodels.PaginatedItemList
      ? this._viewmodel.getPageItems()
      : this._viewmodel.values();
  }),
  (controllers.items.ItemDetails.prototype._getViewIteratorIndex = function _getViewIteratorIndex() {
    return this._viewmodel instanceof viewmodels.PaginatedItemList
      ? this._viewmodel.getPageIndex()
      : this._viewmodel.getIndex();
  }),
  (controllers.items.ItemDetails.prototype._setViewIteratorIndex = function _setViewIteratorIndex(
    e
  ) {
    this._viewmodel instanceof viewmodels.PaginatedItemList &&
      (e =
        this._viewmodel.numItemsPerPage *
          (this._viewmodel.getCurrentPage() - 1) +
        e),
      this._viewmodel.setIndex(e);
  }),
  (controllers.items.ItemDetails.prototype._renderView = function _renderView() {
    var e = this._viewmodel.current();
    this._refreshView(), this._renderPanel(e);
  }),
  (controllers.items.ItemDetails.prototype._refreshView = function _refreshView() {
    this.isViewDisplayed() &&
      this.getView().render(
        this._getViewIteratorItems(),
        this._getViewIteratorIndex()
      );
  }),
  (controllers.items.ItemDetails.prototype._renderPanel = function _renderPanel(
    e
  ) {
    this._currentAuction && this._currentAuction.onDataUpdated.unobserve(this),
      (this._currentAuction = e.getAuctionData()),
      this._currentAuction.onDataUpdated.observe(this, this._onTimedUpdate),
      this._getPanelViewInstanceFromData(
        e,
        this._squadContext ? this._squadContext.getSquad() : this._currentSquad
      ),
      this._quickListPanel.setItem(e),
      this._appendPanel(),
      (this._panel instanceof views.items.AuctionActionPanel ||
        this._panel instanceof views.items.TransferActionPanel) &&
        this._currentAuction.getSecondsRemaining() <=
          AUCTION_COUNTDOWN_THRESHOLD &&
        this._startClientTimer();
  }),
  (controllers.items.ItemDetails.prototype._refreshPanel = function _refreshPanel() {
    var e = services.User.getUser(),
      t = this._viewmodel.current();
    this._panel.conforms(views.items.AuctionActionPanel)
      ? this._panel.render(t, e.getCurrency(enums.Currency.COINS).amount)
      : this._panel.conforms(views.items.DefaultActionPanel)
      ? this._panel.render(
          t,
          this._squadContext
            ? this._squadContext.getSquad()
            : this._currentSquad,
          repositories.Item.isPileFull(enums.FUTItemPile.TRANSFER),
          !this._squadContext || this._squadContext.isActiveSquad()
        )
      : this._panel.render(t);
  }),
  (controllers.items.ItemDetails.prototype._appendPanel = function _appendPanel() {
    this.getView().appendPanel(this._panel);
  }),
  (controllers.items.ItemDetails.prototype._eIndexChange = function _eIndexChange(
    e,
    t,
    i
  ) {
    i.index !== this._getViewIteratorIndex() &&
      (this._setViewIteratorIndex(i.index),
      this._renderPanel(this._viewmodel.current()));
  }),
  (controllers.items.ItemDetails.prototype.onIndexChange = function onIndexChange(
    e
  ) {
    this._renderView();
  }),
  (controllers.items.ItemDetails.prototype.onPageChange = function onPageChange() {
    this.getView().resetItems();
  }),
  (controllers.items.ItemDetails.prototype._onBid = function _onBid(e, t) {
    var i = this._panel,
      s = this._viewmodel.current().getAuctionData();
    (this._requestedBid = t),
      0 < s.getSecondsRemaining() &&
        (repositories.Item.isPileFull(enums.FUTItemPile.INBOX) && !s.watched
          ? (utils.PopupManager.ShowAlert(
              utils.PopupManager.Alerts.WATCH_LIST_FULL
            ),
            i.setBidBuyBusyState(!1))
          : this._requestedBid < s.currentBid ||
            this._requestedBid < s.startingBid
          ? (utils.PopupManager.ShowAlert(
              utils.PopupManager.Alerts.BID_TOO_LOW
            ),
            i.setBidBuyBusyState(!1))
          : s.isHighestBid()
          ? utils.PopupManager.ShowConfirmation(
              utils.PopupManager.Confirmations.BID_WHEN_HIGHEST_BIDDER,
              null,
              this._eBidConfirmed.bind(this),
              this._eBidCancelled.bind(this)
            )
          : this._eBidConfirmed());
  }),
  (controllers.items.ItemDetails.prototype._eBidConfirmed = function _eBidConfirmed() {
    var n = this._viewmodel.current(),
      o = this._panel;
    utils.JS.isNumber(this._requestedBid) && 0 < this._requestedBid
      ? services.Item.bid(n, this._requestedBid).observe(
          this,
          function _eBidComplete(e, t) {
            e.unobserve(this);
            var i = n.getAuctionData();
            if (t.success) {
              if (
                (i.isWon()
                  ? this._renderView()
                  : (i.isHighestBid() && o.performBidIncreaseAnimation(),
                    this._refreshView(),
                    this._refreshPanel()),
                this._squadContext)
              ) {
                var s =
                  'Squad Slot Detail View - SOTM ' +
                  (i.isWon() ? 'Buy Now' : 'Bid');
                TelemetryManager.trackEvent(
                  TelemetryManager.Sections.AUCTIONS,
                  TelemetryManager.Categories.BUTTON_PRESS,
                  s
                );
              }
            } else if (t.status === enums.HTTPStatusCode.LOCKED_TRANSFER_MARKET)
              this.getNavigationController().popToRootViewController();
            else if (NetworkErrorManager.checkCriticalStatus(t.status))
              NetworkErrorManager.handleStatus(t.status);
            else {
              switch (t.status) {
                case enums.HTTPStatusCode.PERMISSION_DENIED:
                  services.Notification.queue([
                    services.Localization.localize(
                      'popup.error.item.bidDenied'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]);
                  break;
                case enums.HTTPStatusCode.RATE_LIMIT:
                  services.Notification.queue([
                    services.Localization.localize('popup.error.RateLimitBody'),
                    enums.UINotificationType.NEGATIVE
                  ]);
                  break;
                case enums.HTTPStatusCode.STATE_INVALID:
                case enums.HTTPStatusCode.NO_TRADE_EXISTS:
                  services.Notification.queue([
                    services.Localization.localize(
                      'popup.error.item.InvalidState'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]);
                  break;
                case enums.HTTPStatusCode.NO_BID_TOKENS:
                  services.Notification.queue([
                    services.Localization.localize(
                      'popup.error.tradetoken.NoBidTokens'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]);
                  break;
                case enums.HTTPStatusCode.INVALID_OWNER:
                  services.Notification.queue([
                    services.Localization.localize(
                      'popup.error.tradetoken.BidYourCard'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]);
                  break;
                case enums.HTTPStatusCode.CARD_IN_TRADE:
                  services.Notification.queue([
                    services.Localization.localize(
                      'popup.error.tradetoken.ItemInTradeOffer'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]);
                  break;
                case enums.HTTPStatusCode.NOT_ENOUGH_CREDIT:
                  services.Notification.queue([
                    services.Localization.localize(
                      'popup.error.auctionInsufficientCoins'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]);
                  break;
                case enums.HTTPStatusCode.SERVICE_IS_DISABLED:
                  services.Notification.queue([
                    services.Localization.localize(
                      'popup.error.auctioninfo.tradingdisabled'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]);
              }
              o.setBidBuyBusyState(!1);
            }
          }
        )
      : o.setBidBuyBusyState(!1);
  }),
  (controllers.items.ItemDetails.prototype._eBidCancelled = function _eBidCancelled() {
    var e = this._viewmodel.current().getAuctionData(),
      t =
        0 < e.currentBid
          ? UTCurrencyInputControl.getIncrementAboveVal(e.currentBid)
          : e.startingBid,
      i = services.User.getUser().getCurrency(enums.Currency.COINS).amount,
      s = e.canBid(t, i);
    this._panel.setBuyBusyState(!e.canBuy(i)), this._panel.setBidBusyState(!s);
  }),
  (controllers.items.ItemDetails.prototype._onBuyNow = function _onBuyNow(e) {
    var t = services.User.getUser(),
      i = this._viewmodel.current().getAuctionData(),
      s = i.buyNowPrice;
    (this._requestedBid = s),
      0 < i.getSecondsRemaining() &&
        (repositories.Item.numItemsInCache(enums.FUTItemPile.PURCHASED) >=
        MAX_NEW_ITEMS
          ? utils.PopupManager.ShowConfirmation(
              utils.PopupManager.Confirmations.NEW_ITEMS_FULL,
              null,
              this._goToUnassigned.bind(this),
              this._eBidCancelled.bind(this)
            )
          : i.canBuy(t.getCurrency(enums.Currency.COINS).amount)
          ? utils.PopupManager.ShowConfirmation(
              utils.PopupManager.Confirmations.CONFIRM_BUY_NOW,
              [services.Localization.localizeNumber(s)],
              this._eBidConfirmed.bind(this),
              this._eBidCancelled.bind(this)
            )
          : (services.Notification.queue([
              services.Localization.localize(
                'popup.error.auctionInsufficientCoins'
              ),
              enums.UINotificationType.NEGATIVE
            ]),
            this._eBidCancelled()));
  }),
  (controllers.items.ItemDetails.prototype._onCombineLoans = function _onCombineLoans(
    e
  ) {
    services.Item.combineLoans(this._viewmodel.current()).observe(
      this,
      function _eCombineLoansComplete(e, t) {
        e.unobserve(this),
          t.success
            ? this._handleRemove(t.data.itemIds)
            : services.Notification.queue([
                services.Localization.localize(
                  'notification.error.item.combineLoans'
                ),
                enums.UINotificationType.NEGATIVE
              ]);
      }
    );
  }),
  (controllers.items.ItemDetails.prototype._onDiscard = function _onDiscard(
    e,
    t,
    i
  ) {
    var s = this._viewmodel.current();
    if (s.isConsumable()) {
      var n = new controllers.views.popups.QuickSell(
        s.stackCount,
        s.untradeableCount,
        s.discardValue
      );
      n.onConfirm.observe(this, this._onDiscardConfirmConsumable),
        gPopupClickShield.setActivePopup(n);
    } else
      utils.PopupManager.ShowConfirmation(
        utils.PopupManager.Confirmations.CONFIRM_DISCARD,
        [services.Localization.localizeNumber(s.discardValue)],
        this._onDiscardConfirm.bind(this)
      );
  }),
  (controllers.items.ItemDetails.prototype._onDiscardConfirmConsumable = function _onDiscardConfirmConsumable(
    e,
    t
  ) {
    services.Item.discard(this._viewmodel.current(), t).observe(
      this,
      function _eDiscardComplete(e, t) {
        e.unobserve(this),
          t.success
            ? this._handleRemove(t.data.itemIds)
            : services.Notification.queue([
                services.Localization.localize(
                  'notification.error.item.discard'
                ),
                enums.UINotificationType.NEGATIVE
              ]);
      }
    );
  }),
  (controllers.items.ItemDetails.prototype._onDiscardConfirm = function _onDiscardConfirm() {
    services.Item.discard(this._viewmodel.current()).observe(
      this,
      function _eDiscardComplete(e, t) {
        e.unobserve(this),
          t.success
            ? this._handleRemove(t.data.itemIds)
            : services.Notification.queue([
                services.Localization.localize(
                  'notification.error.item.discard'
                ),
                enums.UINotificationType.NEGATIVE
              ]);
      }
    );
  }),
  (controllers.items.ItemDetails.prototype._onMove = function _onMove(e, t, i) {
    var s = this._viewmodel.current(),
      n =
        t === enums.UIItemActionEvent.SEND_TO_TRANSFERS
          ? enums.FUTItemPile.TRANSFER
          : enums.FUTItemPile.CLUB;
    services.Item.move(s, n).observe(this, function _eMoveComplete(e, t) {
      if ((e.unobserve(this), t.success)) {
        var i = '';
        (i =
          n === enums.FUTItemPile.TRANSFER
            ? s.isManager()
              ? services.Localization.localize(
                  'notification.manager.toTradePile'
                )
              : s.isPlayer()
              ? services.Localization.localize(
                  'notification.player.toTradePile'
                )
              : services.Localization.localize(
                  'notification.item.oneToTradePile'
                )
            : services.Localization.localize('notification.item.oneToClub')),
          services.Notification.queue([i, enums.UINotificationType.NEUTRAL]),
          this._handleItemMove(t.data.itemIds, t.data.clubDuplicates);
      } else services.Notification.queue([services.Localization.localize('notification.item.moveFailed'), enums.UINotificationType.NEGATIVE]), NetworkErrorManager.handleStatus(t.status);
    });
  }),
  (controllers.items.ItemDetails.prototype._nItemMoved = function _nItemMoved(
    e,
    t,
    i
  ) {
    this._viewmodel &&
      0 < this._viewmodel.length &&
      (1 === i.itemIds.length
        ? this._handleItemMove(i.itemIds, i.clubDuplicates)
        : this._renderView());
  }),
  (controllers.items.ItemDetails.prototype._handleItemMove = function _handleItemMove(
    e,
    t
  ) {
    var i = this._viewmodel.current(),
      s = i.isConsumable();
    if (-1 < e.indexOf(i.id) || (s && 0 === i.stackCount)) {
      var n = this.getNavigationController(),
        o = this._viewmodel.getIndex(),
        a = utils.JS.find(t, function(e) {
          return e.id === i.duplicateId;
        });
      this._viewmodel.remove(o),
        this._viewmodel.values().forEach(function(e) {
          e.compareResourceTo(i, !0) &&
            i.pile === enums.FUTItemPile.CLUB &&
            (e.duplicateId = i.id);
        }),
        a && (this._viewmodel.add(a, o), this._setViewIteratorIndex(o)),
        0 < this._viewmodel.length
          ? (utils.JS.isValid(a) ||
              this._renderPanel(this._viewmodel.current()),
            this._renderView())
          : n &&
            n.getCurrentController() !== n.getRootController() &&
            n.popViewController();
    } else s && 0 < i.stackCount && this._refreshConsumable(i);
  }),
  (controllers.items.ItemDetails.prototype._onCompare = function _onCompare(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController();
    if (s) {
      var n = new UTMarketSearchResultsViewController(),
        o = new transferobjects.SearchCriteria(),
        a = this._viewmodel.current();
      services.Item.clearTransferMarketCache(),
        a
          ? ((o.defId = [a.getDefId()]),
            (o.type = a.getSearchType()),
            n.initWithSearchCriteria(o),
            n.setPinnedItem(a))
          : n.initWithSearchCriteria(o),
        s.pushViewController(n, !0);
    }
  }),
  (controllers.items.ItemDetails.prototype._onRedeem = function _onRedeem(
    e,
    t,
    i
  ) {
    var s = this._viewmodel.current();
    s.isPlayerPickItem() && services.User.getUser().hasPlayerPicksPending
      ? services.Item.requestPendingPlayerPickItemSelection().observe(
          this,
          function(e, t) {
            e.unobserve(this),
              t.success
                ? this._showPlayerPicks(t.data.items, !0)
                : NetworkErrorManager.handleStatus(t.status);
          }
        )
      : services.Item.redeem(s).observe(this, this._eRedeemComplete);
  }),
  (controllers.items.ItemDetails.prototype._eRedeemComplete = function _eRedeemComplete(
    e,
    t
  ) {
    e.unobserve(this),
      t.success
        ? (this._viewmodel.current().isPlayerPickItem() &&
            this._showPlayerPicks(t.data.playerPicks),
          this._handleRemove(t.data.itemIds))
        : NetworkErrorManager.handleStatus(t.status);
  }),
  (controllers.items.ItemDetails.prototype._nItemListed = function _nItemListed(
    e,
    t,
    i
  ) {
    this._viewmodel.current() &&
      -1 < i.itemIds.indexOf(this._viewmodel.current().id) &&
      this._renderView();
  }),
  (controllers.items.ItemDetails.prototype._onClearSold = function _onClearSold(
    e
  ) {
    services.Item.clearSoldItems(this._viewmodel.current()).observe(
      this,
      function _eClearSoldComplete(e, t) {
        e.unobserve(this), t.success && this._handleRemove(t.data.itemIds);
      }
    );
  }),
  (controllers.items.ItemDetails.prototype._onActivate = function _onActivate(
    e,
    t
  ) {
    var i = this._viewmodel.current();

    function _eActivateComplete(e, t) {
      e.unobserve(this),
        t.success &&
          (this._refreshView(),
          this._refreshPanel(),
          this._panel.removeQuickList());
    }
    if (i.isKit()) {
      var s = new controllers.views.popups.ChangeKit();
      s.setItem(i),
        s.onKitSelected.observe(this, function _eKitTypeSelectComplete(e, t) {
          e.unobserve(this),
            services.Item.activate(i, t).observe(this, _eActivateComplete);
        }),
        gPopupClickShield.setActivePopup(s);
    } else services.Item.activate(i).observe(this, _eActivateComplete);
  }),
  (controllers.items.ItemDetails.prototype._onSendToSquad = function _onSendToSquad(
    e
  ) {
    var t = this._viewmodel.current();

    function _saveSquad(s) {
      function _saveManagerToSquad(i) {
        i.addItemToSlot(entities.Squad.MANAGER_SLOT_INDEX, t),
          i.save().observe(this, function(e, t) {
            e.unobserve(this),
              t.success &&
                ((this._currentSquad = i),
                s && this._refreshPanel(),
                services.Notification.queue([
                  services.Localization.localize(
                    'notification.item.toActiveSquad'
                  ),
                  enums.UINotificationType.NEUTRAL
                ]));
          });
      }
      this._squadContext
        ? _saveManagerToSquad.call(this, this._squadContext.getSquad())
        : services.Squad.requestSquadByType(enums.UserSquadId.ACTIVE).observe(
            this,
            function(e, t) {
              e.unobserve(this),
                t.success && _saveManagerToSquad.call(this, t.data.squad);
            }
          );
    }
    t.isPlayer()
      ? this._gotoSendToSquadFlow()
      : t.isManager() &&
        (t.pile !== enums.FUTItemPile.CLUB
          ? services.Item.move(t, enums.FUTItemPile.CLUB).observe(
              this,
              function _eSquadMoveComplete(e, t) {
                e.unobserve(this),
                  t.success
                    ? (this._handleItemMove(
                        t.data.itemIds,
                        t.data.clubDuplicates
                      ),
                      _saveSquad.call(this, !1))
                    : (services.Notification.queue([
                        services.Localization.localize(
                          'notification.item.toActiveSquadFailed'
                        ),
                        enums.UINotificationType.NEGATIVE
                      ]),
                      NetworkErrorManager.handleStatus(t.status));
              }
            )
          : _saveSquad.call(this, !0));
  }),
  (controllers.items.ItemDetails.prototype._onApply = function _onApply(e) {
    var s = this._viewmodel.current();
    s.isTeamFitness()
      ? utils.PopupManager.ShowConfirmation(
          utils.PopupManager.Confirmations.APPLY_CONSUMABLE,
          null,
          function _applyTeamFitness() {
            services.Squad.requestSquadByType(enums.UserSquadId.ACTIVE).observe(
              this,
              function(e, t) {
                var i;
                e.unobserve(this),
                  0 <
                  (i = t.success
                    ? t.data.squad.getPlayers().reduce(function(e, t) {
                        var i = t.getItem();
                        return t.isValid() && i.fitness < 99 && e.push(i), e;
                      }, [])
                    : []).length
                    ? services.Item.applyTo(s, i).observe(this, function(e, t) {
                        e.unobserve(this),
                          t.success && this._handleRemove([s.id]);
                      })
                    : services.Notification.queue([
                        services.Localization.localize(
                          'notification.item.unableToApplySquadFitnessConsumable'
                        ),
                        enums.UINotificationType.NEGATIVE
                      ]);
              }
            );
          }.bind(this),
          null
        )
      : this._gotoApplyConsumableFlow();
  }),
  (controllers.items.ItemDetails.prototype._onWatch = function _onWatch(e) {
    var t = this._viewmodel.current().getAuctionData();
    t.watched
      ? t.isHighestBid()
        ? (utils.PopupManager.ShowAlert(
            utils.PopupManager.Alerts.CANT_UNWATCH_ACTIVE_BID
          ),
          this._panel.setWatchBusyState(!1),
          this._panel.toggleWatchedState(!0))
        : this._onUnwatchAction()
      : repositories.Item.isPileFull(enums.FUTItemPile.INBOX)
      ? (utils.PopupManager.ShowAlert(
          utils.PopupManager.Alerts.WATCH_LIST_FULL
        ),
        this._panel.setWatchBusyState(!1),
        this._panel.toggleWatchedState(!0))
      : this._onWatchAction();
  }),
  (controllers.items.ItemDetails.prototype._onWatchAction = function _onWatchAction() {
    var s = this._viewmodel.current();
    services.Item.target(s).observe(this, function(e, t) {
      e.unobserve(this);
      var i = this._panel;
      i.toggleWatchedState(s.getAuctionData().watched),
        i.setWatchBusyState(!1),
        t.success
          ? services.Notification.queue([
              services.Localization.localize('notification.item.watched'),
              enums.UINotificationType.NEUTRAL
            ])
          : t.status === enums.HTTPStatusCode.LOCKED_TRANSFER_MARKET
          ? this.getNavigationController().popToRootViewController()
          : t.status === enums.HTTPStatusCode.PERMISSION_DENIED
          ? services.Notification.queue([
              services.Localization.localize(
                'popup.error.watch.PermissionDenied'
              ),
              enums.UINotificationType.NEGATIVE
            ])
          : t.status === enums.HTTPStatusCode.CONFLICT
          ? services.Notification.queue([
              services.Localization.localize(
                'popup.error.watch.ItemNoLongerAvailable'
              ),
              enums.UINotificationType.NEGATIVE
            ])
          : NetworkErrorManager.handleStatus(t.status);
    });
  }),
  (controllers.items.ItemDetails.prototype._onUnwatchAction = function _onUnwatchAction() {
    var n = this._viewmodel.current();
    services.Item.untarget(n).observe(this, function(e, t) {
      e.unobserve(this);
      var i = this._panel,
        s = n.getAuctionData();
      i.toggleWatchedState(s.watched),
        s.isExpired() || i.setWatchBusyState(!1),
        t.success
          ? services.Notification.queue([
              services.Localization.localize('notification.item.unwatched'),
              enums.UINotificationType.NEUTRAL
            ])
          : t.status === enums.HTTPStatusCode.LOCKED_TRANSFER_MARKET
          ? this.getNavigationController().popToRootViewController()
          : t.status === enums.HTTPStatusCode.PERMISSION_DENIED
          ? services.Notification.queue([
              services.Localization.localize(
                'popup.error.unwatch.PermissionDenied'
              ),
              enums.UINotificationType.NEGATIVE
            ])
          : NetworkErrorManager.handleStatus(t.status);
    });
  }),
  (controllers.items.ItemDetails.prototype._onPlayerBio = function _onPlayerBio(
    e
  ) {
    var t = this._viewmodel.current();
    if (t.isValid() && t.isPlayer() && utils.JS.isValid(t.getMetaData())) {
      var i = new UTPlayerBioViewController();
      i.initWithItem(t), this.getNavigationController().pushViewController(i);
    } else
      services.Notification.queue([
        services.Localization.localize('playerbio.unavailable'),
        enums.UINotificationType.NEGATIVE
      ]);
  }),
  (controllers.items.ItemDetails.prototype._onFindRelated = function _onFindRelated(
    e
  ) {
    var t = this.getNavigationController();
    if (t) {
      var i = new UTMarketSearchResultsViewController(),
        s = new transferobjects.SearchCriteria(),
        n = this._viewmodel.current();
      services.Item.clearTransferMarketCache(),
        n
          ? ((s.defId = [n.getDefId()]),
            (s.type = n.getSearchType()),
            i.initWithSearchCriteria(s),
            i.setPinnedItem(n))
          : i.initWithSearchCriteria(s),
        t.pushViewController(i, !0);
    }
  }),
  (controllers.items.ItemDetails.prototype._onTimedUpdate = function _onTimedUpdate(
    e,
    t
  ) {
    (this._panel instanceof views.items.AuctionActionPanel ||
      this._panel instanceof views.items.TransferActionPanel) &&
      (this._currentAuction.isWon() || this._currentAuction.isExpired()
        ? (this._stopClientTimer(), this._renderView(), this._refreshPanel())
        : ((utils.JS.isValid(t.bidState) || utils.JS.isValid(t.tradeState)) &&
            (this._refreshView(), this._refreshPanel()),
          this._clientCountdownAuctionId !== this._currentAuction.tradeId &&
            this._stopClientTimer(),
          this._currentAuction.getSecondsRemaining() <=
          AUCTION_COUNTDOWN_THRESHOLD
            ? this._startClientTimer()
            : this._panel.onTimedUpdate(this._currentAuction)));
  }),
  (controllers.items.ItemDetails.prototype._startClientTimer = function _startClientTimer() {
    this._clientCountdownTimer ||
      ((this._clientCountdownAuctionId = this._currentAuction.tradeId),
      (this._clientCountdown = this._currentAuction.getSecondsRemaining()),
      this._panel.onTimedUpdate(this._currentAuction, this._clientCountdown),
      (this._clientCountdownTimer = new utils.UTTimer(
        1e3,
        this._updateClientTimer.bind(this)
      )),
      this._clientCountdownTimer.start());
  }),
  (controllers.items.ItemDetails.prototype._stopClientTimer = function _stopClientTimer() {
    this._clientCountdownTimer &&
      (this._clientCountdownTimer.reset(), (this._clientCountdownTimer = null));
  }),
  (controllers.items.ItemDetails.prototype._updateClientTimer = function _updateClientTimer() {
    if (
      this._clientCountdownAuctionId !== this._currentAuction.tradeId ||
      this._clientCountdown < 0
    )
      this._stopClientTimer();
    else {
      this._clientCountdown--;
      var e = this._clientCountdown,
        t = Math.abs(this._currentAuction.expires - this._clientCountdown);
      (this._clientCountdown < 0 ||
        this._currentAuction.expires < 0 ||
        t > AUCTION_LATENCY_THRESHOLD) &&
        ((e = this._currentAuction.getSecondsRemaining()),
        0 <= this._clientCountdown &&
          0 <= this._currentAuction.expires &&
          (this._clientCountdown = e)),
        this._panel.onTimedUpdate(this._currentAuction, e);
    }
  }),
  (controllers.items.ItemDetails.prototype._handleRemove = function _handleRemove(
    e
  ) {
    if (Array.isArray(e) && 1 === e.length) {
      var t = this._viewmodel.current();
      if (t.isClubConsumable())
        isPhone()
          ? (this._refreshConsumable(t),
            this._refreshPanel(),
            this._refreshView())
          : 0 < t.stackCount && this._refreshConsumable(t);
      else if (0 <= e.indexOf(t.id)) {
        var i = this.getNavigationController();
        this._viewmodel.remove(this._viewmodel.getIndex()),
          0 < this._viewmodel.length
            ? (this._renderPanel(this._viewmodel.current()), this._renderView())
            : i &&
              i.getCurrentController() !== i.getRootController() &&
              i.popViewController();
      }
    } else this._renderView();
  }),
  (controllers.items.ItemDetails.prototype._showPlayerPicks = function _showPlayerPicks(
    e,
    t
  ) {
    var i = isPhone(),
      s = new UTPlayerPicksViewController();
    s.initWithPicks(e),
      t && s.setPendingSelectionContext(),
      (s.modalDisplayStyle = i
        ? enums.UIModalDisplayStyles.FULLSCREEN
        : enums.UIModalDisplayStyles.FORM),
      i
        ? this.getNavigationController()
            .getPreviousController()
            .presentViewController(s, !0)
        : this.presentViewController(s, !0);
  }),
  (controllers.items.ItemDetails.prototype._refreshConsumable = function _refreshConsumable(
    e
  ) {
    e.untradeable && this._refreshPanel(), this._renderView();
  }),
  (controllers.items.ItemDetails.prototype._gotoSendToSquadFlow = function _gotoSendToSquadFlow() {
    var e = this._viewmodel.current(),
      t = new UTSendToSquadViewController();
    this._squadContext &&
      (t.setSquad(this._squadContext.getSquad()),
      t.setSelectedSlotIndex(this._squadContext.getCurrentSlot().getIndex())),
      e ? t.initWithItem(e) : t.init(),
      this.getNavigationController().pushViewController(t);
  }),
  (controllers.items.ItemDetails.prototype._gotoApplyConsumableFlow = function _gotoApplyConsumableFlow() {
    var e,
      t = this._viewmodel.current();
    t.isConsumable()
      ? ((e = new controllers.club.ClubSearchFilters()).displayAsDetails = !0)
      : (e = new controllers.items.ConsumableCategories()),
      t ? e.initWithItem(t) : e.init(),
      this.getNavigationController().pushViewController(e);
  }),
  (controllers.items.ItemDetails.prototype._goToUnassigned = function _goToUnassigned() {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Item.requestUnassignedItems().observe(
        this,
        function _onRequestUnassignedComplete(e, t) {
          e.unobserve(this);
          var i = this.getRootNavigationController();
          if (i) {
            var s = isPhone()
              ? new UTUnassignedItemsViewController()
              : new UTUnassignedItemsSplitViewController();
            t.success ? s.initWithItems(t.data.items) : s.init(),
              services.Item.clearTransferMarketCache(),
              i.pushViewController(s);
          }
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      );
  }),
  NamespaceManager.Register('controllers.navigation'),
  (controllers.navigation.ItemDetails = function ItemDetailNavigationController(
    e,
    t
  ) {
    UTNavigationController.call(this, e, t);
  }),
  utils.JS.inherits(controllers.navigation.ItemDetails, UTNavigationController),
  (controllers.navigation.ItemDetails.prototype.initWithIterator = function initWithIterator(
    e
  ) {
    if (!this.initialized) {
      utils.Debug.Assert(
        e instanceof UTIterator,
        'Initialization expected an instance of UTIterator.'
      );
      var t = this._getRootControllerInstance();
      t.initWithIterator(e), this.initWithRootController(t);
    }
  }),
  (controllers.navigation.ItemDetails.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new controllers.items.ItemDetails();
  }),
  (controllers.navigation.ItemDetails.prototype.setIndex = function setIndex(
    e
  ) {
    this.popToRootViewController(), this.getRootController().onIndexChange(e);
  }),
  (controllers.navigation.ItemDetails.prototype.onPageChange = function onPageChange() {
    this.getRootController().onPageChange();
  }),
  (controllers.navigation.ItemDetails.prototype.enableSwiping = function enableSwiping(
    e
  ) {
    this.getRootController().enableSwiping(e);
  }),
  (controllers.navigation.ItemDetails.prototype.enablePriceComparison = function enablePriceComparison(
    e
  ) {
    this.getRootController().enablePriceComparison(e);
  }),
  (controllers.navigation.ItemDetails.prototype.didPush = function didPush(e) {
    this.superclass(),
      this.setNavigationVisibility(e !== this.getRootController(), !0);
  }),
  NamespaceManager.Register('controllers.club'),
  (controllers.club.ClubSearchResultsLandscape = function ClubSearchResultsSplitViewController() {
    UTSplitViewController.call(this),
      (this._itemDetailController = new controllers.navigation.ItemDetails()),
      (this._listController = new controllers.club.ClubSearchResults()),
      (this._viewmodel = this._listController.getIterator()),
      Object.defineProperty(this, '_viewmodel', {
        get: function() {
          return this._listController.getIterator();
        },
        set: function(e) {
          this._listController.setIterator(e);
        }
      }),
      (this._searchCriteria = this._listController._searchCriteria),
      Object.defineProperty(this, '_searchCriteria', {
        get: function() {
          return this._listController._searchCriteria;
        },
        set: function(e) {
          this._listController._searchCriteria = e;
        }
      });
  }),
  utils.JS.inherits(
    controllers.club.ClubSearchResultsLandscape,
    UTSplitViewController
  ),
  (controllers.club.ClubSearchResultsLandscape.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        this._listController.init(),
        this._listController.onDataChange.observe(this, this._eListDataChanged),
        this._listController.onItemSelected.observe(this, this._eItemSelected);
      var e = this._listController.getView();
      e.addTarget(this, this._ePageChange, enums.UIPaginationEvent.NEXT),
        e.addTarget(this, this._ePageChange, enums.UIPaginationEvent.PREVIOUS),
        this._itemDetailController.initWithIterator(
          this._listController.getIterator()
        ),
        this._itemDetailController.enableSwiping(!1),
        this.addChildViewController(this._listController),
        this.addChildViewController(this._itemDetailController);
      var t = getDefaultDispatcher();
      t.addObserver(
        enums.Notification.ITEM_ACTIVATE,
        this,
        this._nItemActivated
      ),
        t.addObserver(enums.Notification.ITEM_APPLY, this, this._nItemApplied),
        t.addObserver(
          enums.Notification.ITEM_DISCARD,
          this,
          this._nItemDiscarded
        ),
        t.addObserver(enums.Notification.ITEM_LIST, this, this._nItemListed),
        t.addObserver(enums.Notification.ITEM_MOVE, this, this._nItemMoved),
        t.addObserver(enums.Notification.SQUAD_SAVE, this, this._nSquadSaved);
    }
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype.initWithSearchCriteria = function initWithSearchCriteria(
    e
  ) {
    this.initialized ||
      (this._listController.initWithSearchCriteria(e), this.init());
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype.initWithConsumables = function initWithConsumables(
    e
  ) {
    this.initialized ||
      (this._listController.initWithConsumables(e), this.init());
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype.dealloc = function dealloc() {
    this._itemDetailController.dealloc(),
      (this._itemDetailController = null),
      this._listController.dealloc(),
      (this._listController = null);
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.ITEM_ACTIVATE, this),
      e.removeObserver(enums.Notification.ITEM_APPLY, this),
      e.removeObserver(enums.Notification.ITEM_DISCARD, this),
      e.removeObserver(enums.Notification.ITEM_LIST, this),
      e.removeObserver(enums.Notification.ITEM_MOVE, this),
      e.removeObserver(enums.Notification.SQUAD_SAVE, this),
      this.superclass();
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype.viewDidAppear = function viewDidAppear() {
    this._rightController &&
      0 === this._listController.getIterator().length &&
      this._removeRightController(),
      this.superclass(),
      this._setLeftController(this._listController),
      this._itemDetailController.setNavigationStyle(
        enums.UINavigationBarStyle.SECONDARY
      );
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype.setConsumableToApply = function setConsumableToApply(
    e
  ) {
    this._listController.setConsumableToApply(e);
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype._ePageChange = function _ePageChange(
    e,
    t,
    i
  ) {
    this._itemDetailController.onPageChange();
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype._eItemSelected = function _eItemSelected(
    e,
    t
  ) {
    this._itemDetailController.setIndex(
      this._listController.getIterator().indexOf(function(e) {
        return e.id === t.id;
      })
    );
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype._eListDataChanged = function _eListDataChanged(
    e,
    t
  ) {
    t.items &&
      (0 < t.items.length
        ? (this._setRightController(this._itemDetailController),
          this._itemDetailController.setIndex(
            this._listController.getIterator().getIndex()
          ))
        : this._removeRightController());
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype._nItemActivated = function _nItemActivated(
    e,
    t,
    i
  ) {
    this._listController.refreshList();
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype._nItemApplied = function _nItemApplied(
    e,
    t,
    i
  ) {
    this._listController.refreshList();
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype._nItemDiscarded = function _nItemDiscarded(
    e,
    t,
    i
  ) {
    this._listController.refreshList();
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype._nItemListed = function _nItemListed(
    e,
    t,
    i
  ) {
    this._listController.refreshList();
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype._nItemMoved = function _nItemMoved(
    e,
    t,
    i
  ) {
    this._listController.refreshList();
  }),
  (controllers.club.ClubSearchResultsLandscape.prototype._nSquadSaved = function _nSquadSaved(
    e,
    t,
    i
  ) {
    this._listController.refreshList(),
      i instanceof entities.Squad && this._listController.setActiveSquadData(i);
  }),
  utils.JS.inherits(UTTileDimOverlayView, UTView),
  (UTTileDimOverlayView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tile-dim-overlay-view'),
        (this.__messageTextField = document.createElement('p')),
        this.__messageTextField.classList.add('ut-tile-dim-text'),
        e.appendChild(this.__messageTextField),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTileDimOverlayView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__messageTextField = null);
  }),
  (UTTileDimOverlayView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTileDimOverlayView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTileDimOverlayView.OverlayType = {
    DEFAULT: '',
    LOCKED: 'locked',
    MAINTENANCE: 'maintenance'
  }),
  (UTTileDimOverlayView.prototype.setText = function setText(e) {
    this.__messageTextField.textContent = e;
  }),
  (UTTileDimOverlayView.prototype.setContent = function setContent(e) {
    this._messageTextField.innerHTML = e;
  }),
  (UTTileDimOverlayView.prototype.setType = function setType(e) {
    var t = utils.JS.getObjectValues(UTTileDimOverlayView.OverlayType);
    0 <= t.indexOf(e) && (this.removeClass(t.join(' ')), this.addClass(e));
  }),
  utils.JS.inherits(UTTileView, UTTargetActionView),
  (UTTileView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('tile');
      var t = document.createElement('div');
      t.classList.add('loadingSpinner'), e.appendChild(t);
      var i = document.createElement('header');
      (this.__tileTitle = document.createElement('h1')),
        this.__tileTitle.classList.add('tileHeader'),
        i.appendChild(this.__tileTitle),
        e.appendChild(i),
        (this.__tileContent = document.createElement('div')),
        this.__tileContent.classList.add('tileContent'),
        e.appendChild(this.__tileContent),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTileView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__tileTitle = null),
      (this.__tileContent = null);
  }),
  (UTTileView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTileView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTileView.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTTileView.prototype.dealloc = function dealloc() {
    clearTimeout(this._highlightTimeout),
      this.superclass(),
      this._dimOverlay &&
        (this._dimOverlay.dealloc(), (this._dimOverlay = null)),
      this._contentView &&
        (this._contentView.dealloc(), (this._contentView = null));
  }),
  (UTTileView.prototype.setInteractionState = function setInteractionState(e) {
    var t = this._interactionState;
    this.superclass(e),
      this._interactionState !== t &&
        (this.toggleClass(enums.UIState.DISABLED, !this._interactionState),
        this._interactionState || this.removeClass(enums.UIState.ACTIVE));
  }),
  (UTTileView.prototype._getContentViewInstance = function _getContentViewInstance() {
    return null;
  }),
  (UTTileView.prototype._loadContentView = function _loadContentView() {
    return (
      this.contentLoaded ||
        ((this._contentView = this._getContentViewInstance()),
        this._contentView &&
          (this._contentView.init(),
          this.addSubview(this._contentView, this.__tileContent),
          this.layoutSubviews()),
        (this.contentLoaded = !0)),
      this._contentView
    );
  }),
  (UTTileView.prototype.getContentView = function getContentView() {
    return this._contentView || this._loadContentView(), this._contentView;
  }),
  (UTTileView.prototype.getTileContent = function getTileContent() {
    return this.__tileContent;
  }),
  (UTTileView.prototype.show = function show() {
    this.setDisplay(!0);
  }),
  (UTTileView.prototype.hide = function hide() {
    this.setDisplay(!1);
  }),
  (UTTileView.prototype.enable = function enable() {
    this.setInteractionState(!0);
  }),
  (UTTileView.prototype.disable = function disable() {
    this.setInteractionState(!1);
  }),
  (UTTileView.prototype.setEnabled = function setEnabled(e) {
    this.setInteractionState(e);
  }),
  (UTTileView.prototype.getTitle = function getTitle() {
    return this._title;
  }),
  (UTTileView.prototype.setTitle = function setTitle(e) {
    (this._title = e), (this.__tileTitle.textContent = e);
  }),
  (UTTileView.prototype.getDimOverlay = function getDimOverlay() {
    return (
      this._dimOverlay ||
        ((this._dimOverlay = new UTTileDimOverlayView()),
        this._dimOverlay.init()),
      this._dimOverlay
    );
  }),
  (UTTileView.prototype.setContent = function setContent(e) {
    function _appendItem(e) {
      e instanceof Element
        ? this.__tileContent.appendChild(e)
        : e instanceof UTView
        ? this.__tileContent.appendChild(e.getRootElement())
        : utils.JS.isValid(e) &&
          (this.__tileContent.textContent = e.toString());
    }
    DOMKit.empty(this.__tileContent),
      Array.isArray(e)
        ? e.forEach(_appendItem, this)
        : _appendItem.call(this, e);
  }),
  (UTTileView.prototype.appendContent = function appendContent(e) {
    utils.JS.valToArray(e).forEach(function(e) {
      e instanceof Element && this.__tileContent.appendChild(e);
    }, this);
  }),
  (UTTileView.prototype.removeContent = function removeContent() {
    DOMKit.empty(this.__tileContent);
  }),
  (UTTileView.prototype.setDimOverlayText = function setDimOverlayText(e) {
    this.getDimOverlay().setText(e);
  }),
  (UTTileView.prototype.setDimOverlayContent = function setDimOverlayContent(
    e
  ) {
    this.getDimOverlay().setContent(e);
  }),
  (UTTileView.prototype.setDimmed = function setDimmed(e) {
    var t = this.getDimOverlay();
    e ? this.addSubview(t) : t.removeFromSuperview(), this.layoutSubviews();
  }),
  (UTTileView.prototype.setDimOverlayType = function setDimOverlayType(e) {
    this.getDimOverlay().setType(e);
  }),
  (UTTileView.prototype.showLoadingState = function showLoadingState() {
    this.setInteractionState(!1),
      this.getContentView().setVisibility(!1),
      this.addClass('loading');
  }),
  (UTTileView.prototype.hideLoadingState = function hideLoadingState() {
    this.removeClass('loading'),
      this.getContentView().setVisibility(!0),
      this.setInteractionState(!0);
  }),
  (UTTileView.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass(
      [enums.UIState.ACTIVE, enums.UIButtonState.HOVER].join(' ')
    );
  }),
  (UTTileView.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIButtonState.HOVER);
  }),
  (UTTileView.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(), this.addClass(enums.UIState.ACTIVE);
  }),
  (UTTileView.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTTileView.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTTileView.prototype._touchCancelled = function _touchCancelled(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTTileView.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(),
      this.hasClass(enums.UIState.ACTIVE)
        ? this.removeClass(enums.UIState.ACTIVE)
        : (this.addClass(enums.UIState.ACTIVE),
          (this._highlightTimeout = setTimeout(
            function() {
              this.removeClass(enums.UIState.ACTIVE);
            }.bind(this),
            100
          ))),
      this.hasClass(enums.UIButtonState.HOVER) &&
        this.removeClass(enums.UIButtonState.HOVER),
      this._triggerActions(enums.Event.TAP);
  }),
  utils.JS.inherits(UTConsumablesHubView, UTView),
  (UTConsumablesHubView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div'),
        t = document.createElement('div');
      t.classList.add('grid'),
        t.classList.add('layout-hub'),
        (this._trainingTile = new UTTileView()),
        this._trainingTile.getRootElement().classList.add('col-1-2'),
        this._trainingTile.getRootElement().classList.add('training-tile'),
        this._trainingTile.getRootElement().classList.add('consumable-tile'),
        t.appendChild(this._trainingTile.getRootElement()),
        (this._contractsTile = new UTTileView()),
        this._contractsTile.getRootElement().classList.add('col-1-2'),
        this._contractsTile.getRootElement().classList.add('contracts-tile'),
        this._contractsTile.getRootElement().classList.add('consumable-tile'),
        t.appendChild(this._contractsTile.getRootElement()),
        (this._fitnessTile = new UTTileView()),
        this._fitnessTile.getRootElement().classList.add('col-1-3-md'),
        this._fitnessTile.getRootElement().classList.add('col-1-2'),
        this._fitnessTile.getRootElement().classList.add('fitness-tile'),
        this._fitnessTile.getRootElement().classList.add('consumable-tile'),
        t.appendChild(this._fitnessTile.getRootElement()),
        (this._healingTile = new UTTileView()),
        this._healingTile.getRootElement().classList.add('col-1-3-md'),
        this._healingTile.getRootElement().classList.add('col-1-2'),
        this._healingTile.getRootElement().classList.add('healing-tile'),
        this._healingTile.getRootElement().classList.add('consumable-tile'),
        t.appendChild(this._healingTile.getRootElement()),
        (this._positioningTile = new UTTileView()),
        this._positioningTile.getRootElement().classList.add('col-1-3-md'),
        this._positioningTile.getRootElement().classList.add('col-1-2'),
        this._positioningTile
          .getRootElement()
          .classList.add('positioning-tile'),
        this._positioningTile.getRootElement().classList.add('consumable-tile'),
        t.appendChild(this._positioningTile.getRootElement()),
        (this._chemistryTile = new UTTileView()),
        this._chemistryTile.getRootElement().classList.add('col-1-2'),
        this._chemistryTile.getRootElement().classList.add('chemistry-tile'),
        this._chemistryTile.getRootElement().classList.add('consumable-tile'),
        t.appendChild(this._chemistryTile.getRootElement()),
        (this._managerLeagueTile = new UTTileView()),
        this._managerLeagueTile.getRootElement().classList.add('col-1-2-md'),
        this._managerLeagueTile.getRootElement().classList.add('col-1-1'),
        this._managerLeagueTile
          .getRootElement()
          .classList.add('managerLeague-tile'),
        this._managerLeagueTile
          .getRootElement()
          .classList.add('consumable-tile'),
        t.appendChild(this._managerLeagueTile.getRootElement()),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTConsumablesHubView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._trainingTile.destroy(),
      this._contractsTile.destroy(),
      this._fitnessTile.destroy(),
      this._healingTile.destroy(),
      this._positioningTile.destroy(),
      this._chemistryTile.destroy(),
      this._managerLeagueTile.destroy();
  }),
  (UTConsumablesHubView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTConsumablesHubView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTConsumablesHubView.prototype.init = function init() {
    this.superclass(),
      this._contractsTile.init(),
      this._contractsTile.setTitle(
        services.Localization.localize('card.title.contract')
      ),
      this._fitnessTile.init(),
      this._fitnessTile.setTitle(
        services.Localization.localize('devtype.fitness')
      ),
      this._healingTile.init(),
      this._healingTile.setTitle(
        services.Localization.localize('club.category.healing')
      ),
      this._managerLeagueTile.init(),
      this._managerLeagueTile.setTitle(
        services.Localization.localize('card.title.leagueModifier')
      ),
      this._chemistryTile.init(),
      this._chemistryTile.setTitle(
        services.Localization.localize('trainingtype.playStyle')
      ),
      this._positioningTile.init(),
      this._positioningTile.setTitle(
        services.Localization.localize('card.title.advtraining')
      ),
      this._trainingTile.init(),
      this._trainingTile.setTitle(
        services.Localization.localize('search.filters.training')
      );
  }),
  (UTConsumablesHubView.prototype.render = function render(e) {
    function _setupCategoryTile(e, t) {
      var i = document.createElement('p'),
        s = document.createElement('span'),
        n = document.createElement('p');
      (n.textContent =
        1 === t
          ? services.Localization.localize('dock.label.item')
          : services.Localization.localize('dock.label.items')),
        (i.textContent = t),
        (s.textContent = ' '),
        i.appendChild(n),
        DOMKit.addClass(i, 'textField'),
        DOMKit.addClass(s, 'consumableIcon'),
        e.setContent([s, i]),
        0 === t && e.setInteractionState(!1);
    }
    _setupCategoryTile.call(this, this._contractsTile, e.contracts),
      _setupCategoryTile.call(this, this._fitnessTile, e.fitness),
      _setupCategoryTile.call(this, this._healingTile, e.healing),
      _setupCategoryTile.call(
        this,
        this._managerLeagueTile,
        e.managerLeagueModifier
      ),
      _setupCategoryTile.call(this, this._chemistryTile, e.playStyle),
      _setupCategoryTile.call(this, this._positioningTile, e.position),
      _setupCategoryTile.call(this, this._trainingTile, e.training);
  }),
  (UTConsumablesHubView.prototype.getTrainingTile = function getTrainingTile() {
    return this._trainingTile;
  }),
  (UTConsumablesHubView.prototype.getContractsTile = function getContractsTile() {
    return this._contractsTile;
  }),
  (UTConsumablesHubView.prototype.getFitnessTile = function getFitnessTile() {
    return this._fitnessTile;
  }),
  (UTConsumablesHubView.prototype.getHealingTile = function getHealingTile() {
    return this._healingTile;
  }),
  (UTConsumablesHubView.prototype.getPositioningTile = function getTrainingTile() {
    return this._positioningTile;
  }),
  (UTConsumablesHubView.prototype.getManagerLeagueTile = function getManagerLeagueTile() {
    return this._managerLeagueTile;
  }),
  (UTConsumablesHubView.prototype.getChemistryStyleTile = function getChemistryStyleTile() {
    return this._chemistryTile;
  }),
  utils.JS.inherits(UTConsumablesHubViewController, UTViewController),
  (UTConsumablesHubViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        TelemetryManager.trackPage(
          TelemetryManager.Sections.CLUB,
          'Club Consumables Hub'
        ),
        this._viewmodel ||
          (this._viewmodel = new viewmodels.ConsumableCategories([]));
      var e = this.getView();
      e
        .getTrainingTile()
        .addTarget(this, this._eTrainingTileSelected, enums.Event.TAP),
        e
          .getContractsTile()
          .addTarget(this, this._eContractsTileSelected, enums.Event.TAP),
        e
          .getFitnessTile()
          .addTarget(this, this._eFitnessTileSelected, enums.Event.TAP),
        e
          .getHealingTile()
          .addTarget(this, this._eHealingTileSelected, enums.Event.TAP),
        e
          .getPositioningTile()
          .addTarget(this, this._ePositioningTileSelected, enums.Event.TAP),
        e
          .getManagerLeagueTile()
          .addTarget(this, this._eManagerLeagueTileSelected, enums.Event.TAP),
        e
          .getChemistryStyleTile()
          .addTarget(this, this._eChemistryStyleTileSelected, enums.Event.TAP);
    }
  }),
  (UTConsumablesHubViewController.prototype.initWithConsumableCategories = function initWithConsumableCategories(
    e
  ) {
    (this._viewmodel = e), this.init();
  }),
  (UTConsumablesHubViewController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._viewmodel = null);
  }),
  (UTConsumablesHubViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTConsumablesHubView();
  }),
  (UTConsumablesHubViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Club - Consumables';
  }),
  (UTConsumablesHubViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.clubconsumables');
  }),
  (UTConsumablesHubViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this.getView().render(this._viewmodel.getTotals());
  }),
  (UTConsumablesHubViewController.prototype._goToSection = function _goToSection(
    e
  ) {
    var t = this.getNavigationController();
    if (t) {
      var i = this._viewmodel.getItems(e),
        s = isPhone()
          ? new controllers.club.ClubSearchResults()
          : new controllers.club.ClubSearchResultsLandscape();
      s.initWithConsumables(i), t.pushViewController(s);
    }
  }),
  (UTConsumablesHubViewController.prototype._eTrainingTileSelected = function _eTrainingTileSelected(
    e,
    t,
    i
  ) {
    this._goToSection(enums.UIConsumableCategory.TRAINING);
  }),
  (UTConsumablesHubViewController.prototype._eContractsTileSelected = function _eContractsTileSelected(
    e,
    t,
    i
  ) {
    this._goToSection(enums.UIConsumableCategory.CONTRACTS);
  }),
  (UTConsumablesHubViewController.prototype._eFitnessTileSelected = function _eFitnessTileSelected(
    e,
    t,
    i
  ) {
    this._goToSection(enums.UIConsumableCategory.FITNESS);
  }),
  (UTConsumablesHubViewController.prototype._eHealingTileSelected = function _eHealingTileSelected(
    e,
    t,
    i
  ) {
    this._goToSection(enums.UIConsumableCategory.HEALING);
  }),
  (UTConsumablesHubViewController.prototype._ePositioningTileSelected = function _ePositioningTileSelected(
    e,
    t,
    i
  ) {
    this._goToSection(enums.UIConsumableCategory.POSITION);
  }),
  (UTConsumablesHubViewController.prototype._eManagerLeagueTileSelected = function _eManagerLeagueTileSelected(
    e,
    t,
    i
  ) {
    this._goToSection(enums.UIConsumableCategory.LEAGUEMOD);
  }),
  (UTConsumablesHubViewController.prototype._eChemistryStyleTileSelected = function _eChemistryStyleTileSelected(
    e,
    t,
    i
  ) {
    this._goToSection(enums.UIConsumableCategory.PLAYSTYLE);
  }),
  utils.JS.inherits(UTCustomItemsHubView, UTView),
  (UTCustomItemsHubView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div'),
        t = document.createElement('div');
      t.classList.add('ut-club-hub-view'),
        t.classList.add('grid'),
        t.classList.add('layout-hub'),
        (this._tifosTile = new UTTileView()),
        this._tifosTile.getRootElement().classList.add('col-1-2-md'),
        this._tifosTile.getRootElement().classList.add('col-1-1'),
        this._tifosTile.getRootElement().classList.add('tifos-tile'),
        t.appendChild(this._tifosTile.getRootElement()),
        (this._bannersTile = new UTTileView()),
        this._bannersTile.getRootElement().classList.add('col-1-2'),
        this._bannersTile.getRootElement().classList.add('banners-tile'),
        t.appendChild(this._bannersTile.getRootElement()),
        (this._celebrationsTile = new UTTileView()),
        this._celebrationsTile.getRootElement().classList.add('col-1-3-md'),
        this._celebrationsTile.getRootElement().classList.add('col-1-2'),
        this._celebrationsTile
          .getRootElement()
          .classList.add('celebrations-tile'),
        t.appendChild(this._celebrationsTile.getRootElement()),
        (this._kitTile = new UTTileView()),
        this._kitTile.getRootElement().classList.add('col-1-3-md'),
        this._kitTile.getRootElement().classList.add('col-1-2'),
        this._kitTile.getRootElement().classList.add('kits-tile'),
        t.appendChild(this._kitTile.getRootElement()),
        (this._badgeTile = new UTTileView()),
        this._badgeTile.getRootElement().classList.add('col-1-3-md'),
        this._badgeTile.getRootElement().classList.add('col-1-2'),
        this._badgeTile.getRootElement().classList.add('badges-tile'),
        t.appendChild(this._badgeTile.getRootElement()),
        (this._ballTile = new UTTileView()),
        this._ballTile.getRootElement().classList.add('col-1-2'),
        this._ballTile.getRootElement().classList.add('balls-tile'),
        t.appendChild(this._ballTile.getRootElement()),
        (this._stadiumTile = new UTTileView()),
        this._stadiumTile.getRootElement().classList.add('col-1-2'),
        this._stadiumTile.getRootElement().classList.add('full-img-tile'),
        this._stadiumTile.getRootElement().classList.add('stadia-tile'),
        t.appendChild(this._stadiumTile.getRootElement()),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTCustomItemsHubView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._tifosTile.destroy(),
      this._bannersTile.destroy(),
      this._celebrationsTile.destroy(),
      this._kitTile.destroy(),
      this._badgeTile.destroy(),
      this._ballTile.destroy(),
      this._stadiumTile.destroy();
  }),
  (UTCustomItemsHubView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTCustomItemsHubView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTCustomItemsHubView.prototype.init = function init() {
    this.superclass(),
      this._tifosTile.init(),
      this._bannersTile.init(),
      this._celebrationsTile.init(),
      this._kitTile.init(),
      this._badgeTile.init(),
      this._ballTile.init(),
      this._stadiumTile.init(),
      this._tifosTile.setTitle(
        services.Localization.localize('card.title.tifo')
      ),
      this._bannersTile.setTitle(
        services.Localization.localize('card.title.banner')
      ),
      this._celebrationsTile.setTitle(
        services.Localization.localize('card.title.celebration')
      ),
      this._kitTile.setTitle(services.Localization.localize('clubtype.kit')),
      this._badgeTile.setTitle(
        services.Localization.localize('clubtype.badge')
      ),
      this._ballTile.setTitle(
        services.Localization.localize('search.filters.balls')
      ),
      this._stadiumTile.setTitle(
        services.Localization.localize('search.filters.stadiums')
      );
  }),
  (UTCustomItemsHubView.prototype.clearTileContent = function clearTileContent() {
    this._tifosTile.setContent(null),
      this._bannersTile.setContent(null),
      this._celebrationsTile.setContent(null),
      this._kitTile.setContent(null),
      this._badgeTile.setContent(null),
      this._ballTile.setContent(null),
      this._stadiumTile.setContent(null);
  }),
  (UTCustomItemsHubView.prototype.render = function render(e) {
    this._tifosTile.appendContent(
      e[enums.UIActiveItemImgType.TIFO].getRootElement()
    ),
      this._bannersTile.appendContent(
        e[enums.UIActiveItemImgType.BANNER].getRootElement()
      ),
      this._celebrationsTile.appendContent(
        e[enums.UIActiveItemImgType.CELEBRATION].getRootElement()
      ),
      this._kitTile.appendContent([
        e[enums.UIActiveItemImgType.HOME_KIT].getRootElement(),
        e[enums.UIActiveItemImgType.AWAY_KIT].getRootElement()
      ]),
      this._badgeTile.appendContent(
        e[enums.UIActiveItemImgType.BADGE_NORMAL].getRootElement()
      ),
      this._ballTile.appendContent(
        e[enums.UIActiveItemImgType.BALL].getRootElement()
      ),
      this._stadiumTile.appendContent(
        e[enums.UIActiveItemImgType.STADIUM].getRootElement()
      );
  }),
  (UTCustomItemsHubView.prototype.addTileStats = function addTileStats(e, t) {
    var i = document.createElement('p'),
      s = document.createElement('span');
    (i.textContent = t),
      (s.textContent =
        1 === t
          ? services.Localization.localize('dock.label.item')
          : services.Localization.localize('dock.label.items')),
      DOMKit.addClass(i, 'club-stats'),
      DOMKit.addClass(s, 'club-stats--label'),
      i.appendChild(s),
      e.appendContent(i);
  }),
  (UTCustomItemsHubView.prototype.getTifosTile = function getTifosTile() {
    return this._tifosTile;
  }),
  (UTCustomItemsHubView.prototype.getBannersTile = function getBannersTile() {
    return this._bannersTile;
  }),
  (UTCustomItemsHubView.prototype.getCelebrationsTile = function getCelebrationsTile() {
    return this._celebrationsTile;
  }),
  (UTCustomItemsHubView.prototype.getKitsTile = function getKitsTile() {
    return this._kitTile;
  }),
  (UTCustomItemsHubView.prototype.getBadgesTile = function getBadgesTile() {
    return this._badgeTile;
  }),
  (UTCustomItemsHubView.prototype.getBallsTile = function getBallsTile() {
    return this._ballTile;
  }),
  (UTCustomItemsHubView.prototype.getStadiaTile = function getStadiaTile() {
    return this._stadiumTile;
  }),
  utils.JS.inherits(UTCustomItemsHubViewController, UTViewController),
  (UTCustomItemsHubViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        this._viewmodel || (this._viewmodel = new viewmodels.Club([]));
      var e = this.getView();
      e
        .getBannersTile()
        .addTarget(this, this._eBannersTileSelected, enums.Event.TAP),
        e
          .getCelebrationsTile()
          .addTarget(this, this._eCelebrationsTileSelected, enums.Event.TAP),
        e
          .getTifosTile()
          .addTarget(this, this._eTifosTileSelected, enums.Event.TAP),
        e
          .getKitsTile()
          .addTarget(this, this._eKitsTileSelected, enums.Event.TAP),
        e
          .getBallsTile()
          .addTarget(this, this._eBallsTileSelected, enums.Event.TAP),
        e
          .getStadiaTile()
          .addTarget(this, this._eStadiaTileSelected, enums.Event.TAP),
        e
          .getBadgesTile()
          .addTarget(this, this._eBadgesTileSelected, enums.Event.TAP);
    }
  }),
  (UTCustomItemsHubViewController.prototype.initWithViewmodel = function initWithViewmodel(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof viewmodels.Club,
        'Expected a Club viewmodel.'
      ),
      (this._viewmodel = e),
      this.init());
  }),
  (UTCustomItemsHubViewController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._viewmodel = null);
  }),
  (UTCustomItemsHubViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTCustomItemsHubView();
  }),
  (UTCustomItemsHubViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Club - Custom Items';
  }),
  (UTCustomItemsHubViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.clubcustomitems');
  }),
  (UTCustomItemsHubViewController.prototype.viewDidAppear = function viewDidAppear() {
    var i = this.getView();
    this.superclass(),
      this.getNavigationController().setNavigationVisibility(!0, !0),
      i.clearTileContent(),
      services.Item.getClubStats().observe(this, function _onGetStats(e, t) {
        e.unobserve(this),
          t.success &&
            t.data.stats.forEach(function(e) {
              var t;
              switch (e.type) {
                case enums.ClubItemType.TIFOS:
                  t = i.getTifosTile();
                  break;
                case enums.ClubItemType.BANNERS:
                  t = i.getBannersTile();
                  break;
                case enums.ClubItemType.CELEBRATIONS:
                  t = i.getCelebrationsTile();
                  break;
                case enums.ClubItemType.KITS:
                  t = i.getKitsTile();
                  break;
                case enums.ClubItemType.BALLS:
                  t = i.getBallsTile();
                  break;
                case enums.ClubItemType.STADIA:
                  t = i.getStadiaTile();
              }
              t && i.addTileStats(t, e.count);
            }, this);
      }),
      this._renderView(),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.CLUB,
        'Custom Items Hub'
      );
  }),
  (UTCustomItemsHubViewController.prototype._renderView = function _renderView() {
    this.getView().render(this._viewmodel.getActiveItemsImgs());
  }),
  (UTCustomItemsHubViewController.prototype._gotoClubSearchResults = function _gotoClubSearchResults(
    e
  ) {
    var t = this.getNavigationController();
    if (t) {
      var i = isPhone()
        ? new controllers.club.ClubSearchResults()
        : new controllers.club.ClubSearchResultsLandscape();
      i.initWithSearchCriteria(e), t.pushViewController(i);
    }
  }),
  (UTCustomItemsHubViewController.prototype._eTifosTileSelected = function _eTifosTileSelected(
    e,
    t,
    i
  ) {
    var s = new transferobjects.SearchCriteria();
    (s.type = enums.SearchType.TIFO), this._gotoClubSearchResults(s);
  }),
  (UTCustomItemsHubViewController.prototype._eBannersTileSelected = function _eBannersTileSelected(
    e,
    t,
    i
  ) {
    var s = new transferobjects.SearchCriteria();
    (s.type = enums.SearchType.BANNER), this._gotoClubSearchResults(s);
  }),
  (UTCustomItemsHubViewController.prototype._eCelebrationsTileSelected = function _eCelebrationsTileSelected(
    e,
    t,
    i
  ) {
    var s = new transferobjects.SearchCriteria();
    (s.type = enums.SearchType.CELEBRATION), this._gotoClubSearchResults(s);
  }),
  (UTCustomItemsHubViewController.prototype._eKitsTileSelected = function _eKitsTileSelected(
    e,
    t,
    i
  ) {
    var s = new transferobjects.SearchCriteria();
    (s.type = enums.SearchType.CLUB_INFO),
      (s.category = enums.SearchCategory.KIT),
      this._gotoClubSearchResults(s);
  }),
  (UTCustomItemsHubViewController.prototype._eBadgesTileSelected = function _eBadgesTileSelected(
    e,
    t,
    i
  ) {
    var s = new transferobjects.SearchCriteria();
    (s.type = enums.SearchType.CLUB_INFO),
      (s.category = enums.SearchCategory.BADGE),
      this._gotoClubSearchResults(s);
  }),
  (UTCustomItemsHubViewController.prototype._eBallsTileSelected = function _eBallsTileSelected(
    e,
    t,
    i
  ) {
    var s = new transferobjects.SearchCriteria();
    (s.type = enums.SearchType.BALL), this._gotoClubSearchResults(s);
  }),
  (UTCustomItemsHubViewController.prototype._eStadiaTileSelected = function _eStadiaTileSelected(
    e,
    t,
    i
  ) {
    var s = new transferobjects.SearchCriteria();
    (s.type = enums.SearchType.STADIUM), this._gotoClubSearchResults(s);
  }),
  NamespaceManager.Register('views.club'),
  utils.JS.inherits(UTClubHubView, UTView),
  (UTClubHubView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-club-hub-view');
      var t = document.createElement('div');
      t.classList.add('grid'),
        t.classList.add('layout-hub'),
        (this._playersTile = new UTTileView()),
        this._playersTile.getRootElement().classList.add('col-2-3-md'),
        this._playersTile.getRootElement().classList.add('players-tile'),
        t.appendChild(this._playersTile.getRootElement()),
        (this._consumablesTile = new UTTileView()),
        this._consumablesTile.getRootElement().classList.add('col-1-3-md'),
        this._consumablesTile.getRootElement().classList.add('col-1-2'),
        this._consumablesTile
          .getRootElement()
          .classList.add('consumables-tile'),
        t.appendChild(this._consumablesTile.getRootElement()),
        (this._staffTile = new UTTileView()),
        this._staffTile.getRootElement().classList.add('col-1-3-md'),
        this._staffTile.getRootElement().classList.add('col-1-2'),
        this._staffTile.getRootElement().classList.add('staff-tile'),
        t.appendChild(this._staffTile.getRootElement()),
        (this._customItemsTile = new UTTileView()),
        this._customItemsTile.getRootElement().classList.add('col-2-3-md'),
        this._customItemsTile.getRootElement().classList.add('col-1-1'),
        this._customItemsTile
          .getRootElement()
          .classList.add('custom-items-tile'),
        t.appendChild(this._customItemsTile.getRootElement()),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTClubHubView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._playersTile.destroy(),
      this._consumablesTile.destroy(),
      this._staffTile.destroy(),
      this._customItemsTile.destroy();
  }),
  (UTClubHubView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTClubHubView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTClubHubView.prototype.init = function init() {
    this.superclass(),
      this._playersTile.init(),
      this._consumablesTile.init(),
      this._staffTile.init(),
      this._customItemsTile.init(),
      this._playersTile.setTitle(
        services.Localization.localize('search.filters.players')
      ),
      this._consumablesTile.setTitle(
        services.Localization.localize('search.filters.consumables')
      ),
      this._staffTile.setTitle(
        services.Localization.localize('search.filters.staff')
      ),
      this._customItemsTile.setTitle(
        services.Localization.localize('search.filters.customItems')
      );
  }),
  (UTClubHubView.prototype.clearTileContent = function clearTileContent() {
    this._playersTile.setContent(null),
      this._consumablesTile.setContent(null),
      this._staffTile.setContent(null),
      this._customItemsTile.setContent(null);
  }),
  (UTClubHubView.prototype.addTileStats = function addTileStats(e, t) {
    var i = document.createElement('p'),
      s = document.createElement('span');
    (i.textContent = t),
      (s.textContent =
        1 === t
          ? services.Localization.localize('dock.label.item')
          : services.Localization.localize('dock.label.items')),
      DOMKit.addClass(i, 'club-stats'),
      DOMKit.addClass(s, 'club-stats--label'),
      i.appendChild(s),
      e.appendContent(i);
  }),
  (UTClubHubView.prototype.getPlayersTile = function getPlayersTile() {
    return this._playersTile;
  }),
  (UTClubHubView.prototype.getConsumablesTile = function getConsumablesTile() {
    return this._consumablesTile;
  }),
  (UTClubHubView.prototype.getStaffTile = function getStaffTile() {
    return this._staffTile;
  }),
  (UTClubHubView.prototype.getCustomItemsTile = function getCustomItemsTile() {
    return this._customItemsTile;
  }),
  utils.JS.inherits(UTClubHubViewController, UTViewController),
  (UTClubHubViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      e
        .getPlayersTile()
        .addTarget(this, this._ePlayersTileSelected, enums.Event.TAP),
        e
          .getConsumablesTile()
          .addTarget(this, this._eConsumablesTileSelected, enums.Event.TAP),
        e
          .getStaffTile()
          .addTarget(this, this._eStaffTileSelected, enums.Event.TAP),
        e
          .getCustomItemsTile()
          .addTarget(this, this._eCustomItemsTileSelected, enums.Event.TAP);
    }
  }),
  (UTClubHubViewController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._viewmodel = null);
  }),
  (UTClubHubViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTClubHubView();
  }),
  (UTClubHubViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Hub - Club';
  }),
  (UTClubHubViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('nav.label.club');
  }),
  (UTClubHubViewController.prototype.viewDidAppear = function viewDidAppear() {
    var s = this.getView();
    this.superclass(),
      this.getNavigationController().setNavigationVisibility(!0, !0),
      s.clearTileContent();
    var e = new transferobjects.SearchCriteria();
    (e.type = enums.SearchType.CONSUMABLES_DEVELOPMENT),
      services.Item.searchClub(e).observe(this, function _onGetConsumables(
        e,
        t
      ) {
        if ((e.unobserve(this), t.success)) {
          var i = t.data.items.reduce(function(e, t) {
            return e + t.stackCount;
          }, 0);
          s.addTileStats(s.getConsumablesTile(), i);
        } else
          NetworkErrorManager.checkCriticalStatus(t.status) &&
            NetworkErrorManager.handleStatus(t.status);
      }),
      services.Item.getClubStats().observe(this, function _onGetStats(e, t) {
        e.unobserve(this),
          t.success
            ? t.data.stats.forEach(function(e) {
                var t;
                switch (e.type) {
                  case enums.ClubItemType.PLAYERS:
                    t = s.getPlayersTile();
                    break;
                  case enums.ClubItemType.STAFF:
                    t = s.getStaffTile();
                }
                t && s.addTileStats(t, e.count);
              }, this)
            : NetworkErrorManager.checkCriticalStatus(t.status) &&
              NetworkErrorManager.handleStatus(t.status);
      }),
      TelemetryManager.trackPage(TelemetryManager.Sections.CLUB, 'Club Hub');
  }),
  (UTClubHubViewController.prototype._gotoConsumablesHub = function _gotoConsumablesHub() {
    var e = new transferobjects.SearchCriteria();
    (e.type = enums.SearchType.CONSUMABLES_DEVELOPMENT),
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Item.searchClub(e).observe(this, function _onGetConsumables(
        e,
        t
      ) {
        if ((e.unobserve(this), t.success)) {
          var i = this.getNavigationController();
          if (i) {
            var s = new UTConsumablesHubViewController();
            s.initWithConsumableCategories(
              new viewmodels.ConsumableCategories(t.data.items)
            ),
              i.pushViewController(s);
          }
        } else
          NetworkErrorManager.checkCriticalStatus(t.status)
            ? NetworkErrorManager.handleStatus(t.status)
            : services.Notification.queue([
                services.Localization.localize(
                  'notification.error.loadConsumables'
                ),
                enums.UINotificationType.NEGATIVE
              ]);
        gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
      });
  }),
  (UTClubHubViewController.prototype._gotoCustomItemsHub = function _gotoCustomItemsHub() {
    var e = this.getNavigationController();
    if (e) {
      var t = new UTCustomItemsHubViewController();
      t.initWithViewmodel(this._viewmodel), e.pushViewController(t);
    }
  }),
  (UTClubHubViewController.prototype._gotoClubSearchResults = function _gotoClubSearchResults(
    e
  ) {
    var t = this.getNavigationController();
    if (t) {
      var i = isPhone()
        ? new controllers.club.ClubSearchResults()
        : new controllers.club.ClubSearchResultsLandscape();
      i.initWithSearchCriteria(e), t.pushViewController(i);
    }
  }),
  (UTClubHubViewController.prototype._ePlayersTileSelected = function _ePlayersTileSelected(
    e,
    t,
    i
  ) {
    var s = new transferobjects.SearchCriteria();
    (s.type = enums.SearchType.PLAYER), this._gotoClubSearchResults(s);
  }),
  (UTClubHubViewController.prototype._eConsumablesTileSelected = function _eConsumablesTileSelected(
    e,
    t,
    i
  ) {
    this._gotoConsumablesHub();
  }),
  (UTClubHubViewController.prototype._eStaffTileSelected = function _eStaffTileSelected(
    e,
    t,
    i
  ) {
    var s = new transferobjects.SearchCriteria();
    (s.type = enums.SearchType.STAFF), this._gotoClubSearchResults(s);
  }),
  (UTClubHubViewController.prototype._eCustomItemsTileSelected = function _eCustomItemsTileSelected(
    e,
    t,
    i
  ) {
    this._gotoCustomItemsHub();
  }),
  utils.JS.inherits(UTGoToLinkController, UTObject),
  (UTGoToLinkController.prototype.initWithNavigationController = function initWithNavigationController(
    e
  ) {
    this.initialized || (this.setNavigationController(e), this.init());
  }),
  (UTGoToLinkController.prototype.dealloc = function dealloc() {
    (this._nc = null), this.superclass();
  }),
  (UTGoToLinkController.prototype.setNavigationController = function setNavigationController(
    e
  ) {
    e instanceof UTNavigationController && (this._nc = e);
  }),
  (UTGoToLinkController.prototype.attemptNavigation = function attemptNavigation(
    e
  ) {
    switch (e) {
      case enums.GoToLink.AUCTION_SEARCH:
        this._gotoMarketSearch();
        break;
      case enums.GoToLink.CLUB:
        this._gotoClubHub();
        break;
      case enums.GoToLink.SBC:
      case enums.GoToLink.SBC_SQUAD:
        this._gotoSquadBuildingChallengeHub();
        break;
      case enums.GoToLink.SQUAD:
        this._gotoActiveSquadOverview();
        break;
      case enums.GoToLink.SQUAD_SELECT:
        this._gotoSquadManagement();
        break;
      case enums.GoToLink.STORE:
        this._gotoStore();
        break;
      case enums.GoToLink.TOTW:
        this._gotoTOTWSquadOverview();
        break;
      case enums.GoToLink.TRADE_PILE:
        this._gotoTransferList();
        break;
      case enums.GoToLink.UNASSIGNED:
        this._gotoUnassigned();
        break;
      case enums.GoToLink.WATCH_LIST:
        this._gotoTransferTargets();
        break;
      default:
        return (
          utils.Debug.Assert(!1, 'Unsupported goto link received: ' + e), !1
        );
    }
    return !0;
  }),
  (UTGoToLinkController.prototype._gotoMarketSearch = function _gotoMarketSearch() {
    if (this._nc) {
      var e =
        !gConfigurationModel.getConfigBoolean(
          models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET
        ) &&
        services.User.getUser().hasTradeAccess() &&
        services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.TRADING_ENABLED
        )
          ? new UTMarketSearchFiltersViewController()
          : new UTTransfersHubViewController();
      e.init(), this._nc.pushViewController(e, !0);
    }
  }),
  (UTGoToLinkController.prototype._gotoClubHub = function _gotoClubHub() {
    if (this._nc) {
      var e = new UTClubHubViewController();
      e.init(), this._nc.pushViewController(e, !0);
    }
  }),
  (UTGoToLinkController.prototype._gotoSquadBuildingChallengeHub = function _gotoSquadBuildingChallengeHub() {
    services.Configuration.checkFeatureEnabled(enums.ServerFeature.SBC_ENABLED)
      ? this._nc &&
        (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
        services.SBC.requestSets().observe(
          this,
          function _onRetrieveSBCSetsComplete(e, t) {
            if ((e.unobserve(this), t.success)) {
              var i = new UTSBCHubViewController();
              i.initWithSBCSetCategories(t.data.sets, t.data.categories),
                this._nc.pushViewController(i, !0);
            } else {
              var s =
                t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED
                  ? 'sbc.notification.disabled'
                  : 'notification.sbcSets.failedToLoad';
              services.Notification.queue([
                services.Localization.localize(s),
                enums.UINotificationType.NEGATIVE
              ]),
                t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                  services.Configuration.setFeatureEnabled(
                    enums.ServerFeature.SBC_ENABLED,
                    !1
                  );
            }
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
          }
        ))
      : services.Notification.queue([
          services.Localization.localize('sbc.notification.disabled'),
          enums.UINotificationType.NEGATIVE
        ]);
  }),
  (UTGoToLinkController.prototype._gotoActiveSquadOverview = function _gotoActiveSquadOverview() {
    this._nc &&
      (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Squad.requestSquadByType(enums.UserSquadId.ACTIVE).observe(
        this,
        function _onSquadLoadComplete(e, t) {
          if ((e.unobserve(this), t.success)) {
            var i = isPhone()
              ? new UTSquadOverviewViewController()
              : new UTSquadSplitViewController();
            i.initWithSquad(t.data.squad), this._nc.pushViewController(i);
          } else
            services.Notification.queue([
              services.Localization.localize('notification.squad.failedToLoad'),
              enums.UINotificationType.NEGATIVE
            ]);
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      ));
  }),
  (UTGoToLinkController.prototype._gotoSquadManagement = function _gotoSquadManagement() {
    if (this._nc) {
      var e = isPhone()
        ? new UTSquadListViewController()
        : new UTSquadListSplitViewController();
      e.init(), this._nc.pushViewController(e, !0);
    }
  }),
  (UTGoToLinkController.prototype._gotoStore = function _gotoStore() {
    if (this._nc) {
      var e = new UTStoreViewController();
      e.init(), this._nc.pushViewController(e, !0);
    }
  }),
  (UTGoToLinkController.prototype._gotoTOTWSquadOverview = function _gotoTOTWSquadOverview() {
    this._nc &&
      (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Squad.requestTOTWHistory().observe(
        this,
        function _onRequestHistoryComplete(e, t) {
          if (
            (e.unobserve(this),
            this._nc && t.success && 0 < t.data.squads.length)
          ) {
            var i = isPhone()
              ? new UTTOTWSquadOverviewViewController()
              : new UTTOTWSquadSplitViewController();
            i.initWithSquad(t.data.squads[0]), this._nc.pushViewController(i);
          } else
            services.Notification.queue([
              services.Localization.localize('notification.TOTW.loadfail'),
              enums.UINotificationType.NEGATIVE
            ]);
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      ));
  }),
  (UTGoToLinkController.prototype._gotoTransferList = function _gotoTransferList() {
    if (this._nc) {
      var e = isPhone()
        ? new UTTransferListViewController()
        : new UTTransferListSplitViewController();
      e.init(), this._nc.pushViewController(e, !0);
    }
  }),
  (UTGoToLinkController.prototype._gotoUnassigned = function _gotoUnassigned() {
    this._nc &&
      (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Item.requestUnassignedItems().observe(
        this,
        function _onRequestUnassignedComplete(e, t) {
          e.unobserve(this);
          var i = isPhone()
            ? new UTUnassignedItemsViewController()
            : new UTUnassignedItemsSplitViewController();
          t.success ? i.initWithItems(t.data.items) : i.init(),
            this._nc.pushViewController(i, !0),
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      ));
  }),
  (UTGoToLinkController.prototype._gotoTransferTargets = function _gotoTransferTargets() {
    var e;
    this._nc &&
      ((e =
        !gConfigurationModel.getConfigBoolean(
          models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET
        ) &&
        services.User.getUser().hasTradeAccess() &&
        services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.TRADING_ENABLED
        )
          ? isPhone()
            ? new UTWatchListViewController()
            : new UTWatchListSplitViewController()
          : new UTTransfersHubViewController()).init(),
      this._nc.pushViewController(e, !0));
  }),
  utils.JS.inherits(UTUnassignedItemsViewModel, viewmodels.ItemSectionList),
  (UTUnassignedItemsViewModel.SECTION = {
    ITEMS: 0,
    DUPLICATES: 1
  }),
  (UTUnassignedItemsViewModel.prototype.dealloc = function dealloc() {
    this.superclass(), this.cancelRequests();
  }),
  (UTUnassignedItemsViewModel.prototype.cancelRequests = function cancelRequests() {
    0 < this._requests.length &&
      (this._requests.forEach(function(e) {
        e.clearObservers(),
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
      }, this),
      (this._requests = []));
  }),
  (UTUnassignedItemsViewModel.prototype._completeRequest = function _completeRequest(
    e,
    t
  ) {
    e.unobserve(this),
      gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
    var i = this._requests.indexOf(e);
    0 <= i && this._requests.splice(i, 1);
  });

function UTTacticsEditRangeControl() {
  UTTargetActionView.call(this);
}

function UTTacticsStyleAdjustmentView() {
  UTTargetActionView.call(this),
    (this._styleRange = null),
    (this._styleDropDown = null);
}

function UTTacticsStyleAdjustmentViewController() {
  UTViewController.call(this),
    (this._tacticsViewModel = null),
    Object.defineProperty(this, '_tacticsViewModel', {
      enumerable: !1,
      writable: !0
    });
}

function UTTacticsStyleBarView() {
  UTView.call(this), (this._sections = []);
}

function UTTacticStyleTableCellView() {
  UTTargetActionView.call(this),
    (this._id = -1),
    (this._styleBar = null),
    (this._valueLabel = null);
}

function UTTacticsStyleMenuView() {
  UTTargetActionView.call(this);
}

function UTTacticsStyleMenuViewController() {
  UTViewController.call(this),
    (this._tacticsViewModel = null),
    Object.defineProperty(this, '_tacticsViewModel', {
      enumerable: !1,
      writable: !0
    });
}

function UTTacticsMentalityMenuView() {
  UTTargetActionView.call(this);
}

function UTTacticsMentalityMenuViewController() {
  UTViewController.call(this),
    (this._tacticsViewModel = null),
    Object.defineProperty(this, '_tacticsViewModel', {
      enumerable: !1,
      writable: !0
    }),
    (this._mentalitySelectViewController = null),
    Object.defineProperty(this, '_mentalitySelectViewController', {
      enumerable: !1,
      writable: !0
    }),
    (this._menuDelegate = null),
    Object.defineProperty(this, '_menuDelegate', {
      enumerable: !1,
      writable: !0
    });
}

function UTTacticsStyleNavigationController(e, t) {
  UTNavigationController.call(this, e, t),
    (this._tacticsViewModel = null),
    Object.defineProperty(this, '_tacticsViewModel', {
      enumerable: !1,
      writable: !0
    });
}

function UTTacticsSplitViewController() {
  UTSplitViewController.call(this),
    (this._tacticsViewModel = null),
    Object.defineProperty(this, '_tacticsViewModel', {
      enumerable: !1,
      writable: !0
    }),
    (this._mentalityMenuController = new UTTacticsMentalityMenuViewController()),
    (this._styleNavigationController = new UTTacticsStyleNavigationController()),
    (this._instructionsNavigationController = null),
    (this._formationNavigationController = null);
}

function UTSquadActionsViewController() {
  UTViewController.call(this),
    (this._squad = null),
    Object.defineProperty(this, '_squad', {
      writable: !0,
      enumerable: !1
    }),
    (this._formations = factories.DataProvider.getFormationDP()),
    Object.defineProperty(this, '_formations', {
      writable: !1,
      enumerable: !1
    }),
    (this._inSquadContext = !1),
    Object.defineProperty(this, '_inSquadContext', {
      writable: !0,
      enumerable: !1
    }),
    (this.onDataChange = new UTObservable()),
    Object.defineProperty(this, 'onDataChange', {
      writable: !1,
      enumerable: !0
    });
}

function UTSquadSlotDockView() {
  UTView.call(this),
    (this._slots = []),
    Object.defineProperty(this, '_slots', {
      enumerable: !1
    }),
    (this.__instructions = null),
    (this.isAnimating = !1),
    (this.isVisible = !1);
}

function UTSquadTabButtonControl() {
  UTButtonControl.call(this);
}

function UTSquadChemistryBarView() {
  UTView.call(this), (this._value = 0);
}

function UTStarRatingView() {
  UTView.call(this);
}

function UTSquadStarRatingView() {
  UTView.call(this), (this._value = 0);
}

function UTSquadSummaryBannerView() {
  UTView.call(this);
}

function UTSquadOverviewView() {
  UTTargetActionView.call(this),
    Object.defineProperty(this, 'renderChemistry', {
      get: function() {
        return !this._pitch || this._pitch.renderChemistry;
      },
      set: function(e) {
        this._pitch && (this._pitch.renderChemistry = e);
      },
      enumerable: !0
    }),
    (this._utilDragDrop = null),
    (this._summaryPanel = null),
    (this._detailsButton = null),
    (this._leftTab = null),
    (this._rightTab = null),
    (this._leftDock = null),
    (this._rightDock = null),
    (this._leftTabClientRect = null),
    (this._rightTabClientRect = null),
    (this._leftDockClientRect = null),
    (this._rightDockClientRect = null),
    (this.renderManager = !0),
    (this.renderConcepts = !0),
    (this.renderChemistry = !0),
    (this._animationDuration = 500),
    (this._slotViews = []),
    (this._hoverCallback = null),
    (this._dropAreas = {
      FIELD: 'field',
      LEFT_DOCK: 'leftDock',
      RIGHT_DOCK: 'rightDock'
    });
}

function UTSquadOverviewViewController() {
  UTViewController.call(this),
    (this._squadOverviewDelegate = null),
    (this._squad = null),
    (this.onItemMove = new UTObservable()),
    Object.defineProperty(this, 'onItemMove', {
      writable: !1,
      enumerable: !0
    }),
    (this.onItemSwap = new UTObservable()),
    Object.defineProperty(this, 'onItemSwap', {
      writable: !1,
      enumerable: !0
    }),
    (this.onDragEnd = new UTObservable()),
    Object.defineProperty(this, 'onDragEnd', {
      writable: !1,
      enumerable: !0
    });
}

function UTSquadComparePlayersViewController() {
  UTViewController.call(this),
    (this._panel = new UTCompareActionPanelViewController());
}

function UTBaseSquadSplitViewController() {
  UTSplitViewController.call(this),
    (this._overviewController = null),
    (this._itemDetailController = null),
    (this._compareItemsController = null),
    (this._squad = null),
    (this._slotA = null),
    (this._slotB = null),
    (this._slotHovered = null);
}

function UTSquadSplitViewController() {
  UTBaseSquadSplitViewController.call(this),
    (this._panelController = new controllers.navigation.SquadDetails(
      !0,
      new views.NavigationBar()
    ));
}

function UTTransferListView() {
  UTView.call(this), (this._sections = []), (this._emptyListView = null);
}

function UTTransferListViewController() {
  UTViewController.call(this),
    (this._viewmodel = new viewmodels.TransferSectionList([])),
    (this.onDataChange = new UTObservable()),
    Object.defineProperty(this, 'onDataChange', {
      writable: !1,
      enumerable: !0
    }),
    (this.onItemSelected = new UTObservable()),
    Object.defineProperty(this, 'onItemSelected', {
      writable: !1,
      enumerable: !0
    }),
    (this.onSearchClub = new UTObservable()),
    Object.defineProperty(this, 'onSearchClub', {
      writable: !1,
      enumerable: !0
    });
}

function UTTransferClubResultsViewController() {
  UTViewController.call(this),
    (this._searchCriteria = null),
    (this._viewmodel = new viewmodels.Club([])),
    (this._transferClubSearchDelegate = null);
}

function UTTransferListNavigationController(e, t) {
  UTNavigationController.call(this, e, t),
    (this.onAddPlayer = new UTObservable()),
    Object.defineProperty(this, 'onAddPlayer', {
      writable: !1
    }),
    (this._transferClubSearchDelegate = null);
}

function UTTransferListSplitViewController() {
  UTSplitViewController.call(this),
    (this._listController = new UTTransferListViewController()),
    (this._itemDetailController = new controllers.navigation.ItemDetails()),
    (this._clubSearchController = null);
}

function UTHomeHubViewModel() {
  UTObject.call(this),
    (this._requests = []),
    Object.defineProperty(this, '_requests', {
      writable: !0,
      enumerable: !1
    });
}

function UTWeekendLeagueProgressView() {
  UTTargetActionView.call(this),
    (this._timer = new utils.UTTimer()),
    Object.defineProperty(this, '_timer', {
      writable: !1,
      enumerable: !1
    }),
    (this._startTime = 0),
    Object.defineProperty(this, '_startTime', {
      writable: !0,
      enumerable: !1
    });
}

function UTSquadTileContentView() {
  UTView.call(this);
}

function UTSquadTileView() {
  UTTileView.call(this);
}

function UTGraphicalInfoTileContentView() {
  UTView.call(this);
}

function UTGraphicalInfoTileView() {
  UTTileView.call(this);
}

function UTObjectivesHubTileContentView() {
  UTView.call(this);
}

function UTObjectivesHubTileView() {
  UTTileView.call(this);
}

function UTTransfersTileContentView() {
  UTView.call(this);
}

function UTTransfersTileView() {
  UTTileView.call(this);
}

function UTHubMessagesTileView() {
  UTTileView.call(this),
    (this._data = []),
    (this._loadedImages = 0),
    (this._countdownTimer = null);
}

function UTPlayerPicksTileView() {
  UTTileView.call(this);
}

function UTLeaderboardsTileView() {
  UTTileView.call(this);
}

function UTUnassignedTileView() {
  UTTileView.call(this);
}

function UTChampionsTileView() {
  UTTileView.call(this);
}

function UTRivalsTileView() {
  UTTileView.call(this);
}

function UTSquadBattlesTileView() {
  UTTileView.call(this);
}

function UTHomeHubView() {
  UTView.call(this);
}

function UTHomeHubViewController() {
  UTViewController.call(this),
    (this._viewmodel = new UTHomeHubViewModel()),
    (this._goToLinkController = new UTGoToLinkController()),
    (this._playerPicks = []);
}

function UTAboutView() {
  UTView.call(this);
}

function UTAboutViewController() {
  UTViewController.call(this);
}

function UTAppSettingsView() {
  UTView.call(this);
}

function UTAppSettingsViewController() {
  UTViewController.call(this),
    (this._personaController = null),
    (this._canOpenExternalLinks = !1),
    (this._canOpenExternalLinks = !0);
}
(UTUnassignedItemsViewModel.prototype.getStorableSection = function getStorableSection() {
  return this.getSectionItems(UTUnassignedItemsViewModel.SECTION.ITEMS);
}),
  (UTUnassignedItemsViewModel.prototype.getDuplicateSection = function getDuplicateSection() {
    return this.getSectionItems(UTUnassignedItemsViewModel.SECTION.DUPLICATES);
  }),
  (UTUnassignedItemsViewModel.prototype.hasMovableItems = function hasMovableItems() {
    return (
      -1 <
      this.indexOf(function(e) {
        return e.isMovable();
      })
    );
  }),
  (UTUnassignedItemsViewModel.prototype.getMovableItems = function getMovableItems() {
    return this.values().filter(function(e) {
      return e.isMovable();
    });
  }),
  (UTUnassignedItemsViewModel.prototype.hasTradeableDuplicates = function hasTradeableDuplicates() {
    return (
      -1 <
      this.indexOf(function(e) {
        return !e.isMovable() && !e.untradeable;
      })
    );
  }),
  (UTUnassignedItemsViewModel.prototype.getTradeableDuplicates = function getTradeableDuplicates() {
    return this.values().filter(function(e) {
      return e.isDuplicate() && !e.untradeable;
    });
  }),
  (UTUnassignedItemsViewModel.prototype.getDiscardableInfo = function getDiscardableInfo() {
    var i = {
      items: {
        entities: [],
        count: 0,
        value: 0
      },
      duplicates: {
        entities: [],
        count: 0,
        value: 0
      }
    };
    return (
      this.values().forEach(function(e) {
        if (e.isDiscardable() && !e.isDuplicateLoanPlayer()) {
          var t = e.isDuplicate() ? i.duplicates : i.items;
          t.entities.push(e), t.count++, (t.value += e.discardValue);
        }
      }),
      i
    );
  }),
  (UTUnassignedItemsViewModel.prototype.requestUnassignedItems = function requestUnassignedItems() {
    var e = services.Item.requestUnassignedItems();
    return (
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      this._requests.push(
        e.observe(this, function _onRequestUnassignedItemsComplete(e, t) {
          t.success &&
            (this.dataUpdated.clearObservers(),
            this.resetCollection([]),
            this.addArray(t.data.items)),
            this._completeRequest(e, t);
        })
      ),
      e
    );
  }),
  NamespaceManager.Register('views.items'),
  (views.items.UnassignedItems = function UTUnassignedItemsView() {
    UTView.call(this), (this._sections = []), (this._emptyListView = null);
  }),
  utils.JS.inherits(views.items.UnassignedItems, UTView),
  (views.items.UnassignedItems.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('ut-unassigned-view'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.UnassignedItems.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (views.items.UnassignedItems.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.UnassignedItems.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.UnassignedItems.prototype.dealloc = function dealloc() {
    utils.JS.isValid(this._emptyListView) &&
      (this._emptyListView.destroy(), (this._emptyListView = null)),
      this.clearSections(),
      this.superclass();
  }),
  (views.items.UnassignedItems.prototype.selectListRow = function selectListRow(
    t
  ) {
    this._sections.forEach(function(e) {
      e.selectRowByItemId(t);
    });
  }),
  (views.items.UnassignedItems.prototype.getSection = function(e) {
    return this._sections[e] || null;
  }),
  (views.items.UnassignedItems.prototype.clearSections = function clearSections() {
    this._sections.forEach(function(e) {
      e.destroy();
    }),
      (this._sections = []);
  }),
  (views.items.UnassignedItems.prototype.renderSection = function renderSection(
    e,
    t,
    i
  ) {
    var s = this._sections[t];
    return (
      s
        ? s.clearList()
        : ((s = new views.lists.SectionedItemList()).init(),
          (this._sections[t] = s)),
      0 === e.length
        ? s.getRoot().remove()
        : (s.addItems(e, i, enums.UIListItemPriority.PLAYER_STATS),
          s.render(),
          this.getRoot()
            .empty()
            .append(
              this._sections.map(function(e) {
                return e.getRoot();
              })
            )),
      s
    );
  }),
  (views.items.UnassignedItems.prototype.renderEmptyView = function renderEmptyView(
    e,
    t,
    i
  ) {
    this.clearSections(),
      (this._emptyListView = new UTListNoResultsView()),
      this._emptyListView.init(),
      this._emptyListView.setText(e),
      utils.JS.isFunction(i) && this._emptyListView.setupButton(t, i),
      this.getRoot().append(this._emptyListView.getRoot());
  }),
  (views.items.UnassignedItems.prototype.removeItemsById = function removeItemsById(
    t
  ) {
    this._sections.forEach(function(e) {
      e.removeItemsById(t);
    });
  }),
  utils.JS.inherits(UTUnassignedItemsViewController, UTViewController),
  (UTUnassignedItemsViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(), this._viewmodel || this._updateViewModel([]));
  }),
  (UTUnassignedItemsViewController.prototype.initWithItems = function initWithItems(
    e
  ) {
    this.initialized || (this._updateViewModel(e), this.init());
  }),
  (UTUnassignedItemsViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._itemListViewDelegate && (this._itemListViewDelegate = null),
      this._viewmodel && (this._viewmodel.dealloc(), (this._viewmodel = null)),
      this.onDataChange.dealloc(),
      (this.onDataChange = null);
  }),
  (UTUnassignedItemsViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.UnassignedItems();
  }),
  (UTUnassignedItemsViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Unassigned Items - List View';
  }),
  (UTUnassignedItemsViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.assigncards');
  }),
  (UTUnassignedItemsViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._getUnassignedItems(!1),
      services.User.requestCurrencies(),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.MISC,
        'Unassigned List'
      ),
      getDefaultDispatcher().addObserver(
        enums.Notification.UNASSIGNED_ITEM_ADDED,
        this,
        this._nItemAdded
      );
  }),
  (UTUnassignedItemsViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      getDefaultDispatcher().removeObserver(
        enums.Notification.UNASSIGNED_ITEM_ADDED,
        this
      );
  }),
  (UTUnassignedItemsViewController.prototype.getViewModel = function getViewModel() {
    return this._viewmodel;
  }),
  (UTUnassignedItemsViewController.prototype._updateViewModel = function _updateViewModel(
    e
  ) {
    this._viewmodel
      ? (this._viewmodel.dataUpdated.clearObservers(),
        this._viewmodel.resetCollection([]),
        this._viewmodel.addArray(e))
      : (this._viewmodel = new UTUnassignedItemsViewModel(e));
  }),
  (UTUnassignedItemsViewController.prototype.setItemListViewDelegate = function setItemListViewDelegate(
    e
  ) {
    e.conforms(interfaces.ItemListViewDelegate) &&
      (this._itemListViewDelegate = e);
  }),
  (UTUnassignedItemsViewController.prototype.removeItemsById = function removeItemsById(
    e
  ) {
    this._renderView(),
      0 === this._viewmodel.length && this.onDataChange.notify();
  }),
  (UTUnassignedItemsViewController.prototype._updateItemSectionOptions = function _updateItemSectionOptions() {
    var e = this._viewmodel.getStorableSection(),
      t = this._viewmodel.getDiscardableInfo(),
      i = this.getView().getSection(UTUnassignedItemsViewModel.SECTION.ITEMS);
    if (i)
      if (
        (i.setHeader(
          services.Localization.localize('dock.label.items'),
          services.Localization.localize('infopanel.label.storeAllInClub'),
          this._viewmodel.hasMovableItems()
            ? this._storeInClub.bind(this)
            : null
        ),
        0 < t.items.count)
      ) {
        var s =
          1 === t.items.count
            ? services.Localization.localize(
                'unassigned.sectionFooter.quickSellItem'
              )
            : services.Localization.localize(
                'unassigned.sectionFooter.quickSellItems',
                [t.items.count]
              );
        i.setFooter(
          s,
          services.Localization.localizeNumber(t.items.value),
          !0,
          this._quickSell.bind(this, e, t.items.value)
        );
      } else i.removeFooter();
  }),
  (UTUnassignedItemsViewController.prototype._updateDuplicateSectionOptions = function _updateDuplicateSectionOptions() {
    var e = this.getView().getSection(
      UTUnassignedItemsViewModel.SECTION.DUPLICATES
    );
    if (e) {
      var t = this._viewmodel.getDuplicateSection(),
        i = this._viewmodel.getDiscardableInfo(),
        s =
          repositories.Item.numItemsInCache(enums.FUTItemPile.TRANSFER) +
            t.length <=
          repositories.Item.getPileSize(enums.FUTItemPile.TRANSFER);
      if (
        (e.setHeader(
          services.Localization.localize('dock.label.duplicates'),
          services.Localization.localize('infopanel.label.sendTradePile'),
          this._viewmodel.hasTradeableDuplicates() && s
            ? this._sendToTransferList.bind(this)
            : null
        ),
        0 < i.duplicates.count)
      ) {
        var n =
          1 === i.duplicates.count
            ? services.Localization.localize(
                'unassigned.sectionFooter.quickSellDuplicate'
              )
            : services.Localization.localize(
                'unassigned.sectionFooter.quickSellDuplicates',
                [i.duplicates.count]
              );
        e.setFooter(
          n,
          services.Localization.localizeNumber(i.duplicates.value),
          !0,
          this._quickSell.bind(this, i.duplicates.entities, i.duplicates.value)
        );
      } else e.removeFooter();
    }
  }),
  (UTUnassignedItemsViewController.prototype._renderView = function _renderView() {
    var e = this.getView();
    if (0 === this._viewmodel.length)
      e.renderEmptyView(
        services.Localization.localize(
          hasConnection() ? 'newitems.emptymessage' : 'newitems.unavailable'
        )
      );
    else {
      e.clearSections();
      var t = this._viewmodel.getStorableSection(),
        i = this._viewmodel.getDuplicateSection();
      0 < t.length &&
        (e.renderSection(
          t,
          UTUnassignedItemsViewModel.SECTION.ITEMS,
          this._eListRowSelected.bind(this)
        ),
        this._updateItemSectionOptions()),
        0 < i.length &&
          (e.renderSection(
            i,
            UTUnassignedItemsViewModel.SECTION.DUPLICATES,
            this._eListRowSelected.bind(this)
          ),
          this._updateDuplicateSectionOptions()),
        isPhone() || e.selectListRow(this._viewmodel.current().id);
    }
  }),
  (UTUnassignedItemsViewController.prototype._storeInClub = function _storeInClub() {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.MISC,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Unassigned - Store All In Club'
    ),
      this.getView().setInteractionState(!1);
    var e = this._viewmodel.getMovableItems();
    0 === e.length
      ? (utils.PopupManager.ShowAlert(
          utils.PopupManager.Alerts.ALL_NEED_TO_BE_CLAIMED
        ),
        this.getView().setInteractionState(!0))
      : services.Item.move(e, enums.FUTItemPile.CLUB).observe(
          this,
          this._onMoveToClubComplete
        );
  }),
  (UTUnassignedItemsViewController.prototype._sendToTransferList = function _sendToTransferList() {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.MISC,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Unassigned - Send Duplicates To Transfer List'
    ),
      this.getView().setInteractionState(!1);
    var e = this._viewmodel.getTradeableDuplicates();
    if (0 === e.length)
      utils.PopupManager.ShowAlert(
        utils.PopupManager.Alerts.ALL_NEED_TO_BE_CLAIMED
      ),
        this.getView().setInteractionState(!0);
    else {
      var t =
        1 < e.length
          ? utils.PopupManager.Confirmations.SEND_ALL_TO_TRANSFER_LIST
          : utils.PopupManager.Confirmations.SEND_TO_TRANSFER_LIST;
      utils.PopupManager.ShowConfirmation(
        t,
        null,
        function _sendToTransferListConfirmed() {
          services.Item.move(e, enums.FUTItemPile.TRANSFER).observe(
            this,
            this._onMoveToTransferListComplete
          );
        }.bind(this),
        this._confirmationCancelled.bind(this)
      );
    }
  }),
  (UTUnassignedItemsViewController.prototype._getUnassignedItems = function _getUnassignedItems(
    i
  ) {
    (i = !utils.JS.isBoolean(i) || i),
      this._viewmodel
        .requestUnassignedItems()
        .observe(this, function _onRequestUnassignedItemsComplete(e, t) {
          e.unobserve(this),
            this.getView().setInteractionState(!0),
            t.success
              ? (this._renderView(), i && this.onDataChange.notify())
              : NetworkErrorManager.checkCriticalStatus(t.status)
              ? NetworkErrorManager.handleStatus(t.status)
              : services.Notification.queue([
                  services.Localization.localize('newitems.loaderror'),
                  enums.UINotificationType.NEGATIVE
                ]);
        });
  }),
  (UTUnassignedItemsViewController.prototype._onMoveToClubComplete = function _onMoveToClubComplete(
    e,
    t
  ) {
    if ((e.unobserve(this), t.success)) {
      var i = t.data.itemIds.length,
        s =
          1 < i
            ? services.Localization.localize('notification.item.allToClub', [i])
            : services.Localization.localize('notification.item.oneToClub');
      this._getUnassignedItems(),
        services.Notification.queue([s, enums.UINotificationType.NEUTRAL]);
    } else
      services.Notification.queue([
        services.Localization.localize('notification.item.moveFailed'),
        enums.UINotificationType.NEGATIVE
      ]),
        NetworkErrorManager.handleStatus(t.status);
  }),
  (UTUnassignedItemsViewController.prototype._onMoveToTransferListComplete = function _onMoveToTransferListComplete(
    e,
    t
  ) {
    if ((e.unobserve(this), t.success)) {
      var i = t.data.itemIds.length,
        s =
          1 < i
            ? services.Localization.localize(
                'notification.item.allToTradePile',
                [i]
              )
            : services.Localization.localize(
                'notification.item.oneToTradePile'
              );
      this._getUnassignedItems(),
        services.Notification.queue([s, enums.UINotificationType.NEUTRAL]);
    } else
      services.Notification.queue([
        services.Localization.localize('notification.item.moveFailed'),
        enums.UINotificationType.NEGATIVE
      ]),
        NetworkErrorManager.handleStatus(t.status);
  }),
  (UTUnassignedItemsViewController.prototype._quickSell = function _quickSell(
    e,
    t
  ) {
    var s = utils.JS.isValid(e[0]) && e[0].isDuplicate(),
      i = 'Unassigned - Quick Sell ' + (s ? 'Duplicates' : 'Items');

    function _quickSellComplete(e, t) {
      if ((e.unobserve(this), t.success)) {
        var i =
          'notification.' +
          (s ? 'duplicate' : 'item') +
          (1 < t.data.itemIds.length ? '.allQuickSold' : '.sold');
        services.Notification.queue([
          services.Localization.localize(i),
          enums.UINotificationType.POSITIVE
        ]),
          this._getUnassignedItems();
      } else
        services.Notification.queue([
          services.Localization.localize('notification.item.quickSellFailed'),
          enums.UINotificationType.NEGATIVE
        ]);
    }
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.MISC,
      TelemetryManager.Categories.BUTTON_PRESS,
      i
    ),
      this.getView().setInteractionState(!1),
      utils.PopupManager.ShowConfirmation(
        1 < e.length
          ? utils.PopupManager.Confirmations.CONFIRM_DISCARD_ALL
          : utils.PopupManager.Confirmations.CONFIRM_DISCARD,
        [services.Localization.localizeNumber(t)],
        function _quickSellConfirmed() {
          services.Item.discard(e).observe(this, _quickSellComplete);
        }.bind(this),
        this._confirmationCancelled.bind(this)
      );
  }),
  (UTUnassignedItemsViewController.prototype._confirmationCancelled = function _confirmationCancelled() {
    this.getView().setInteractionState(!0);
  }),
  (UTUnassignedItemsViewController.prototype._eListRowSelected = function _eListRowSelected(
    t
  ) {
    var e = this._viewmodel.indexOf(function(e) {
        return e.id === t.id;
      }),
      i = e !== this._viewmodel.getIndex();
    if (
      (i && this._viewmodel.setIndex(e),
      utils.JS.isValid(this._itemListViewDelegate))
    )
      i && this._itemListViewDelegate.selectListRow(this, e, t);
    else {
      var s = this.getNavigationController();
      if (s) {
        var n = new controllers.items.ItemDetails();
        n.initWithIterator(this._viewmodel), s.pushViewController(n, !0);
      }
    }
  }),
  (UTUnassignedItemsViewController.prototype._nItemAdded = function _nItemAdded(
    e,
    t,
    i
  ) {
    var s = 0 < this._viewmodel.length ? this._viewmodel.current().id : -1;
    this._viewmodel.addArray(utils.JS.valToArray(i.item)),
      -1 < s &&
        this._viewmodel.setIndex(
          this._viewmodel.indexOf(function(e) {
            return e.id === s;
          })
        ),
      this._renderView(),
      this.onDataChange.notify();
  }),
  services.URL.registerDeepLinkID(enums.DeepLinkSections.UNASSIGNED, function(
    e
  ) {
    var t, s;
    (t = getAppMain()
      .getRootViewController()
      .getPresentedViewController()) &&
      t.isSubClass(UTTabBarController) &&
      (s = t.getCurrentViewController()) &&
      s.isSubClass(UTNavigationController) &&
      (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Item.requestUnassignedItems().observe(
        this,
        function _onRequestUnassignedComplete(e, t) {
          e.unobserve(this);
          var i = isPhone()
            ? new UTUnassignedItemsViewController()
            : new UTUnassignedItemsSplitViewController();
          t.success ? i.initWithItems(t.data.items) : i.init(),
            s.pushViewController(i, !0),
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      ));
  }),
  utils.JS.inherits(
    UTUnassignedItemsSplitViewController,
    UTSplitViewController
  ),
  (UTUnassignedItemsSplitViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        this._listViewController.init(),
        this._listViewController.onDataChange.observe(
          this,
          this._unassignedListChanged
        ),
        this.addChildViewController(this._listViewController);
      var e = getDefaultDispatcher();
      e.addObserver(
        enums.Notification.ITEM_ACTIVATE,
        this,
        this._nItemActivated
      ),
        e.addObserver(
          enums.Notification.ITEM_DISCARD,
          this,
          this._nItemDiscarded
        ),
        e.addObserver(enums.Notification.ITEM_LIST, this, this._nItemListed),
        e.addObserver(enums.Notification.ITEM_MOVE, this, this._nItemMoved),
        e.addObserver(
          enums.Notification.ITEM_REDEEM,
          this,
          this._nItemRedeemed
        );
    }
  }),
  (UTUnassignedItemsSplitViewController.prototype.initWithItems = function initWithItems(
    e
  ) {
    this.initialized ||
      (this._listViewController.initWithItems(e),
      this._listViewController.setItemListViewDelegate(this),
      0 < e.length &&
        ((this._itemDetailController = new controllers.navigation.ItemDetails()),
        this._itemDetailController.initWithIterator(
          this._listViewController.getViewModel()
        ),
        this._itemDetailController.enableSwiping(!1),
        this.addChildViewController(this._itemDetailController)),
      this.init());
  }),
  (UTUnassignedItemsSplitViewController.prototype.dealloc = function dealloc() {
    this._listViewController.dealloc(),
      (this._listViewController = null),
      utils.JS.isValid(this._itemDetailController) &&
        (this._itemDetailController.dealloc(),
        (this._itemDetailController = null));
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.ITEM_ACTIVATE, this),
      e.removeObserver(enums.Notification.ITEM_DISCARD, this),
      e.removeObserver(enums.Notification.ITEM_LIST, this),
      e.removeObserver(enums.Notification.ITEM_MOVE, this),
      e.removeObserver(enums.Notification.ITEM_REDEEM, this),
      this.superclass();
  }),
  (UTUnassignedItemsSplitViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.assigncards');
  }),
  (UTUnassignedItemsSplitViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._setLeftController(this._listViewController),
      utils.JS.isValid(this._itemDetailController) &&
        (this._setRightController(this._itemDetailController),
        this._itemDetailController.setNavigationStyle(
          enums.UINavigationBarStyle.SECONDARY
        ));
  }),
  (UTUnassignedItemsSplitViewController.prototype.selectListRow = function selectListRow(
    e,
    t,
    i
  ) {
    e === this._listViewController &&
      (this._listViewController.getView().selectListRow(i.id),
      this._itemDetailController.setIndex(t));
  }),
  (UTUnassignedItemsSplitViewController.prototype._unassignedListChanged = function _unassignedListChanged(
    e
  ) {
    var t = this._listViewController.getViewModel();
    0 === t.length
      ? this._removeRightController()
      : (utils.JS.isValid(this._rightController) ||
          this._setRightController(this._itemDetailController),
        this._itemDetailController.setIndex(t.getIndex()));
  }),
  (UTUnassignedItemsSplitViewController.prototype._nItemActivated = function _nItemActivated(
    e,
    t,
    i
  ) {
    this._listViewController.removeItemsById(i.itemIds || []);
  }),
  (UTUnassignedItemsSplitViewController.prototype._nItemDiscarded = function _nItemDiscarded(
    e,
    t,
    i
  ) {
    this._listViewController.removeItemsById(i.itemIds || []);
  }),
  (UTUnassignedItemsSplitViewController.prototype._nItemListed = function _nItemListed(
    e,
    t,
    i
  ) {
    this._listViewController.removeItemsById(i.itemIds || []);
  }),
  (UTUnassignedItemsSplitViewController.prototype._nItemMoved = function _nItemMoved(
    e,
    t,
    i
  ) {
    this._listViewController.removeItemsById(i.itemIds || []);
  }),
  (UTUnassignedItemsSplitViewController.prototype._nItemRedeemed = function _nItemRedeemed(
    e,
    t,
    i
  ) {
    this._listViewController.removeItemsById(i.itemIds || []);
  }),
  utils.JS.inherits(UTLeaderboardsEntryView, UTView),
  (UTLeaderboardsEntryView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-leaderboards-entry'),
        (this.__rank = document.createElement('div')),
        this.__rank.classList.add('ut-leaderboards-entry--rank'),
        e.appendChild(this.__rank),
        (this._badge = new UTImageView()),
        this._badge
          .getRootElement()
          .classList.add('ut-leaderboards-entry--badge'),
        e.appendChild(this._badge.getRootElement());
      var t = document.createElement('div');
      t.classList.add('ut-leaderboards-entry--gametag'),
        (this.__gametag = document.createElement('span')),
        t.appendChild(this.__gametag),
        (this.__mobileScore = document.createElement('span')),
        this.__mobileScore.classList.add('ut-leaderboards-entry--mobile-score'),
        t.appendChild(this.__mobileScore),
        e.appendChild(t),
        (this.__score = document.createElement('div')),
        this.__score.classList.add('ut-leaderboards-entry--score'),
        e.appendChild(this.__score),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTLeaderboardsEntryView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__rank = null),
      this._badge.destroy(),
      (this.__gametag = null),
      (this.__mobileScore = null),
      (this.__score = null);
  }),
  (UTLeaderboardsEntryView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTLeaderboardsEntryView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTLeaderboardsEntryView.ScoreType = {
    NONE: '',
    COINS: 'currency-coins'
  }),
  (UTLeaderboardsEntryView.prototype.setRank = function setRank(e) {
    (this.__rank.textContent =
      0 < e ? e.toString() : enums.Localization.BLANK_STR),
      DOMKit.toggleClass(this.__rank, 'first', 1 === e),
      DOMKit.toggleClass(this.__rank, 'second', 2 === e),
      DOMKit.toggleClass(this.__rank, 'third', 3 === e);
  }),
  (UTLeaderboardsEntryView.prototype.setBadge = function setBadge(e) {
    var t = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT,
      enums.Year.ASSET,
      e
    );
    this._badge.setResource(t, !0).observe(this, function(e, t) {
      if ((e.unobserve(this), !t)) {
        var i = utils.AssetLocator.getImage(
          utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT,
          enums.Year.ASSET,
          utils.AssetLocator.ASSET_ID_DEFAULT
        );
        this._badge.setResource(i);
      }
    });
  }),
  (UTLeaderboardsEntryView.prototype.setGamerTag = function setGamerTag(e) {
    this.__gametag.textContent = e.toString();
  }),
  (UTLeaderboardsEntryView.prototype.setScore = function setScore(e, t) {
    (this.__score.textContent = services.Localization.localizeNumber(e)),
      (this.__mobileScore.textContent = services.Localization.localizeNumber(
        e
      )),
      DOMKit.removeClass(this.__score, UTLeaderboardsEntryView.ScoreType.COINS),
      DOMKit.removeClass(
        this.__mobileScore,
        UTLeaderboardsEntryView.ScoreType.COINS
      ),
      utils.JS.isString(t) &&
        t !== UTLeaderboardsEntryView.ScoreType.NONE &&
        (DOMKit.addClass(this.__score, t),
        DOMKit.addClass(this.__mobileScore, t));
  }),
  utils.JS.inherits(UTLeaderboardsHubView, UTView),
  (UTLeaderboardsHubView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-leaderboards-hub'),
        (this._tabMenu = new components.TabMenu()),
        e.appendChild(this._tabMenu.getRootElement()),
        (this.__contentContainer = document.createElement('div')),
        this.__contentContainer.classList.add('sm-ut-content-container'),
        this.__contentContainer.classList.add('ut-content-container'),
        (this.__listContainer = document.createElement('div')),
        this.__listContainer.classList.add('ut-pinned-list-container'),
        this.__listContainer.classList.add('ut-content');
      var t = document.createElement('header');
      t.classList.add('ut-leaderboards-hub--header'),
        (this._categoryIcon = new UTImageView()),
        this._categoryIcon
          .getRootElement()
          .classList.add('ut-leaderboards-hub--category-icon'),
        t.appendChild(this._categoryIcon.getRootElement()),
        (this.__categoryTitle = document.createElement('h1')),
        this.__categoryTitle.classList.add('ut-leaderboards-hub--category'),
        t.appendChild(this.__categoryTitle);
      var i = document.createElement('div');
      i.classList.add('ut-leaderboards-hub--dropdown-container'),
        (this.__viewOptionLabel = document.createElement('span')),
        this.__viewOptionLabel.classList.add(
          'ut-leaderboards-hub--dropdown-label'
        ),
        i.appendChild(this.__viewOptionLabel),
        (this._ddViewOptions = new UTDropDownControl()),
        i.appendChild(this._ddViewOptions.getRootElement()),
        t.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('ut-leaderboards-hub--dropdown-container'),
        (this.__periodOptionLabel = document.createElement('span')),
        this.__periodOptionLabel.classList.add(
          'ut-leaderboards-hub--dropdown-label'
        ),
        s.appendChild(this.__periodOptionLabel),
        (this._ddPeriodOptions = new UTDropDownControl()),
        s.appendChild(this._ddPeriodOptions.getRootElement()),
        t.appendChild(s),
        this.__listContainer.appendChild(t);
      var n = document.createElement('div');
      n.classList.add('ut-leaderboards-hub--titles'),
        (this.__rankTitle = document.createElement('span')),
        this.__rankTitle.classList.add('ut-leaderboards-hub--title-rank'),
        n.appendChild(this.__rankTitle),
        (this.__gametagTitle = document.createElement('span')),
        this.__gametagTitle.classList.add('ut-leaderboards-hub--title-gametag'),
        n.appendChild(this.__gametagTitle),
        (this.__scoreTitle = document.createElement('span')),
        this.__scoreTitle.classList.add('ut-leaderboards-hub--title-score'),
        n.appendChild(this.__scoreTitle),
        this.__listContainer.appendChild(n),
        (this.__pinnedEntry = document.createElement('div')),
        this.__pinnedEntry.classList.add('ut-pinned-item'),
        this.__listContainer.appendChild(this.__pinnedEntry),
        (this.__leaderboardList = document.createElement('div')),
        this.__leaderboardList.classList.add('ut-pinned-list'),
        this.__listContainer.appendChild(this.__leaderboardList),
        this.__contentContainer.appendChild(this.__listContainer),
        e.appendChild(this.__contentContainer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTLeaderboardsHubView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._tabMenu.destroy(),
      (this.__contentContainer = null),
      (this.__listContainer = null),
      this._categoryIcon.destroy(),
      (this.__categoryTitle = null),
      (this.__viewOptionLabel = null),
      this._ddViewOptions.destroy(),
      (this.__periodOptionLabel = null),
      this._ddPeriodOptions.destroy(),
      (this.__rankTitle = null),
      (this.__gametagTitle = null),
      (this.__scoreTitle = null),
      (this.__pinnedEntry = null),
      (this.__leaderboardList = null);
  }),
  (UTLeaderboardsHubView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTLeaderboardsHubView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTLeaderboardsHubView.CategoryIcon = {
    BUILDER: 0,
    COLLECTOR: 1,
    COMPETITOR: 2,
    TRADER: 3
  }),
  (UTLeaderboardsHubView.prototype.init = function init() {
    this.superclass(),
      this._ddViewOptions.init(),
      this._ddPeriodOptions.init(),
      (this.__rankTitle.textContent = services.Localization.localize(
        'LOC_LB_RANK'
      )),
      (this.__viewOptionLabel.textContent = services.Localization.localize(
        'LOC_LB_VIEW'
      )),
      (this.__periodOptionLabel.textContent = services.Localization.localize(
        'LOC_LB_PERIOD'
      ));
  }),
  (UTLeaderboardsHubView.prototype.dealloc = function dealloc() {
    this._clearLeaderboardEntries(),
      this._pinnedEntryView &&
        (this._pinnedEntryView.dealloc(), (this._pinnedEntryView = null)),
      this.superclass();
  }),
  (UTLeaderboardsHubView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    this.superclass(e), this._tabMenu.setInteractionState(e);
  }),
  (UTLeaderboardsHubView.prototype.getTabMenu = function getTabMenu() {
    return this._tabMenu;
  }),
  (UTLeaderboardsHubView.prototype.getViewOptionDropDown = function getViewOptionDropDown() {
    return this._ddViewOptions;
  }),
  (UTLeaderboardsHubView.prototype.getPeriodOptionDropDown = function getPeriodOptionDropDown() {
    return this._ddPeriodOptions;
  }),
  (UTLeaderboardsHubView.prototype._clearLeaderboardEntries = function _clearLeaderboardEntries() {
    this._entryViews.forEach(function(e) {
      e.dealloc();
    }),
      (this._entryViews = []);
  }),
  (UTLeaderboardsHubView.prototype.setPeriodOptions = function setPeriodOptions(
    e
  ) {
    var t = e.map(function(e, t) {
      return new transferobjects.DataProviderEntry(
        t,
        e.id,
        services.Localization.localize(e.display)
      );
    });
    this._ddPeriodOptions.setOptions(t);
  }),
  (UTLeaderboardsHubView.prototype.setViewOptions = function setViewOptions(e) {
    var t = e.map(function(e, t) {
      return new transferobjects.DataProviderEntry(
        t,
        e.id,
        services.Localization.localize(e.display)
      );
    });
    this._ddViewOptions.setOptions(t);
  }),
  (UTLeaderboardsHubView.prototype.setCategories = function setCategories(e) {
    this._tabMenu.clearTabs(),
      e.forEach(function(e) {
        this._tabMenu.addTab(e.id, services.Localization.localize(e.display));
      }, this),
      this._tabMenu.layoutSubviews(),
      (this.__contentContainer.style.height =
        'calc(100% - ' + this._tabMenu.getRootElement().offsetHeight + 'px)');
  }),
  (UTLeaderboardsHubView.prototype.setSelectedView = function setSelectedView(
    e
  ) {
    this._ddViewOptions.setIndexByValue(e);
  }),
  (UTLeaderboardsHubView.prototype.setSelectedPeriod = function setSelectedPeriod(
    e
  ) {
    this._ddPeriodOptions.setIndexByValue(e);
  }),
  (UTLeaderboardsHubView.prototype.setActiveCategory = function setActiveCategory(
    e
  ) {
    this._tabMenu.setActiveTab(e);
  }),
  (UTLeaderboardsHubView.prototype.setUserEntry = function setUserEntry(e) {
    if (e) {
      this._pinnedEntryView ||
        ((this._pinnedEntryView = new UTLeaderboardsEntryView()),
        this._pinnedEntryView.init(),
        this.addSubview(this._pinnedEntryView, this.__pinnedEntry),
        this.layoutSubviews());
      var t =
        'builder' !== e.category
          ? UTLeaderboardsEntryView.ScoreType.COINS
          : UTLeaderboardsEntryView.ScoreType.NONE;
      this._pinnedEntryView.setRank(e.rank),
        this._pinnedEntryView.setBadge(e.badge),
        this._pinnedEntryView.setGamerTag(e.persona),
        this._pinnedEntryView.setScore(e.score, t);
    } else this._pinnedEntryView && this._pinnedEntryView.removeFromSuperview();
  }),
  (UTLeaderboardsHubView.prototype.setLeaderboardEntries = function setLeaderboardEntries(
    e
  ) {
    this._clearLeaderboardEntries(),
      e.forEach(function(e) {
        var t = new UTLeaderboardsEntryView(),
          i =
            'builder' !== e.category
              ? UTLeaderboardsEntryView.ScoreType.COINS
              : UTLeaderboardsEntryView.ScoreType.NONE;
        t.init(),
          t.setRank(e.rank),
          t.setBadge(e.teamId),
          t.setGamerTag(e.persona),
          t.setScore(e.score, i),
          this.addSubview(t, this.__leaderboardList),
          this._entryViews.push(t);
      }, this),
      this.layoutSubviews(),
      (this.__leaderboardList.scrollTop = 0);
  }),
  (UTLeaderboardsHubView.prototype.setCategoryIcon = function setCategoryIcon(
    e
  ) {
    switch (e) {
      case UTLeaderboardsHubView.CategoryIcon.TRADER:
        this._categoryIcon.setLocalResource(
          'images/leaderboards/leaderboard_category_trader.svg'
        );
        break;
      case UTLeaderboardsHubView.CategoryIcon.COLLECTOR:
        this._categoryIcon.setLocalResource(
          'images/leaderboards/leaderboard_category_collector.svg'
        );
        break;
      case UTLeaderboardsHubView.CategoryIcon.COMPETITOR:
        this._categoryIcon.setLocalResource(
          'images/leaderboards/leaderboard_category_competitor.svg'
        );
        break;
      case UTLeaderboardsHubView.CategoryIcon.BUILDER:
      default:
        this._categoryIcon.setLocalResource(
          'images/leaderboards/leaderboard_category_builder.svg'
        );
    }
  }),
  (UTLeaderboardsHubView.prototype.setCategoryTitle = function setCategoryTitle(
    e
  ) {
    this.__categoryTitle.textContent = e;
  }),
  (UTLeaderboardsHubView.prototype.setGameTagTitle = function setGameTagTitle(
    e
  ) {
    this.__gametagTitle.textContent = e;
  }),
  (UTLeaderboardsHubView.prototype.setScoreTitle = function setScoreTitle(e) {
    this.__scoreTitle.textContent = e;
  }),
  utils.JS.inherits(UTLeaderboardsViewModel, UTObject),
  (UTLeaderboardsViewModel.prototype.dealloc = function dealloc() {
    this.superclass(), this.cancelRequests();
  }),
  (UTLeaderboardsViewModel.prototype.setCategory = function setCategory(e) {
    this._permutation.category = e;
  }),
  (UTLeaderboardsViewModel.prototype.setPeriod = function setPeriod(e) {
    this._permutation.period = e;
  }),
  (UTLeaderboardsViewModel.prototype.setView = function setView(e) {
    this._permutation.view = e;
  }),
  (UTLeaderboardsViewModel.prototype.setStateByPermutation = function setStateByPermutation(
    e
  ) {
    this.setCategory(e.category),
      this.setPeriod(e.period),
      this.setView(e.view);
  }),
  (UTLeaderboardsViewModel.prototype.cancelRequests = function cancelRequests() {
    0 < this._requests.length &&
      (this._requests.forEach(function(e) {
        e.clearObservers(),
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
      }, this),
      (this._requests = []));
  }),
  (UTLeaderboardsViewModel.prototype._completeRequest = function _completeRequest(
    e,
    t
  ) {
    e.unobserve(this),
      gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
    var i = this._requests.indexOf(e);
    0 <= i && this._requests.splice(i, 1);
  }),
  (UTLeaderboardsViewModel.prototype.requestLeaderboardOptions = function requestLeaderboardOptions() {
    var e = services.Leaderboards.requestOptions();
    return (
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      this._requests.push(e.observe(this, this._completeRequest)),
      e
    );
  }),
  (UTLeaderboardsViewModel.prototype.requestLeaderboardData = function requestLeaderboardData() {
    var e = services.Leaderboards.requestLeaderboardByPermutation(
      this._permutation
    );
    return (
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      this._requests.push(e.observe(this, this._completeRequest)),
      e
    );
  }),
  (UTLeaderboardsViewModel.prototype.requestUserLeaderboardData = function requestUserLeaderboardData() {
    var e = services.Leaderboards.requestUserStatsByPermutation(
      this._permutation
    );
    return (
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      this._requests.push(e.observe(this, this._completeRequest)),
      e
    );
  }),
  utils.JS.inherits(UTLeaderboardsHubViewController, UTViewController),
  (UTLeaderboardsHubViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      (this._viewmodel = new UTLeaderboardsViewModel()),
      this._viewmodel.init(),
      this.getView()
        .getTabMenu()
        .addTarget(this, this._eTabSelected, enums.Event.TAP));
  }),
  (UTLeaderboardsHubViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._viewmodel && (this._viewmodel.dealloc(), (this._viewmodel = null));
  }),
  (UTLeaderboardsHubViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTLeaderboardsHubView();
  }),
  (UTLeaderboardsHubViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Leaderboards - Hub';
  }),
  (UTLeaderboardsHubViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.leaderboards');
  }),
  (UTLeaderboardsHubViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this.getNavigationController().setNavigationVisibility(!0, !0),
      this._retrieveLeaderboardsData();
    var e = services.User.getUser().getSelectedPersona();
    if (e) {
      var t = this.getView();
      e.isPC
        ? t.setGameTagTitle(services.Localization.localize('LOC_LB_PERSONA_PC'))
        : e.isPlaystation
        ? t.setGameTagTitle(
            services.Localization.localize('LOC_LB_PERSONA_PS3')
          )
        : t.setGameTagTitle(
            services.Localization.localize('LOC_LB_PERSONA_360')
          );
    }
    TelemetryManager.trackPage(
      TelemetryManager.Sections.LEADERBOARDS,
      'Leaderboards - Hub'
    );
  }),
  (UTLeaderboardsHubViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(), this._viewmodel.cancelRequests();
    var e = this.getView();
    e
      .getViewOptionDropDown()
      .removeTarget(this, this._eViewOptionChanged, enums.Event.CHANGE),
      e
        .getPeriodOptionDropDown()
        .removeTarget(this, this._ePeriodOptionChanged, enums.Event.CHANGE);
  }),
  (UTLeaderboardsHubViewController.prototype._getIconTypeFromCategory = function _getIconTypeFromCategory(
    e
  ) {
    switch (e) {
      case 'builder':
        return UTLeaderboardsHubView.CategoryIcon.BUILDER;
      case 'trader':
        return UTLeaderboardsHubView.CategoryIcon.TRADER;
      case 'collector':
        return UTLeaderboardsHubView.CategoryIcon.COLLECTOR;
      case 'competitor':
        return UTLeaderboardsHubView.CategoryIcon.COMPETITOR;
    }
    return UTLeaderboardsHubView.CategoryIcon.COMPETITOR;
  }),
  (UTLeaderboardsHubViewController.prototype._onRequestLeaderboardComplete = function _onRequestLeaderboardComplete(
    e,
    t
  ) {
    e.unobserve(this),
      t.success
        ? this.getView().setLeaderboardEntries(t.data.entries)
        : NetworkErrorManager.checkCriticalStatus(t.status)
        ? NetworkErrorManager.handleStatus(t.status)
        : (t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED
            ? (services.Notification.queue([
                services.Localization.localize('popup.error.LeaderboardsDown'),
                enums.UINotificationType.NEGATIVE
              ]),
              services.Configuration.setFeatureEnabled(
                enums.ServerFeature.LEADERBOARDS_ENABLED,
                !1
              ))
            : services.Notification.queue([
                services.Localization.localize('popup.body.genericError'),
                enums.UINotificationType.NEGATIVE
              ]),
          getAppMain()
            .getRootViewController()
            .setGameViewTab(UTGameTabBarController.TabTag.HOME));
  }),
  (UTLeaderboardsHubViewController.prototype._onRequestUserStatsComplete = function _onRequestUserStatsComplete(
    e,
    t
  ) {
    e.unobserve(this),
      t.success && t.data.current
        ? this.getView().setUserEntry(t.data.current)
        : NetworkErrorManager.checkCriticalStatus(t.status)
        ? NetworkErrorManager.handleStatus(t.status)
        : this.getView().setUserEntry(null);
  }),
  (UTLeaderboardsHubViewController.prototype._retrieveLeaderboardsData = function _retrieveLeaderboardsData() {
    this._viewmodel
      .requestLeaderboardOptions()
      .observe(this, function _onRequestOptionsComplete(e, t) {
        if ((e.unobserve(this), t.success)) {
          var i = this.getView(),
            s = t.data.selection.category,
            n = [],
            o = [],
            a = [];
          t.data.options.forEach(function(e) {
            'category' === e.groupId
              ? n.push(e)
              : 'view' === e.groupId
              ? o.push(e)
              : 'period' === e.groupId && a.push(e);
          }, this),
            i.setCategories(n),
            i.setViewOptions(o),
            i.setPeriodOptions(a),
            i.setActiveCategory(s),
            i.setSelectedView(t.data.selection.view),
            i.setSelectedPeriod(t.data.selection.period),
            i.setCategoryTitle(
              services.Localization.localize('LOC_LB_INSET_' + s.toUpperCase())
            ),
            i.setScoreTitle(
              services.Localization.localize('LOC_LB_SCORE_' + s.toUpperCase())
            ),
            i.setCategoryIcon(this._getIconTypeFromCategory(s)),
            i
              .getViewOptionDropDown()
              .addTarget(this, this._eViewOptionChanged, enums.Event.CHANGE),
            i
              .getPeriodOptionDropDown()
              .addTarget(this, this._ePeriodOptionChanged, enums.Event.CHANGE),
            this._viewmodel.setStateByPermutation(t.data.selection),
            this._viewmodel
              .requestLeaderboardData()
              .observe(this, this._onRequestLeaderboardComplete);
        } else
          NetworkErrorManager.checkCriticalStatus(t.status)
            ? NetworkErrorManager.handleStatus(t.status)
            : (t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED
                ? (services.Notification.queue([
                    services.Localization.localize(
                      'popup.error.LeaderboardsDown'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]),
                  services.Configuration.setFeatureEnabled(
                    enums.ServerFeature.LEADERBOARDS_ENABLED,
                    !1
                  ))
                : services.Notification.queue([
                    services.Localization.localize('popup.body.genericError'),
                    enums.UINotificationType.NEGATIVE
                  ]),
              getAppMain()
                .getRootViewController()
                .setGameViewTab(UTGameTabBarController.TabTag.HOME));
      });
  }),
  (UTLeaderboardsHubViewController.prototype._eTabSelected = function _eTabSelected(
    e,
    t,
    i
  ) {
    var s = i.id.toString(),
      n = this.getView();
    this._viewmodel.setCategory(s),
      this._viewmodel
        .requestLeaderboardData()
        .observe(this, this._onRequestLeaderboardComplete),
      n.setCategoryTitle(
        services.Localization.localize('LOC_LB_INSET_' + s.toUpperCase())
      ),
      n.setScoreTitle(
        services.Localization.localize('LOC_LB_SCORE_' + s.toUpperCase())
      ),
      n.setCategoryIcon(this._getIconTypeFromCategory(s)),
      TelemetryManager.trackEvent(
        TelemetryManager.Sections.LEADERBOARDS,
        TelemetryManager.Categories.BUTTON_PRESS,
        'Category Selected - ' + s
      );
  }),
  (UTLeaderboardsHubViewController.prototype._eViewOptionChanged = function _eViewOptionChanged(
    e,
    t,
    i
  ) {
    this._viewmodel.setView(i.value.toString()),
      this._viewmodel
        .requestLeaderboardData()
        .observe(this, this._onRequestLeaderboardComplete),
      TelemetryManager.trackEvent(
        TelemetryManager.Sections.LEADERBOARDS,
        TelemetryManager.Categories.FILTER,
        'View Option Changed'
      );
  }),
  (UTLeaderboardsHubViewController.prototype._ePeriodOptionChanged = function _ePeriodOptionChanged(
    e,
    t,
    i
  ) {
    this._viewmodel.setPeriod(i.value.toString()),
      this._viewmodel
        .requestLeaderboardData()
        .observe(this, this._onRequestLeaderboardComplete),
      TelemetryManager.trackEvent(
        TelemetryManager.Sections.LEADERBOARDS,
        TelemetryManager.Categories.FILTER,
        'Period Option Changed'
      );
  }),
  utils.JS.inherits(
    UTObjectiveRewardsViewController,
    controllers.views.popups.InGameRewards
  ),
  (UTObjectiveRewardsViewController.prototype.init = function init() {
    if (
      (this.setButtonText(
        services.Localization.localize('objective.rewards.claim')
      ),
      utils.JS.isValid(this._scmpEntry))
    ) {
      var e = 'scmp.';
      this._scmpEntry instanceof UTCampaignLevelEntity
        ? (e += 'level')
        : this._scmpEntry instanceof UTCampaignGroupEntity
        ? (e += 'group')
        : (e += 'objective'),
        this.setTitle(services.Localization.localize(e + '.rewards.title')),
        this.setDescription(
          services.Localization.localize(e + '.rewards.description', [
            this._scmpEntry.title
          ])
        );
    } else
      this.setTitle(
        services.Localization.localize('scmp.generic.rewards.title')
      ),
        0 < this._rewards.length
          ? this.setDescription(
              services.Localization.localize(
                'objective.rewards.claimAlldescription'
              )
            )
          : this.setDescription(
              services.Localization.localize('objective.rewards.autoclaimed')
            );
    this.superclass();
  }),
  (UTObjectiveRewardsViewController.prototype.dealloc = function dealloc() {
    (this._objective = null), this.superclass();
  }),
  (UTObjectiveRewardsViewController.prototype._checkRewards = function _checkRewards(
    e
  ) {
    e.forEach(function(e) {
      (this.hasCoinsReward = this.hasCoinsReward || e.isCoin),
        (this.hasItemReward = this.hasItemReward || e.isItem),
        (this.hasPackReward = this.hasPackReward || e.isPack),
        (this.hasChampionsQualificationPoints =
          this.hasChampionsQualificationPoints ||
          e.isChampionQualificationPoints),
        (this.hasXPReward = this.hasXPReward || e.isXP);
    }, this);
  }),
  (UTObjectiveRewardsViewController.prototype._eBtnTapped = function _eBtnTapped(
    e,
    t,
    i
  ) {
    this.superclass(e, t, i),
      this.hasXPReward &&
        this._scmpEntry instanceof UTCampaignGroupEntity &&
        (services.Notification.queue([
          services.Localization.localize('notification.xp.added'),
          enums.UINotificationType.POSITIVE
        ]),
        services.Objectives.reset());
  }),
  utils.JS.inherits(UTObjectiveGroupProgressionView, UTTargetActionView),
  (UTObjectiveGroupProgressionView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-objective-group-progression-view');
      var t = document.createElement('div');
      t.classList.add('ut-objective-group-progression-view--body'),
        (this.__title = document.createElement('h1')),
        this.__title.classList.add(
          'ut-objective-group-progression-view--title'
        ),
        t.appendChild(this.__title),
        (this.__subtitle = document.createElement('p')),
        this.__subtitle.classList.add(
          'ut-objective-group-progression-view--subtitle'
        ),
        t.appendChild(this.__subtitle),
        (this.__countdown = document.createElement('p')),
        this.__countdown.classList.add(
          'ut-objective-group-progression-view--countdown'
        ),
        t.appendChild(this.__countdown),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('ut-objective-group-progression-view--reward'),
        e.appendChild(i),
        (this._rewardsInfoBtn = new UTImageButtonControl()),
        this._rewardsInfoBtn
          .getRootElement()
          .classList.add('ut-objective-group-progression-view--button--info'),
        e.appendChild(this._rewardsInfoBtn.getRootElement()),
        (this._progressBar = new UTProgressBarView()),
        e.appendChild(this._progressBar.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTObjectiveGroupProgressionView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      (this.__subtitle = null),
      (this.__countdown = null),
      this._rewardsInfoBtn.destroy(),
      this._progressBar.destroy();
  }),
  (UTObjectiveGroupProgressionView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTObjectiveGroupProgressionView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTObjectiveGroupProgressionView.Event = {
    REWARDS_INFO: 'UTObjectiveGroupProgressionView.Event.REWARDS_INFO'
  }),
  (UTObjectiveGroupProgressionView.prototype.init = function init() {
    this.superclass(),
      this._rewardsInfoBtn.init(),
      this._rewardsInfoBtn.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._rewardsInfoBtn.setInteractionState(!0),
      this.setInteractionState(!0);
  }),
  (UTObjectiveGroupProgressionView.prototype.setId = function setId(e) {
    this._id = e;
  }),
  (UTObjectiveGroupProgressionView.prototype.setTitle = function setTitle(e) {
    this.__title.textContent = e;
  }),
  (UTObjectiveGroupProgressionView.prototype.setProgress = function setProgress(
    e
  ) {
    this._progressBar.setProgress(e);
  }),
  (UTObjectiveGroupProgressionView.prototype.setProgressLabel = function setProgressLabel(
    e
  ) {
    this._progressBar.setProgressLabel(e);
  }),
  (UTObjectiveGroupProgressionView.prototype.setSubtitle = function setSubtitle(
    e
  ) {
    this.__subtitle.textContent = e;
  }),
  (UTObjectiveGroupProgressionView.prototype.setCountdown = function setCountdown(
    e
  ) {
    this.__countdown.textContent = e;
  }),
  (UTObjectiveGroupProgressionView.prototype.toggleCountdown = function toggleCountdown(
    e
  ) {
    DOMKit.toggleDisplayStyle(this.__countdown, e);
  }),
  (UTObjectiveGroupProgressionView.prototype._eButtonSelected = function _eButtonSelected(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTObjectiveGroupProgressionView.Event.REWARDS_INFO, {
        id: this._id
      });
  }),
  utils.JS.inherits(UTObjectiveEntryView, UTTileView),
  (UTObjectiveEntryView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-objective-entry-view'),
        (this.__overlay = document.createElement('div')),
        this.__overlay.classList.add('ut-objective-entry-view--overlay'),
        (this.__overlayText = document.createElement('span')),
        this.__overlay.appendChild(this.__overlayText),
        (this.__lockedByGroups = document.createElement('ul')),
        this.__lockedByGroups.classList.add(
          'ut-objective-entry-view--locked-by'
        ),
        this.__overlay.appendChild(this.__lockedByGroups),
        e.appendChild(this.__overlay);
      var t = document.createElement('div');
      t.classList.add('ut-objective-entry-view--body'),
        (this.__title = document.createElement('h1')),
        this.__title.classList.add('ut-objective-entry-view--title'),
        t.appendChild(this.__title),
        (this.__description = document.createElement('p')),
        this.__description.classList.add(
          'ut-objective-entry-view--description'
        ),
        t.appendChild(this.__description),
        (this._actionBtn = new UTStandardButtonControl()),
        this._actionBtn.getRootElement().classList.add('mini'),
        this._actionBtn
          .getRootElement()
          .classList.add('ut-objective-entry-view--button'),
        t.appendChild(this._actionBtn.getRootElement()),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('ut-objective-entry-view--rewards'),
        (this._rewardsCarousel = new UTCampaignRewardsCarouselView()),
        i.appendChild(this._rewardsCarousel.getRootElement()),
        (this.__choiceNumContainer = document.createElement('div')),
        this.__choiceNumContainer.classList.add(
          'ut-objective-entry-view--choices'
        ),
        (this.__choiceNum = document.createElement('span')),
        this.__choiceNumContainer.appendChild(this.__choiceNum),
        i.appendChild(this.__choiceNumContainer),
        e.appendChild(i),
        (this._rewardsFooter = new UTRewardsFooterView()),
        e.appendChild(this._rewardsFooter.getRootElement()),
        (this.__additionalRewards = document.createElement('div')),
        this.__additionalRewards.classList.add(
          'ut-objective-entry-view--additional-rewards'
        ),
        e.appendChild(this.__additionalRewards);
      var s = document.createElement('div');
      s.classList.add('ut-objective-entry-view--footer'),
        (this._progressBar = new UTProgressBarView()),
        s.appendChild(this._progressBar.getRootElement()),
        (this.__footerCountdown = document.createElement('span')),
        this.__footerCountdown.classList.add(
          'ut-objective-entry-view--countdown'
        ),
        s.appendChild(this.__footerCountdown),
        e.appendChild(s),
        (this._rewardsInfoBtn = new UTImageButtonControl()),
        this._rewardsInfoBtn
          .getRootElement()
          .classList.add('ut-objective-entry-view--button--info'),
        e.appendChild(this._rewardsInfoBtn.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTObjectiveEntryView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__overlay = null),
      (this.__overlayText = null),
      (this.__lockedByGroups = null),
      (this.__title = null),
      (this.__description = null),
      this._actionBtn.destroy(),
      this._rewardsCarousel.destroy(),
      (this.__choiceNumContainer = null),
      (this.__choiceNum = null),
      this._rewardsFooter.destroy(),
      (this.__additionalRewards = null),
      this._progressBar.destroy(),
      (this.__footerCountdown = null),
      this._rewardsInfoBtn.destroy();
  }),
  (UTObjectiveEntryView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTObjectiveEntryView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTObjectiveEntryView.Class = {
    IN_PROGRESS: 'in-progress',
    COMPLETED: 'complete',
    XP_REDEEMED: 'xp-redeemed',
    REDEEMED: 'redeemed',
    LOCKED: 'locked',
    SCHEDULED: 'scheduled',
    COMING_SOON: 'coming-soon'
  }),
  (UTObjectiveEntryView.Event = {
    CLAIM_REWARD: 'UTObjectiveEntryView.Event.CLAIM_REWARD',
    TAKE_ME_THERE: 'UTObjectiveEntryView.Event.TAKE_ME_THERE',
    OBJECTIVE_ENTRY_REWARDS_INFO:
      'UTObjectiveEntryView.Event.OBJECTIVE_ENTRY_REWARDS_INFO',
    OBJECTIVE_GROUP_REWARDS_INFO:
      'UTObjectiveEntryView.Event.OBJECTIVE_GROUP_REWARDS_INFO'
  }),
  (UTObjectiveEntryView.prototype.init = function init() {
    this.superclass(),
      DOMKit.toggleDisplayStyle(this.__footerCountdown, this._isGroup),
      this._actionBtn.init(),
      this._actionBtn.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._setActionButtonState(!1, ''),
      this._rewardsInfoBtn.init(),
      this._rewardsInfoBtn.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._rewardsInfoBtn.setInteractionState(!0),
      this._rewardsInfoBtn.setDisplay(!0),
      this.setInteractionState(!0);
  }),
  (UTObjectiveEntryView.prototype.dealloc = function dealloc() {
    this.resetRewardsCarousel(), this.superclass();
  }),
  (UTObjectiveEntryView.prototype.setId = function setId(e) {
    this._id = e;
  }),
  (UTObjectiveEntryView.prototype.getId = function getId() {
    return this._id;
  }),
  (UTObjectiveEntryView.prototype.setTitle = function setTitle(e) {
    this.__title.textContent = e;
  }),
  (UTObjectiveEntryView.prototype.setOverlayText = function setOverlayText(e) {
    this.__overlayText.textContent = e;
  }),
  (UTObjectiveEntryView.prototype.setRewards = function setRewards(e) {
    this._rewards = e;
  }),
  (UTObjectiveEntryView.prototype.renderRewardsFooter = function renderRewardsFooter() {
    var e = this._rewards.slice(1, 6);
    0 < e.length &&
      (this._rewardsFooter.setData(e),
      this._rewardsFooter.render(!0),
      6 < this._rewards.length &&
        (this.__additionalRewards.textContent = services.Localization.localize(
          'scmp.group.plusXRewards',
          [this._rewards.length - 6]
        )));
  }),
  (UTObjectiveEntryView.prototype.setupRewardsCarousel = function setupRewardsCarousel() {
    if (0 < this._rewards.length) {
      this.__choiceNum.textContent = services.Localization.localize(
        'scmp.group.rewardNum',
        [1, this._rewards.length]
      );
      var e = this._rewards[0];
      this._rewardsCarousel.setAfterChangeFunction(
        this._onCarouselSlideChange.bind(this)
      ),
        this._rewardsCarousel.setupRewards([e]);
    }
  }),
  (UTObjectiveEntryView.prototype.resetRewardsCarousel = function resetRewardsCarousel() {
    this._rewardsCarousel.reset();
  }),
  (UTObjectiveEntryView.prototype._onCarouselSlideChange = function _onCarouselSlideChange() {
    this.__choiceNum.textContent = services.Localization.localize(
      'scmp.group.rewardNum',
      [this._rewardsCarousel.getCurrentSlide() + 1, this._rewards.length]
    );
  }),
  (UTObjectiveEntryView.prototype.setProgress = function setProgress(e) {
    this._progressBar.setProgress(e);
  }),
  (UTObjectiveEntryView.prototype.setProgressLabel = function setProgressLabel(
    e
  ) {
    this._progressBar.setProgressLabel(e);
  }),
  (UTObjectiveEntryView.prototype.setDescription = function setDescription(e) {
    this.__description.textContent = e;
  }),
  (UTObjectiveEntryView.prototype.setCountdown = function setCountdown(e) {
    this.__footerCountdown.textContent = e;
  }),
  (UTObjectiveEntryView.prototype.toggleCountdown = function toggleCountdown(
    e
  ) {
    DOMKit.toggleDisplayStyle(this.__footerCountdown, e);
  }),
  (UTObjectiveEntryView.prototype.setGroupLocked = function setGroupLocked(e) {
    e.forEach(function(e) {
      var t = document.createElement('li');
      (t.textContent = e), this.__lockedByGroups.appendChild(t);
    }, this),
      this._setObjectiveLockedState(!0);
  }),
  (UTObjectiveEntryView.prototype.setGroupScheduled = function setGroupScheduled() {
    this._setObjectiveLockedState(!1);
  }),
  (UTObjectiveEntryView.prototype.setGroupComingSoon = function setGroupComingSoon() {
    this.setInteractionState(!1),
      this.toggleClass(UTObjectiveEntryView.Class.COMING_SOON, !0),
      DOMKit.toggleDisplayStyle(this.__choiceNumContainer, !1),
      this._actionBtn.setDisplay(!0),
      this._actionBtn.setInteractionState(!1),
      this._actionBtn.setText(
        services.Localization.localize('scmp.group.comingsoon')
      ),
      this._rewardsInfoBtn.setDisplay(!1);
  }),
  (UTObjectiveEntryView.prototype.setGoToButtonLink = function setGoToButtonLink(
    e
  ) {
    switch (e) {
      case enums.GoToLink.AUCTION_SEARCH:
        this._setActionButtonState(
          !0,
          services.Localization.localize('watchlist.button.gotoauctionsearch'),
          UTObjectiveEntryView.Event.TAKE_ME_THERE
        );
        break;
      case enums.GoToLink.SBC:
      case enums.GoToLink.SBC_SQUAD:
        this._setActionButtonState(
          !0,
          services.Localization.localize('button.gotosbc'),
          UTObjectiveEntryView.Event.TAKE_ME_THERE
        );
        break;
      case enums.GoToLink.SQUAD:
        this._setActionButtonState(
          !0,
          services.Localization.localize('manage.squadlist.gotoactivequad'),
          UTObjectiveEntryView.Event.TAKE_ME_THERE
        );
        break;
      case enums.GoToLink.TRADE_PILE:
        this._setActionButtonState(
          !0,
          services.Localization.localize('button.gototransferlist'),
          UTObjectiveEntryView.Event.TAKE_ME_THERE
        );
    }
  }),
  (UTObjectiveEntryView.prototype.setState = function setState(e) {
    var t = '',
      i = utils.JS.getObjectValues(UTObjectiveEntryView.Class).join(' ');
    switch (e) {
      case enums.Objectives.GroupState.UNDEFINED_STATE:
      case enums.Objectives.GroupState.IN_PROGRESS:
      case enums.Objectives.State.INVALID:
      case enums.Objectives.State.IN_PROGRESS:
        t = UTObjectiveEntryView.Class.IN_PROGRESS;
        break;
      case enums.Objectives.State.XP_REDEEMED:
        (t = UTObjectiveEntryView.Class.XP_REDEEMED),
          this._setActionButtonState(
            !0,
            services.Localization.localize('scmp.campaign.claim'),
            UTObjectiveEntryView.Event.CLAIM_REWARD
          ),
          this._rewardsInfoBtn.setDisplay(!1);
        break;
      case enums.Objectives.GroupState.COMPLETED:
      case enums.Objectives.GroupState.REDEEM_FAILURE:
      case enums.Objectives.State.COMPLETED:
      case enums.Objectives.State.REDEEM_FAILURE:
        (t = UTObjectiveEntryView.Class.COMPLETED),
          this._setActionButtonState(
            !0,
            services.Localization.localize('scmp.campaign.claim'),
            UTObjectiveEntryView.Event.CLAIM_REWARD
          );
        break;
      case enums.Objectives.GroupState.REWARDED:
      case enums.Objectives.State.REDEEMED:
        (t = UTObjectiveEntryView.Class.REDEEMED),
          this.setOverlayText(
            services.Localization.localize('scmp.campaign.claimed')
          ),
          this._setActionButtonState(
            !1,
            services.Localization.localize('scmp.campaign.complete')
          ),
          this._rewardsInfoBtn.setDisplay(!1),
          this.setInteractionState(!1);
        break;
      default:
        this.setInteractionState(!1);
    }
    this.removeClass(i), this.addClass(t);
  }),
  (UTObjectiveEntryView.prototype._setObjectiveLockedState = function _setObjectiveLockedState(
    e
  ) {
    var t = e
        ? UTObjectiveEntryView.Class.LOCKED
        : UTObjectiveEntryView.Class.SCHEDULED,
      i = utils.JS.getObjectValues(UTObjectiveEntryView.Class).join(' ');
    this.removeClass(i),
      this.addClass(t),
      this._rewardsInfoBtn.setDisplay(!1),
      this.setInteractionState(!1);
  }),
  (UTObjectiveEntryView.prototype._setActionButtonState = function _setActionButtonState(
    e,
    t,
    i
  ) {
    this._actionBtn.setDisplay(e),
      this._actionBtn.setInteractionState(e),
      this._actionBtn.setText(t),
      e && i && (this._actionBtnEvent = i);
  }),
  (UTObjectiveEntryView.prototype._eButtonSelected = function _eButtonSelected(
    e,
    t,
    i
  ) {
    var s,
      n = {
        id: this._id,
        title: this.__title.textContent,
        rewards: this._rewards
      };
    this.isInteractionEnabled() &&
      (e === this._rewardsInfoBtn
        ? (s = this._isGroup
            ? UTObjectiveEntryView.Event.OBJECTIVE_GROUP_REWARDS_INFO
            : UTObjectiveEntryView.Event.OBJECTIVE_ENTRY_REWARDS_INFO)
        : e === this._actionBtn && (s = this._actionBtnEvent),
      this._triggerActions(s, n));
  }),
  (UTObjectiveEntryView.prototype._tapDetected = function _tapDetected(t) {
    if (this._isGroup) {
      var e = [
        this._rewardsCarousel.getTapAreaLeft(),
        this._rewardsCarousel.getTapAreaRight()
      ];
      if (
        (this._rewardsCarousel.hasDotsNavigation() &&
          (e = e.concat(
            DOMKit.findElements(
              this._rewardsCarousel.getRootElement(),
              '.tns-nav'
            )
          )),
        utils.JS.isValid(
          utils.JS.find(e, function(e) {
            return e.contains(t.target);
          })
        ))
      )
        return t.preventDefault(), void t.stopPropagation();
      this.superclass();
    }
  }),
  (UTObjectiveEntryView.prototype._touchStarted = function _touchStarted(e) {
    this._isGroup && this.superclass();
  }),
  utils.JS.inherits(UTObjectiveGroupView, UTTargetActionView),
  (UTObjectiveGroupView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-objectives-list-view'),
        e.classList.add('ut-objectives-group'),
        (this._objectivesTM = new components.TabMenu()),
        e.appendChild(this._objectivesTM.getRootElement());
      var t = document.createElement('div');
      t.classList.add('ut-objectives-list-view--content');
      var i = document.createElement('div');
      i.classList.add('ut-objectives-group--header'),
        i.classList.add('ut-objectives-list-view--header'),
        (this._groupProgression = new UTObjectiveGroupProgressionView()),
        i.appendChild(this._groupProgression.getRootElement()),
        t.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('ut-objectives-group--content'),
        s.classList.add('ut-objectives-list-view--details'),
        (this.__groupDetails = document.createElement('div')),
        this.__groupDetails.classList.add(
          'ut-objectives-list-view--groups-container'
        ),
        s.appendChild(this.__groupDetails),
        t.appendChild(s),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTObjectiveGroupView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._objectivesTM.destroy(),
      this._groupProgression.destroy(),
      (this.__groupDetails = null);
  }),
  (UTObjectiveGroupView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTObjectiveGroupView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTObjectiveGroupView.Event = {
    TAKE_ME_THERE: 'UTObjectiveGroupView.Event.TAKE_ME_THERE',
    OBJECTIVE_CLAIM_REWARD: 'UTObjectiveGroupView.Event.OBJECTIVE_CLAIM_REWARD',
    OBJECTIVE_GROUP_REWARDS_INFO:
      'UTObjectiveGroupView.Event.OBJECTIVE_GROUP_REWARDS_INFO',
    OBJECTIVE_ENTRY_REWARDS_INFO:
      'UTObjectiveGroupView.Event.OBJECTIVE_ENTRY_REWARDS_INFO'
  }),
  (UTObjectiveGroupView.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTObjectiveGroupView.prototype.dealloc = function dealloc() {
    this._clearTiles(), this.superclass();
  }),
  (UTObjectiveGroupView.prototype._clearTiles = function _clearTiles() {
    0 < this._objectives.length &&
      (this._objectives.forEach(function(e) {
        e.dealloc();
      }),
      (this._objectives = []));
  }),
  (UTObjectiveGroupView.prototype.setupNavigation = function setupNavigation(
    e,
    t
  ) {
    this._objectivesTM.clearTabs(),
      e.forEach(function(e) {
        this._objectivesTM.addTab(e.id, e.name);
      }, this),
      this._objectivesTM.setActiveTab(t),
      this._objectivesTM.layoutSubviews();
  }),
  (UTObjectiveGroupView.prototype.addNavigationTarget = function addNavigationTarget(
    e,
    t
  ) {
    this._objectivesTM.addTarget(e, t, enums.Event.TAP);
  }),
  (UTObjectiveGroupView.prototype.setTab = function setTab(e) {
    this._objectivesTM.setActiveTab(e);
  }),
  (UTObjectiveGroupView.prototype.renderGroupProgression = function renderGroupProgression(
    e
  ) {
    this._groupProgression.init(),
      this._groupProgression.setId(e.id),
      this._groupProgression.setTitle(e.title),
      this._groupProgression.setProgress(e.getProgress()),
      this._groupProgression.setSubtitle(
        services.Localization.localize('scmp.group.objectivescompleted', [
          e.getNumberOfCompletedObjectives() || 0,
          e.objectivesNumber
        ])
      ),
      e.isMilestones()
        ? this._groupProgression.toggleCountdown(!1)
        : e.hasExpired()
        ? this._groupProgression.setCountdown(
            services.Localization.localize('objectives.tile.expired')
          )
        : this.updateGroupProgressionTimeRemaining(e.getTimeRemainingExpires()),
      this._groupProgression.addTarget(
        this,
        this._eRewardsInfoBtnTapped,
        UTObjectiveGroupProgressionView.Event.REWARDS_INFO
      );
  }),
  (UTObjectiveGroupView.prototype.updateGroupProgressionTimeRemaining = function updateGroupProgressionTimeRemaining(
    e
  ) {
    this._groupProgression.setCountdown(
      services.Localization.localize('scmp.group.countdown', [
        services.Localization.localizeTimeRemaining(e)
      ])
    );
  }),
  (UTObjectiveGroupView.prototype.renderObjectives = function renderObjectives(
    e
  ) {
    this._clearTiles(),
      (this._objectives = e.map(function(e) {
        return this._generateObjectiveTile(e);
      }, this)),
      this.layoutSubviews(),
      this._objectives.forEach(function(e) {
        e.setupRewardsCarousel();
      }, this);
  }),
  (UTObjectiveGroupView.prototype._generateObjectiveTile = function _generateObjectiveTile(
    e
  ) {
    var t = new UTObjectiveEntryView(!1);
    return (
      t.init(),
      t.setId(e.id),
      t.setTitle(e.title),
      t.setDescription(e.description),
      t.setRewards(e.awards),
      t.setState(e.state),
      t.setProgress(e.getProgressPercentage()),
      t.setProgressLabel(
        services.Localization.localize('scmp.objective.progress', [
          e.currentProgress,
          e.multiplier
        ])
      ),
      t.renderRewardsFooter(),
      (e.isNotStarted() || e.isInProgress()) &&
        e.hasTakeMeThereLink() &&
        t.setGoToButtonLink(e.link),
      t.addTarget(
        this,
        this._eClaimBtnTapped,
        UTObjectiveEntryView.Event.CLAIM_REWARD
      ),
      t.addTarget(
        this,
        this._eTakeMeThereBtnTapped,
        UTObjectiveEntryView.Event.TAKE_ME_THERE
      ),
      t.addTarget(
        this,
        this._eRewardsInfoBtnTapped,
        UTObjectiveEntryView.Event.OBJECTIVE_ENTRY_REWARDS_INFO
      ),
      this.addSubview(t, this.__groupDetails),
      t
    );
  }),
  (UTObjectiveGroupView.prototype._eClaimBtnTapped = function _eClaimBtnTapped(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(
        UTObjectiveGroupView.Event.OBJECTIVE_CLAIM_REWARD,
        i
      );
  }),
  (UTObjectiveGroupView.prototype._eTakeMeThereBtnTapped = function _eTakeMeThereBtnTapped(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTObjectiveGroupView.Event.TAKE_ME_THERE, i);
  }),
  (UTObjectiveGroupView.prototype._eRewardsInfoBtnTapped = function _eRewardsInfoBtnTapped(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      (t === UTObjectiveGroupProgressionView.Event.REWARDS_INFO
        ? (viewEvent = UTObjectiveGroupView.Event.OBJECTIVE_GROUP_REWARDS_INFO)
        : t == UTObjectiveEntryView.Event.OBJECTIVE_ENTRY_REWARDS_INFO
        ? (viewEvent = UTObjectiveGroupView.Event.OBJECTIVE_ENTRY_REWARDS_INFO)
        : (viewEvent = t),
      this._triggerActions(viewEvent, i));
  }),
  utils.JS.inherits(UTObjectivesViewModel, UTViewModel),
  (UTObjectivesViewModel.prototype.hasSelectedRewardId = function hasSelectedRewardId() {
    return -1 < this._selectedRewardId;
  }),
  (UTObjectivesViewModel.prototype.setSelectedRewardId = function setSelectedRewardId(
    e
  ) {
    this._selectedRewardId = utils.JS.isNumber(e) ? e : -1;
  }),
  (UTObjectivesViewModel.prototype.resetSelectedRewardId = function resetSelectedRewardId() {
    this._selectedRewardId = -1;
  }),
  (UTObjectivesViewModel.prototype.getCurrentCategoryId = function getCurrentCategoryId() {
    return this._currentCategoryId;
  }),
  (UTObjectivesViewModel.prototype.setCurrentCategoryId = function setCurrentCategoryId(
    e
  ) {
    this._currentCategoryId = utils.JS.isNumber(e)
      ? e
      : UTCampaignCategoryEntity.THIS_SEASON_ID;
  }),
  (UTObjectivesViewModel.prototype.getCurrentCategory = function getCurrentCategory() {
    if (0 === this._categories.length)
      return (
        utils.Debug.Assert(
          !1,
          "UTObjectivesViewModel :: Can't fetch current category without having first retrieved all categories."
        ),
        null
      );
    var e = utils.JS.find(
      this._categories,
      function(e) {
        return this._currentCategoryId === e.id;
      }.bind(this)
    );
    return e ||
      this._currentCategoryId === UTCampaignCategoryEntity.THIS_SEASON_ID
      ? e
      : (utils.Debug.Assert(
          !1,
          'UTObjectivesViewModel:: Category #' +
            this._currentCategoryId +
            " wasn't found. Defaulting to THIS SEASON category."
        ),
        this.setCurrentCategoryId(UTCampaignCategoryEntity.THIS_SEASON_ID),
        this.getCurrentCategory());
  }),
  (UTObjectivesViewModel.prototype.getCurrentCategoryGroups = function getCurrentCategoryGroups() {
    var e = this.getCurrentCategory();
    return e
      ? (e.isMilestones()
          ? e.getGroups()
          : e.getGroups().filter(function(e) {
              return !e.hasExpired() || e.isCompleted();
            })
        ).sort(this._sortGroups)
      : [];
  }),
  (UTObjectivesViewModel.prototype.getCampaign = function getCampaign() {
    return this._campaign;
  }),
  (UTObjectivesViewModel.prototype.getCategories = function getCategories() {
    return this._categories;
  }),
  (UTObjectivesViewModel.prototype.getCurrentGroup = function getCurrentGroup() {
    return this._currentGroup;
  }),
  (UTObjectivesViewModel.prototype.setCurrentGroup = function setCurrentGroup(
    e
  ) {
    this._currentGroup = e;
  }),
  (UTObjectivesViewModel.prototype.getCurrentGroupObjectives = function getCurrentGroupObjectives() {
    return this._currentGroup.getObjectives().sort(this._sortObjectives);
  }),
  (UTObjectivesViewModel.prototype.getCurrentGroupObjectiveById = function getCurrentGroupObjectiveById(
    e
  ) {
    return this._currentGroup.objectives.get(e);
  }),
  (UTObjectivesViewModel.prototype.hasUnclaimedGroupRewards = function hasUnclaimedGroupRewards() {
    return utils.JS.isValid(
      utils.JS.find(this.getCategories(), function(e) {
        return e.hasUnclaimedGroupReward();
      })
    );
  }),
  (UTObjectivesViewModel.prototype.hasUnclaimedExpiredGroups = function hasUnclaimedExpiredGroups() {
    return utils.JS.isValid(
      utils.JS.find(this.getCategories(), function(e) {
        return e.hasUnclaimedExpiredGroup();
      })
    );
  }),
  (UTObjectivesViewModel.prototype.requestActiveCampaignDetails = function requestActiveCampaignDetails() {
    var e = this._objectivesServiceObject.getCampaignDetails(
      enums.Objectives.CampaignType.ACTIVE
    );
    return (
      this._trackRequest(
        e,
        this._objectivesServiceObject.isCampaignCacheExpired(),
        function _onCampaignRequested(e) {
          this._campaign = e.data.campaign;
        }.bind(this)
      ),
      e
    );
  }),
  (UTObjectivesViewModel.prototype.requestCategories = function requestCategories() {
    var e = this._objectivesServiceObject.getCategories();
    return (
      this._trackRequest(
        e,
        this._objectivesServiceObject.isObjectivesCacheExpired() ||
          0 === this._categories.length,
        function _onCategoriesRequested(e) {
          var t = [
            new UTCampaignCategoryEntity(
              {
                categoryId: UTCampaignCategoryEntity.THIS_SEASON_ID,
                priority: -1,
                name: services.Localization.localize('scmp.categories.season')
              },
              []
            )
          ].concat(
            e.data.categories.filter(function(e) {
              return !e.isFoundations();
            })
          );
          this._categories = t.sort(this._sortCategories);
        }.bind(this)
      ),
      e
    );
  }),
  (UTObjectivesViewModel.prototype.requestGroup = function requestGroup(e, t) {
    var i = this._objectivesServiceObject.getGroup(e, t);
    return this._trackRequest(i, !0), i;
  }),
  (UTObjectivesViewModel.prototype.claimLevelRewards = function claimLevelRewards(
    e
  ) {
    var t = this._objectivesServiceObject.claimLevelReward(
      this._selectedRewardId,
      e
    );
    return this._trackRequest(t, !0), t;
  }),
  (UTObjectivesViewModel.prototype.claimGroupRewards = function claimGroupRewards() {
    var e = this._objectivesServiceObject.claimGroupReward(
      this._currentCategoryId,
      this._selectedRewardId,
      this.getCurrentCategory().isMilestones()
    );
    return this._trackRequest(e, !0), e;
  }),
  (UTObjectivesViewModel.prototype.claimObjectiveRewards = function claimObjectiveRewards(
    e
  ) {
    var t = this._objectivesServiceObject.claimObjectiveReward(
      this._currentCategoryId,
      this._currentGroup.id,
      e,
      this._currentGroup.isMilestones()
    );
    return this._trackRequest(t, !0), t;
  }),
  (UTObjectivesViewModel.prototype.createConsolidatedReward = function createConsolidatedReward(
    e,
    t
  ) {
    var i = new UTConsolidatedRewardsDTO({
      id: e
    });
    return (i.awards = t), i;
  }),
  (UTObjectivesViewModel.prototype.consolidateOptionReward = function consolidateOptionReward(
    e
  ) {
    return this.createConsolidatedReward(e.id, e.awards);
  }),
  (UTObjectivesViewModel.prototype._sortCategories = function _sortCategories(
    e,
    t
  ) {
    return utils.JS.sortCompare(e.priority, t.priority);
  }),
  (UTObjectivesViewModel.prototype._sortGroups = function _sortGroups(e, t) {
    if (e.isClaimable() !== t.isClaimable()) {
      if (!t.isClaimable() && e.isClaimable()) return -1;
      if (!e.isClaimable() && t.isClaimable()) return 1;
    }
    if (e.isInProgress() !== t.isInProgress()) {
      if (!t.isInProgress() && e.isInProgress()) return -1;
      if (!e.isInProgress() && t.isInProgress()) return 1;
    }
    if (e.isNotStarted() !== t.isNotStarted()) {
      if (!t.isNotStarted() && e.isNotStarted()) return -1;
      if (!e.isNotStarted() && t.isNotStarted()) return 1;
    }
    if (e.isComingSoon() !== t.isComingSoon()) {
      if (t.isComingSoon() && !e.isComingSoon()) return -1;
      if (e.isComingSoon() && !t.isComingSoon()) return 1;
    }
    if (e.isLocked() !== t.isLocked()) {
      if (t.isLocked() && !e.isLocked()) return -1;
      if (e.isLocked() && !t.isLocked()) return 1;
    }
    if (e.endTime !== t.endTime) {
      if (e.endTime < t.endTime) return -1;
      if (t.endTime < e.endTime) return 1;
    }
    if (e.priority !== t.priority) {
      if (e.priority < t.priority) return -1;
      if (t.priority < e.priority) return 1;
    }
    if (e.isRedeemed() !== t.isRedeemed()) {
      if (!t.isRedeemed() && e.isRedeemed()) return -1;
      if (!e.isRedeemed() && t.isRedeemed()) return 1;
    }
    return 0;
  }),
  (UTObjectivesViewModel.prototype._sortObjectives = function _sortObjectives(
    e,
    t
  ) {
    if (e.isClaimable() !== t.isClaimable()) {
      if (!t.isClaimable() && e.isClaimable()) return -1;
      if (!e.isClaimable() && t.isClaimable()) return 1;
    }
    if (e.isInProgress() !== t.isInProgress()) {
      if (!t.isInProgress() && e.isInProgress()) return -1;
      if (!e.isInProgress() && t.isInProgress()) return 1;
    }
    if (e.hasTakeMeThereLink() !== t.hasTakeMeThereLink()) {
      if (!t.hasTakeMeThereLink() && e.hasTakeMeThereLink()) return -1;
      if (!e.hasTakeMeThereLink() && t.hasTakeMeThereLink()) return 1;
    }
    if (e.isNotStarted() !== t.isNotStarted()) {
      if (!t.isNotStarted() && e.isNotStarted()) return -1;
      if (!e.isNotStarted() && t.isNotStarted()) return 1;
    }
    if (e.isRedeemed() !== t.isRedeemed()) {
      if (!t.isRedeemed() && e.isRedeemed()) return -1;
      if (!e.isRedeemed() && t.isRedeemed()) return 1;
    }
    return 0;
  }),
  utils.JS.inherits(UTObjectiveGroupViewController, UTViewController),
  (UTObjectiveGroupViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      (this._goToLinkController = new UTGoToLinkController()),
      this._goToLinkController.init(),
      this.getView().addNavigationTarget(this, this._eTabSelected));
  }),
  (UTObjectiveGroupViewController.prototype.initWithViewmodel = function initWithViewmodel(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof UTObjectivesViewModel,
        'Expected a UTObjectivesViewModel.'
      ),
      (this._viewmodel = e),
      this.init());
  }),
  (UTObjectiveGroupViewController.prototype.dealloc = function dealloc() {
    (this._viewmodel = null),
      this._goToLinkController &&
        (this._goToLinkController.dealloc(), (this._goToLinkController = null)),
      this._timer.dealloc(),
      (this._timer = null),
      this.superclass();
  }),
  (UTObjectiveGroupViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTObjectiveGroupView();
  }),
  (UTObjectiveGroupViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._viewmodel.getCurrentGroup().title;
  }),
  (UTObjectiveGroupViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._goToLinkController.setNavigationController(
        this.getNavigationController()
      ),
      this._renderView(),
      this._startTimer();
    var e = getDefaultDispatcher();
    e.addObserver(enums.Notification.APP_PAUSE, this, this._nAppPaused),
      e.addObserver(enums.Notification.APP_RESUME, this, this._nAppResumed);
    var t = this.getView();
    t.addTarget(
      this,
      this._eTakeMeThere,
      UTObjectiveGroupView.Event.TAKE_ME_THERE
    ),
      t.addTarget(
        this,
        this._eClaimReward,
        UTObjectiveGroupView.Event.OBJECTIVE_CLAIM_REWARD
      ),
      t.addTarget(
        this,
        this._eOpenRewardsInfoPopup,
        UTObjectiveGroupView.Event.OBJECTIVE_GROUP_REWARDS_INFO
      ),
      t.addTarget(
        this,
        this._eOpenRewardsInfoPopup,
        UTObjectiveGroupView.Event.OBJECTIVE_ENTRY_REWARDS_INFO
      );
  }),
  (UTObjectiveGroupViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this._timer.reset();
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.APP_PAUSE, this),
      e.removeObserver(enums.Notification.APP_RESUME, this);
    var t = this.getView();
    t.removeTarget(
      this,
      this._eTakeMeThere,
      UTObjectiveGroupView.Event.TAKE_ME_THERE
    ),
      t.removeTarget(
        this,
        this._eClaimReward,
        UTObjectiveGroupView.Event.OBJECTIVE_CLAIM_REWARD
      ),
      t.removeTarget(
        this,
        this._eOpenRewardsInfoPopup,
        UTObjectiveGroupView.Event.OBJECTIVE_GROUP_REWARDS_INFO
      ),
      t.removeTarget(
        this,
        this._eOpenRewardsInfoPopup,
        UTObjectiveGroupView.Event.OBJECTIVE_ENTRY_REWARDS_INFO
      ),
      this.superclass();
  }),
  (UTObjectiveGroupViewController.prototype._renderView = function _renderView() {
    var s = this.getView();
    s.setupNavigation(
      this._viewmodel.getCategories(),
      this._viewmodel.getCurrentCategoryId()
    ),
      this._viewmodel
        .requestGroup(
          this._viewmodel.getCurrentCategoryId(),
          this._viewmodel.getCurrentGroup().id
        )
        .observe(this, function _onGroupRequested(e, t) {
          if ((e.unobserve(this), t.success))
            this._viewmodel.setCurrentGroup(t.data.group),
              s.renderGroupProgression(this._viewmodel.getCurrentGroup()),
              s.renderObjectives(this._viewmodel.getCurrentGroupObjectives());
          else {
            var i = this._viewmodel.getCurrentCategory().isMilestones()
              ? 'notification.scmp.milestone.loadFailed'
              : 'notification.scmp.group.loadFailed';
            services.Notification.queue([
              services.Localization.localize(i),
              enums.UINotificationType.NEGATIVE
            ]);
          }
        });
  }),
  (UTObjectiveGroupViewController.prototype._startTimer = function _startTimer() {
    this._timer.setInterval(1e4),
      this._timer.setWorkFunc(this._handleEventTimer.bind(this)),
      this._timer.start();
  }),
  (UTObjectiveGroupViewController.prototype._handleEventTimer = function _handleEventTimer() {
    var e = this._viewmodel.getCampaign(),
      t = this._viewmodel.getCurrentGroup(),
      i = Math.round(Date.now() / MS_PER_SECOND);

    function _onExpiry(e) {
      this._timer.reset();
      var t = new UTSeasonalCampaignPopupViewController(e);
      t.onExit.observe(this, this._onSCMPInfoPopupClosed),
        gPopupClickShield.setActivePopup(t);
    }
    t.isMilestones() ||
      t.hasExpired() ||
      this.getView().updateGroupProgressionTimeRemaining(
        t.getTimeRemainingExpires()
      ),
      e.endTime <= i &&
      (e.nextCampaignStartTime <= i || e.nextCampaignStartTime === MAX_JAVA_INT)
        ? _onExpiry.call(
            this,
            e.needsAutoClaim ||
              e.hasUnclaimedLevelRewards() ||
              this._viewmodel.hasUnclaimedGroupRewards()
          )
        : this._viewmodel.hasUnclaimedExpiredGroups() && _onExpiry.call(this);
  }),
  (UTObjectiveGroupViewController.prototype._onSCMPInfoPopupClosed = function _onSCMPInfoPopupClosed(
    e,
    t
  ) {
    e.unobserve(this),
      t !== UTSeasonalCampaignPopupViewController.EVENTS.CLAIM_GROUP_EXPIRED
        ? (services.Objectives.reset(),
          getAppMain()
            .getRootViewController()
            .setGameViewTab(UTGameTabBarController.TabTag.HOME))
        : services.Objectives.claimExpiredRewards().observe(this, function(
            e,
            t
          ) {
            e.unobserve(this),
              t.success &&
                (gPopupClickShield.setActivePopup(
                  new UTObjectiveRewardsViewController(null, t.data.rewards)
                ),
                this._viewmodel.getCurrentGroup().hasExpired()
                  ? this.getNavigationController().popViewController()
                  : this._startTimer());
          });
  }),
  (UTObjectiveGroupViewController.prototype._eTabSelected = function _eTabSelected(
    e,
    t,
    i
  ) {
    var s = i.id;
    s !== this._viewmodel.getCurrentCategoryId() &&
      (this._viewmodel.setCurrentCategoryId(s),
      this.getNavigationController().popViewController());
  }),
  (UTObjectiveGroupViewController.prototype._eTakeMeThere = function _eTakeMeThere(
    e,
    t,
    i
  ) {
    var s = this._viewmodel.getCurrentGroupObjectiveById(i.id);
    this._goToLinkController.attemptNavigation(s.link) &&
      TelemetryManager.trackEvent(
        TelemetryManager.Sections.OBJECTIVES,
        TelemetryManager.Categories.BUTTON_PRESS,
        'Take Me There - ' + s.link
      );
  }),
  (UTObjectiveGroupViewController.prototype._eClaimReward = function _eClaimReward(
    e,
    t,
    i
  ) {
    this._viewmodel
      .claimObjectiveRewards(i.id)
      .observe(this, function _onRewardClaimed(e, t) {
        e.unobserve(this),
          TelemetryManager.trackEvent(
            TelemetryManager.Sections.OBJECTIVES,
            TelemetryManager.Categories.OBJECTIVE_REWARDS_CLAIMED,
            'Claim Milestones Rewards'
          ),
          t.success
            ? (services.Notification.queue([
                services.Localization.localize(
                  'notification.scmp.claimSuccess'
                ),
                enums.UINotificationType.POSITIVE
              ]),
              gPopupClickShield.setActivePopup(
                new UTObjectiveRewardsViewController(
                  t.data.objective,
                  t.data.rewards
                )
              ),
              this._renderView())
            : services.Notification.queue([
                services.Localization.localize('notification.scmp.claimFail'),
                enums.UINotificationType.NEGATIVE
              ]);
      });
  }),
  (UTObjectiveGroupViewController.prototype._eOpenRewardsInfoPopup = function _eOpenRewardsInfoPopup(
    e,
    t,
    i
  ) {
    var s,
      n = i.id;
    if (t === UTObjectiveGroupView.Event.OBJECTIVE_GROUP_REWARDS_INFO) {
      var o = this._viewmodel.getCurrentGroup(),
        a = utils.JS.valToArray(
          this._viewmodel.createConsolidatedReward(1, o.awards)
        );
      this._viewmodel.setSelectedRewardId(n),
        (s = new UTRewardSelectionChoiceViewController(a)).setTitleText(
          services.Localization.localize('scmp.objectivegroup.rewards.title', [
            o.title
          ])
        ),
        s.setClaimableState(o.isClaimable() && o.areObjectivesRedeemed()),
        s
          .getView()
          .addTarget(
            this,
            this._eGroupRewardChosen,
            UTRewardSelectionChoiceView.Event.CONFIRM
          );
    } else if (t === UTObjectiveGroupView.Event.OBJECTIVE_ENTRY_REWARDS_INFO) {
      var r = this._viewmodel.getCurrentGroupObjectiveById(n);
      (s = new UTRewardSelectionChoiceViewController(
        utils.JS.valToArray(
          this._viewmodel.createConsolidatedReward(1, i.rewards)
        )
      )).setTitleText(i.title),
        s.setClaimableState(r.isClaimable()),
        s.getView().addTarget(
          this,
          function _onClaimObjectiveReward(e, t, i) {
            this._eClaimReward(e, t, {
              id: n
            });
          },
          UTRewardSelectionChoiceView.Event.CONFIRM
        );
    }
    gPopupClickShield.setActivePopup(s);
  }),
  (UTObjectiveGroupViewController.prototype._eGroupRewardChosen = function _eRewardChosen(
    e,
    t,
    i
  ) {
    e.removeTarget(
      this,
      this._eGroupRewardChosen,
      UTRewardSelectionChoiceView.Event.CONFIRM
    ),
      this._viewmodel.hasSelectedRewardId() &&
        this._viewmodel
          .claimGroupRewards()
          .observe(this, function _onRewardChosen(e, t) {
            e.unobserve(this),
              TelemetryManager.trackEvent(
                TelemetryManager.Sections.OBJECTIVES,
                TelemetryManager.Categories.OBJECTIVE_REWARDS_CLAIMED,
                'Claim Season Objectives Rewards'
              ),
              t.success
                ? (services.Notification.queue([
                    services.Localization.localize(
                      'notification.scmp.claimSuccess'
                    ),
                    enums.UINotificationType.POSITIVE
                  ]),
                  this.getNavigationController().popViewController())
                : services.Notification.queue([
                    services.Localization.localize(
                      'notification.scmp.claimFail'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]),
              this._viewmodel.resetSelectedRewardId();
          });
  }),
  (UTObjectiveGroupViewController.prototype._nAppPaused = function _nAppPaused(
    e,
    t,
    i
  ) {
    this._timer.reset();
  }),
  (UTObjectiveGroupViewController.prototype._nAppResumed = function _nAppResumed(
    e,
    t,
    i
  ) {
    this._viewmodel.getCurrentGroup().hasExpired()
      ? this.getNavigationController().popViewController()
      : this._startTimer();
  }),
  utils.JS.inherits(UTSeasonalCampaignPopupView, UTView),
  (UTSeasonalCampaignPopupView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-popup'), e.classList.add('ut-scmp-info');
      var t = document.createElement('header');
      (this.__titleText = document.createElement('h1')),
        t.appendChild(this.__titleText),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('bodySection'),
        (this.__contentText = document.createElement('p')),
        i.appendChild(this.__contentText),
        e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('ut-button-group'),
        (this._btnClose = new UTGroupButtonControl()),
        s.appendChild(this._btnClose.getRootElement()),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSeasonalCampaignPopupView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__titleText = null),
      (this.__contentText = null),
      this._btnClose.destroy();
  }),
  (UTSeasonalCampaignPopupView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSeasonalCampaignPopupView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSeasonalCampaignPopupView.prototype.init = function init() {
    this.superclass(), this._btnClose.init();
  }),
  (UTSeasonalCampaignPopupView.prototype.setTitle = function setTitle(e) {
    this.__titleText.textContent = e;
  }),
  (UTSeasonalCampaignPopupView.prototype.setContent = function setContent(e) {
    this.__contentText.textContent = e;
  }),
  (UTSeasonalCampaignPopupView.prototype.setButtonText = function setButtonText(
    e
  ) {
    this._btnClose.setText(e);
  }),
  (UTSeasonalCampaignPopupView.prototype.getCloseBtn = function getCloseBtn() {
    return this._btnClose;
  }),
  utils.JS.inherits(
    UTSeasonalCampaignPopupViewController,
    controllers.views.popups.BasePopup
  ),
  (UTSeasonalCampaignPopupViewController.EVENTS = {
    CAMPAIGN_EXPIRED: 'campaign_expired',
    CLAIM_CAMPAIGN_EXPIRED: 'claim_campaign_expired',
    CLAIM_GROUP_EXPIRED: 'claim_group_expired'
  }),
  (UTSeasonalCampaignPopupViewController.prototype.init = function init() {
    this.superclass(),
      this.getView()
        .getCloseBtn()
        .addTarget(this, this._eCloseBtnTapped, enums.Event.TAP);
  }),
  (UTSeasonalCampaignPopupViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSeasonalCampaignPopupView();
  }),
  (UTSeasonalCampaignPopupViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e,
      t,
      i,
      s = this.getView();
    switch (this._event) {
      case UTSeasonalCampaignPopupViewController.EVENTS.CAMPAIGN_EXPIRED:
        (e = services.Localization.localize(
          'scmp.popup.campaignExpired.title'
        )),
          (t = services.Localization.localize(
            'scmp.popup.campaignExpired.message'
          )),
          (i = services.Localization.localize(
            'scmp.popup.campaignExpired.button'
          ));
        break;
      case UTSeasonalCampaignPopupViewController.EVENTS.CLAIM_CAMPAIGN_EXPIRED:
        (e = services.Localization.localize(
          'scmp.popup.claimCampaignExpired.title'
        )),
          (t = services.Localization.localize(
            'scmp.popup.claimCampaignExpired.message'
          )),
          (i = services.Localization.localize(
            'scmp.popup.claimCampaignExpired.button'
          ));
        break;
      case UTSeasonalCampaignPopupViewController.EVENTS.CLAIM_GROUP_EXPIRED:
        (e = services.Localization.localize(
          'scmp.popup.claimGroupExpired.title'
        )),
          (t = services.Localization.localize(
            'scmp.popup.claimGroupExpired.message'
          )),
          (i = services.Localization.localize(
            'scmp.popup.claimGroupExpired.button'
          ));
    }
    s.setTitle(e), s.setContent(t), s.setButtonText(i);
  }),
  (UTSeasonalCampaignPopupViewController.prototype._eCloseBtnTapped = function _eCloseBtnTapped(
    e,
    t,
    i
  ) {
    this.onExit.notify(this._event);
  }),
  utils.JS.inherits(UTCampaignRewardsCarouselView, UTRewardsCarouselView),
  (UTCampaignRewardsCarouselView.Class = {
    HIDDEN: 'hidden-reward',
    SMALL: 'small'
  }),
  (UTCampaignRewardsCarouselView.prototype.hasDotsNavigation = function hasDotsNavigation() {
    return this._showDots;
  }),
  (UTCampaignRewardsCarouselView.prototype.setDefaultIndex = function setDefaultIndex(
    e
  ) {
    this._defaultIndex = e;
  }),
  (UTCampaignRewardsCarouselView.prototype.setupRewards = function setupRewards(
    e
  ) {
    this._preSetup(e.length),
      e.forEach(function(e) {
        var t = this._generateCarouselElem(e);
        this._tnsCarousel.appendElem(t.elems, t.containerClass);
      }, this),
      1 < this._numOfRewards &&
        ((this._showDots = 1 === this._visibleItems),
        this._instantiateCarousel());
  }),
  (UTCampaignRewardsCarouselView.prototype.setupCampaignRewards = function setupCampaignRewards(
    e
  ) {
    this._preSetup(e.length),
      e.forEach(function(e) {
        var t = this._generateCarouselElem(e.awards[0], e.hiddenReward);
        this._tnsCarousel.appendElem(t.elems, t.containerClass);
      }, this),
      1 < this._numOfRewards &&
        ((this._showDots = 1 === this._visibleItems),
        this._instantiateCarousel());
  }),
  (UTCampaignRewardsCarouselView.prototype._generateCarouselElem = function _generateCarouselElem(
    e,
    t
  ) {
    var i = UTRewardsCarouselView.Class.REWARD,
      s = [];
    if (t) i += ' ' + UTCampaignRewardsCarouselView.Class.HIDDEN;
    else if (e.isCoin) i += ' ' + UTRewardsCarouselView.Class.COIN;
    else if (e.isChampionQualificationPoints)
      i += ' ' + UTRewardsCarouselView.Class.CHAMPION_POINTS;
    else if (e.isXP) i += ' ' + UTRewardsCarouselView.Class.XP;
    else if (e.isItem)
      if (e.itemData.isCoinBoost())
        i += ' ' + UTRewardsCarouselView.Class.COIN_BOOST;
      else {
        var n = this._generateItemView(e.itemData, !0);
        s.push(n.getRootElement()), this._playerItems.push(n);
      }
    else if (e.isPack) {
      var o = this._generatePackRewardView(e);
      s.push(o.getRootElement()), this._packs.push(o);
    }
    if (((i += ' ' + UTCampaignRewardsCarouselView.Class.SMALL), e && !t)) {
      var a = '',
        r = document.createElement('p');
      DOMKit.addClass(r, 'ut-objective-list-view--reward-label'),
        0 <=
          [
            enums.AwardType.CHAMPION_QUALIFICATION_POINTS,
            enums.AwardType.XP,
            enums.AwardType.COIN
          ].indexOf(e.type) &&
          (a = services.Localization.localizeNumber(e.value) + ' '),
        (r.textContent = a + ' ' + e.buildString()),
        r.textContent.length && s.push(r);
    }
    return (
      0 === s.length && s.push(document.createElement('div')),
      {
        elems: s,
        containerClass: i
      }
    );
  }),
  (UTCampaignRewardsCarouselView.prototype._generateTNSPropertiesDTO = function _generateTNSPropertiesDTO() {
    var e = new TNSPropertiesDTO();
    return (
      (e.nav = this._showDots),
      (e.touch = isPhone()),
      (e.mouseDrag = isPhone()),
      (e.startIndex = this._defaultIndex),
      (e.speed = 600),
      (e.prevButton = this.__tapAreaLeft),
      (e.nextButton = this.__tapAreaRight),
      (e.items = this._visibleItems),
      (e.container = this._tnsCarousel.getRootElement()),
      e
    );
  }),
  (UTCampaignRewardsCarouselView.prototype._generatePackRewardView = function _generatePackRewardView(
    e
  ) {
    var t = new UTPackGraphicView(e),
      i = utils.JS.isValid(e.assetId) ? e.assetId : e.halId;
    return (
      t.setPackBackground(i),
      t.setPackForeground(i),
      t.setPromo(enums.Purchase.DealType.REGULAR),
      t
    );
  }),
  utils.JS.inherits(UTCampaignTierView, UTTargetActionView),
  (UTCampaignTierView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-campaign-tier-view'),
        (this.__overlay = document.createElement('div')),
        this.__overlay.classList.add('ut-campaign-tier-view--overlay'),
        (this.__overlayText = document.createElement('span')),
        this.__overlay.appendChild(this.__overlayText),
        e.appendChild(this.__overlay);
      var t = document.createElement('section');
      t.classList.add('ut-campaign-tier-view--meta'),
        (this.__title = document.createElement('h1')),
        this.__title.classList.add('ut-campaign-tier-view--title'),
        t.appendChild(this.__title),
        (this.__label = document.createElement('div')),
        this.__label.classList.add('ut-campaign-tier-view--label'),
        t.appendChild(this.__label),
        (this._claimBtn = new UTStandardButtonControl()),
        this._claimBtn.getRootElement().classList.add('mini'),
        this._claimBtn
          .getRootElement()
          .classList.add('ut-campaign-tier-view--button'),
        t.appendChild(this._claimBtn.getRootElement()),
        e.appendChild(t),
        (this._rewardsCarousel = new UTCampaignRewardsCarouselView()),
        this._rewardsCarousel.getRootElement().classList.add('carousel'),
        e.appendChild(this._rewardsCarousel.getRootElement()),
        (this.__choiceNumContainer = document.createElement('div')),
        this.__choiceNumContainer.classList.add(
          'ut-campaign-tier-view--choices'
        ),
        (this.__choiceNum = document.createElement('span')),
        this.__choiceNumContainer.appendChild(this.__choiceNum),
        e.appendChild(this.__choiceNumContainer),
        (this._rewardsInfoBtn = new UTImageButtonControl()),
        this._rewardsInfoBtn
          .getRootElement()
          .classList.add('ut-campaign-tier-view--button--info'),
        e.appendChild(this._rewardsInfoBtn.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTCampaignTierView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__overlay = null),
      (this.__overlayText = null),
      (this.__title = null),
      (this.__label = null),
      this._claimBtn.destroy(),
      this._rewardsCarousel.destroy(),
      (this.__choiceNumContainer = null),
      (this.__choiceNum = null),
      this._rewardsInfoBtn.destroy();
  }),
  (UTCampaignTierView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTCampaignTierView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTCampaignTierView.Event = {
    REWARDS_INFO: 'UTCampaignTierView.Event.REWARDS_INFO',
    CLAIM_REWARD: 'UTCampaignTierView.Event.CLAIM_REWARD'
  }),
  (UTCampaignTierView.prototype.init = function init() {
    this.superclass(),
      (this.__overlayText.textContent = services.Localization.localize(
        'scmp.campaign.complete'
      )),
      this._rewardsInfoBtn.init(),
      this._rewardsInfoBtn.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._rewardsInfoBtn.setInteractionState(!1),
      this._claimBtn.init(),
      this._claimBtn.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._claimBtn.setInteractionState(!1),
      this.setInteractionState(!0);
  }),
  (UTCampaignTierView.prototype.dealloc = function dealloc() {
    this.resetRewardsCarousel(), this.superclass();
  }),
  (UTCampaignTierView.prototype.setId = function setId(e) {
    this._id = e;
  }),
  (UTCampaignTierView.prototype.setCampaignLevelRewardOptions = function setCampaignLevelRewardOptions(
    e
  ) {
    this._rewardOptions = e;
  }),
  (UTCampaignTierView.prototype.setTitle = function setTitle(e) {
    this.__title.textContent = e;
  }),
  (UTCampaignTierView.prototype.setProgress = function setProgress(e, t) {
    0 < e
      ? (this.__label.textContent = services.Localization.localize(
          'scmp.campaign.xpNeeded',
          [services.Localization.localizeNumber(e)]
        ))
      : (this.toggleClass('redeem', t),
        this.toggleClass('complete', !t),
        this._claimBtn.setInteractionState(t),
        (this._claimBtn.getRootElement().textContent = t
          ? services.Localization.localize('scmp.campaign.claim')
          : services.Localization.localize('scmp.campaign.complete')));
  }),
  (UTCampaignTierView.prototype.setupRewardsCarousel = function setupRewardsCarousel(
    e
  ) {
    0 !== this._rewardOptions.length
      ? (0 < e && this._rewardsCarousel.setDefaultIndex(e),
        1 < this._rewardOptions.length &&
          ((this.__choiceNum.textContent = services.Localization.localize(
            'scmp.campaign.reward.optionNumber',
            [e + 1]
          )),
          DOMKit.addClass(
            this.__choiceNumContainer,
            'ut-campaign-tier-view--choices--visible'
          ),
          this._rewardsCarousel.setAfterChangeFunction(
            this._onCarouselSlideChange.bind(this)
          )),
        this._rewardsCarousel.setupCampaignRewards(this._rewardOptions))
      : utils.Debug.Assert(
          !1,
          'UTCampaignTierView::setupRewardsCarousel. Tried to setup rewards for a tier that has no associated reward option DTOs.'
        );
  }),
  (UTCampaignTierView.prototype.resetRewardsCarousel = function resetRewardsCarousel() {
    this._rewardsCarousel.reset();
  }),
  (UTCampaignTierView.prototype._onCarouselSlideChange = function _onCarouselSlideChange() {
    this.__choiceNum.textContent = services.Localization.localize(
      'scmp.campaign.reward.optionNumber',
      [this._rewardsCarousel.getCurrentSlide() + 1]
    );
  }),
  (UTCampaignTierView.prototype.toggleRewardsInfoButton = function toggleRewardsInfoButton(
    e
  ) {
    this._rewardsInfoBtn.setDisplay(e),
      this._rewardsInfoBtn.setInteractionState(e);
  }),
  (UTCampaignTierView.prototype._eButtonSelected = function _eButtonSelected(
    e,
    t,
    i
  ) {
    var s;
    if (this.isInteractionEnabled()) {
      var n = {
        id: this._id,
        rewardOptions: this._rewardOptions
      };
      e === this._rewardsInfoBtn && (s = UTCampaignTierView.Event.REWARDS_INFO),
        e === this._claimBtn && (s = UTCampaignTierView.Event.CLAIM_REWARD),
        this._triggerActions(s, n);
    }
  }),
  utils.JS.inherits(UTTierProgressBarView, UTProgressBarView),
  (UTTierProgressBarView.prototype._generate = function _generate() {
    this._generated ||
      ((this.__section = document.createElement('div')),
      this.__section.classList.add('ut-tier-progress-bar--section'),
      (this.__fillContainer = document.createElement('div')),
      this.__fillContainer.classList.add('ut-tier-progress-bar--fill'),
      (this.__fillText = document.createElement('span')),
      this.__fillContainer.appendChild(this.__fillText),
      this.__section.appendChild(this.__fillContainer),
      (this.__labelContainer = document.createElement('div')),
      this.__labelContainer.classList.add('ut-tier-progress-bar--label'),
      (this.__labelText = document.createElement('span')),
      this.__labelContainer.appendChild(this.__labelText),
      this.__section.appendChild(this.__labelContainer),
      (this.__root = this.__section),
      (this._generated = !0));
  }),
  (UTTierProgressBarView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__section = null),
      (this.__fillContainer = null),
      (this.__fillText = null),
      (this.__labelContainer = null),
      (this.__labelText = null);
  }),
  (UTTierProgressBarView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTierProgressBarView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTierProgressBarView.prototype.setProgress = function setProgress(
    e,
    t,
    i,
    s
  ) {
    if (utils.JS.isNumber(e) && utils.JS.isNumber(t) && utils.JS.isNumber(i)) {
      var n = ((e - t) / (i - t)) * 100;
      (n = Math.max(Math.min(n, 100), 0)) !== this._progress &&
        ((this._progress = n),
        t <= e &&
          e < i &&
          (isPhone()
            ? (this.__fillContainer.style.height = this._progress + '%')
            : (this.__fillContainer.style.width = this._progress + '%'),
          this.setProgressXP(e))),
        this.toggleClass('inprogress', t <= e && e < i),
        this.toggleClass('complete', 100 <= this._progress && !s),
        this.toggleClass('redeem', 100 <= this._progress && s);
    } else
      utils.Debug.Assert(!1, 'Invalid input; progress bar expected a number.');
  }),
  (UTTierProgressBarView.prototype.setProgressXP = function setProgressXP(e) {
    utils.JS.isNumber(e)
      ? (this.__fillText.textContent = e)
      : utils.Debug.Assert(
          !1,
          'Invalid input; progress bar expected a number.'
        );
  }),
  (UTTierProgressBarView.prototype.setProgressLabel = function setProgressLabel(
    e
  ) {
    this.__labelText.textContent = e;
  }),
  utils.JS.inherits(UTObjectivesHubView, UTTargetActionView),
  (UTObjectivesHubView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-objectives-list-view'),
        e.classList.add('ut-objectives-hub'),
        (this._objectivesTM = new components.TabMenu()),
        e.appendChild(this._objectivesTM.getRootElement());
      var t = document.createElement('div');
      t.classList.add('ut-objectives-list-view--content');
      var i = document.createElement('div');
      i.classList.add('ut-objectives-list-view--header'),
        (this.__campaignHeader = document.createElement('div')),
        this.__campaignHeader.classList.add('ut-campaign-header'),
        (this.__campaignTitle = document.createElement('h1')),
        this.__campaignTitle.classList.add('ut-objectives-list-view--title'),
        this.__campaignHeader.appendChild(this.__campaignTitle);
      var s = document.createElement('div');
      s.classList.add('ut-objectives-list-view--schedule'),
        (this.__campaignTimeRemaining = document.createElement('span')),
        s.appendChild(this.__campaignTimeRemaining),
        this.__campaignHeader.appendChild(s),
        i.appendChild(this.__campaignHeader),
        (this.__groupsHeader = document.createElement('div')),
        i.appendChild(this.__groupsHeader),
        t.appendChild(i);
      var n = document.createElement('div');
      n.classList.add('ut-objectives-list-view--details'),
        (this.__campaignDetails = document.createElement('div')),
        this.__campaignDetails.classList.add(
          'ut-objectives-list-view--campaign'
        ),
        (this.__progressView = document.createElement('div')),
        this.__progressView.classList.add('ut-tier-progress-bar'),
        this.__campaignDetails.appendChild(this.__progressView),
        (this.__tierView = document.createElement('div')),
        this.__tierView.classList.add('ut-objectives-list-view--tiers'),
        this.__campaignDetails.appendChild(this.__tierView),
        n.appendChild(this.__campaignDetails),
        (this.__groupsDetails = document.createElement('div')),
        this.__groupsDetails.classList.add(
          'ut-objectives-list-view--groups-container'
        ),
        n.appendChild(this.__groupsDetails),
        t.appendChild(n),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTObjectivesHubView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._objectivesTM.destroy(),
      (this.__campaignHeader = null),
      (this.__campaignTitle = null),
      (this.__campaignTimeRemaining = null),
      (this.__groupsHeader = null),
      (this.__campaignDetails = null),
      (this.__progressView = null),
      (this.__tierView = null),
      (this.__groupsDetails = null);
  }),
  (UTObjectivesHubView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTObjectivesHubView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTObjectivesHubView.Event = {
    CAMPAIGN_TIER_CLAIM: 'UTObjectivesHubView.Event.CAMPAIGN_TIER_CLAIM',
    CAMPAIGN_TIER_REWARDS_INFO:
      'UTObjectivesHubView.Event.CAMPAIGN_TIER_REWARDS_INFO',
    OBJECTIVE_GROUP: 'UTObjectivesHubView.Event.OBJECTIVE_GROUP',
    OBJECTIVE_GROUP_CLAIM: 'UTObjectivesHubView.Event.OBJECTIVE_GROUP_CLAIM',
    OBJECTIVE_GROUP_REWARDS_INFO:
      'UTObjectivesHubView.Event.OBJECTIVE_GROUP_REWARDS_INFO'
  }),
  (UTObjectivesHubView.prototype.init = function init() {
    this.superclass(),
      DOMKit.toggleDisplayStyle(this.__campaignHeader, !1),
      DOMKit.toggleDisplayStyle(this.__campaignDetails, !1),
      DOMKit.toggleDisplayStyle(this.__groupsHeader, !1),
      DOMKit.toggleDisplayStyle(this.__groupsDetails, !1),
      this.setInteractionState(!0);
  }),
  (UTObjectivesHubView.prototype.dealloc = function dealloc() {
    this._clearViews(), this.superclass();
  }),
  (UTObjectivesHubView.prototype._clearViews = function _clearViews() {
    this._levels
      .concat(this._groups)
      .concat(this._progressBars)
      .forEach(function(e) {
        e.dealloc();
      }),
      (this._levels = []),
      (this._groups = []),
      (this._progressBars = []);
  }),
  (UTObjectivesHubView.prototype._toggleViewTypes = function _toggleViewTypes(
    e
  ) {
    DOMKit.toggleDisplayStyle(this.__campaignHeader, e),
      DOMKit.toggleDisplayStyle(this.__campaignDetails, e),
      DOMKit.toggleDisplayStyle(this.__groupsHeader, !e),
      DOMKit.toggleDisplayStyle(this.__groupsDetails, !e);
  }),
  (UTObjectivesHubView.prototype.setupNavigation = function setupNavigation(e) {
    this._objectivesTM.clearTabs(),
      e.forEach(function(e) {
        this._objectivesTM.addTab(e.id, e.name);
      }, this),
      this._objectivesTM.layoutSubviews();
  }),
  (UTObjectivesHubView.prototype.addNavigationTarget = function addNavigationTarget(
    e,
    t
  ) {
    this._objectivesTM.addTarget(e, t, enums.Event.TAP);
  }),
  (UTObjectivesHubView.prototype.setTab = function setTab(e) {
    this._objectivesTM.setActiveTab(e);
  }),
  (UTObjectivesHubView.prototype.renderCampaign = function renderCampaign(i) {
    this._toggleViewTypes(!0),
      this._clearViews(),
      (this.__campaignTitle.textContent = i.title),
      this.updateCampaignTimeRemaining(
        i.endTime - Math.round(Date.now() / MS_PER_SECOND)
      );
    var s = 0;
    i.levels.forEach(function(e) {
      var t = s + 1;
      (s = e.xp),
        this._progressBars.push(this._generateCampaignTierProgress(e, t, i.xp)),
        this._levels.push(this._generateCampaignTierTile(e, i.xp));
    }, this),
      this.layoutSubviews(),
      this._levels.forEach(function(e, t) {
        e.setupRewardsCarousel(i.levels.values()[t].getDefaultRewardIndex());
      }, this);
  }),
  (UTObjectivesHubView.prototype.updateCampaignTimeRemaining = function updateCampaignTimeRemaining(
    e
  ) {
    this.__campaignTimeRemaining.textContent = services.Localization.localize(
      'scmp.campaign.countdown',
      [services.Localization.localizeTimeRemaining(e)]
    );
  }),
  (UTObjectivesHubView.prototype._generateCampaignTierProgress = function _generateCampaignTierProgress(
    e,
    t,
    i
  ) {
    var s = new UTTierProgressBarView();
    return (
      s.init(),
      s.setProgress(i, t, e.xp, e.isClaimable(i)),
      s.setProgressLabel(e.id),
      this.addSubview(s, this.__progressView),
      s
    );
  }),
  (UTObjectivesHubView.prototype._generateCampaignTierTile = function _generateCampaignTierTile(
    e,
    t
  ) {
    var i = new UTCampaignTierView(),
      s = e.isClaimable(t);
    return (
      i.init(),
      i.setId(e.id),
      i.setCampaignLevelRewardOptions(e.rewardOptions),
      i.setTitle(e.title),
      i.setProgress(e.xp - t, s),
      i.toggleRewardsInfoButton(
        e.areRewardsVisible() &&
          (t < e.xp || s) &&
          (1 < e.rewardOptions.length || 1 < e.rewardOptions[0].awards.length)
      ),
      i.addTarget(
        this,
        this._eRewardsInfoBtnTapped,
        UTCampaignTierView.Event.REWARDS_INFO
      ),
      i.addTarget(
        this,
        this._eClaimBtnTapped,
        UTCampaignTierView.Event.CLAIM_REWARD
      ),
      this.addSubview(i, this.__tierView),
      i
    );
  }),
  (UTObjectivesHubView.prototype.renderCategory = function renderCategory(t) {
    this._toggleViewTypes(!1),
      this._clearViews(),
      (this._groups = t.map(function(e) {
        return this._generateObjectiveGroupTile(
          e,
          e.isLockedByGroups() ? t : []
        );
      }, this)),
      this.layoutSubviews(),
      this._groups.forEach(function(e) {
        e.setupRewardsCarousel();
      }, this);
  }),
  (UTObjectivesHubView.prototype.updateGroupsTimeRemaining = function updateGroupsTimeRemaining(
    i
  ) {
    this._groups.forEach(function(t) {
      var e = utils.JS.find(i, function(e) {
        return e.id === t.getId();
      });
      utils.JS.isValid(e)
        ? e.isComingSoon()
          ? t.setCountdown(
              services.Localization.localize('scmp.group.opens', [
                services.Localization.localizeTimeRemaining(
                  e.getTimeRemainingOpens()
                )
              ])
            )
          : e.isMilestones() ||
            (e.hasExpired()
              ? t.setCountdown(
                  services.Localization.localize('objectives.tile.expired')
                )
              : t.setCountdown(
                  services.Localization.localize('scmp.group.countdown', [
                    services.Localization.localizeTimeRemaining(
                      e.getTimeRemainingExpires()
                    )
                  ])
                ))
        : t.setCountdown(
            services.Localization.localize('objectives.tile.expired')
          );
    }, this);
  }),
  (UTObjectivesHubView.prototype._generateObjectiveGroupTile = function _generateObjectiveGroupTile(
    e,
    i
  ) {
    var t = new UTObjectiveEntryView(!0);
    if (
      (t.init(),
      t.setId(e.id),
      t.setTitle(e.title),
      t.setDescription(e.subtitle),
      t.setProgress(e.getProgress()),
      t.setProgressLabel(
        services.Localization.localize('scmp.group.objectivescompleted', [
          e.getNumberOfCompletedObjectives() || 0,
          e.objectivesNumber
        ])
      ),
      e.isMilestones()
        ? t.toggleCountdown(!1)
        : e.hasExpired()
        ? t.setCountdown(
            services.Localization.localize('objectives.tile.expired')
          )
        : t.setCountdown(
            services.Localization.localize('scmp.group.countdown', [
              services.Localization.localizeTimeRemaining(
                e.getTimeRemainingExpires()
              )
            ])
          ),
      e.isComingSoon())
    )
      t.setGroupComingSoon(),
        t.setCountdown(
          services.Localization.localize('scmp.group.opens', [
            services.Localization.localizeTimeRemaining(
              e.getTimeRemainingOpens()
            )
          ])
        );
    else if (
      (t.setRewards(e.awards), t.renderRewardsFooter(), e.isLockedByGroups())
    ) {
      var s = e.groupIdsToUnlock.map(function(t) {
        var e = utils.JS.find(
          i,
          function(e) {
            return t === e.id;
          }.bind(this)
        );
        if (e) return e.title;
      }, this);
      t.setOverlayText(
        services.Localization.localize('scmp.group.description.lockedBy')
      ),
        t.setGroupLocked(s);
    } else
      e.isLocked()
        ? (t.setOverlayText(
            services.Localization.localize('scmp.group.description.locked')
          ),
          t.setGroupScheduled())
        : t.setState(e.state);
    return (
      t.addTarget(this, this._eObjGroupTapped, enums.Event.TAP),
      t.addTarget(
        this,
        this._eClaimBtnTapped,
        UTObjectiveEntryView.Event.CLAIM_REWARD
      ),
      t.addTarget(
        this,
        this._eRewardsInfoBtnTapped,
        UTObjectiveEntryView.Event.OBJECTIVE_GROUP_REWARDS_INFO
      ),
      this.addSubview(t, this.__groupsDetails),
      t
    );
  }),
  (UTObjectivesHubView.prototype._eObjGroupTapped = function _eObjGroupTapped(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTObjectivesHubView.Event.OBJECTIVE_GROUP, {
        id: e.getId()
      });
  }),
  (UTObjectivesHubView.prototype._eRewardsInfoBtnTapped = function _eRewardsInfoBtnTapped(
    e,
    t,
    i
  ) {
    var s;
    this.isInteractionEnabled() &&
      (e instanceof UTObjectiveEntryView &&
      t === UTObjectiveEntryView.Event.OBJECTIVE_GROUP_REWARDS_INFO
        ? (s = UTObjectivesHubView.Event.OBJECTIVE_GROUP_REWARDS_INFO)
        : e instanceof UTObjectiveEntryView &&
          t == UTObjectiveEntryView.Event.OBJECTIVE_ENTRY_REWARDS_INFO
        ? (s = UTObjectivesHubView.Event.OBJECTIVE_ENTRY_REWARDS_INFO)
        : e instanceof UTCampaignTierView &&
          (s = UTObjectivesHubView.Event.CAMPAIGN_TIER_REWARDS_INFO),
      this._triggerActions(s, i));
  }),
  (UTObjectivesHubView.prototype._eClaimBtnTapped = function _eClaimBtnTapped(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      (e instanceof UTObjectiveEntryView
        ? (viewEvent = UTObjectivesHubView.Event.OBJECTIVE_GROUP_CLAIM)
        : e instanceof UTCampaignTierView &&
          (viewEvent = UTObjectivesHubView.Event.CAMPAIGN_TIER_CLAIM),
      this._triggerActions(viewEvent, i));
  }),
  utils.JS.inherits(UTRewardView, UTView),
  (UTRewardView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('li');
      (this.__image = document.createElement('div')),
        this.__image.classList.add('image'),
        e.appendChild(this.__image);
      var t = document.createElement('div');
      t.classList.add('reward-info');
      var i = document.createElement('div');
      i.classList.add('reward-container'),
        (this.__value = document.createElement('span')),
        this.__value.classList.add('value'),
        i.appendChild(this.__value),
        (this.__type = document.createElement('span')),
        this.__type.classList.add('type'),
        i.appendChild(this.__type),
        t.appendChild(i),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTRewardView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__image = null),
      (this.__value = null),
      (this.__type = null);
  }),
  (UTRewardView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTRewardView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTRewardView.PACK_ID_CLASS_TABLE = {
    1: 'bronze',
    2: 'silver',
    3: 'gold'
  }),
  (UTRewardView.prototype.render = function render(e) {
    if (utils.JS.isValid(this.data)) {
      e || (this.__type.textContent = this.data.buildString());
      var t = [
        enums.AwardType.CHAMPION_QUALIFICATION_POINTS,
        enums.AwardType.XP,
        enums.AwardType.COIN,
        enums.AwardType.PACK,
        enums.AwardType.ITEM
      ].join(' ');
      switch (
        (DOMKit.removeClass(this.__image, t),
        DOMKit.addClass(this.__image, this.data.type),
        this.data.type)
      ) {
        case enums.AwardType.CHAMPION_QUALIFICATION_POINTS:
        case enums.AwardType.XP:
        case enums.AwardType.COIN:
          this.__value.textContent =
            services.Localization.localizeNumber(this.data.value) + ' ';
          break;
        case enums.AwardType.PACK:
          utils.JS.isValid(UTRewardView.PACK_ID_CLASS_TABLE[this.data.halId]) &&
            DOMKit.addClass(
              this.__image,
              UTRewardView.PACK_ID_CLASS_TABLE[this.data.halId]
            );
          break;
        case enums.AwardType.ITEM:
          var i = this.data.itemData;
          if (i.isCoinBoost())
            DOMKit.addClass(
              this.__image,
              UTRewardsCarouselView.Class.COIN_BOOST
            );
          else if (i.isPlayerPickItem())
            DOMKit.addClass(this.__image, 'player-pick');
          else if (!i.isSpecial()) {
            var s;
            (s = i.isBronzeRating()
              ? 'bronze'
              : i.isSilverRating()
              ? 'silver'
              : 'gold'),
              DOMKit.addClass(this.__image, s);
          }
      }
    }
  }),
  (UTRewardView.prototype.dealloc = function dealloc() {
    this.superclass(), (this.data = null);
  }),
  utils.JS.inherits(UTRewardSelectionView, UTTargetActionView),
  (UTRewardSelectionView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-reward-selection'),
        (this.__titleLandscape = document.createElement('h1')),
        this.__titleLandscape.classList.add('selection-title-landscape'),
        e.appendChild(this.__titleLandscape),
        (this.__mainImage = document.createElement('div')),
        this.__mainImage.classList.add('image'),
        e.appendChild(this.__mainImage);
      var t = document.createElement('div');
      t.classList.add('rewards-details'),
        (this.__titlePhone = document.createElement('h1')),
        this.__titlePhone.classList.add('selection-title-phone'),
        t.appendChild(this.__titlePhone),
        (this.__mainDescription = document.createElement('span')),
        this.__mainDescription.classList.add('main-description'),
        t.appendChild(this.__mainDescription),
        (this.__rewardsList = document.createElement('ul')),
        this.__rewardsList.classList.add('rewards-list'),
        t.appendChild(this.__rewardsList),
        e.appendChild(t),
        (this.__expandRewardBtn = document.createElement('div')),
        this.__expandRewardBtn.classList.add('ut-reward-selection--expand'),
        e.appendChild(this.__expandRewardBtn),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTRewardSelectionView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__titleLandscape = null),
      (this.__mainImage = null),
      (this.__titlePhone = null),
      (this.__mainDescription = null),
      (this.__rewardsList = null),
      (this.__expandRewardBtn = null);
  }),
  (UTRewardSelectionView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTRewardSelectionView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTRewardSelectionView.prototype.init = function init() {
    this.setTitle(
      services.Localization.localize('rivals.rewardset.title', [this.index])
    ),
      this.setDetailedContent(
        services.Localization.localize('rewardset.view-x-rewards', [
          this.rewards.length + 1
        ])
      ),
      this.rewards.forEach(function(e) {
        e.init(), e.render();
      }),
      this._setMainReward(),
      this._attachRewards(),
      this.setInteractionState(!0);
  }),
  (UTRewardSelectionView.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this.id = 0),
      this.rewards.forEach(function(e) {
        e.dealloc();
      }),
      (this.rewards = []),
      (this.primaryReward = null);
  }),
  (UTRewardSelectionView.prototype.setTitle = function setTitle(e) {
    (this.__titleLandscape.textContent = e),
      (this.__titlePhone.textContent = e);
  }),
  (UTRewardSelectionView.prototype.setDetailedContent = function setDetailedContent(
    e
  ) {
    this.__expandRewardBtn.textContent = e;
  }),
  (UTRewardSelectionView.prototype.setMainDescription = function setMainDescription(
    e
  ) {
    this.__mainDescription.textContent = e;
  }),
  (UTRewardSelectionView.prototype.toggleRewardSelection = function toggleRewardSelection(
    e
  ) {
    DOMKit.toggleClass(this.getRootElement(), enums.UIState.SELECTED, e);
  }),
  (UTRewardSelectionView.prototype._attachRewards = function _attachRewards() {
    this.rewards.forEach(function(e) {
      this.__rewardsList.appendChild(e.getRootElement());
    }, this),
      0 === this.rewards.length &&
        DOMKit.addClass(this.__expandRewardBtn, enums.UICollapsibleState.NONE);
  }),
  (UTRewardSelectionView.prototype._setMainReward = function _setMainReward() {
    var e = 'reward';
    if ((DOMKit.addClass(this.__mainImage, e), this.primaryReward.isCoin))
      DOMKit.addClass(this.__mainImage, enums.AwardType.COIN + '-' + e),
        this.setMainDescription(
          services.Localization.localizeNumber(this.primaryReward.value)
        );
    else if (this.primaryReward.isPack) {
      DOMKit.addClass(this.__mainImage, enums.AwardType.PACK + '-' + e);
      var t = new UTPackGraphicView(),
        i =
          this.primaryReward instanceof UTCampaignObjectiveRewardDTO
            ? this.primaryReward.assetId
            : this.primaryReward.halId;
      utils.JS.isValid(this.primaryReward.assetId) &&
        (i = this.primaryReward.assetId),
        t.setPackBackground(i),
        t.setPackForeground(i),
        t.setPromo(enums.Purchase.DealType.REGULAR),
        this.__mainImage.appendChild(t.getRootElement()),
        this.setMainDescription(this.primaryReward.buildString());
    } else if (this.primaryReward.isItem) {
      if (this.primaryReward.itemData.isCoinBoost())
        DOMKit.addClass(
          this.__mainImage,
          UTRewardsCarouselView.Class.COIN_BOOST
        ),
          this.setMainDescription(
            services.Localization.localizeNumber(this.primaryReward.value)
          );
      else {
        DOMKit.addClass(this.__mainImage, enums.AwardType.ITEM + '-' + e);
        var s = isPhone()
          ? factories.ItemView.createSmallItem(this.primaryReward.itemData)
          : factories.ItemView.createLargeItem(this.primaryReward.itemData);
        s.init(),
          s.showSecondaryViews(!1),
          s.render(this.primaryReward.itemData),
          this.__mainImage.appendChild(s.getRootElement());
      }
      this.setMainDescription(this.primaryReward.buildString());
    } else
      this.primaryReward.isChampionQualificationPoints &&
        (DOMKit.addClass(this.__mainImage, this.primaryReward.type + '-' + e),
        this.setMainDescription(
          services.Localization.localizeNumber(this.primaryReward.value) +
            ' ' +
            services.Localization.localize(
              'rivals.rewardset.weekendleaguepoints'
            )
        ));
  }),
  (UTRewardSelectionView.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(e);
    var t = this.rewards.length + 1;
    this._triggerActions(enums.Event.TAP, {
      id: this.id,
      rewardsCount: t
    });
  }),
  utils.JS.inherits(UTRewardSelectionChoiceView, UTTargetActionView),
  (UTRewardSelectionChoiceView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-reward-selection-modal');
      var t = document.createElement('header');
      t.classList.add('ut-reward-selection-modal-header'),
        (this._backBtn = new UTImageButtonControl()),
        this._backBtn.getRootElement().classList.add('back-btn'),
        t.appendChild(this._backBtn.getRootElement()),
        (this.__title = document.createElement('h1')),
        this.__title.classList.add('reward-selector-title'),
        t.appendChild(this.__title),
        (this._exitBtn = new UTImageButtonControl()),
        this._exitBtn.getRootElement().classList.add('exit-btn'),
        t.appendChild(this._exitBtn.getRootElement()),
        e.appendChild(t),
        (this.__rewardTiles = document.createElement('div')),
        this.__rewardTiles.classList.add('ut-reward-selection-modal-content'),
        (this.__expandedReward = document.createElement('div')),
        this.__expandedReward.classList.add('ut-reward-selection-detail');
      var i = document.createElement('section');
      i.classList.add('rewards-container'),
        (this._rewardsCarousel = new UTRewardsCarouselView()),
        i.appendChild(this._rewardsCarousel.getRootElement()),
        (this.__rewardsList = document.createElement('ul')),
        this.__rewardsList.classList.add('rewards-list'),
        i.appendChild(this.__rewardsList),
        this.__expandedReward.appendChild(i),
        this.__rewardTiles.appendChild(this.__expandedReward),
        e.appendChild(this.__rewardTiles),
        (this.__footer = document.createElement('footer')),
        (this._actionBtn = new UTStandardButtonControl()),
        this._actionBtn.getRootElement().classList.add('call-to-action'),
        this.__footer.appendChild(this._actionBtn.getRootElement()),
        e.appendChild(this.__footer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTRewardSelectionChoiceView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._backBtn.destroy(),
      (this.__title = null),
      this._exitBtn.destroy(),
      (this.__rewardTiles = null),
      (this.__expandedReward = null),
      this._rewardsCarousel.destroy(),
      (this.__rewardsList = null),
      (this.__footer = null),
      this._actionBtn.destroy();
  }),
  (UTRewardSelectionChoiceView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTRewardSelectionChoiceView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTRewardSelectionChoiceView.Event = {
    BACK: 'UTRewardSelectionChoiceView.Event.BACK',
    EXIT: 'UTRewardSelectionChoiceView.Event.EXIT',
    CONFIRM: 'UTRewardSelectionChoiceView.Event.CONFIRM',
    OPTION_SELECT: 'UTRewardSelectionChoiceView.Event.OPTION_SELECT'
  }),
  (UTRewardSelectionChoiceView.Class = {
    SINGLE_REWARD: 'rewards-carousel--single-reward'
  }),
  (UTRewardSelectionChoiceView.prototype.init = function init() {
    this.superclass(),
      this.categoryAwardViews.forEach(function(e) {
        e.init(), e.addTarget(this, this._eSelectionChanged, enums.Event.TAP);
      }, this),
      this._attachCategoryAwards(),
      this._actionBtn.init(),
      this._actionBtn.addTarget(this, this._eBtnTapped, enums.Event.TAP),
      this._actionBtn.setInteractionState(!1),
      this._exitBtn.init(),
      this._exitBtn.addTarget(this, this._eBtnTapped, enums.Event.TAP),
      this._exitBtn.setInteractionState(!0),
      this._backBtn.init(),
      this._backBtn.addTarget(this, this._eBtnTapped, enums.Event.TAP),
      this._backBtn.setInteractionState(!0),
      this.setInteractionState(!0);
  }),
  (UTRewardSelectionChoiceView.prototype.dealloc = function dealloc() {
    this.categoryAwardViews.values().forEach(function(e) {
      e.dealloc();
    }),
      (this.categoryAwardViews = null),
      this.resetRewardsCarousel(),
      this.superclass();
  }),
  (UTRewardSelectionChoiceView.prototype.getActionBtn = function getActionBtn() {
    return this._actionBtn;
  }),
  (UTRewardSelectionChoiceView.prototype.getBackBtn = function getBackBtn() {
    return this._backBtn;
  }),
  (UTRewardSelectionChoiceView.prototype.setTitle = function setTitle(e) {
    this.__title.textContent = e;
  }),
  (UTRewardSelectionChoiceView.prototype.setButtonText = function setButtonText(
    e
  ) {
    this._actionBtn.setText(e);
  }),
  (UTRewardSelectionChoiceView.prototype.clearSelectionClasses = function clearSelectionClasses() {
    this.categoryAwardViews.forEach(function(e) {
      e.toggleRewardSelection(!1);
    });
  }),
  (UTRewardSelectionChoiceView.prototype.selectRewardSet = function selectRewardSet(
    e
  ) {
    this.categoryAwardViews.get(e).toggleRewardSelection(!0);
  }),
  (UTRewardSelectionChoiceView.prototype.expandRewardSet = function expandRewardSet(
    e
  ) {
    DOMKit.addClass(this.getRootElement(), enums.UICollapsibleState.EXPANDED);
    var t = this.categoryAwardViews.get(e),
      i = services.Localization.localize('rivals.rewardset.title', [t.index]),
      s = [],
      n = new UTRewardView(t.primaryReward);
    n.data && s.push(n.data),
      isPhone()
        ? (t.rewards.forEach(function(e) {
            this.__rewardsList.appendChild(e.getRootElement());
          }, this),
          1 < this.categoryAwardViews.length
            ? this._rewardsCarousel.setMobileTitle(i)
            : this._rewardsCarousel.addClass(
                UTRewardSelectionChoiceView.Class.SINGLE_REWARD
              ))
        : (1 < this.categoryAwardViews.length && this.setTitle(i),
          t.rewards.forEach(function(e) {
            s.push(e.data);
          })),
      this.setupRewardsCarousel(s);
  }),
  (UTRewardSelectionChoiceView.prototype.setupRewardsCarousel = function setupRewardsCarousel(
    e
  ) {
    0 < e.length &&
      (this._rewardsCarousel.setNumVisibleItems(4),
      this._rewardsCarousel.setupRewards(e));
  }),
  (UTRewardSelectionChoiceView.prototype.resetRewardsCarousel = function resetRewardsCarousel() {
    this._rewardsCarousel.reset();
  }),
  (UTRewardSelectionChoiceView.prototype.resetRewardList = function resetRewardList() {
    DOMKit.empty(this.__rewardsList);
  }),
  (UTRewardSelectionChoiceView.prototype.clearExpandedClasses = function clearExpandedClasses() {
    DOMKit.removeClass(
      this.getRootElement(),
      enums.UICollapsibleState.EXPANDED
    );
  }),
  (UTRewardSelectionChoiceView.prototype.toggleFooter = function toggleFooter(
    e
  ) {
    DOMKit.toggleDisplayStyle(this.__footer, e);
  }),
  (UTRewardSelectionChoiceView.prototype._attachCategoryAwards = function _attachCategoryAwards() {
    this.categoryAwardViews.forEach(function(e) {
      this.__rewardTiles.appendChild(e.getRootElement());
    }, this);
  }),
  (UTRewardSelectionChoiceView.prototype._eBtnTapped = function _eBtnTapped(
    e,
    t,
    i
  ) {
    var s;
    this.isInteractionEnabled() &&
      (e === this._backBtn
        ? (s = UTRewardSelectionChoiceView.Event.BACK)
        : e === this._exitBtn
        ? (s = UTRewardSelectionChoiceView.Event.EXIT)
        : e === this._actionBtn &&
          ((s = UTRewardSelectionChoiceView.Event.CONFIRM),
          this._actionBtn.setInteractionState(!1)),
      this._triggerActions(s, {
        selectedId: this._selectedId
      }));
  }),
  (UTRewardSelectionChoiceView.prototype._eSelectionChanged = function _eSelectionChanged(
    e,
    t,
    i
  ) {
    (this._selectedId = i.id),
      this._triggerActions(UTRewardSelectionChoiceView.Event.OPTION_SELECT, i);
  }),
  utils.JS.inherits(
    UTRewardSelectionChoiceViewController,
    controllers.views.popups.BasePopup
  ),
  (UTRewardSelectionChoiceViewController.prototype.init = function init() {
    this.superclass(),
      this.getView().setButtonText(
        services.Localization.localize('common.dialog.confirm')
      );
  }),
  (UTRewardSelectionChoiceViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    e.addTarget(
      this,
      this._eBackBtnTapped,
      UTRewardSelectionChoiceView.Event.BACK
    ),
      e.addTarget(
        this,
        this._eExitBtnTapped,
        UTRewardSelectionChoiceView.Event.EXIT
      ),
      e.addTarget(
        this,
        this._eConfirmBtnTapped,
        UTRewardSelectionChoiceView.Event.CONFIRM
      ),
      e.addTarget(
        this,
        this._eSelectionViewChanged,
        UTRewardSelectionChoiceView.Event.OPTION_SELECT
      ),
      1 === this.rewardSets.length &&
        (this.expandFirstReward(),
        e.getBackBtn().hide(),
        e
          .getActionBtn()
          .setInteractionState(
            this._claimable && 0 <= this._selectedRewardIndex
          ));
  }),
  (UTRewardSelectionChoiceViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    var e = this.getView();
    e.removeTarget(
      this,
      this._eBackBtnTapped,
      UTRewardSelectionChoiceView.Event.BACK
    ),
      e.removeTarget(
        this,
        this._eExitBtnTapped,
        UTRewardSelectionChoiceView.Event.EXIT
      ),
      e.removeTarget(
        this,
        this._eConfirmBtnTapped,
        UTRewardSelectionChoiceView.Event.CONFIRM
      ),
      e.removeTarget(
        this,
        this._eSelectionViewChanged,
        UTRewardSelectionChoiceView.Event.OPTION_SELECT
      );
  }),
  (UTRewardSelectionChoiceViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return (
      this.rewardSets.forEach(function(e) {
        e.organize && e.organize();
      }),
      new UTRewardSelectionChoiceView(this.rewardSets)
    );
  }),
  (UTRewardSelectionChoiceViewController.prototype.setTitleText = function setTitleText(
    e
  ) {
    (this._titleText = e), this.getView().setTitle(this._titleText);
  }),
  (UTRewardSelectionChoiceViewController.prototype.setClaimableState = function setClaimableState(
    e
  ) {
    (this._claimable = e), this.getView().toggleFooter(e);
  }),
  (UTRewardSelectionChoiceViewController.prototype.expandFirstReward = function expandFirstReward() {
    (this._selectedRewardIndex = 1),
      this.getView().expandRewardSet(this._selectedRewardIndex);
  }),
  (UTRewardSelectionChoiceViewController.prototype._eConfirmBtnTapped = function _eConfirmBtnTapped(
    e,
    t,
    i
  ) {
    this.isViewDisplayed() && this.closePopup();
  }),
  (UTRewardSelectionChoiceViewController.prototype._eExitBtnTapped = function _eExitBtnTapped(
    e,
    t,
    i
  ) {
    this.isViewDisplayed() && this.closePopup();
  }),
  (UTRewardSelectionChoiceViewController.prototype._eBackBtnTapped = function _eBackBtnTapped(
    e,
    t,
    i
  ) {
    var s = this.getView();
    s.setTitle(this._titleText),
      s.resetRewardsCarousel(),
      s.resetRewardList(),
      s.clearExpandedClasses(),
      s
        .getActionBtn()
        .setInteractionState(this._claimable && 0 <= this._selectedRewardIndex);
  }),
  (UTRewardSelectionChoiceViewController.prototype._eSelectionViewChanged = function _eSelectionViewChanged(
    e,
    t,
    i
  ) {
    var s = this.getView();
    (this._selectedRewardIndex = i.id),
      s.clearSelectionClasses(),
      this._claimable && s.selectRewardSet(this._selectedRewardIndex),
      (1 < this.rewardSets.length || 1 < i.rewardsCount) &&
        s.expandRewardSet(this._selectedRewardIndex),
      s
        .getActionBtn()
        .setInteractionState(this._claimable && 0 <= this._selectedRewardIndex);
  }),
  utils.JS.inherits(UTObjectivesHubViewController, UTViewController),
  (UTObjectivesHubViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      this._viewmodel ||
        (this._viewmodel = new UTObjectivesViewModel(services.Objectives)),
      this._viewmodel.init(),
      this.getView().addNavigationTarget(this, this._eTabSelected));
  }),
  (UTObjectivesHubViewController.prototype.initWithViewmodel = function initWithViewmodel(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof UTObjectivesViewModel,
        'Expected a UTObjectivesViewModel.'
      ),
      (this._viewmodel = e),
      this.init());
  }),
  (UTObjectivesHubViewController.prototype.dealloc = function dealloc() {
    this._viewmodel.dealloc(),
      (this._viewmodel = null),
      this._timer.dealloc(),
      (this._timer = null),
      this.superclass();
  }),
  (UTObjectivesHubViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTObjectivesHubView();
  }),
  (UTObjectivesHubViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.objectives');
  }),
  (UTObjectivesHubViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this.getNavigationController().setNavigationVisibility(!0, !0),
      this._viewmodel.getCurrentCategoryId() !==
      UTCampaignCategoryEntity.THIS_SEASON_ID
        ? this._viewmodel
            .requestActiveCampaignDetails()
            .observe(this, function(e) {
              e.unobserve(this), this._getCategories();
            })
        : this._getCategories(),
      this._startTimer();
    var e = getDefaultDispatcher();
    e.addObserver(enums.Notification.APP_PAUSE, this, this._nAppPaused),
      e.addObserver(enums.Notification.APP_RESUME, this, this._nAppResumed);
    var t = this.getView();
    t.addTarget(
      this,
      this._eGoToObjectiveGroup,
      UTObjectivesHubView.Event.OBJECTIVE_GROUP
    ),
      t.addTarget(
        this,
        this._eClaimObjectiveGroupReward,
        UTObjectivesHubView.Event.OBJECTIVE_GROUP_CLAIM
      ),
      t.addTarget(
        this,
        this._eOpenObjectiveGroupRewardsInfoPopup,
        UTObjectivesHubView.Event.OBJECTIVE_GROUP_REWARDS_INFO
      ),
      t.addTarget(
        this,
        this._eOpenCampaignTierRewardsInfoPopup,
        UTObjectivesHubView.Event.CAMPAIGN_TIER_REWARDS_INFO
      ),
      t.addTarget(
        this,
        this._eClaimCampaignTierReward,
        UTObjectivesHubView.Event.CAMPAIGN_TIER_CLAIM
      );
  }),
  (UTObjectivesHubViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this._timer.reset();
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.APP_PAUSE, this),
      e.removeObserver(enums.Notification.APP_RESUME, this);
    var t = this.getView();
    t.removeTarget(
      this,
      this._eGoToObjectiveGroup,
      UTObjectivesHubView.Event.OBJECTIVE_GROUP
    ),
      t.removeTarget(
        this,
        this._eClaimObjectiveGroupReward,
        UTObjectivesHubView.Event.OBJECTIVE_GROUP_CLAIM
      ),
      t.removeTarget(
        this,
        this._eOpenObjectiveGroupRewardsInfoPopup,
        UTObjectivesHubView.Event.OBJECTIVE_GROUP_REWARDS_INFO
      ),
      t.removeTarget(
        this,
        this._eOpenCampaignTierRewardsInfoPopup,
        UTObjectivesHubView.Event.CAMPAIGN_TIER_REWARDS_INFO
      ),
      t.removeTarget(
        this,
        this._eClaimCampaignTierReward,
        UTObjectivesHubView.Event.CAMPAIGN_TIER_CLAIM
      ),
      this.superclass();
  }),
  (UTObjectivesHubViewController.prototype._getCategories = function _getCategories() {
    this._viewmodel
      .requestCategories()
      .observe(this, function _onCategoriesRequested(e, t) {
        if ((e.unobserve(this), t.success && this.isViewDisplayed())) {
          var i = this.getView();
          i.setupNavigation(this._viewmodel.getCategories()),
            this._renderCurrentCategory(),
            i.setTab(this._viewmodel.getCurrentCategoryId()),
            this._triggerTelemetryPage();
        } else services.Notification.queue([services.Localization.localize('notification.scmp.categories.loadFailed'), enums.UINotificationType.NEGATIVE]), this.getNavigationController().popViewController();
      });
  }),
  (UTObjectivesHubViewController.prototype._getActiveCampaign = function _getActiveCampaign() {
    this._viewmodel
      .requestActiveCampaignDetails()
      .observe(this, function _onCampaignRequested(e, t) {
        if (
          (e.unobserve(this), t.success && utils.JS.isValid(t.data.campaign))
        ) {
          var i = t.data.campaign;
          if (this.isViewDisplayed() && i.startTime < i.serverCrtTime)
            return void this.getView().renderCampaign(i);
        }
        services.Notification.queue([
          services.Localization.localize(
            'notification.scmp.campaign.loadFailed'
          ),
          enums.UINotificationType.NEGATIVE
        ]),
          this.getNavigationController().popViewController();
      });
  }),
  (UTObjectivesHubViewController.prototype._renderCurrentCategory = function _renderCurrentCategory() {
    this._viewmodel.getCurrentCategory().isSeason()
      ? this._getActiveCampaign()
      : this.getView().renderCategory(
          this._viewmodel.getCurrentCategoryGroups()
        );
  }),
  (UTObjectivesHubViewController.prototype._startTimer = function _startTimer() {
    this._timer.setInterval(1e4),
      this._timer.setWorkFunc(this._handleEventTimer.bind(this)),
      this._timer.start();
  }),
  (UTObjectivesHubViewController.prototype._handleEventTimer = function _handleEventTimer() {
    var e = this._viewmodel.getCampaign(),
      t = this._viewmodel.getCurrentCategory(),
      i = Math.round(Date.now() / MS_PER_SECOND);

    function _onExpiry(e) {
      this._timer.reset();
      var t = new UTSeasonalCampaignPopupViewController(e);
      t.onExit.observe(this, this._onSCMPInfoPopupClosed),
        gPopupClickShield.setActivePopup(t);
    }
    t.isMilestones() ||
      (t.isSeason()
        ? this.getView().updateCampaignTimeRemaining(Math.max(0, e.endTime - i))
        : this.getView().updateGroupsTimeRemaining(
            this._viewmodel.getCurrentCategoryGroups()
          )),
      e.endTime <= i &&
      (e.nextCampaignStartTime <= i || e.nextCampaignStartTime === MAX_JAVA_INT)
        ? _onExpiry.call(
            this,
            e.needsAutoClaim ||
              e.hasUnclaimedLevelRewards() ||
              this._viewmodel.hasUnclaimedGroupRewards()
          )
        : this._viewmodel.hasUnclaimedExpiredGroups() && _onExpiry.call(this);
  }),
  (UTObjectivesHubViewController.prototype._onSCMPInfoPopupClosed = function _onSCMPInfoPopupClosed(
    e,
    t
  ) {
    function _onCategoriesRequested(e, t) {
      if ((e.unobserve(this), t.success && this.isViewDisplayed())) {
        var i = this.getView();
        i.setupNavigation(this._viewmodel.getCategories()),
          this._renderCurrentCategory(),
          i.setTab(this._viewmodel.getCurrentCategoryId()),
          this._startTimer();
      } else
        services.Notification.queue([
          services.Localization.localize(
            'notification.scmp.categories.loadFailed'
          ),
          enums.UINotificationType.NEGATIVE
        ]),
          this.getNavigationController().popViewController();
    }
    e.unobserve(this),
      t !== UTSeasonalCampaignPopupViewController.EVENTS.CLAIM_GROUP_EXPIRED
        ? (services.Objectives.reset(),
          getAppMain()
            .getRootViewController()
            .setGameViewTab(UTGameTabBarController.TabTag.HOME))
        : services.Objectives.claimExpiredRewards().observe(this, function(
            e,
            t
          ) {
            e.unobserve(this),
              t.success &&
                (gPopupClickShield.setActivePopup(
                  new UTObjectiveRewardsViewController(null, t.data.rewards)
                ),
                this._viewmodel
                  .requestCategories()
                  .observe(this, _onCategoriesRequested));
          });
  }),
  (UTObjectivesHubViewController.prototype._navigateToGroup = function _navigateToGroup(
    e
  ) {
    if (!e.isMilestones() && e.hasExpired() && !e.isCompleted())
      return (
        this._renderCurrentCategory(),
        void services.Notification.queue([
          services.Localization.localize('notification.scmp.group.expired'),
          enums.UINotificationType.NEGATIVE
        ])
      );
    var t = this.getNavigationController();
    if (t) {
      this._viewmodel.setCurrentGroup(e);
      var i = new UTObjectiveGroupViewController();
      i.initWithViewmodel(this._viewmodel), t.pushViewController(i);
    }
  }),
  (UTObjectivesHubViewController.prototype._triggerTelemetryPage = function _triggerTelemetryPage() {
    var e = 'Objectives Hub - ' + this._viewmodel.getCurrentCategory().name;
    services.PIN.sendData(enums.PIN.EVENT.PAGE_VIEW, {
      type: PIN_PAGEVIEW_EVT_TYPE,
      pgid: e
    }),
      TelemetryManager.trackPage(TelemetryManager.Sections.OBJECTIVES, e);
  }),
  (UTObjectivesHubViewController.prototype._eTabSelected = function _eTabSelected(
    e,
    t,
    i
  ) {
    var s = i.id;
    s !== this._viewmodel.getCurrentCategoryId() &&
      (this._viewmodel.setCurrentCategoryId(s), this._getCategories());
  }),
  (UTObjectivesHubViewController.prototype._eGoToObjectiveGroup = function _eGoToObjectiveGroup(
    e,
    t,
    i
  ) {
    var s = i.id;
    this._viewmodel
      .requestGroup(this._viewmodel.getCurrentCategoryId(), s)
      .observe(this, function _onGroupRequested(e, t) {
        if ((e.unobserve(this), t.success)) this._navigateToGroup(t.data.group);
        else {
          var i = this._viewmodel.getCurrentCategory().isMilestones()
            ? 'notification.scmp.milestone.loadFailed'
            : 'notification.scmp.group.loadFailed';
          services.Notification.queue([
            services.Localization.localize(i),
            enums.UINotificationType.NEGATIVE
          ]);
        }
      });
  }),
  (UTObjectivesHubViewController.prototype._eClaimObjectiveGroupReward = function _eClaimObjectiveGroupReward(
    e,
    t,
    s
  ) {
    var n = s.id;
    this._viewmodel
      .requestGroup(this._viewmodel.getCurrentCategoryId(), n)
      .observe(this, function _onGroupRequested(e, t) {
        if ((e.unobserve(this), t.success)) {
          var i = t.data.group;
          i.areObjectivesRedeemed()
            ? (this._viewmodel.setSelectedRewardId(n),
              this._viewmodel.claimGroupRewards().observe(this, function(e, t) {
                this._onRewardClaimed(e, t),
                  gPopupClickShield.setActivePopup(
                    new UTObjectiveRewardsViewController(i, s.rewards)
                  );
              }))
            : this._navigateToGroup(i);
        } else services.Notification.queue([services.Localization.localize('notification.scmp.rewardsInfoFailed'), enums.UINotificationType.NEGATIVE]);
      });
  }),
  (UTObjectivesHubViewController.prototype._triggerConsolidatedRewardsPopup = function _triggerConsolidatedRewardsPopup(
    e,
    t,
    i
  ) {
    var s = new UTRewardSelectionChoiceViewController(e);
    s.setTitleText(t),
      s.setClaimableState(i),
      s
        .getView()
        .addTarget(
          this,
          this._eCampaignRewardChosen,
          UTRewardSelectionChoiceView.Event.CONFIRM
        ),
      gPopupClickShield.setActivePopup(s);
  }),
  (UTObjectivesHubViewController.prototype._eOpenCampaignTierRewardsInfoPopup = function _eOpenCampaignTierRewardsInfoPopup(
    e,
    t,
    i
  ) {
    var s = i.rewardOptions.map(
      this._viewmodel.consolidateOptionReward,
      this._viewmodel
    );
    if (0 < s.length) {
      var n = this._viewmodel.getCampaign(),
        o = i.id,
        a = utils.JS.find(n.getLevels(), function(e) {
          return e.id === o;
        });
      utils.JS.isValid(a)
        ? (this._viewmodel.setSelectedRewardId(o),
          this._triggerConsolidatedRewardsPopup(
            s,
            services.Localization.localize('scmp.campaign.rewards.title', [o]),
            a.isClaimable(n.xp)
          ))
        : services.Notification.queue([
            services.Localization.localize(
              'notification.scmp.rewardsInfoFailed'
            ),
            enums.UINotificationType.NEGATIVE
          ]);
    }
  }),
  (UTObjectivesHubViewController.prototype._eOpenObjectiveGroupRewardsInfoPopup = function _eOpenObjectiveGroupRewardsInfoPopup(
    e,
    t,
    i
  ) {
    var s = [],
      n = i.id;
    s.push(this._viewmodel.createConsolidatedReward(1, i.rewards)),
      this._viewmodel
        .requestGroup(this._viewmodel.getCurrentCategoryId(), n)
        .observe(this, function _onGroupRequested(e, t) {
          if ((e.unobserve(this), t.success)) {
            var i = t.data.group;
            this._viewmodel.setSelectedRewardId(n),
              this._triggerConsolidatedRewardsPopup(
                s,
                services.Localization.localize('scmp.group.rewards.title'),
                i.isClaimable() && i.areObjectivesRedeemed()
              );
          } else services.Notification.queue([services.Localization.localize('notification.scmp.rewardsInfoFailed'), enums.UINotificationType.NEGATIVE]);
        });
  }),
  (UTObjectivesHubViewController.prototype._eClaimCampaignTierReward = function _eClaimCampaignTierReward(
    e,
    t,
    i
  ) {
    if (1 < i.rewardOptions.length)
      this._eOpenCampaignTierRewardsInfoPopup(e, t, i);
    else {
      var s = this._viewmodel.getCampaign(),
        n = i.id,
        o = utils.JS.find(s.getLevels(), function(e) {
          return e.id === n;
        });
      if (utils.JS.isValid(o)) {
        this._viewmodel.setSelectedRewardId(n);
        var a = i.rewardOptions[0];
        this._viewmodel.claimLevelRewards(a.id).observe(this, function(e, t) {
          this._onRewardClaimed(e, t),
            gPopupClickShield.setActivePopup(
              new UTObjectiveRewardsViewController(o, a.awards)
            );
        });
      } else
        services.Notification.queue([
          services.Localization.localize('notification.scmp.rewardsInfoFailed'),
          enums.UINotificationType.NEGATIVE
        ]);
    }
  }),
  (UTObjectivesHubViewController.prototype._eCampaignRewardChosen = function _eCampaignRewardChosen(
    e,
    t,
    i
  ) {
    e.removeTarget(
      this,
      this._eCampaignRewardChosen,
      UTRewardSelectionChoiceView.Event.CONFIRM
    ),
      this._viewmodel
        .claimLevelRewards(i.selectedId)
        .observe(this, function(e, t) {
          var i = !1,
            s = !1,
            n = !1,
            o = !1,
            a = !1;
          t.data.rewards.forEach(function(e) {
            (i = i || e.isCoin),
              (s = s || e.isItem),
              (n = n || e.isPack),
              (o = o || e.isChampionQualificationPoints),
              (a = a || e.isXP);
          }, this),
            s &&
              (services.Notification.queue([
                services.Localization.localize('notification.item.added'),
                enums.UINotificationType.POSITIVE
              ]),
              repositories.Item.setDirty(enums.FUTItemPile.PURCHASED),
              getDefaultDispatcher().notify(
                enums.Notification.UNASSIGNED_ITEM_ADDED,
                this
              )),
            n &&
              (services.Notification.queue([
                services.Localization.localize('notification.pack.added'),
                enums.UINotificationType.POSITIVE
              ]),
              services.User.getUser().incrementNumUnopenedPacks()),
            i &&
              (services.Notification.queue([
                services.Localization.localize('notification.coins.added'),
                enums.UINotificationType.POSITIVE
              ]),
              services.User.requestCurrencies()),
            o &&
              services.Notification.queue([
                services.Localization.localize(
                  'notification.championsPoints.added'
                ),
                enums.UINotificationType.POSITIVE
              ]),
            a &&
              (services.Notification.queue([
                services.Localization.localize('notification.xp.added'),
                enums.UINotificationType.POSITIVE
              ]),
              services.Objectives.reset()),
            this._onRewardClaimed(e, t);
        });
  }),
  (UTObjectivesHubViewController.prototype._onRewardClaimed = function _onRewardClaimed(
    e,
    t
  ) {
    e.unobserve(this);
    var i = this._viewmodel.getCurrentCategory().isSeason()
      ? 'Claim Seasonal Progress Rewards'
      : 'Claim Season Objectives Rewards';
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.OBJECTIVES,
      TelemetryManager.Categories.OBJECTIVE_REWARDS_CLAIMED,
      i
    ),
      t.success
        ? (services.Notification.queue([
            services.Localization.localize('notification.scmp.claimSuccess'),
            enums.UINotificationType.POSITIVE
          ]),
          this._renderCurrentCategory())
        : services.Notification.queue([
            services.Localization.localize('notification.scmp.claimFail'),
            enums.UINotificationType.NEGATIVE
          ]),
      this._viewmodel.resetSelectedRewardId();
  }),
  (UTObjectivesHubViewController.prototype._nAppPaused = function _nAppPaused(
    e,
    t,
    i
  ) {
    this._timer.reset();
  }),
  (UTObjectivesHubViewController.prototype._nAppResumed = function _nAppResumed(
    e,
    t,
    i
  ) {
    this._startTimer();
  }),
  services.URL.registerDeepLinkID(enums.DeepLinkSections.OBJECTIVES, function(
    e
  ) {
    var t = getAppMain().getRootViewController();
    if (
      (t.setGameViewTab(UTGameTabBarController.TabTag.HOME),
      services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.OBJECTIVES_ENABLED
      ))
    ) {
      var i = t.getPresentedViewController().getCurrentViewController();
      if (i) {
        var s = new UTObjectivesHubViewController(),
          n = new UTObjectivesViewModel(services.Objectives);
        if (0 < e.length) {
          var o = parseInt(e[0], 10);
          n.setCurrentCategoryId(o);
        }
        s.initWithViewmodel(n), i.pushViewController(s);
      }
    }
  }),
  utils.JS.inherits(UTSquadActionsView, UTTargetActionView),
  (UTSquadActionsView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squad-actions-view');
      var t = document.createElement('section');
      t.classList.add('formation-carousel'),
        (this.__tapAreaLeft = document.createElement('a')),
        this.__tapAreaLeft.classList.add('alt'),
        this.__tapAreaLeft.classList.add('btn-flat'),
        this.__tapAreaLeft.classList.add('tapLeft'),
        t.appendChild(this.__tapAreaLeft),
        (this.__tapAreaRight = document.createElement('a')),
        this.__tapAreaRight.classList.add('alt'),
        this.__tapAreaRight.classList.add('btn-flat'),
        this.__tapAreaRight.classList.add('tapRight'),
        t.appendChild(this.__tapAreaRight),
        (this._formationCarousel = new TNSContainerView()),
        t.appendChild(this._formationCarousel.getRootElement()),
        (this._formationDropDown = new UTDropDownControl()),
        this._formationDropDown
          .getRootElement()
          .classList.add('isolated-section'),
        t.appendChild(this._formationDropDown.getRootElement()),
        e.appendChild(t);
      var i = document.createElement('section');
      i.classList.add('ut-squad-actions-view--panel'),
        (this._makeActiveBtn = new UTStandardButtonControl()),
        this._makeActiveBtn.getRootElement().classList.add('call-to-action'),
        i.appendChild(this._makeActiveBtn.getRootElement()),
        (this._openBtn = new UTStandardButtonControl()),
        i.appendChild(this._openBtn.getRootElement());
      var s = document.createElement('div');
      s.classList.add('ut-button-group'),
        (this._btnTactics = new UTGroupButtonControl()),
        this._btnTactics.getRootElement().classList.add('more'),
        s.appendChild(this._btnTactics.getRootElement()),
        (this._squadBuilderBtn = new UTGroupButtonControl()),
        this._squadBuilderBtn.getRootElement().classList.add('more'),
        s.appendChild(this._squadBuilderBtn.getRootElement()),
        (this._shareBtn = new UTGroupButtonControl()),
        s.appendChild(this._shareBtn.getRootElement()),
        (this._renameBtn = new UTGroupButtonControl()),
        s.appendChild(this._renameBtn.getRootElement()),
        (this._duplicateBtn = new UTGroupButtonControl()),
        s.appendChild(this._duplicateBtn.getRootElement()),
        (this._clearBtn = new UTGroupButtonControl()),
        s.appendChild(this._clearBtn.getRootElement()),
        (this._deleteBtn = new UTGroupButtonControl()),
        s.appendChild(this._deleteBtn.getRootElement()),
        i.appendChild(s),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadActionsView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__tapAreaLeft = null),
      (this.__tapAreaRight = null),
      this._formationCarousel.destroy(),
      this._formationDropDown.destroy(),
      this._makeActiveBtn.destroy(),
      this._openBtn.destroy(),
      this._btnTactics.destroy(),
      this._squadBuilderBtn.destroy(),
      this._shareBtn.destroy(),
      this._renameBtn.destroy(),
      this._duplicateBtn.destroy(),
      this._clearBtn.destroy(),
      this._deleteBtn.destroy();
  }),
  (UTSquadActionsView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadActionsView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadActionsView.Event = {
    CLEAR_SQUAD: 'UTSquadActionsView.Event.CLEAR_SQUAD',
    DELETE_SQUAD: 'UTSquadActionsView.Event.DELETE_SQUAD',
    DUPLICATE_SQUAD: 'UTSquadActionsView.Event.DUPLICATE_SQUAD',
    FORMATION_CHANGE: 'UTSquadActionsView.Event.FORMATION_CHANGE',
    MAKE_SQUAD_ACTIVE: 'UTSquadActionsView.Event.MAKE_SQUAD_ACTIVE',
    OPEN_SQUAD: 'UTSquadActionsView.Event.OPEN_SQUAD',
    RENAME_SQUAD: 'UTSquadActionsView.Event.RENAME_SQUAD',
    SELECT_SQUAD_BUILDER: 'UTSquadActionsView.Event.SELECT_SQUAD_BUILDER',
    SELECT_TACTICS: 'UTSquadActionsView.Event.SELECT_TACTICS',
    SHARE_SQUAD: 'UTSquadActionsView.Event.SHARE_SQUAD'
  }),
  (UTSquadActionsView.prototype.init = function init() {
    this.superclass(),
      this._makeActiveBtn.init(),
      this._makeActiveBtn.setText(
        services.Localization.localize('infopanel.button.setActive')
      ),
      this._makeActiveBtn.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._openBtn.init(),
      this._openBtn.setText(
        services.Localization.localize('store.mypack.open')
      ),
      this._openBtn.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._btnTactics.init(),
      this._btnTactics.setText(
        services.Localization.localize('infopanel.button.tactics')
      ),
      this._btnTactics.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._squadBuilderBtn.init(),
      this._squadBuilderBtn.setText(
        services.Localization.localize('infopanel.button.squadbuilder')
      ),
      this._squadBuilderBtn.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._shareBtn.init(),
      this._shareBtn.setText(
        services.Localization.localize('dock.button.share')
      ),
      this._shareBtn.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._renameBtn.init(),
      this._renameBtn.setText(
        services.Localization.localize('infopanel.button.rename')
      ),
      this._renameBtn.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._duplicateBtn.init(),
      this._duplicateBtn.setText(
        services.Localization.localize('infopanel.button.copy')
      ),
      this._duplicateBtn.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._deleteBtn.init(),
      this._deleteBtn.setText(
        services.Localization.localize('infopanel.button.delete')
      ),
      this._deleteBtn.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._clearBtn.init(),
      this._clearBtn.setText(
        services.Localization.localize('infopanel.button.clear')
      ),
      this._clearBtn.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._formationDropDown.init(),
      this._formationDropDown.addTarget(
        this,
        this._eFormationChanged,
        enums.Event.CHANGE
      ),
      (this.__tapAreaLeft.style.opacity = 1),
      (this.__tapAreaRight.style.opacity = 1);
  }),
  (UTSquadActionsView.prototype.dealloc = function dealloc() {
    this._clearFormationImages(), this.superclass();
  }),
  (UTSquadActionsView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    this.superclass(e),
      e
        ? (this.__tapAreaLeft.setAttribute('aria-disabled', 'false'),
          this.__tapAreaRight.setAttribute('aria-disabled', 'false'))
        : (this.__tapAreaLeft.setAttribute('aria-disabled', 'true'),
          this.__tapAreaRight.setAttribute('aria-disabled', 'true'));
  }),
  (UTSquadActionsView.prototype.getFormationDropdown = function getFormationDropdown() {
    return this._formationDropDown;
  }),
  (UTSquadActionsView.prototype.displayMakeActiveButton = function displayMakeActiveButton(
    e
  ) {
    DOMKit.toggleDisplayStyle(this._makeActiveBtn.getRootElement(), e);
  }),
  (UTSquadActionsView.prototype.displayOpenButton = function displayOpenButton(
    e
  ) {
    DOMKit.toggleDisplayStyle(this._openBtn.getRootElement(), e);
  }),
  (UTSquadActionsView.prototype.displayTacticsButton = function displayTacticsButton(
    e
  ) {
    this._btnTactics.setDisplay(e);
  }),
  (UTSquadActionsView.prototype.displaySquadBuilderButton = function displaySquadBuilderButton(
    e
  ) {
    DOMKit.toggleDisplayStyle(this._squadBuilderBtn.getRootElement(), e);
  }),
  (UTSquadActionsView.prototype.displayShareButton = function displayShareButton(
    e
  ) {
    DOMKit.toggleDisplayStyle(this._shareBtn.getRootElement(), e);
  }),
  (UTSquadActionsView.prototype.displayRenameButton = function displayRenameButton(
    e
  ) {
    DOMKit.toggleDisplayStyle(this._renameBtn.getRootElement(), e);
  }),
  (UTSquadActionsView.prototype.displayCopyButton = function displayCopyButton(
    e
  ) {
    DOMKit.toggleDisplayStyle(this._duplicateBtn.getRootElement(), e);
  }),
  (UTSquadActionsView.prototype.displayClearButton = function displayClearButton(
    e
  ) {
    DOMKit.toggleDisplayStyle(this._clearBtn.getRootElement(), e);
  }),
  (UTSquadActionsView.prototype.displayDeleteButton = function displayDeleteButton(
    e
  ) {
    DOMKit.toggleDisplayStyle(this._deleteBtn.getRootElement(), e);
  }),
  (UTSquadActionsView.prototype._clearFormationImages = function _clearFormationImages() {
    this._imgLoaders.forEach(function(e) {
      e.dealloc();
    }),
      (this._imgLoaders = []);
  }),
  (UTSquadActionsView.prototype.handleFormationCarousel = function handleFormationCarousel() {
    this._formationCarousel.afterChange(
      function(e) {
        this._formationDropDown.setIndex(e),
          this.setInteractionState(!1),
          setTimeout(
            function() {
              this.setInteractionState(!0);
            }.bind(this),
            750
          );
      }.bind(this)
    );
  }),
  (UTSquadActionsView.prototype.setCurrentFormation = function setCurrentFormation(
    e
  ) {
    this._formationCarousel.getCurrentSlide() !== e &&
      this._formationCarousel.goTo(e),
      DOMKit.toggleDisplayStyle(this.__tapAreaLeft, 0 < e),
      DOMKit.toggleDisplayStyle(
        this.__tapAreaRight,
        e < this._imgLoaders.length - 1
      );
  }),
  (UTSquadActionsView.prototype.setFormations = function setFormations(e) {
    this._formationCarousel.isOn() ||
      this._formationsAdded ||
      (this._clearFormationImages(),
      e.forEach(function _generateFormationImage(e) {
        var t = new UTImageView();
        t.setResource(
          utils.AssetLocator.getImage(
            utils.AssetLocator.IMAGE_TYPE_FORMATION,
            enums.Year.ASSET,
            e.id
          )
        ),
          this._imgLoaders.push(t),
          this._formationCarousel.appendElem(t.getRootElement());
      }, this),
      this._formationDropDown.setOptions(e),
      (this._formationsAdded = !0));
  }),
  (UTSquadActionsView.prototype.setupCarousel = function setupCarousel(e) {
    if (!this._formationCarousel.isOn()) {
      DOMKit.toggleDisplayStyle(this._formationCarousel.getRootElement(), !0);
      var t = new TNSPropertiesDTO();
      (t.prevButton = this.__tapAreaLeft),
        (t.nextButton = this.__tapAreaRight),
        (t.preventActionWhenRunning = e),
        (t.speed = 600),
        (t.container = this._formationCarousel.getRootElement()),
        this._formationCarousel.setup(t);
    }
  }),
  (UTSquadActionsView.prototype.destroyCarousel = function destroyCarousel() {
    if (this._formationCarousel.isOn()) {
      var e = this.getRootElement();
      DOMKit.toggleDisplayStyle(this._formationCarousel.getRootElement(), !1),
        this._formationCarousel.teardown(e),
        (this.__tapAreaLeft = e.getElementsByClassName('tapLeft')[0]),
        (this.__tapAreaRight = e.getElementsByClassName('tapRight')[0]),
        (this._formationsAdded = !1);
    }
  }),
  (UTSquadActionsView.prototype.toggleClearState = function toggleClearState(
    e
  ) {
    this._clearBtn.setInteractionState(e);
  }),
  (UTSquadActionsView.prototype.toggleCopyState = function toggleCopyState(e) {
    this._duplicateBtn.setInteractionState(!e);
  }),
  (UTSquadActionsView.prototype.toggleMakeActiveState = function toggleMakeActiveState(
    e
  ) {
    this._makeActiveBtn.setInteractionState(!e);
  }),
  (UTSquadActionsView.prototype._eFormationChanged = function _eFormationChanged(
    e,
    t
  ) {
    var i = e.getIndex();
    this.setCurrentFormation(i),
      this._triggerActions(UTSquadActionsView.Event.FORMATION_CHANGE, {
        index: i
      });
  }),
  (UTSquadActionsView.prototype._eButtonSelected = function _eButtonSelected(
    e,
    t,
    i
  ) {
    var s;
    this.isInteractionEnabled() &&
      (e === this._btnTactics
        ? (s = UTSquadActionsView.Event.SELECT_TACTICS)
        : e === this._makeActiveBtn
        ? (s = UTSquadActionsView.Event.MAKE_SQUAD_ACTIVE)
        : e === this._openBtn
        ? (s = UTSquadActionsView.Event.OPEN_SQUAD)
        : e === this._squadBuilderBtn
        ? (s = UTSquadActionsView.Event.SELECT_SQUAD_BUILDER)
        : e === this._shareBtn
        ? (s = UTSquadActionsView.Event.SHARE_SQUAD)
        : e === this._renameBtn
        ? (s = UTSquadActionsView.Event.RENAME_SQUAD)
        : e === this._duplicateBtn
        ? (s = UTSquadActionsView.Event.DUPLICATE_SQUAD)
        : e === this._deleteBtn
        ? (s = UTSquadActionsView.Event.DELETE_SQUAD)
        : e === this._clearBtn && (s = UTSquadActionsView.Event.CLEAR_SQUAD),
      s && this._triggerActions(s));
  }),
  NamespaceManager.Register('viewmodels'),
  (viewmodels.Squad = function SquadViewModel(e) {
    (this.squad = e),
      (this._sections = new UTHashTable()),
      (this._iterator = new UTIterator(e.getPlayers().concat(e.getManager()))),
      this._initSections();
  }),
  (viewmodels.Squad.SECTION = {
    PITCH: 0,
    SUBS: 1,
    RESERVES: 2,
    WORKBENCH: 3,
    MANAGER: 4
  }),
  (viewmodels.Squad.prototype._initSections = function _initSections() {
    this.setSection(
      viewmodels.Squad.SECTION.PITCH,
      function(e) {
        return e.getIndex() < entities.Squad.FIELD_PLAYERS;
      },
      0
    ),
      this.setSection(
        viewmodels.Squad.SECTION.SUBS,
        function(e) {
          return (
            e.getIndex() >= entities.Squad.FIELD_PLAYERS &&
            e.getIndex() <
              entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS
          );
        },
        1
      ),
      this.setSection(
        viewmodels.Squad.SECTION.RESERVES,
        function(e) {
          return (
            e.getIndex() >=
              entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS &&
            e.getIndex() < entities.Squad.MANAGER_SLOT_INDEX
          );
        },
        2
      ),
      this.setSection(
        viewmodels.Squad.SECTION.MANAGER,
        function(e) {
          return e.getIndex() === entities.Squad.MANAGER_SLOT_INDEX;
        },
        3
      );
  }),
  (viewmodels.Squad.prototype.setSection = function setSection(e, t, i) {
    this._sections.set(e, {
      filter: t,
      priority: i
    });
  }),
  (viewmodels.Squad.prototype.getItemList = function getItemList() {
    return this._iterator
      .values()
      .slice()
      .sort(function(e, t) {
        return utils.JS.sortCompare(e.getIndex(), t.getIndex());
      })
      .map(function(e) {
        return e.getItem();
      });
  }),
  (viewmodels.Squad.prototype.values = function values() {
    return this._iterator.values();
  }),
  utils.JS.inherits(UTSquadTacticsViewModel, UTViewModel),
  (UTSquadTacticsViewModel.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._squad &&
        (this._squad.onDataUpdated.unobserve(this), (this._squad = null)),
      (this._squadServiceObject = null),
      this.onDataUpdated.clearObservers();
  }),
  (UTSquadTacticsViewModel.prototype.setSquad = function setSquad(e) {
    var t = e instanceof entities.Squad;
    utils.Debug.Assert(t, 'Expected a squad entity.'),
      t &&
        this._squad !== e &&
        (this._squad && this._squad.onDataUpdated.unobserve(this),
        (this._squad = e),
        this._squad.onDataUpdated.observe(this, this._eSquadUpdated),
        this.onDataUpdated.notify({
          squad: this._squad
        }));
  }),
  (UTSquadTacticsViewModel.prototype.setSelectedMentalityById = function setSelectedMentalityById(
    e
  ) {
    this._selectedMentalityId !== e &&
      ((this._selectedMentalityId = e),
      this.onDataUpdated.notify({
        selectedMentality: this.getSelectedMentality()
      }));
  }),
  (UTSquadTacticsViewModel.prototype.setSelectedStyleId = function setSelectedStyleId(
    e
  ) {
    this._selectedStyleId !== e &&
      ((this._selectedStyleId = e),
      this.onDataUpdated.notify({
        selectedStyle: this._selectedStyleId
      }));
  }),
  (UTSquadTacticsViewModel.prototype.setSelectedSlotId = function setSelectedSlotId(
    e
  ) {
    this._selectedSlotId !== e &&
      ((this._selectedSlotId = e),
      this.onDataUpdated.notify({
        selectedSlot: this._selectedSlotId
      }));
  }),
  (UTSquadTacticsViewModel.prototype.setSelectedInstructionGroup = function setSelectedInstructionGroup(
    e
  ) {
    this._selectedInstructionGroup !== e &&
      ((this._selectedInstructionGroup = e),
      this.onDataUpdated.notify({
        selectedInstructionGroup: this._selectedInstructionGroup
      }));
  }),
  (UTSquadTacticsViewModel.prototype.getSquad = function getSquad() {
    return this._squad;
  }),
  (UTSquadTacticsViewModel.prototype.getSelectedMentality = function getSelectedMentality() {
    var e = this._squad.getTacticMentalityById(this._selectedMentalityId);
    return (
      utils.Debug.Assert(
        utils.JS.isValid(e),
        'Squad mentality cannot be found for ID: ' +
          this._selectedMentalityId +
          '. Defaulting to BALANCED.'
      ),
      utils.JS.isValid(e)
        ? e
        : this._squad.getTacticMentalityById(
            UTSquadMentalityEntity.TYPE.BALANCED
          )
    );
  }),
  (UTSquadTacticsViewModel.prototype.getMentalities = function getMentalities() {
    return this._squad.getTacticMentalities();
  }),
  (UTSquadTacticsViewModel.prototype.getSelectedStyleId = function getSelectedStyleId() {
    return this._selectedStyleId;
  }),
  (UTSquadTacticsViewModel.prototype.getSelectedSlotId = function getSelectedSlotId() {
    return this._selectedSlotId;
  }),
  (UTSquadTacticsViewModel.prototype.getSelectedInstructionGroup = function getSelectedInstructionGroup() {
    return this._selectedInstructionGroup;
  }),
  (UTSquadTacticsViewModel.prototype.saveSelectedMentality = function saveSelectedMentality() {
    var e = this.getSelectedMentality().save();
    return this._trackRequest(e, !0), e;
  }),
  (UTSquadTacticsViewModel.prototype.saveModifiedMentalities = function saveModifiedMentalities() {
    var e = this._squad.saveTactics();
    return this._trackRequest(e, !0), e;
  }),
  (UTSquadTacticsViewModel.prototype._eSquadUpdated = function _eSquadUpdated(
    e,
    t
  ) {
    this.onDataUpdated.notify(t);
  }),
  utils.JS.inherits(UTSquadBuilderView, UTView),
  (UTSquadBuilderView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squad-builder-view');
      var t = document.createElement('div');
      t.classList.add('ut-squad-builder-view--filters'),
        (this.__squadBuilderInfo = document.createElement('p')),
        this.__squadBuilderInfo.classList.add('ut-squad-builder-view--info'),
        t.appendChild(this.__squadBuilderInfo),
        (this.__sortContainer = document.createElement('div')),
        this.__sortContainer.classList.add('sort-filter-container'),
        (this.__filterTitle = document.createElement('h4')),
        this.__sortContainer.appendChild(this.__filterTitle),
        (this._sortOptions = new UTToggleControlGroupView()),
        this.__sortContainer.appendChild(this._sortOptions.getRootElement()),
        (this.__sortTitle = document.createElement('h4')),
        this.__sortContainer.appendChild(this.__sortTitle),
        (this._sortDropDown = new UTDropDownControl()),
        this.__sortContainer.appendChild(this._sortDropDown.getRootElement()),
        t.appendChild(this.__sortContainer),
        e.appendChild(t),
        (this._searchFilters = new views.items.ItemSearch()),
        e.appendChild(this._searchFilters.getRootElement());
      var i = document.createElement('div');
      i.classList.add('button-container'),
        (this._btnReset = new UTStandardButtonControl()),
        i.appendChild(this._btnReset.getRootElement()),
        (this._btnBuild = new UTStandardButtonControl()),
        this._btnBuild.getRootElement().classList.add('call-to-action'),
        i.appendChild(this._btnBuild.getRootElement()),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadBuilderView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__squadBuilderInfo = null),
      (this.__sortContainer = null),
      (this.__filterTitle = null),
      this._sortOptions.destroy(),
      (this.__sortTitle = null),
      this._sortDropDown.destroy(),
      this._searchFilters.destroy(),
      this._btnReset.destroy(),
      this._btnBuild.destroy();
  }),
  (UTSquadBuilderView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadBuilderView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadBuilderView.prototype.init = function init() {
    this._btnReset.init(),
      this._btnReset.setText(
        services.Localization.localize('search.pagination.reset')
      ),
      this._btnBuild.init(),
      this._btnBuild.setText(services.Localization.localize('button.build')),
      (this._formationFilter = new UTSearchFilterControl()),
      this._formationFilter.init(),
      this._formationFilter.setOptions(factories.DataProvider.getFormationDP()),
      (this._formationFilter.title = services.Localization.localize(
        'search.pagination.formation'
      )),
      this._setFormationFilterImage(this._formationFilter),
      this._formationFilter.addTarget(
        this,
        this._eFormationFilterChanged,
        enums.Event.CHANGE
      ),
      (this.__squadBuilderInfo.textContent = services.Localization.localize(
        'squadbuilder.infoText'
      )),
      (this.__filterTitle.textContent = services.Localization.localize(
        'search.sort.filterBy'
      )),
      this._searchFilters.init(),
      this._searchFilters.addSubview(this._formationFilter),
      this._searchFilters.layoutSubviews(),
      this._searchFilters.togglePlayerNameRow(!1),
      this._searchFilters.onFilterChange.observe(this, this._eFilterChanged),
      (this.__sortTitle.textContent = services.Localization.localize(
        'search.sort.sortBy'
      ));
  }),
  (UTSquadBuilderView.prototype.dealloc = function dealloc() {
    this._formationFilter.removeTarget(
      this,
      this._eFormationFilterChanged,
      enums.Event.CHANGE
    ),
      this._searchFilters.onFilterChange.unobserve(this),
      this.onFilterChange.dealloc(),
      this.superclass();
  }),
  (UTSquadBuilderView.prototype.setupSortOptions = function setupSortOptions(
    e,
    t,
    i
  ) {
    this._sortOptions.init(),
      this._sortOptions.addSlider(
        enums.UISortOptionType.CONCEPT,
        services.Localization.localize('squadbuilder.toggles.conceptSquad')
      ),
      t &&
        this._sortOptions.addSlider(
          enums.UISortOptionType.REPLACE,
          services.Localization.localize(
            'squadbuilder.toggles.replacePlayersSquad'
          )
        ),
      e &&
        this._sortOptions.addSlider(
          enums.UISortOptionType.UNTRADEABLE,
          services.Localization.localize('search.sort.header')
        ),
      i &&
        this._sortOptions.addSlider(
          enums.UISortOptionType.EXCLUDE_SQUAD,
          services.Localization.localize('search.sort.squadPlayers')
        ),
      this._sortOptions.layoutSubviews(),
      this._sortDropDown.init(),
      this._sortDropDown.setOptions(factories.DataProvider.getSortTypeDP());
  }),
  (UTSquadBuilderView.prototype.setFilters = function setFilters(e, t) {
    this._searchFilters.setFilters(e, t);
  }),
  (UTSquadBuilderView.prototype.setFilterLock = function setFilterValue(e, t) {
    this._searchFilters.setFilterLock(e, t);
  }),
  (UTSquadBuilderView.prototype.toggleExcludeSquadSlider = function toggleExcludeSquadSlider(
    e
  ) {
    this._sortOptions.setSliderInteractionState(
      enums.UISortOptionType.EXCLUDE_SQUAD,
      e
    ),
      e ||
        this._sortOptions.toggleSlider(enums.UISortOptionType.EXCLUDE_SQUAD, e);
  }),
  (UTSquadBuilderView.prototype.getFormationFilter = function getFormationFilter() {
    return this._formationFilter;
  }),
  (UTSquadBuilderView.prototype.getSortOptions = function getSortOptions() {
    return this._sortOptions;
  }),
  (UTSquadBuilderView.prototype.getSortDropDown = function getSortDropDown() {
    return this._sortDropDown;
  }),
  (UTSquadBuilderView.prototype.getResetButton = function getResetButton() {
    return this._btnReset;
  }),
  (UTSquadBuilderView.prototype.getBuildButton = function getBuildButton() {
    return this._btnBuild;
  }),
  (UTSquadBuilderView.prototype._setFormationFilterImage = function _setFormationFilterImage(
    e
  ) {
    e.image = utils.AssetLocator.getFilterImage(
      utils.AssetLocator.FILTER.FORMATION,
      e.getValue()
    );
  }),
  (UTSquadBuilderView.prototype._eFormationFilterChanged = function _eFormationFilterChanged(
    e,
    t
  ) {
    this._setFormationFilterImage(e);
  }),
  (UTSquadBuilderView.prototype._eFilterChanged = function _eFilterChanged(
    e,
    t,
    i,
    s
  ) {
    this.onFilterChange.notify(t, i, s);
  }),
  NamespaceManager.Register('factories'),
  (factories.SquadBuilder = function SquadBuilderFactory() {
    (this._preferredSubPositions = [
      enums.PlayerPositionsAsInts.GK,
      enums.PlayerZonesAsInts.DEFENSE,
      enums.PlayerZonesAsInts.DEFENSE,
      enums.PlayerZonesAsInts.MIDFIELD,
      enums.PlayerZonesAsInts.MIDFIELD,
      enums.PlayerZonesAsInts.ATTACKER,
      enums.PlayerZonesAsInts.ATTACKER
    ]),
      (this._preferredResPositions = [
        enums.PlayerZonesAsInts.DEFENSE,
        enums.PlayerZonesAsInts.DEFENSE,
        enums.PlayerZonesAsInts.MIDFIELD,
        enums.PlayerZonesAsInts.MIDFIELD,
        enums.PlayerZonesAsInts.ATTACKER
      ]);
  }),
  (factories.SquadBuilder.prototype.buildSquad = function buildSquad(e, t, i) {
    var s = repositories.Squad.getFormation(e);
    if (
      (utils.Debug.Assert(s, 'Expected a valid formation.'),
      utils.Debug.Assert(0 < t.length, 'Expected a collection of players.'),
      !s || 0 === t.length)
    )
      return null;
    var n = s.generalPositions.concat(
        this._preferredSubPositions,
        this._preferredResPositions
      ),
      o = this._filterDuplicates(t, i);
    return this._generatePlayerCollection(n, o, i);
  }),
  (factories.SquadBuilder.prototype._getBestPlayerForPos = function _getBestPlayerForPos(
    e,
    t
  ) {
    var i = this._findBestFitByPosition(e, t);
    return (0 <= i && t.splice(i, 1)[0]) || null;
  }),
  (factories.SquadBuilder.prototype._generatePlayerCollection = function _generatePlayerCollection(
    e,
    s,
    n
  ) {
    return e.map(function _mapEntityToObj(e, t) {
      var i = n ? n.getSlot(t) : null;
      return i && (i.isValid() || i.isBrick())
        ? i.getItem()
        : this._getBestPlayerForPos(e, s);
    }, this);
  }),
  (factories.SquadBuilder.prototype._filterDuplicates = function _filterDuplicates(
    e,
    i
  ) {
    return e.reduce(
      function _generateFilteredPlayerCollection(e, t) {
        return (
          this._containsVariationOfCard(t, e) ||
            (i && i.containsVariationOfCard(t)) ||
            e.push(t),
          e
        );
      }.bind(this),
      []
    );
  }),
  (factories.SquadBuilder.prototype._containsVariationOfCard = function _containsVariationOfCard(
    e,
    t
  ) {
    if (utils.JS.isValid(e))
      for (var i = t.length; 0 < i--; ) {
        if (t[i].compareResourceTo(e)) return !0;
      }
    return !1;
  }),
  (factories.SquadBuilder.prototype._findBestFitByPosition = function _findBestFitByPosition(
    e,
    t
  ) {
    var i = 0,
      s = t.length;
    if (0 === s) return -1;
    for (i = 0; i < s; i++) {
      var n = t[i];
      if (
        (e === enums.PlayerZonesAsInts.DEFENSE && n.prefersDefensePosition()) ||
        (e === enums.PlayerZonesAsInts.MIDFIELD &&
          n.prefersMidfieldPosition()) ||
        (e === enums.PlayerZonesAsInts.ATTACKER &&
          n.prefersAttackerPosition()) ||
        e === n.preferredPosition
      )
        return i;
    }
    return e === enums.PlayerPositionsAsInts.RWB
      ? this._findBestFitByPosition(enums.PlayerPositionsAsInts.RB, t)
      : e === enums.PlayerPositionsAsInts.LWB
      ? this._findBestFitByPosition(enums.PlayerPositionsAsInts.LB, t)
      : e === enums.PlayerPositionsAsInts.RF
      ? this._findBestFitByPosition(enums.PlayerPositionsAsInts.RW, t)
      : e === enums.PlayerPositionsAsInts.LF
      ? this._findBestFitByPosition(enums.PlayerPositionsAsInts.LW, t)
      : e === enums.PlayerPositionsAsInts.RW
      ? this._findBestFitByPosition(enums.PlayerPositionsAsInts.RM, t)
      : e === enums.PlayerPositionsAsInts.LW
      ? this._findBestFitByPosition(enums.PlayerPositionsAsInts.LM, t)
      : -1;
  }),
  utils.JS.inherits(UTSquadBuilderViewController, UTViewController),
  (UTSquadBuilderViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        (this._squadBuilder = new factories.SquadBuilder()),
        (this._viewmodel = new viewmodels.ItemSearch());
      var e = this.getView();
      e.getResetButton().addTarget(this, this._eResetSelected, enums.Event.TAP),
        e
          .getBuildButton()
          .addTarget(this, this._eBuildSelected, enums.Event.TAP),
        e
          .getSortOptions()
          .addTarget(this, this._eSortToggled, enums.Event.CHANGE),
        e
          .getSortDropDown()
          .addTarget(this, this._eDropDownChanged, enums.Event.CHANGE),
        e.onFilterChange.observe(this, this._eFilterChanged);
      var t = !(
          this._challenge &&
          !services.Configuration.getFeatureSetting(
            enums.ServerFeature.SBC_ALLOW_UNTRADEABLE
          )
        ),
        i = this._squad && !this._squad.isSquadEmpty(),
        s = !(utils.JS.isValid(this._squad) && this._squad.isActive());
      e.setupSortOptions(t, i, s),
        this._challenge && this._updateCriteriaFromChallenge(this._challenge),
        t ||
          (this._viewmodel.searchCriteria.untradeables =
            enums.SearchUntradeables.EXCLUDE),
        (this._viewmodel.searchCriteria.count = 250);
    }
  }),
  (UTSquadBuilderViewController.prototype.initWithSquad = function initWithSquad(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.Squad,
        'Initialization expected a Squad entity.'
      ),
      (this._squad = e),
      this.init());
  }),
  (UTSquadBuilderViewController.prototype.initWithChallenge = function initWithChallenge(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.SBCChallenge,
        'Initialization expected an SBC Challenge entity.'
      ),
      (this._challenge = e),
      this.initWithSquad(this._challenge.squad));
  }),
  (UTSquadBuilderViewController.prototype.dealloc = function dealloc() {
    if (this.hasLoaded) {
      var e = this.getView();
      e
        .getResetButton()
        .removeTarget(this, this._eResetSelected, enums.Event.TAP),
        e
          .getBuildButton()
          .removeTarget(this, this._eBuildSelected, enums.Event.TAP);
    }
    this.superclass(),
      (this._formation = ''),
      (this._squad = null),
      (this._challenge = null),
      (this._viewmodel = null),
      (this._squadBuilder = null);
  }),
  (UTSquadBuilderViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSquadBuilderView();
  }),
  (UTSquadBuilderViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Squad Builder';
  }),
  (UTSquadBuilderViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.squadbuilder');
  }),
  (UTSquadBuilderViewController.prototype.viewWillAppear = function viewWillAppear() {
    this.superclass(),
      this.getNavigationController().setNavigationVisibility(!0, !0);
  }),
  (UTSquadBuilderViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    e.setFilterLock(enums.UISearchFilters.POSITION, !0),
      e.setFilterLock(enums.UISearchFilters.PLAYSTYLE, !0),
      e.setFilters(this._viewmodel);
    var t = e.getFormationFilter();
    this._challenge && t.setDisplay(!1),
      this._squad &&
        t.setDefaultIndexById(this._squad.getFormation().getId(), !0);
  }),
  (UTSquadBuilderViewController.prototype._updateCriteriaFromChallenge = function _updateCriteriaFromChallenge(
    e
  ) {
    e.eligibilityRequirements.forEach(function(e) {
      var t = e.getFirstKey(),
        i = e.getFirstValue(t);
      switch (t) {
        case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
          (this._viewmodel.defaultSearchCriteria.club = i),
            (this._viewmodel.searchCriteria.club = i);
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
          (this._viewmodel.defaultSearchCriteria.league = i),
            (this._viewmodel.searchCriteria.league = i);
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
          (this._viewmodel.defaultSearchCriteria.nation = i),
            (this._viewmodel.searchCriteria.nation = i);
          break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_QUALITY:
          var s = enums.SearchLevel.ANY;
          i === enums.ItemRatingTier.BRONZE
            ? (s = enums.SearchLevel.BRONZE)
            : i === enums.ItemRatingTier.SILVER
            ? (s = enums.SearchLevel.SILVER)
            : i === enums.ItemRatingTier.GOLD && (s = enums.SearchLevel.GOLD),
            (this._viewmodel.defaultSearchCriteria.level = s),
            (this._viewmodel.searchCriteria.level = s);
      }
    }, this);
  }),
  (UTSquadBuilderViewController.prototype._eResetSelected = function _eResetSelected(
    e
  ) {
    this._viewmodel.resetSearch();
    var t = this.getView();
    if ((t.setFilters(this._viewmodel), !this._squad.isSBC())) {
      var i = t.getFormationFilter();
      i.setIndex(i.getDefaultIndex());
    }
  }),
  (UTSquadBuilderViewController.prototype._eBuildSelected = function _eBuildSelected(
    e
  ) {
    var t = this.getView();
    (this._formation = t.getFormationFilter().value),
      this._useConceptPlayers
        ? services.Item.searchConceptItems(
            this._viewmodel.searchCriteria
          ).observe(this, this._onConceptSearchComplete)
        : services.Item.searchClub(this._viewmodel.searchCriteria).observe(
            this,
            this._onClubSearchComplete
          );
  }),
  (UTSquadBuilderViewController.prototype._eFilterChanged = function _eFilterChanged(
    e,
    t,
    i,
    s
  ) {
    this._viewmodel.updateFromFilterChange(t, i, s),
      this.getView().setFilters(this._viewmodel);
  }),
  (UTSquadBuilderViewController.prototype._eSortToggled = function _eSortToggled(
    e,
    t,
    i
  ) {
    switch (i.id) {
      case enums.UISortOptionType.UNTRADEABLE:
        this._viewmodel.searchCriteria.untradeables = i.checked
          ? enums.SearchUntradeables.ONLY
          : enums.SearchUntradeables.DEFAULT;
        break;
      case enums.UISortOptionType.REPLACE:
        this._replacePlayers = i.checked;
        break;
      case enums.UISortOptionType.CONCEPT:
        (this._useConceptPlayers = i.checked),
          this.getView().toggleExcludeSquadSlider(!i.checked);
        break;
      case enums.UISortOptionType.EXCLUDE_SQUAD:
        i.checked
          ? this._viewmodel
              .requestActiveSquadDefIds()
              .observe(this, function(e, t) {
                e.unobserve(this),
                  (this._viewmodel.searchCriteria.excludeDefIds =
                    t.data.defIds);
              })
          : (this._viewmodel.searchCriteria.excludeDefIds = []);
    }
  }),
  (UTSquadBuilderViewController.prototype._eDropDownChanged = function _eDropDownChanged(
    e,
    t,
    i
  ) {
    switch (e.getId()) {
      case enums.SearchSortType.VALUE_DESC:
      case enums.SearchSortType.VALUE_ASC:
        this._viewmodel.searchCriteria.sort = e.getValue();
        break;
      case enums.SearchSortType.RECENCY_DESC:
        this._viewmodel.searchCriteria.acquiredDate = e.getValue();
        break;
      default:
        utils.Debug.Assert(
          !1,
          'SquadBuilder :: Passed an invalid SearchSort Enums.'
        );
    }
  }),
  (UTSquadBuilderViewController.prototype._onClubSearchComplete = function _onClubSearchComplete(
    e,
    t
  ) {
    e.unobserve(this);
    var i = t.data.items;
    this._squad &&
      this._squad.isSBC() &&
      (i = i.filter(function(e) {
        return !(
          e.isLoaned() ||
          entities.Item.isAlex(e.id) ||
          entities.Item.isJim(e.id) ||
          entities.Item.isDanny(e.id)
        );
      })),
      t.success && 0 !== i.length
        ? this._buildSquad(i)
        : utils.PopupManager.ShowAlert(
            utils.PopupManager.Alerts.SQUAD_BUILDER_NO_RESULTS
          );
  }),
  (UTSquadBuilderViewController.prototype._onConceptSearchComplete = function _onConceptSearchComplete(
    e,
    t
  ) {
    e.unobserve(this);
    var s = t.data.items;
    if (t.success && 0 !== s.length) {
      var i = new transferobjects.SearchCriteria();
      (i.type = enums.SearchType.PLAYER),
        (i.defId = s.map(function(e) {
          return e.id;
        })),
        (i.isExactSearch = !0),
        services.Item.searchClub(i).observe(this, function _replaceConcepts(
          e,
          i
        ) {
          e.unobserve(this),
            i.success
              ? (s = s.map(function(e) {
                  for (var t = i.data.items.length; 0 < t--; )
                    if (
                      e.getMaskedResourceId() ===
                      i.data.items[t].getMaskedResourceId()
                    )
                      return i.data.items[t];
                  return e;
                }))
              : i.data.error && NetworkErrorManager.handle(i.data.error, !1),
            this._buildSquad(s);
        });
    } else
      utils.PopupManager.ShowAlert(
        utils.PopupManager.Alerts.SQUAD_BUILDER_NO_RESULTS
      );
  }),
  (UTSquadBuilderViewController.prototype._buildSquad = function _buildSquad(
    o
  ) {
    var e,
      t = new viewmodels.ItemList([]),
      i = this._viewmodel.searchCriteria.acquiredDate,
      s = i !== enums.SearchSort.NONE;
    (t.sortByRecency = s),
      (t.sort = s ? i : this._viewmodel.sort),
      t.addArray(o),
      (o = t.getItemList()),
      this._squad
        ? ((e = this._replacePlayers
            ? this._squadBuilder.buildSquad(this._formation, o)
            : this._squadBuilder.buildSquad(this._formation, o, this._squad)),
          this._squad.setPlayers(e, this._replacePlayers),
          this._squad.setFormation(
            repositories.Squad.getFormation(this._formation)
          ),
          this._challenge
            ? services.SBC.saveChallenge(this._challenge).observe(
                this,
                this._onSBCSaveComplete
              )
            : this._squad.save().observe(this, this._onSquadSaveComplete))
        : ((e = this._squadBuilder.buildSquad(this._formation, o)),
          services.Squad.requestSquadList().observe(this, function(e, t) {
            e.unobserve(this);
            var i = t.data.squads,
              s = services.Localization.localize('squad.builder.defaultname'),
              n = utils.TextUtils.squadNameExists(s, i)
                ? utils.TextUtils.createSquadName(s, i)
                : s;
            services.Squad.create(n, this._formation, o).observe(
              this,
              this._onSquadCreateComplete
            );
          }));
  }),
  (UTSquadBuilderViewController.prototype._onSquadCreateComplete = function _onSquadCreateComplete(
    e,
    t
  ) {
    if ((e.unobserve(this), t.success))
      services.Notification.queue([
        services.Localization.localize('notification.squad.created'),
        enums.UINotificationType.NEUTRAL
      ]),
        this.getNavigationController().popViewController(!0),
        TelemetryManager.trackEvent(
          TelemetryManager.Sections.SQUADS,
          TelemetryManager.Categories.SQUAD_BUILDING,
          'Squad Builder Create'
        );
    else if (NetworkErrorManager.checkCriticalStatus(t.status))
      NetworkErrorManager.handle(
        NetworkErrorManager.generateDefaultStatusMessage(t.status),
        !1
      );
    else {
      var i;
      switch (t.status) {
        case enums.HTTPStatusCode.NAME_EXISTS:
          i = 'popup.error.duplicateSquadName';
          break;
        case enums.HTTPStatusCode.PERMISSION_DENIED:
          i = 'popup.error.squadsFull';
          break;
        case enums.HTTPStatusCode.PROFANITY:
          i = 'popup.error.profanity';
          break;
        default:
          i = 'popup.body.genericError';
      }
      services.Notification.queue([
        services.Localization.localize(i),
        enums.UINotificationType.NEGATIVE
      ]);
    }
  }),
  (UTSquadBuilderViewController.prototype._onSquadSaveComplete = function _onSquadSaveComplete(
    e,
    t
  ) {
    e.unobserve(this),
      t.success
        ? (services.Notification.queue([
            services.Localization.localize('notification.squad.updated'),
            enums.UINotificationType.NEUTRAL
          ]),
          TelemetryManager.trackEvent(
            TelemetryManager.Sections.SQUADS,
            TelemetryManager.Categories.SQUAD_BUILDING,
            'Squad Builder Update'
          ))
        : services.Notification.queue([
            services.Localization.localize(
              'popup.error.activesquad.SaveFailed'
            ),
            enums.UINotificationType.NEGATIVE
          ]),
      this._dismissSquadBuilder();
  }),
  (UTSquadBuilderViewController.prototype._onSBCSaveComplete = function _onSBCSaveComplete(
    e,
    t
  ) {
    if ((e.unobserve(this), t.success))
      services.Notification.queue([
        services.Localization.localize('notification.squad.updated'),
        enums.UINotificationType.NEUTRAL
      ]),
        TelemetryManager.trackEvent(
          TelemetryManager.Sections.SQUADS,
          TelemetryManager.Categories.SQUAD_BUILDING,
          'SBC Squad Builder Update'
        );
    else {
      var i = 'notification.sbcChallenges.failedToSave';
      this._challenge.hasExpired(!0)
        ? (i = 'notification.sbcChallenges.expired')
        : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
          (i = 'sbc.notification.disabled'),
        services.Notification.queue([
          services.Localization.localize(i),
          enums.UINotificationType.NEGATIVE
        ]);
    }
    this._dismissSquadBuilder();
  }),
  (UTSquadBuilderViewController.prototype._dismissSquadBuilder = function _dismissSquadBuilder() {
    isPhone()
      ? this.getNavigationController().popToViewController(
          this.getNavigationController().getPreviousController(2)
        )
      : this.getNavigationController().popViewController();
  }),
  NamespaceManager.Register('interfaces'),
  (interfaces.TacticsMentalityMenuDelegate = function ITacticsMentalityMenuDelegate() {}),
  (interfaces.TacticsMentalityMenuDelegate.prototype.showStylesMenu = function showStylesMenu() {}),
  (interfaces.TacticsMentalityMenuDelegate.prototype.showInstructionsSelection = function showInstructionsSelection() {}),
  (interfaces.TacticsMentalityMenuDelegate.prototype.showFormationSelection = function showFormationSelection() {}),
  utils.JS.inherits(UTTacticsFormationPopupView, UTTargetActionView),
  (UTTacticsFormationPopupView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tactics-formation-popup-view');
      var t = document.createElement('header');
      (this.__title = document.createElement('h1')),
        t.appendChild(this.__title),
        e.appendChild(t),
        (this.__body = document.createElement('p')),
        this.__body.classList.add('ut-tactics-formation-popup-view--body'),
        e.appendChild(this.__body);
      var i = document.createElement('div');
      i.classList.add('ut-button-group'),
        (this._btnConfirm = new UTGroupButtonControl()),
        i.appendChild(this._btnConfirm.getRootElement()),
        (this._btnConfirmAlways = new UTGroupButtonControl()),
        i.appendChild(this._btnConfirmAlways.getRootElement()),
        (this._btnCancel = new UTGroupButtonControl()),
        i.appendChild(this._btnCancel.getRootElement()),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTacticsFormationPopupView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      (this.__body = null),
      this._btnConfirm.destroy(),
      this._btnConfirmAlways.destroy(),
      this._btnCancel.destroy();
  }),
  (UTTacticsFormationPopupView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTacticsFormationPopupView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTacticsFormationPopupView.Event = {
    CANCEL: 'UTTacticsFormationPopupView.Event.CANCEL',
    CONFIRM: 'UTTacticsFormationPopupView.Event.CONFIRM',
    CONFIRM_ALWAYS: 'UTTacticsFormationPopupView.Event.CONFIRM_ALWAYS'
  }),
  (UTTacticsFormationPopupView.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      this._btnCancel.setInteractionState(!0),
      this._btnConfirm.setInteractionState(!0),
      this._btnConfirmAlways.setInteractionState(!0),
      this._btnCancel.addTarget(
        this,
        this._handleButtonSelect,
        enums.Event.TAP
      ),
      this._btnConfirm.addTarget(
        this,
        this._handleButtonSelect,
        enums.Event.TAP
      ),
      this._btnConfirmAlways.addTarget(
        this,
        this._handleButtonSelect,
        enums.Event.TAP
      ),
      this._btnCancel.setText(services.Localization.localize('popup.no')),
      this._btnConfirm.setText(services.Localization.localize('popup.yes')),
      this._btnConfirmAlways.setText(
        services.Localization.localize('popup.yes.always')
      ),
      (this.__title.textContent = services.Localization.localize(
        'tactics.formation.popup.title'
      )),
      (this.__body.textContent = services.Localization.localize(
        'tactics.formation.popup.body'
      ));
  }),
  (UTTacticsFormationPopupView.prototype._handleButtonSelect = function _handleButtonSelect(
    e,
    t,
    i
  ) {
    e === this._btnCancel
      ? this._triggerActions(UTTacticsFormationPopupView.Event.CANCEL)
      : e === this._btnConfirm
      ? this._triggerActions(UTTacticsFormationPopupView.Event.CONFIRM)
      : e === this._btnConfirmAlways &&
        this._triggerActions(UTTacticsFormationPopupView.Event.CONFIRM_ALWAYS);
  }),
  utils.JS.inherits(
    UTTacticsFormationPopupViewController,
    controllers.views.popups.BasePopup
  ),
  (UTTacticsFormationPopupViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTacticsFormationPopupView();
  }),
  (UTTacticsFormationPopupViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    e.addTarget(
      this,
      this._handleViewEvent,
      UTTacticsFormationPopupView.Event.CANCEL
    ),
      e.addTarget(
        this,
        this._handleViewEvent,
        UTTacticsFormationPopupView.Event.CONFIRM
      ),
      e.addTarget(
        this,
        this._handleViewEvent,
        UTTacticsFormationPopupView.Event.CONFIRM_ALWAYS
      );
  }),
  (UTTacticsFormationPopupViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass();
    var e = this.getView();
    e.removeTarget(
      this,
      this._handleViewEvent,
      UTTacticsFormationPopupView.Event.CANCEL
    ),
      e.removeTarget(
        this,
        this._handleViewEvent,
        UTTacticsFormationPopupView.Event.CONFIRM
      ),
      e.removeTarget(
        this,
        this._handleViewEvent,
        UTTacticsFormationPopupView.Event.CONFIRM_ALWAYS
      );
  }),
  (UTTacticsFormationPopupViewController.prototype.handleKeyUpEvent = function handleKeyUpEvent(
    e
  ) {
    e.key === enums.KeyboardKey.ESCAPE || e.key === enums.KeyboardKey.MS_ESCAPE
      ? this.onExit.notify(enums.UIDialogOptions.CANCEL)
      : e.key === enums.KeyboardKey.ENTER &&
        this.onExit.notify(enums.UIDialogOptions.OK);
  }),
  (UTTacticsFormationPopupViewController.prototype._handleViewEvent = function _handleViewEvent(
    e,
    t,
    i
  ) {
    t === UTTacticsFormationPopupView.Event.CANCEL
      ? this.onExit.notify(enums.UIDialogOptions.CANCEL)
      : t === UTTacticsFormationPopupView.Event.CONFIRM
      ? (gUserSettingsModel.setSessionItem(
          models.UserSettingsModel.TACTICS_FORMATION_MESSAGE_DISPLAYED,
          'true'
        ),
        this.onExit.notify(enums.UIDialogOptions.OK))
      : t === UTTacticsFormationPopupView.Event.CONFIRM_ALWAYS &&
        (gUserSettingsModel.setItem(
          models.UserSettingsModel.TACTICS_FORMATION_MESSAGE_DISPLAYED,
          'true'
        ),
        this.onExit.notify(enums.UIDialogOptions.OK));
  }),
  NamespaceManager.Register('utils'),
  (utils.DragDrop = function DragDropUtility(e) {
    utils.EventDispatcher.call(this),
      (this.classes = {
        droppable: 'isDroppable',
        dragging: 'isDragging',
        dropSlot: 'droppable',
        dragSlot: 'draggable',
        swapAnimate: 'animateReplace'
      }),
      (this.__draggablesContainer = e),
      (this._containerCollisionData = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }),
      Object.defineProperty(this, '_containerCollisionData', {
        writable: !0,
        enumerable: !1
      }),
      (this.dropContainers = {}),
      (this.droppablesContainer = ''),
      (this.__currentItem = null),
      (this.__dropTarget = null),
      (this._droppables = []),
      (this.dropCache = {}),
      (this.collisionData = []),
      (this.moveDistanceThreshold = 5),
      (this.dragging = !1),
      (this.moved = !1),
      (this.validDrop = !1),
      (this.enabled = !1),
      (this.EVENT_NAMESPACE = 'dragdrop'),
      (this.currentTouch = null),
      (this.onTouchStartEventDelegate = this.onTouchStart.bind(this)),
      (this.onTouchEndEventDelegate = this.onTouchEnd.bind(this)),
      (this.onMoveEventDelegate = this.onMove.bind(this));
  }),
  utils.JS.inherits(utils.DragDrop, utils.EventDispatcher),
  (utils.DragDrop.prototype.enable = function enable() {
    this.addAllEventListeners(),
      this.updateInteractiveContainer(),
      this.updateDropSlotCache(),
      (this.enabled = !0);
  }),
  (utils.DragDrop.prototype.disable = function disable() {
    this.removeAllEventListeners(),
      (this._droppables = []),
      (this.dropCache = {}),
      (this.collisionData = []),
      (this.enabled = !1);
  }),
  (utils.DragDrop.prototype.updateInteractiveContainer = function updateInteractiveContainer() {
    var e = this.__draggablesContainer.getBoundingClientRect();
    this._containerCollisionData = {
      top: e.top,
      right: e.right,
      bottom: e.bottom,
      left: e.left
    };
  }),
  (utils.DragDrop.prototype.setDraggable = function setDraggable(e, t) {
    e.toggleClass(this.classes.dragSlot, t);
  }),
  (utils.DragDrop.prototype.setDroppable = function setDroppable(e, t) {
    e.toggleClass(this.classes.dropSlot, t);
  }),
  (utils.DragDrop.prototype.setSwapAnimation = function setSwapAnimation(e, t) {
    e.toggleClass(this.classes.swapAnimate, t);
  }),
  (utils.DragDrop.prototype.addDropContainer = function addDropContainer(
    e,
    t,
    i
  ) {
    (this.dropContainers[e] = t), i && (this.droppablesContainer = e);
  }),
  (utils.DragDrop.prototype.updateDropSlotCache = function updateDropSlotCache() {
    var e,
      t = this.dropContainers;
    for (e in ((this.dropCache = {}), t))
      t.hasOwnProperty(e) &&
        (this.dropCache[e] = DOMKit.findElements(
          t[e].getRootElement(),
          '.droppable'
        ));
    this.refreshDroppables();
  }),
  (utils.DragDrop.prototype.setDroppablesContainer = function setDroppablesContainer(
    e
  ) {
    utils.Debug.Assert(
      this.dropContainers[e],
      'Attempted to set droppables container to a non-existent container.'
    ),
      e &&
        this.dropContainers[e] &&
        ((this.droppablesContainer = e), this.refreshDroppables());
  }),
  (utils.DragDrop.prototype.refreshDroppables = function refreshDroppables() {
    var e = this.droppablesContainer;
    this.dropCache[e]
      ? (this._droppables = this.dropCache[e])
      : (this._droppables = DOMKit.findElements(
          this.dropContainers[e].getRootElement(),
          '.droppable'
        ));
  }),
  (utils.DragDrop.prototype.clearActiveCollisions = function clearActiveCollisions() {
    this.collisionData.forEach(function(e) {
      if (e.hover) {
        e.hover = !1;
        var t = e.droppable.parentElement;
        t && DOMKit.removeClass(t, this.classes.droppable);
      }
    }, this);
  }),
  (utils.DragDrop.prototype.updateCollisionData = function updateCollisionData() {
    this.clearActiveCollisions(),
      (this.collisionData = this._droppables.map(function(e) {
        var t = e.getBoundingClientRect();
        return {
          top: t.top,
          right: t.right,
          bottom: t.bottom,
          left: t.left,
          droppable: e,
          hover: !1
        };
      }, this));
  }),
  (utils.DragDrop.prototype.isDragging = function isDragging() {
    return this.dragging && this.moved;
  }),
  (utils.DragDrop.prototype.updateDroppables = function updateDroppables(t) {
    var i = !1;
    this.collisionData.forEach(function(e) {
      e.droppable !== this.__currentItem &&
        (utils.JS.isValid(t) &&
        t.clientX >= e.left &&
        t.clientX <= e.right &&
        t.clientY >= e.top &&
        t.clientY <= e.bottom
          ? ((i = !0),
            (this.validDrop = !0),
            e.hover ||
              ((e.hover = !0),
              (this.__dropTarget = e.droppable),
              requestAnimationFrame(
                function _addDroppableClass(e) {
                  var t = e.parentElement;
                  t && DOMKit.addClass(t, this.classes.droppable);
                }.bind(this, e.droppable)
              )))
          : e.hover &&
            ((e.hover = !1),
            requestAnimationFrame(
              function _removeDroppableClass(e) {
                var t = e.parentElement;
                t && DOMKit.removeClass(t, this.classes.droppable);
              }.bind(this, e.droppable)
            )));
    }, this),
      i || ((this.validDrop = !1), (this.__dropTarget = null));
  }),
  (utils.DragDrop.prototype.onMove = function onMove(e) {
    if (this.enabled && utils.JS.isValid(this.currentTouch)) {
      var t;
      if (window.TouchEvent && e.originalEvent instanceof TouchEvent)
        for (var i = e.originalEvent.touches.length; 0 < i--; ) {
          if (e.originalEvent.touches[i].identifier === this.currentTouch.id) {
            t = e.originalEvent.touches[i];
            break;
          }
        }
      else t = e.originalEvent;
      if (t) {
        if ((e.preventDefault(), !this.moved)) {
          if (
            ((this.moved =
              Math.abs(t.clientX - this.currentTouch.clientX) >
                this.moveDistanceThreshold ||
              Math.abs(t.clientY - this.currentTouch.clientY) >
                this.moveDistanceThreshold),
            !this.moved)
          )
            return;
          this.dispatch(utils.DragDrop.DRAG.START, $(this.__currentItem));
        }
        var s = this.__dropTarget;
        this.updateDroppables(t);
        var n = this.__currentItem.clientWidth,
          o = this.__currentItem.clientHeight,
          a = t.clientX - n / 2,
          r = t.clientY - o / 2;
        a < this._containerCollisionData.left
          ? (a = this._containerCollisionData.left)
          : a + n >= this._containerCollisionData.right &&
            (a = this._containerCollisionData.right - n),
          r < this._containerCollisionData.top
            ? (r = this._containerCollisionData.top)
            : r + o >= this._containerCollisionData.bottom &&
              (r = this._containerCollisionData.bottom - o),
          requestAnimationFrame(
            function() {
              if (
                ((this.__currentItem.style.left = a + 'px'),
                (this.__currentItem.style.top = r + 'px'),
                this.dispatch(utils.DragDrop.DRAG.MOVE, t),
                this.validDrop && s !== this.__dropTarget)
              ) {
                var e = {
                  dragging: $(this.__currentItem),
                  target: $(this.__dropTarget)
                };
                this.dispatch(utils.DragDrop.DRAG.DROPPABLE, e);
              }
            }.bind(this)
          );
      }
    }
  }),
  (utils.DragDrop.prototype.startDrag = function startDrag(e) {
    if (utils.JS.isValid(e.draggable)) {
      (this.currentTouch = jQuery.extend(!0, {}, e)),
        (this.__currentItem = e.draggable),
        this.updateCollisionData();
      var t = $(this.__draggablesContainer);
      t.on(
        enums.Event.MOUSEUP +
          '.' +
          this.EVENT_NAMESPACE +
          ' ' +
          enums.Event.TOUCHCANCEL +
          '.' +
          this.EVENT_NAMESPACE,
        this.onTouchEndEventDelegate
      ),
        t.on(
          enums.Event.MOUSEMOVE + '.' + this.EVENT_NAMESPACE,
          this.onMoveEventDelegate
        ),
        t.on(
          enums.Event.TOUCHEND +
            '.' +
            this.EVENT_NAMESPACE +
            ' ' +
            enums.Event.TOUCHCANCEL +
            '.' +
            this.EVENT_NAMESPACE,
          this.onTouchEndEventDelegate
        ),
        t.on(
          enums.Event.TOUCHMOVE + '.' + this.EVENT_NAMESPACE,
          this.onMoveEventDelegate
        );
      var i = e.draggable.parentElement.getBoundingClientRect();
      (this.__currentItem.style.left = i.left + 'px'),
        (this.__currentItem.style.top = i.top + 'px'),
        DOMKit.addClass(this.__currentItem, this.classes.dragging),
        (this.dragging = !0);
    }
  }),
  (utils.DragDrop.prototype.cancelDrag = function cancelDrag() {
    this.dragging && this.onTouchEnd();
  }),
  (utils.DragDrop.prototype.onTouchStart = function onTouchStart(e) {
    var t;
    window.TouchEvent && e.originalEvent instanceof TouchEvent
      ? (((t = e.originalEvent.touches[0]).draggable = e.currentTarget),
        (t.id = e.originalEvent.touches[0].identifier))
      : ((t = e.originalEvent).draggable = e.currentTarget),
      this.enabled && !this.dragging && this.startDrag(t);
  }),
  (utils.DragDrop.prototype.resetDrag = function resetDrag() {
    (this.__currentItem.style.left = ''),
      (this.__currentItem.style.top = ''),
      DOMKit.removeClass(this.__currentItem, this.classes.dragging),
      this.dragDropEnd();
  }),
  (utils.DragDrop.prototype.onTouchEnd = function onTouchEnd(e) {
    if (
      utils.JS.isValid(e) &&
      window.TouchEvent &&
      e.originalEvent instanceof TouchEvent
    )
      for (var t = e.originalEvent.touches.length; 0 < t--; )
        if (e.originalEvent.touches[t].identifier === this.currentTouch.id)
          return;
    var i = $(this.__draggablesContainer);
    if (
      (i.off(
        enums.Event.MOUSEUP +
          '.' +
          this.EVENT_NAMESPACE +
          ' ' +
          enums.Event.TOUCHCANCEL +
          '.' +
          this.EVENT_NAMESPACE,
        this.onTouchEndEventDelegate
      ),
      i.off(
        enums.Event.MOUSEMOVE + '.' + this.EVENT_NAMESPACE,
        this.onMoveEventDelegate
      ),
      i.off(
        enums.Event.TOUCHEND +
          '.' +
          this.EVENT_NAMESPACE +
          ' ' +
          enums.Event.TOUCHCANCEL +
          '.' +
          this.EVENT_NAMESPACE,
        this.onTouchEndEventDelegate
      ),
      i.off(
        enums.Event.TOUCHMOVE + '.' + this.EVENT_NAMESPACE,
        this.onMoveEventDelegate
      ),
      this.dragging)
    )
      if (this.validDrop) {
        var s = this.__dropTarget.parentElement;
        s && DOMKit.removeClass(s, this.classes.droppable);
        var n = {
          dragging: $(this.__currentItem),
          target: $(this.__dropTarget)
        };
        this.dispatch(utils.DragDrop.DRAG.DROP, n);
      } else this.dispatch(utils.DragDrop.DRAG.END, $(this.__currentItem));
  }),
  (utils.DragDrop.prototype.dragDropEnd = function dragDropEnd() {
    this.validDrop && this.updateDropSlotCache(),
      this.updateDroppables(),
      (this.__dropTarget = null),
      (this.__currentItem = null),
      (this.dragging = !1),
      (this.moved = !1);
  }),
  (utils.DragDrop.prototype.removeAllEventListeners = function removeAllEventListeners() {
    var e = $(this.__draggablesContainer);
    e.off(
      enums.Event.MOUSEDOWN + '.' + this.EVENT_NAMESPACE,
      this.onTouchStartEventDelegate
    ),
      e.off(
        enums.Event.TOUCHSTART + '.' + this.EVENT_NAMESPACE,
        this.onTouchStartEventDelegate
      );
  }),
  (utils.DragDrop.prototype.addAllEventListeners = function addAllEventListeners() {
    var e = $(this.__draggablesContainer);
    e.on(
      enums.Event.MOUSEDOWN + '.' + this.EVENT_NAMESPACE,
      '.draggable',
      this.onTouchStartEventDelegate
    ),
      e.on(
        enums.Event.TOUCHSTART + '.' + this.EVENT_NAMESPACE,
        '.draggable',
        this.onTouchStartEventDelegate
      );
  }),
  (utils.DragDrop.DRAG = {
    START: 'utils.DragDrop.DRAG.START',
    MOVE: 'utils.DragDrop.DRAG.MOVE',
    DROPPABLE: 'utils.DragDrop.DRAG.DROPPABLE',
    END: 'utils.DragDrop.DRAG.END',
    DROP: 'utils.DragDrop.DRAG.DROP'
  }),
  utils.JS.inherits(UTSquadSlotPedestalView, UTView),
  (UTSquadSlotPedestalView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('state-none'),
        e.classList.add('ut-squad-slot-pedestal-view'),
        (this.__label = document.createElement('span')),
        this.__label.classList.add('label'),
        e.appendChild(this.__label),
        (this.__value = document.createElement('span')),
        this.__value.classList.add('value'),
        e.appendChild(this.__value),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadSlotPedestalView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__label = null),
      (this.__value = null);
  }),
  (UTSquadSlotPedestalView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadSlotPedestalView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadSlotPedestalView.prototype.render = function render(e, t) {
    var i = t ? e.getPositionBonus() : 0,
      s = 0 < i ? e.getChemistry().toString() : '',
      n = e.getItem().isManager()
        ? services.Localization.localize('extendedPlayerInfo.positions.manager')
        : utils.FUTLocalization.getLocalizedPositionStringById(
            e.getGeneralPosition()
          ),
      o = this._states.NONE;
    3 <= i
      ? (o = this._states.GREEN)
      : 1 <= i
      ? (o = this._states.ORANGE)
      : 0 < i && (o = this._states.RED),
      this.removeClass(this._currentState),
      this.addClass(o),
      (this.__label.textContent = n),
      (this.__value.textContent = s),
      (this._currentState = o);
  }),
  utils.JS.inherits(UTSquadSlotView, UTTargetActionView),
  (UTSquadSlotView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squad-slot-view'),
        (this._pedestal = new UTSquadSlotPedestalView()),
        e.appendChild(this._pedestal.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadSlotView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._pedestal.destroy();
  }),
  (UTSquadSlotView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadSlotView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadSlotView.prototype.init = function init() {
    this.superclass(),
      this.getRoot().data('view', this),
      this.setInteractionState(!0),
      (this.allowLegacyPropagation = !0);
  }),
  (UTSquadSlotView.prototype.dealloc = function dealloc() {
    this._itemView && (this._itemView.destroy(), (this._itemView = null)),
      this.superclass();
  }),
  (UTSquadSlotView.prototype.render = function render(e, t, i) {
    (t = !utils.JS.isBoolean(t) || t),
      (i = !utils.JS.isBoolean(i) || i),
      this.getRootElement().setAttribute('index', e.getIndex()),
      (this._isManager = e.getItem().isManager()),
      (this._slotIndex = e.getIndex()),
      (this._uniquePosition = e.getUniquePosition());
    var s = this._renderItem(e, t);
    this.renderPedestal(e, i),
      s && this.getRootElement().appendChild(this._itemView.getRootElement());
  }),
  (UTSquadSlotView.prototype._renderItem = function _renderItem(e, t) {
    var i = e.getItem(),
      s = !1;
    return (
      this._itemView &&
        !this._itemView.canRender(i) &&
        (this._itemView.dealloc(), (this._itemView = null)),
      this._itemView ||
        ((this._itemView = factories.ItemView.createSmallItem(i)),
        this._itemView.init(),
        (s = !0)),
      this._itemView.renderConcept(t),
      this._itemView.render(i),
      this._itemView.renderChemistry(i, e.getChemistry(), e.getManagerBonus()),
      s
    );
  }),
  (UTSquadSlotView.prototype.renderPedestal = function renderPedestal(e, t) {
    this._pedestal.render(e, t);
  }),
  (UTSquadSlotView.prototype.setLockedState = function setLockedState(e) {
    this.toggleClass('locked', e);
  }),
  (UTSquadSlotView.prototype.getIndex = function getIndex() {
    return this._slotIndex;
  }),
  (UTSquadSlotView.prototype.getUniquePosition = function getUniquePosition() {
    return this._uniquePosition;
  }),
  (UTSquadSlotView.prototype.getChemLineCoordinate = function getChemLineCoordinate() {
    var e = this.getRoot(),
      t = e.position();
    return {
      x: t.left,
      y: t.top + e.height() / 2 - 5
    };
  }),
  (UTSquadSlotView.prototype.getItemView = function getItemView() {
    return this._itemView;
  }),
  (UTSquadSlotView.prototype.setItemView = function setItemView(e) {
    this._itemView = e;
  }),
  (UTSquadSlotView.prototype._tapDetected = function _tapDetected(e) {
    this._triggerActions(enums.Event.TAP);
  }),
  (UTSquadSlotView.prototype._mouseLeave = function _mouseLeave(e) {
    this._triggerActions(enums.Event.MOUSELEAVE);
  }),
  (UTSquadSlotView.prototype._mouseEnter = function _mouseEnter(e) {
    this._triggerActions(enums.Event.MOUSEENTER);
  }),
  utils.JS.inherits(UTSquadPitchView, UTTargetActionView),
  (UTSquadPitchView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squad-pitch-view'),
        (this.__squadCanvas = document.createElement('canvas')),
        this.__squadCanvas.setAttribute('width', '400'),
        this.__squadCanvas.setAttribute('height', '300'),
        this.__squadCanvas.classList.add('ut-squad-pitch-view--canvas'),
        e.appendChild(this.__squadCanvas),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadPitchView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__squadCanvas = null);
  }),
  (UTSquadPitchView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadPitchView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadPitchView.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      (this.allowLegacyPropagation = !0),
      window.addEventListener(
        enums.Event.RESIZE,
        this._windowResizeCallback,
        !1
      );
  }),
  (UTSquadPitchView.prototype.dealloc = function dealloc() {
    this._clearSlotViews(),
      (this._cachedLinks = []),
      clearTimeout(this._delayedDrawTimeout),
      clearTimeout(this._animationTimeout),
      window.removeEventListener(
        enums.Event.RESIZE,
        this._windowResizeCallback,
        !1
      ),
      this.superclass();
  }),
  (UTSquadPitchView.prototype.setTheme = function setTheme(e) {
    this.removeClass(this._currentTheme),
      this.addClass(e),
      (this._currentTheme = e);
  }),
  (UTSquadPitchView.prototype.setType = function setType(e) {
    this.removeClass(this._currentType),
      this.addClass(e),
      (this._currentType = e);
  }),
  (UTSquadPitchView.prototype.setMode = function setMode(e) {
    this.removeClass(this._currentMode),
      this.addClass(e),
      (this._currentMode = e);
  }),
  (UTSquadPitchView.prototype.setFormation = function setFormation(e, t, i) {
    (this._cachedLinks = t),
      this._clearChemistryLines(),
      this._updateCanvasSize(),
      this._currentFormation !== e
        ? ((this._isAnimating = !0),
          '' !== this._currentFormation &&
            this.removeClass(this._currentFormation),
          (this._animationTimeout = setTimeout(
            function _eFormationChangeAnimComplete() {
              clearTimeout(this._animationTimeout),
                (this._isAnimating = !1),
                this.renderChemistry &&
                  this._currentFormation === e &&
                  this._renderChemistryLines(t),
                utils.JS.isFunction(i) && i();
            }.bind(this),
            this._animationDuration
          )),
          this.addClass(e),
          (this._currentFormation = e))
        : this._isAnimating ||
          (this.renderChemistry && this._renderChemistryLines(t),
          utils.JS.isFunction(i) && i());
  }),
  (UTSquadPitchView.prototype._clearSlotViews = function _clearSlotViews() {
    this._slots.forEach(function(e) {
      e.dealloc();
    }),
      (this._slots = []);
  }),
  (UTSquadPitchView.prototype.getSlotViews = function getSlotViews() {
    return this._slots;
  }),
  (UTSquadPitchView.prototype.setSlots = function setSlots(e, i, s) {
    this._clearSlotViews(),
      e.forEach(function(e) {
        if (!(e.getIndex() < 0)) {
          var t = new UTSquadSlotView();
          t.init(),
            t.render(e, i, s),
            t.addTarget(this, this._eSlotTapped, enums.Event.TAP),
            this.addSubview(t),
            this._slots.push(t);
        }
      }, this),
      this.layoutSubviews();
  }),
  (UTSquadPitchView.prototype.updateSlot = function updateSlot(t, e, i) {
    var s = utils.JS.find(this._slots, function(e) {
      return e.getIndex() === t.getIndex();
    });
    s && s.render(t, e, i);
  }),
  (UTSquadPitchView.prototype.setLockedSlots = function setLockedSlots(t) {
    this._slots.forEach(function(e) {
      e.setLockedState(0 <= t.indexOf(e.getIndex()));
    });
  }),
  (UTSquadPitchView.prototype.updateChemistry = function updateChemistry(i, e) {
    this._slots.forEach(function _updateSlotChemistry(t) {
      var e = utils.JS.find(i, function(e) {
        return e.getIndex() === t.getIndex();
      });
      e &&
        (t.renderPedestal(e, !0),
        t
          .getItemView()
          .renderChemistry(e.getItem(), e.getChemistry(), e.getManagerBonus()));
    }, this),
      this._clearChemistryLines(),
      this._updateCanvasSize(),
      this.renderChemistry && this._renderChemistryLines(e);
  }),
  (UTSquadPitchView.prototype._updateCanvasSize = function _updateCanvasSize() {
    var e = this.getRootElement();
    this.__squadCanvas.setAttribute('width', e.clientWidth),
      this.__squadCanvas.setAttribute('height', e.clientHeight);
  }),
  (UTSquadPitchView.prototype._clearChemistryLines = function _clearChemistryLines() {
    var e = this.__squadCanvas.width;
    (this.__squadCanvas.width = e),
      this.__squadCanvas
        .getContext('2d')
        .clearRect(0, 0, this.__squadCanvas.width, this.__squadCanvas.height);
  }),
  (UTSquadPitchView.prototype._getSlotViewByUniquePosition = function _getSlotViewByUniquePosition(
    t
  ) {
    return utils.JS.find(this._slots, function(e) {
      return e.getUniquePosition() === t;
    });
  }),
  (UTSquadPitchView.prototype._renderChemistryLines = function _renderChemistryLines(
    e
  ) {
    e.forEach(function(e) {
      var t = this._getSlotViewByUniquePosition(e.getPositionA()),
        i = this._getSlotViewByUniquePosition(e.getPositionB());
      utils.Debug.Assert(
        utils.JS.isValid(t),
        'Slot with unique position ' + e.getPositionA() + ' not found.'
      ),
        utils.Debug.Assert(
          utils.JS.isValid(i),
          'Slot with unique position ' + e.getPositionB() + ' not found.'
        ),
        t &&
          i &&
          this._drawLine(
            t.getChemLineCoordinate(),
            i.getChemLineCoordinate(),
            e.getChemistry()
          );
    }, this);
  }),
  (UTSquadPitchView.prototype._drawLine = function _drawLine(e, t, i) {
    var s = this.__squadCanvas.getContext('2d'),
      n = '#a31a19';
    5 <= i ? (n = '#a5f35c') : 1 <= i && (n = '#cf8600'),
      (s.lineWidth = 3),
      (s.strokeStyle = n),
      (s.lineCap = 'round'),
      (s.shadowOffsetY = 1.5),
      (s.shadowColor = 'rgba(0, 0, 0, 0.5)'),
      (s.shadowBlur = 1.5),
      s.beginPath(),
      s.moveTo(e.x, e.y),
      s.lineTo(t.x, t.y),
      s.stroke();
  }),
  (UTSquadPitchView.prototype._redrawCanvas = function _redrawCanvas() {
    this._isAnimating ||
      (this._clearChemistryLines(),
      this._updateCanvasSize(),
      this._renderChemistryLines(this._cachedLinks));
  }),
  (UTSquadPitchView.prototype._eSlotTapped = function _eSlotTapped(e, t, i) {
    this.isInteractionEnabled() &&
      this._triggerActions(enums.UISquadPitchEvent.SLOT_SELECT, {
        slot: e,
        slotIndex: e.getIndex()
      });
  }),
  (UTSquadPitchView.prototype._eWindowResize = function _eWindowResize(e) {
    this.renderChemistry &&
      (this._redrawCanvas(),
      clearTimeout(this._delayedDrawTimeout),
      (this._delayedDrawTimeout = setTimeout(
        function() {
          this._redrawCanvas();
        }.bind(this),
        200
      )));
  }),
  (UTSquadPitchView.prototype._tapDetected = function _tapDetected(e) {
    this.isInteractionEnabled() &&
      e.target === this.__squadCanvas &&
      this._triggerActions(enums.Event.TAP);
  }),
  utils.JS.inherits(UTTacticsPositionAdjustmentView, UTTargetActionView),
  (UTTacticsPositionAdjustmentView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tactics-position-adjustment-view'),
        (this._pitch = new UTSquadPitchView()),
        e.appendChild(this._pitch.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTacticsPositionAdjustmentView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._pitch.destroy();
  }),
  (UTTacticsPositionAdjustmentView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTacticsPositionAdjustmentView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTacticsPositionAdjustmentView.prototype.init = function init() {
    this.superclass(),
      this._pitch.init(),
      this._pitch.setType(enums.SquadPitchTypes.REGULAR),
      (this._pitch.renderChemistry = !1),
      this.setInteractionState(!0),
      (this.allowLegacyPropagation = !0),
      window.addEventListener(
        enums.Event.RESIZE,
        this._windowResizeCallback,
        !1
      );
  }),
  (UTTacticsPositionAdjustmentView.prototype.dealloc = function dealloc() {
    window.removeEventListener(
      enums.Event.RESIZE,
      this._windowResizeCallback,
      !1
    ),
      this._utilDragDrop &&
        (this._utilDragDrop.clearListenersByScope(this),
        (this._utilDragDrop = null)),
      this.superclass();
  }),
  (UTTacticsPositionAdjustmentView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    this.superclass(e), this._pitch.setInteractionState(e);
  }),
  (UTTacticsPositionAdjustmentView.prototype.setFormation = function setFormation(
    e,
    t
  ) {
    var i = this.isInteractionEnabled();
    this.setInteractionState(!1),
      requestAnimationFrame(
        function() {
          this._pitch.setFormation(
            e.getName(),
            t,
            function() {
              this.setInteractionState(i);
            }.bind(this)
          );
        }.bind(this)
      );
  }),
  (UTTacticsPositionAdjustmentView.prototype.setSlots = function setSlots(e) {
    this._pitch.setSlots(e, !0, !1);
  }),
  (UTTacticsPositionAdjustmentView.prototype.initDragDrop = function initDragDrop(
    n,
    o
  ) {
    this._utilDragDrop ||
      (this._utilDragDrop = new utils.DragDrop(this.getRootElement())),
      this._utilDragDrop.addDropContainer('pitch', this._pitch, !0),
      this._pitch.getSlotViews().forEach(function(e) {
        var t = e.getItemView(),
          i = e.getIndex(),
          s = 0 <= n.indexOf(i);
        this._utilDragDrop.setDraggable(t, s),
          this._utilDragDrop.setDroppable(t, 0 <= o.indexOf(i)),
          this._utilDragDrop.setSwapAnimation(t, s);
      }, this),
      this._utilDragDrop.enabled
        ? this._utilDragDrop.updateDropSlotCache()
        : (this._utilDragDrop.enable(),
          this._utilDragDrop.clearListenersByScope(this),
          this._utilDragDrop.addListener(
            utils.DragDrop.DRAG.START,
            this,
            this._onDragStart
          ),
          this._utilDragDrop.addListener(
            utils.DragDrop.DRAG.END,
            this,
            this._onDragEnd
          ),
          this._utilDragDrop.addListener(
            utils.DragDrop.DRAG.DROP,
            this,
            this._onDragDrop
          ));
  }),
  (UTTacticsPositionAdjustmentView.prototype._onDragStart = function _onDragStart(
    e,
    t
  ) {
    this._triggerActions(enums.UISquadPitchEvent.DRAG_START, {
      item: t.data('info')
    }),
      t
        .parent()
        .data('view')
        .addClass('empty');
  }),
  (UTTacticsPositionAdjustmentView.prototype._onDragEnd = function _onDragEnd(
    e,
    t
  ) {
    var i = t.parent(),
      s = t.data('info');
    e.moved
      ? (this.setInteractionState(!1),
        utils.JS.isValid(s) &&
          this._triggerActions(enums.UISquadPitchEvent.DRAG_END, {
            item: s
          }),
        t.stop().animate(
          {
            top: i.offset().top,
            left: i.offset().left
          },
          {
            duration: this._animationDuration,
            queue: !1,
            complete: function() {
              this._onDragReset(t);
            }.bind(this)
          }
        ))
      : this._onDragReset(t);
  }),
  (UTTacticsPositionAdjustmentView.prototype._onDragDrop = function _onDragDrop(
    e,
    t
  ) {
    this.setInteractionState(!1),
      this._swapElements(t.dragging, t.target),
      this._utilDragDrop.updateDropSlotCache();
  }),
  (UTTacticsPositionAdjustmentView.prototype._onDragReset = function _onDragReset(
    e
  ) {
    e.parent().removeClass('empty'),
      this._utilDragDrop.resetDrag(),
      this.setInteractionState(!0);
  }),
  (UTTacticsPositionAdjustmentView.prototype._swapElements = function _swapElements(
    e,
    t
  ) {
    var i = e.parent().data('view'),
      s = t.parent().data('view'),
      n = i.getRootElement(),
      o = s.getRootElement(),
      a = n.getBoundingClientRect(),
      r = o.getBoundingClientRect(),
      l = t.data('info'),
      c = t.get(0);
    if (utils.JS.isValid(l)) {
      l.isValid() &&
        (DOMKit.addClass(c, 'dropTarget'),
        (c.style.top = r.top + 'px'),
        (c.style.left = r.left + 'px')),
        s.addClass('empty'),
        n.appendChild(c),
        o.appendChild(e.get(0)),
        e.stop().animate(
          {
            top: r.top,
            left: r.left
          },
          {
            duration: this._animationDuration,
            queue: !1,
            complete: function() {
              this._onDragReset(e);
            }.bind(this)
          }
        ),
        l.isValid()
          ? (i.addClass('noBackground'),
            t.stop().animate(
              {
                top: a.top,
                left: a.left
              },
              {
                duration: this._animationDuration,
                queue: !1,
                complete: function() {
                  DOMKit.removeClass(c, 'dropTarget'),
                    c.style.removeProperty('left'),
                    c.style.removeProperty('top'),
                    i.removeClass('empty noBackground');
                }
              }
            ))
          : i.removeClass('empty');
      var u = i.getItemView();
      i.setItemView(s.getItemView()),
        s.setItemView(u),
        this._triggerActions(enums.UISquadPitchEvent.ITEM_SWAP, {
          swapFrom: i.getIndex(),
          swapTo: s.getIndex()
        });
    } else utils.Debug.Assert(!1, 'Variable targetData undefined.');
  }),
  (UTTacticsPositionAdjustmentView.prototype._eWindowResize = function _eWindowResize(
    e
  ) {
    this._utilDragDrop.updateInteractiveContainer();
  }),
  utils.JS.inherits(
    UTTacticsPositionAdjustmentViewController,
    UTViewController
  ),
  (UTTacticsPositionAdjustmentViewController.prototype.initWithTacticsViewModel = function initWithTacticsViewModel(
    e
  ) {
    if (!this.initialized) {
      var t = e instanceof UTSquadTacticsViewModel;
      utils.Debug.Assert(
        t,
        'View controller initialization expected a tactics view model.'
      ),
        t && (this._tacticsViewModel = e),
        this.init();
    }
  }),
  (UTTacticsPositionAdjustmentViewController.prototype.dealloc = function dealloc() {
    (this._tacticsViewModel = null), this.superclass();
  }),
  (UTTacticsPositionAdjustmentViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTacticsPositionAdjustmentView();
  }),
  (UTTacticsPositionAdjustmentViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('tactics.label.positioning');
  }),
  (UTTacticsPositionAdjustmentViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    if (this._tacticsViewModel) {
      var t = this._tacticsViewModel.getSquad(),
        i = this._tacticsViewModel.getSelectedMentality(),
        s = t.getTacticSlotsByMentalityId(i.getId()),
        n = s.reduce(function(e, t) {
          var i = t.getIndex();
          return 0 < i && e.push(i), e;
        }, []);
      e.setSlots(s),
        e.setFormation(i.getFormation(), t.getChemistryLinks()),
        e.initDragDrop(n, n);
    }
    e.addTarget(this, this._eItemSwap, enums.UISquadPitchEvent.ITEM_SWAP);
  }),
  (UTTacticsPositionAdjustmentViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      this.getView().removeTarget(
        this,
        this._eItemSwap,
        enums.UISquadPitchEvent.ITEM_SWAP
      );
  }),
  (UTTacticsPositionAdjustmentViewController.prototype._eItemSwap = function _eItemSwap(
    e,
    t,
    i
  ) {
    this._tacticsViewModel &&
      utils.JS.isNumber(i.swapFrom) &&
      utils.JS.isNumber(i.swapTo) &&
      this._tacticsViewModel
        .getSelectedMentality()
        .swapPositionsByIndex(i.swapFrom, i.swapTo);
  }),
  utils.JS.inherits(UTTacticsFormationSelectView, UTTargetActionView),
  (UTTacticsFormationSelectView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tactics-formation-select-view'),
        (this.__header = document.createElement('header')),
        this.__header.classList.add('ut-tactics-formation-select-view--header'),
        (this.__title = document.createElement('h1')),
        this.__title.classList.add('ut-tactics-formation-select-view--title'),
        this.__header.appendChild(this.__title),
        (this._btnSave = new UTStandardButtonControl()),
        this._btnSave.getRootElement().classList.add('mini'),
        this._btnSave.getRootElement().classList.add('call-to-action'),
        this.__header.appendChild(this._btnSave.getRootElement()),
        e.appendChild(this.__header),
        (this.__adjustmentArea = document.createElement('div')),
        this.__adjustmentArea.classList.add(
          'ut-tactics-formation-select-view--formation-container'
        ),
        (this._imgFormation = new UTImageView()),
        this.__adjustmentArea.appendChild(this._imgFormation.getRootElement()),
        e.appendChild(this.__adjustmentArea);
      var t = document.createElement('div');
      t.classList.add('ut-button-group'),
        (this._btnEditPositions = new UTGroupButtonControl()),
        this._btnEditPositions.getRootElement().classList.add('more'),
        t.appendChild(this._btnEditPositions.getRootElement()),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTacticsFormationSelectView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__header = null),
      (this.__title = null),
      this._btnSave.destroy(),
      (this.__adjustmentArea = null),
      this._imgFormation.destroy(),
      this._btnEditPositions.destroy();
  }),
  (UTTacticsFormationSelectView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTacticsFormationSelectView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTacticsFormationSelectView.Event = {
    FORMATION_CHANGE: 'UTTacticsFormationSelectView.Event.FORMATION_CHANGE',
    SAVE_MENTALITY: 'UTTacticsFormationSelectView.Event.SAVE_MENTALITY',
    SELECT_POSITIONING: 'UTTacticsFormationSelectView.Event.SELECT_POSITIONING'
  }),
  (UTTacticsFormationSelectView.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      (this.__title.textContent = services.Localization.localize(
        'tactics.label.formation'
      )),
      this._btnSave.init(),
      this._btnSave.setText(
        services.Localization.localize('tactics.label.save')
      ),
      isPhone()
        ? this._btnSave.addTarget(this, this._eButtonSelected, enums.Event.TAP)
        : DOMKit.toggleDisplayStyle(this.__header, !1),
      this._btnEditPositions.init(),
      this._btnEditPositions.setText(
        services.Localization.localize('tactics.label.positioning')
      ),
      this._btnEditPositions.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      );
  }),
  (UTTacticsFormationSelectView.prototype.dealloc = function dealloc() {
    this._formationDropDown &&
      (this._formationDropDown.dealloc(), (this._formationDropDown = null)),
      this.superclass();
  }),
  (UTTacticsFormationSelectView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    this.superclass(e),
      this._formationDropDown && this._formationDropDown.setInteractionState(e);
  }),
  (UTTacticsFormationSelectView.prototype.setCurrentFormation = function setCurrentFormation(
    e
  ) {
    utils.Debug.Assert(
      utils.JS.isValid(this._formationDropDown),
      'Expected formation drop down to be instantiated before assigning value.'
    ),
      this._formationDropDown && this._formationDropDown.setIndexById(e);
  }),
  (UTTacticsFormationSelectView.prototype.setFormationImage = function setFormationImage(
    e
  ) {
    this._imgFormation.setResource(
      utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_FORMATION,
        enums.Year.ASSET,
        e
      )
    );
  }),
  (UTTacticsFormationSelectView.prototype.setFormationOptions = function setFormationOptions(
    e
  ) {
    this._formationDropDown ||
      ((this._formationDropDown = new UTDropDownControl()),
      this._formationDropDown.init(),
      this._formationDropDown.addTarget(
        this,
        this._eDropDownControlChange,
        enums.Event.CHANGE
      ),
      this.addSubview(this._formationDropDown, this.__adjustmentArea),
      this.layoutSubviews()),
      this._formationDropDown.setOptions(e);
  }),
  (UTTacticsFormationSelectView.prototype.setSaveButtonInteractionState = function setSaveButtonInteractionState(
    e
  ) {
    this._btnSave.setInteractionState(e);
  }),
  (UTTacticsFormationSelectView.prototype._eDropDownControlChange = function _eDropDownControlChange(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      (this.setFormationImage(i.id),
      this._triggerActions(
        UTTacticsFormationSelectView.Event.FORMATION_CHANGE,
        {
          id: i.id,
          value: i.value
        }
      ));
  }),
  (UTTacticsFormationSelectView.prototype._eButtonSelected = function _eButtonSelected(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      (e === this._btnSave
        ? this._triggerActions(
            UTTacticsFormationSelectView.Event.SAVE_MENTALITY
          )
        : e === this._btnEditPositions &&
          this._triggerActions(
            UTTacticsFormationSelectView.Event.SELECT_POSITIONING
          ));
  }),
  utils.JS.inherits(UTTacticsFormationSelectViewController, UTViewController),
  (UTTacticsFormationSelectViewController.prototype.initWithTacticsViewModel = function initWithTacticsViewModel(
    e
  ) {
    if (!this.initialized) {
      var t = e instanceof UTSquadTacticsViewModel;
      utils.Debug.Assert(
        t,
        'View controller initialization expected a tactics view model.'
      ),
        t && (this._tacticsViewModel = e),
        this.init();
    }
  }),
  (UTTacticsFormationSelectViewController.prototype.dealloc = function dealloc() {
    (this._tacticsViewModel = null), this.superclass();
  }),
  (UTTacticsFormationSelectViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTacticsFormationSelectView();
  }),
  (UTTacticsFormationSelectViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('tactics.label.formation');
  }),
  (UTTacticsFormationSelectViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView(),
      t = this.getNavigationController();
    if (
      (t &&
        (t.setNavigationVisibility(!0, !1),
        isPhone() ||
          t.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY)),
      this._tacticsViewModel)
    ) {
      var i = this._tacticsViewModel.getSquad(),
        s = this._tacticsViewModel
          .getSelectedMentality()
          .getFormation()
          .getId();
      e.setSaveButtonInteractionState(i.hasModifiedTactics()),
        e.setFormationOptions(factories.DataProvider.getFormationDP()),
        e.setCurrentFormation(s),
        e.setFormationImage(s),
        this._tacticsViewModel.onDataUpdated.observe(
          this,
          this._eTacticsViewModelUpdated
        );
    }
    e.addTarget(
      this,
      this._eSaveMentality,
      UTTacticsFormationSelectView.Event.SAVE_MENTALITY
    ),
      e.addTarget(
        this,
        this._eChangeFormation,
        UTTacticsFormationSelectView.Event.FORMATION_CHANGE
      ),
      e.addTarget(
        this,
        this._eSelectPositioning,
        UTTacticsFormationSelectView.Event.SELECT_POSITIONING
      );
  }),
  (UTTacticsFormationSelectViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      this._tacticsViewModel &&
        this._tacticsViewModel.onDataUpdated.unobserve(this);
    var e = this.getView();
    e.removeTarget(
      this,
      this._eSaveMentality,
      UTTacticsFormationSelectView.Event.SAVE_MENTALITY
    ),
      e.removeTarget(
        this,
        this._eChangeFormation,
        UTTacticsFormationSelectView.Event.FORMATION_CHANGE
      ),
      e.removeTarget(
        this,
        this._eSelectPositioning,
        UTTacticsFormationSelectView.Event.SELECT_POSITIONING
      ),
      gUserSettingsModel.removeSessionItem(
        models.UserSettingsModel.TACTICS_FORMATION_MESSAGE_DISPLAYED
      );
  }),
  (UTTacticsFormationSelectViewController.prototype._eSaveMentality = function _eSaveMentality(
    i,
    e,
    t
  ) {
    utils.Debug.Assert(
      utils.JS.isValid(this._tacticsViewModel),
      'Missing tactics view model. Unable to save mentality.'
    ),
      this._tacticsViewModel &&
        this._tacticsViewModel
          .saveModifiedMentalities()
          .observe(this, function _onSaveMentalitiesComplete(e, t) {
            e.unobserve(this), i.setSaveButtonInteractionState(!t.success);
          });
  }),
  (UTTacticsFormationSelectViewController.prototype._eSelectPositioning = function _eSelectPositioning(
    e,
    t,
    i
  ) {
    if (
      (utils.Debug.Assert(
        utils.JS.isValid(this._tacticsViewModel),
        'Missing tactics view model. Unable to load position adjustment view.'
      ),
      this._tacticsViewModel)
    ) {
      var s = this.getNavigationController();
      if (s) {
        var n = new UTTacticsPositionAdjustmentViewController();
        n.initWithTacticsViewModel(this._tacticsViewModel),
          s.pushViewController(n);
      }
    }
  }),
  (UTTacticsFormationSelectViewController.prototype._eChangeFormation = function _eChangeFormation(
    e,
    t,
    i
  ) {
    if (
      (utils.Debug.Assert(
        utils.JS.isValid(this._tacticsViewModel),
        'Missing tactics view model. Unable to change mentality formation.'
      ),
      this._tacticsViewModel)
    ) {
      var s = this._tacticsViewModel.getSelectedMentality(),
        n = gUserSettingsModel.getSessionItem(
          models.UserSettingsModel.TACTICS_FORMATION_MESSAGE_DISPLAYED
        ),
        o = gUserSettingsModel.getItem(
          models.UserSettingsModel.TACTICS_FORMATION_MESSAGE_DISPLAYED
        );
      if (s.getId() !== UTSquadMentalityEntity.TYPE.BALANCED || n || o)
        _setFormation.call(this);
      else {
        var a = new UTTacticsFormationPopupViewController();
        a.onExit.observe(this, function _onPopupDismiss(e, t) {
          if ((e.unobserve(this), t === enums.UIDialogOptions.OK))
            _setFormation.call(this);
          else {
            var i = this.getView();
            i.removeTarget(
              this,
              this._eChangeFormation,
              UTTacticsFormationSelectView.Event.FORMATION_CHANGE
            ),
              i.setCurrentFormation(s.getFormation().getId()),
              i.addTarget(
                this,
                this._eChangeFormation,
                UTTacticsFormationSelectView.Event.FORMATION_CHANGE
              );
          }
        }),
          gPopupClickShield.setActivePopup(a);
      }
    }

    function _setFormation() {
      var e = repositories.Squad.getFormation(i.value);
      utils.Debug.Assert(
        utils.JS.isValid(e),
        'Could not find formation with name: ' + i.value
      ),
        e && s.setFormation(e);
    }
  }),
  (UTTacticsFormationSelectViewController.prototype._eTacticsViewModelUpdated = function _eTacticsViewModelUpdated(
    e,
    t
  ) {
    if (utils.JS.isObject(t) && t.tactics && t.tactics.formation) {
      var i = this.getView(),
        s = this._tacticsViewModel.getSquad();
      i.setSaveButtonInteractionState(s.hasModifiedTactics());
    }
  }),
  utils.JS.inherits(UTPlayerInstructionTableCellView, UTTargetActionView),
  (UTPlayerInstructionTableCellView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-player-instruction-table-cell-view'),
        (this.__name = document.createElement('h1')),
        this.__name.classList.add(
          'ut-player-instruction-table-cell-view--name'
        ),
        e.appendChild(this.__name),
        (this.__description = document.createElement('p')),
        this.__description.classList.add(
          'ut-player-instruction-table-cell-view--description'
        ),
        e.appendChild(this.__description),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTPlayerInstructionTableCellView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__name = null),
      (this.__description = null);
  }),
  (UTPlayerInstructionTableCellView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPlayerInstructionTableCellView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPlayerInstructionTableCellView.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTPlayerInstructionTableCellView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    var t = this._interactionState;
    this.superclass(e),
      this._interactionState !== t &&
        this.toggleClass(enums.UIState.DISABLED, !this._interactionState);
  }),
  (UTPlayerInstructionTableCellView.prototype.setId = function setId(e) {
    var t = utils.JS.isNumber(e);
    utils.Debug.Assert(t, 'Cell ID assignment expected a number.'),
      t && (this._id = e);
  }),
  (UTPlayerInstructionTableCellView.prototype.getId = function getId() {
    return this._id;
  }),
  (UTPlayerInstructionTableCellView.prototype.setInstructionNameById = function setInstructionNameById(
    e
  ) {
    this.__name.textContent = services.Localization.localize(
      'tactics.instruction.' + e
    );
  }),
  (UTPlayerInstructionTableCellView.prototype.setInstructionDescriptionById = function setInstructionDescriptionById(
    e
  ) {
    this.__description.textContent = services.Localization.localize(
      'tactics.description.instruction.' + e
    );
  }),
  (UTPlayerInstructionTableCellView.prototype._mouseEnter = function _mouseEnter(
    e
  ) {
    this.addClass(enums.UIState.HOVER);
  }),
  (UTPlayerInstructionTableCellView.prototype._mouseLeave = function _mouseLeave(
    e
  ) {
    this.removeClass(enums.UIState.HOVER);
  }),
  (UTPlayerInstructionTableCellView.prototype._touchStarted = function _touchStarted(
    e
  ) {
    this.superclass(e), this.addClass(enums.UIState.ACTIVE);
  }),
  (UTPlayerInstructionTableCellView.prototype._touchMoved = function _touchMoved(
    e
  ) {
    this.superclass(e), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTPlayerInstructionTableCellView.prototype._touchEnded = function _touchEnded(
    e
  ) {
    this.superclass(e), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTPlayerInstructionTableCellView.prototype._tapDetected = function _tapDetected(
    e
  ) {
    this.superclass(e), this._triggerActions(enums.Event.TAP);
  }),
  utils.JS.inherits(UTTacticsInstructionSelectView, UTTargetActionView),
  (UTTacticsInstructionSelectView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tactics-instruction-select-view');
      var t = document.createElement('header');
      (this.__title = document.createElement('h1')),
        this.__title.classList.add('ut-tactics-instruction-select-view--title'),
        t.appendChild(this.__title),
        e.appendChild(t),
        (this.__table = document.createElement('div')),
        this.__table.classList.add('ut-tactics-instruction-select-view--table'),
        e.appendChild(this.__table);
      var i = document.createElement('div');
      i.classList.add('ut-button-group'),
        (this._btnCancel = new UTGroupButtonControl()),
        i.appendChild(this._btnCancel.getRootElement()),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTacticsInstructionSelectView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      (this.__table = null),
      this._btnCancel.destroy();
  }),
  (UTTacticsInstructionSelectView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTacticsInstructionSelectView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTacticsInstructionSelectView.Event = {
    DISMISS: 'UTTacticsMentalitySelectView.Event.DISMISS',
    INSTRUCTION_SELECTED:
      'UTTacticsMentalitySelectView.Event.INSTRUCTION_SELECTED'
  }),
  (UTTacticsInstructionSelectView.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      this._btnCancel.init(),
      this._btnCancel.addTarget(
        this,
        this._eDismissButtonSelected,
        enums.Event.TAP
      ),
      this._btnCancel.setText(
        services.Localization.localize('common.dialog.cancel')
      );
  }),
  (UTTacticsInstructionSelectView.prototype.dealloc = function dealloc() {
    this.superclass(), this._clearInstructionCells();
  }),
  (UTTacticsInstructionSelectView.prototype._clearInstructionCells = function _clearInstructionCells() {
    this._instructionCellViews.forEach(function(e) {
      e.dealloc();
    }),
      (this._instructionCellViews = []);
  }),
  (UTTacticsInstructionSelectView.prototype._generateInstructionCell = function _generateInstructionCell(
    e
  ) {
    var t = new UTPlayerInstructionTableCellView();
    t.init(),
      t.setId(e),
      t.setInstructionNameById(e),
      t.setInstructionDescriptionById(e),
      t.addTarget(this, this._eInstructionSelected, enums.Event.TAP),
      this._instructionCellViews.push(t),
      this.addSubview(t, this.__table);
  }),
  (UTTacticsInstructionSelectView.prototype.setTitle = function setTitle(e) {
    this.__title.textContent = e;
  }),
  (UTTacticsInstructionSelectView.prototype.setInstructionGroup = function setInstructionGroup(
    e
  ) {
    this._clearInstructionCells(),
      e.getInstructions().forEach(this._generateInstructionCell, this),
      this.layoutSubviews();
  }),
  (UTTacticsInstructionSelectView.prototype._eDismissButtonSelected = function _eDismissButtonSelected(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTTacticsInstructionSelectView.Event.DISMISS);
  }),
  (UTTacticsInstructionSelectView.prototype._eInstructionSelected = function _eInstructionSelected(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(
        UTTacticsInstructionSelectView.Event.INSTRUCTION_SELECTED,
        {
          id: e.getId()
        }
      );
  }),
  utils.JS.inherits(UTTacticsInstructionSelectViewController, UTViewController),
  (UTTacticsInstructionSelectViewController.prototype.initWithTacticsViewModel = function initWithTacticsViewModel(
    e
  ) {
    if (!this.initialized) {
      var t = e instanceof UTSquadTacticsViewModel;
      utils.Debug.Assert(
        t,
        'View controller initialization expected a tactics view model.'
      ),
        t && (this._tacticsViewModel = e),
        this.init();
    }
  }),
  (UTTacticsInstructionSelectViewController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._tacticsViewModel = null);
  }),
  (UTTacticsInstructionSelectViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTacticsInstructionSelectView();
  }),
  (UTTacticsInstructionSelectViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    if (this._tacticsViewModel) {
      var t = this._tacticsViewModel.getSelectedInstructionGroup();
      e.setTitle(
        services.Localization.localize('tactics.instruction.group.' + t.getId())
      ),
        e.setInstructionGroup(t);
    }
    e.addTarget(
      this,
      this._eDismissSelected,
      UTTacticsInstructionSelectView.Event.DISMISS
    ),
      e.addTarget(
        this,
        this._eInstructionSelected,
        UTTacticsInstructionSelectView.Event.INSTRUCTION_SELECTED
      );
    var i = getBackButtonEventController();
    i && i.registerDelegate(this, UTBackButtonEventController.PRIORITY.POPUP);
  }),
  (UTTacticsInstructionSelectViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass();
    var e = this.getView();
    e.removeTarget(
      this,
      this._eDismissSelected,
      UTTacticsInstructionSelectView.Event.DISMISS
    ),
      e.removeTarget(
        this,
        this._eInstructionSelected,
        UTTacticsInstructionSelectView.Event.INSTRUCTION_SELECTED
      );
    var t = getBackButtonEventController();
    t && t.unregisterDelegate(this, UTBackButtonEventController.PRIORITY.POPUP);
  }),
  (UTTacticsInstructionSelectViewController.prototype.handleBackButtonEvent = function handleBackButtonEvent(
    e
  ) {
    this.getParentViewController().dismissViewController();
  }),
  (UTTacticsInstructionSelectViewController.prototype._eDismissSelected = function _eDismissSelected(
    e,
    t,
    i
  ) {
    var s = this.getParentViewController();
    s && s.getPresentedViewController() === this && s.dismissViewController(!0);
  }),
  (UTTacticsInstructionSelectViewController.prototype._eInstructionSelected = function _eInstructionSelected(
    e,
    t,
    i
  ) {
    var s = this.getParentViewController();
    this._tacticsViewModel &&
      this._tacticsViewModel
        .getSelectedInstructionGroup()
        .setSelectedInstruction([i.id], i.id);
    s && s.getPresentedViewController() === this && s.dismissViewController(!0);
  }),
  utils.JS.inherits(UTPlayerInstructionGroupCellView, UTTargetActionView),
  (UTPlayerInstructionGroupCellView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-player-instruction-group-cell-view');
      var t = document.createElement('div');
      t.classList.add('ut-player-instruction-group-cell-view--content'),
        (this.__groupName = document.createElement('span')),
        this.__groupName.classList.add('group-name'),
        t.appendChild(this.__groupName),
        (this.__instructionName = document.createElement('span')),
        this.__instructionName.classList.add('instruction-name'),
        t.appendChild(this.__instructionName),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTPlayerInstructionGroupCellView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__groupName = null),
      (this.__instructionName = null);
  }),
  (UTPlayerInstructionGroupCellView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPlayerInstructionGroupCellView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPlayerInstructionGroupCellView.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTPlayerInstructionGroupCellView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    var t = this._interactionState;
    this.superclass(e),
      this._interactionState !== t &&
        this.toggleClass(enums.UIState.DISABLED, !this._interactionState);
  }),
  (UTPlayerInstructionGroupCellView.prototype.setInstructionNameById = function setInstructionNameById(
    e
  ) {
    this.__instructionName.textContent = services.Localization.localize(
      'tactics.instruction.' + e
    );
  }),
  (UTPlayerInstructionGroupCellView.prototype.setInstructionGroupNameById = function setInstructionGroupNameById(
    e
  ) {
    this.__groupName.textContent = services.Localization.localize(
      'tactics.instruction.group.' + e
    );
  }),
  (UTPlayerInstructionGroupCellView.prototype._mouseEnter = function _mouseEnter(
    e
  ) {
    this.addClass(enums.UIState.HOVER);
  }),
  (UTPlayerInstructionGroupCellView.prototype._mouseLeave = function _mouseLeave(
    e
  ) {
    this.removeClass(enums.UIState.HOVER);
  }),
  (UTPlayerInstructionGroupCellView.prototype._touchStarted = function _touchStarted(
    e
  ) {
    this.superclass(e), this.addClass(enums.UIState.ACTIVE);
  }),
  (UTPlayerInstructionGroupCellView.prototype._touchMoved = function _touchMoved(
    e
  ) {
    this.superclass(e), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTPlayerInstructionGroupCellView.prototype._touchEnded = function _touchEnded(
    e
  ) {
    this.superclass(e), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTPlayerInstructionGroupCellView.prototype._tapDetected = function _tapDetected(
    e
  ) {
    this.superclass(e), this._triggerActions(enums.Event.TAP);
  }),
  utils.JS.inherits(UTTacticsInstructionMenuView, UTTargetActionView),
  (UTTacticsInstructionMenuView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tactics-instruction-menu-view'),
        (this.__header = document.createElement('header')),
        this.__header.classList.add('ut-tactics-instruction-menu-view--header'),
        (this.__title = document.createElement('h1')),
        this.__title.classList.add('ut-tactics-instruction-menu-view--title'),
        this.__header.appendChild(this.__title),
        (this._btnSave = new UTStandardButtonControl()),
        this._btnSave.getRootElement().classList.add('mini'),
        this._btnSave.getRootElement().classList.add('call-to-action'),
        this.__header.appendChild(this._btnSave.getRootElement()),
        e.appendChild(this.__header),
        (this.__itemContainer = document.createElement('div')),
        this.__itemContainer.classList.add(
          'ut-tactics-instruction-menu-view--item-container'
        ),
        (this.__position = document.createElement('span')),
        this.__position.classList.add('position'),
        this.__itemContainer.appendChild(this.__position),
        e.appendChild(this.__itemContainer),
        (this.__menu = document.createElement('div')),
        this.__menu.classList.add('ut-button-group'),
        e.appendChild(this.__menu),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTacticsInstructionMenuView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__header = null),
      (this.__title = null),
      this._btnSave.destroy(),
      (this.__itemContainer = null),
      (this.__position = null),
      (this.__menu = null);
  }),
  (UTTacticsInstructionMenuView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTacticsInstructionMenuView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTacticsInstructionMenuView.Event = {
    SAVE_MENTALITY: 'UTTacticsInstructionMenuView.Event.SAVE_MENTALITY',
    SELECT_INSTRUCTION_GROUP:
      'UTTacticsInstructionMenuView.Event.SELECT_INSTRUCTION_GROUP'
  }),
  (UTTacticsInstructionMenuView.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      (this.__title.textContent = services.Localization.localize(
        'tactics.label.instructions'
      )),
      this._btnSave.init(),
      this._btnSave.setText(
        services.Localization.localize('tactics.label.save')
      ),
      isPhone()
        ? this._btnSave.addTarget(
            this,
            this._eSaveButtonSelected,
            enums.Event.TAP
          )
        : DOMKit.toggleDisplayStyle(this.__header, !1);
  }),
  (UTTacticsInstructionMenuView.prototype.dealloc = function dealloc() {
    this._clearInstructionCells(), this._clearPlayerItem(), this.superclass();
  }),
  (UTTacticsInstructionMenuView.prototype._clearInstructionCells = function _clearInstructionCells() {
    this._cells.forEach(function(e) {
      e.dealloc();
    }),
      (this._cells = []);
  }),
  (UTTacticsInstructionMenuView.prototype._clearPlayerItem = function _clearPlayerItem() {
    this._item && (this._item.dealloc(), (this._item = null));
  }),
  (UTTacticsInstructionMenuView.prototype.setInstructionGroups = function setInstructionGroups(
    e
  ) {
    this._clearInstructionCells(),
      e.forEach(function(e) {
        var t = new UTPlayerInstructionGroupCellView();
        t.init(),
          t.addTarget(this, this._eCellSelected, enums.Event.TAP),
          t.setInstructionGroupNameById(e.getId()),
          t.setInstructionNameById(e.getSelectedInstruction()),
          this._cells.push(t),
          this.addSubview(t, this.__menu);
      }, this),
      this.layoutSubviews();
  }),
  (UTTacticsInstructionMenuView.prototype.setPlayerItem = function setPlayerItem(
    e
  ) {
    this._clearPlayerItem(),
      (this._item = factories.ItemView.createLargeItem(e)),
      this._item.init(),
      this._item.render(e),
      this.addSubview(this._item, this.__itemContainer),
      this.layoutSubviews();
  }),
  (UTTacticsInstructionMenuView.prototype.setPlayerPosition = function setPlayerPosition(
    e
  ) {
    this.__position.textContent = utils.FUTLocalization.getLocalizedPositionStringById(
      e
    );
  }),
  (UTTacticsInstructionMenuView.prototype.setSaveButtonInteractionState = function setSaveButtonInteractionState(
    e
  ) {
    this._btnSave.setInteractionState(e);
  }),
  (UTTacticsInstructionMenuView.prototype._eCellSelected = function _eCellSelected(
    e,
    t,
    i
  ) {
    if (this.isInteractionEnabled()) {
      var s = this._cells.indexOf(e);
      this._triggerActions(
        UTTacticsInstructionMenuView.Event.SELECT_INSTRUCTION_GROUP,
        {
          index: s
        }
      );
    }
  }),
  (UTTacticsInstructionMenuView.prototype._eSaveButtonSelected = function _eSaveButtonSelected(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTTacticsInstructionMenuView.Event.SAVE_MENTALITY);
  }),
  utils.JS.inherits(UTTacticsInstructionMenuViewController, UTViewController),
  (UTTacticsInstructionMenuViewController.prototype.initWithTacticsViewModel = function initWithTacticsViewModel(
    e
  ) {
    if (!this.initialized) {
      var t = e instanceof UTSquadTacticsViewModel;
      utils.Debug.Assert(
        t,
        'View controller initialization expected a tactics view model.'
      ),
        t && (this._tacticsViewModel = e),
        this.init();
    }
  }),
  (UTTacticsInstructionMenuViewController.prototype.dealloc = function dealloc() {
    (this._tacticsViewModel = null),
      (this._instructionGroups = []),
      (this._squadSlots = []),
      this._instructionSelectViewController &&
        (this._instructionSelectViewController.dealloc(),
        (this._instructionSelectViewController = null)),
      this.superclass();
  }),
  (UTTacticsInstructionMenuViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTacticsInstructionMenuView();
  }),
  (UTTacticsInstructionMenuViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('tactics.label.instructions');
  }),
  (UTTacticsInstructionMenuViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    if (this._tacticsViewModel) {
      var t = this._tacticsViewModel.getSquad(),
        i = this._tacticsViewModel.getSelectedMentality();
      this._squadSlots = t.getTacticSlotsByMentalityId(i.getId());
      var s = this._squadSlots[this._tacticsViewModel.getSelectedSlotId()];
      (this._instructionGroups = i.getInstructionGroupsByPositionId(
        s.getUniquePosition()
      )),
        e.setPlayerItem(s.getItem()),
        e.setPlayerPosition(s.getGeneralPosition()),
        e.setInstructionGroups(this._instructionGroups),
        e.setSaveButtonInteractionState(t.hasModifiedTactics()),
        this._tacticsViewModel.onDataUpdated.observe(
          this,
          this._eTacticsViewModelUpdated
        );
    }
    e.addTarget(
      this,
      this._eInstructionGroupSelected,
      UTTacticsInstructionMenuView.Event.SELECT_INSTRUCTION_GROUP
    ),
      e.addTarget(
        this,
        this._eSaveMentality,
        UTTacticsInstructionMenuView.Event.SAVE_MENTALITY
      );
  }),
  (UTTacticsInstructionMenuViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      this._tacticsViewModel &&
        this._tacticsViewModel.onDataUpdated.unobserve(this);
    var e = this.getView();
    e.removeTarget(
      this,
      this._eInstructionGroupSelected,
      UTTacticsInstructionMenuView.Event.SELECT_INSTRUCTION_GROUP
    ),
      e.removeTarget(
        this,
        this._eSaveMentality,
        UTTacticsInstructionMenuView.Event.SAVE_MENTALITY
      );
  }),
  (UTTacticsInstructionMenuViewController.prototype.didDismiss = function didDismiss(
    e
  ) {
    if (
      (this.superclass(),
      this._tacticsViewModel &&
        e instanceof UTTacticsInstructionSelectViewController)
    ) {
      var t = this._tacticsViewModel.getSelectedMentality(),
        i = this._squadSlots[this._tacticsViewModel.getSelectedSlotId()],
        s = this._instructionGroups.reduce(function(e, t) {
          return e.concat(t.getSelectedInstruction());
        }, []);
      t.setInstructionsByPositionId(i.getUniquePosition(), s);
    }
    e.dealloc();
  }),
  (UTTacticsInstructionMenuViewController.prototype._eInstructionGroupSelected = function _eInstructionGroupSelected(
    e,
    t,
    i
  ) {
    utils.Debug.Assert(
      utils.JS.isValid(this._tacticsViewModel),
      'Missing tactics view model. Unable to load mentality selection view.'
    ),
      this._tacticsViewModel &&
        (this._tacticsViewModel.setSelectedInstructionGroup(
          this._instructionGroups[i.index]
        ),
        (this._instructionSelectViewController = new UTTacticsInstructionSelectViewController()),
        this._instructionSelectViewController.initWithTacticsViewModel(
          this._tacticsViewModel
        ),
        (this._instructionSelectViewController.modalDisplayStyle =
          enums.UIModalDisplayStyles.FORM),
        this.presentViewController(this._instructionSelectViewController, !0));
  }),
  (UTTacticsInstructionMenuViewController.prototype._eSaveMentality = function _eSaveMentality(
    e,
    t,
    i
  ) {
    utils.Debug.Assert(
      utils.JS.isValid(this._tacticsViewModel),
      'Missing tactics view model. Unable to save mentality.'
    ),
      this._tacticsViewModel &&
        this._tacticsViewModel
          .saveModifiedMentalities()
          .observe(this, function _onSaveMentalitiesComplete(e, t) {
            e.unobserve(this),
              this.getView().setSaveButtonInteractionState(!t.success);
          });
  }),
  (UTTacticsInstructionMenuViewController.prototype._eTacticsViewModelUpdated = function _eTacticsViewModelUpdated(
    e,
    t
  ) {
    if (utils.JS.isObject(t) && t.tactics && t.tactics.instructions) {
      var i = this.getView(),
        s = this._tacticsViewModel.getSquad();
      i.setInstructionGroups(this._instructionGroups),
        i.setSaveButtonInteractionState(s.hasModifiedTactics());
    }
  }),
  utils.JS.inherits(
    UTTacticsInstructionSlotSelectViewController,
    UTViewController
  ),
  (UTTacticsInstructionSlotSelectViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      (e.renderChemistry = !1),
        e.addTarget(
          this,
          this._eSlotSelected,
          enums.UISquadPitchEvent.SLOT_SELECT
        );
    }
  }),
  (UTTacticsInstructionSlotSelectViewController.prototype.initWithTacticsViewModel = function initWithTacticsViewModel(
    e
  ) {
    if (!this.initialized) {
      var t = e instanceof UTSquadTacticsViewModel;
      utils.Debug.Assert(
        t,
        'View controller initialization expected a tactics view model.'
      ),
        t && (this._tacticsViewModel = e),
        this.init();
    }
  }),
  (UTTacticsInstructionSlotSelectViewController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._tacticsViewModel = null);
  }),
  (UTTacticsInstructionSlotSelectViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSquadPitchView();
  }),
  (UTTacticsInstructionSlotSelectViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('tactics.label.instructions');
  }),
  (UTTacticsInstructionSlotSelectViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getNavigationController();
    if (
      (e &&
        (e.setNavigationVisibility(!0, !1),
        isPhone() ||
          e.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY)),
      this._tacticsViewModel)
    ) {
      var t = this._tacticsViewModel.getSquad(),
        i = this._tacticsViewModel.getSelectedMentality(),
        s = this.getView(),
        n = s.isInteractionEnabled();
      s.setInteractionState(!1),
        s.setType(enums.SquadPitchTypes.REGULAR),
        s.setSlots(t.getTacticSlotsByMentalityId(i.getId()), !0, !1),
        requestAnimationFrame(function() {
          s.setFormation(
            i.getFormation().getName(),
            t.getChemistryLinks(),
            function() {
              s.setInteractionState(n);
            }
          );
        });
    }
  }),
  (UTTacticsInstructionSlotSelectViewController.prototype._eSlotSelected = function _eSlotSelected(
    e,
    t,
    i
  ) {
    if (
      (utils.Debug.Assert(
        utils.JS.isValid(this._tacticsViewModel),
        'Missing tactics view model. Unable to load tactic.'
      ),
      this._tacticsViewModel)
    ) {
      var s = i && utils.JS.isNumber(i.slotIndex) ? i.slotIndex : 0,
        n = this.getNavigationController();
      if ((this._tacticsViewModel.setSelectedSlotId(s), n)) {
        var o = new UTTacticsInstructionMenuViewController();
        o.initWithTacticsViewModel(this._tacticsViewModel),
          n.pushViewController(o);
      }
    }
  }),
  utils.JS.inherits(UTMentalityTableCellView, UTTargetActionView),
  (UTMentalityTableCellView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-mentality-table-cell-view'),
        (this.__name = document.createElement('h1')),
        this.__name.classList.add('ut-mentality-table-cell-view--name'),
        e.appendChild(this.__name);
      var t = document.createElement('div');
      t.classList.add('ut-mentality-table-cell-view--info');
      var i = document.createElement('div');
      i.classList.add('info-item'),
        (this.__titleOffensiveStyle = document.createElement('span')),
        this.__titleOffensiveStyle.classList.add('title'),
        i.appendChild(this.__titleOffensiveStyle),
        (this.__valueOffensiveStyle = document.createElement('span')),
        this.__valueOffensiveStyle.classList.add('value'),
        i.appendChild(this.__valueOffensiveStyle),
        t.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('info-item'),
        (this.__titleFormation = document.createElement('span')),
        this.__titleFormation.classList.add('title'),
        s.appendChild(this.__titleFormation),
        (this.__valueFormation = document.createElement('span')),
        this.__valueFormation.classList.add('value'),
        s.appendChild(this.__valueFormation),
        t.appendChild(s);
      var n = document.createElement('div');
      n.classList.add('info-item'),
        (this.__titleDefensiveStyle = document.createElement('span')),
        this.__titleDefensiveStyle.classList.add('title'),
        n.appendChild(this.__titleDefensiveStyle),
        (this.__valueDefensiveStyle = document.createElement('span')),
        this.__valueDefensiveStyle.classList.add('value'),
        n.appendChild(this.__valueDefensiveStyle),
        t.appendChild(n),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTMentalityTableCellView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__name = null),
      (this.__titleOffensiveStyle = null),
      (this.__valueOffensiveStyle = null),
      (this.__titleFormation = null),
      (this.__valueFormation = null),
      (this.__titleDefensiveStyle = null),
      (this.__valueDefensiveStyle = null);
  }),
  (UTMentalityTableCellView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTMentalityTableCellView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTMentalityTableCellView.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      (this.__titleOffensiveStyle.textContent = services.Localization.localize(
        'tactics.label.offensivestyle'
      )),
      (this.__titleDefensiveStyle.textContent = services.Localization.localize(
        'tactics.label.defensivestyle'
      )),
      (this.__titleFormation.textContent = services.Localization.localize(
        'squads.formation'
      ));
  }),
  (UTMentalityTableCellView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    var t = this._interactionState;
    this.superclass(e),
      this._interactionState !== t &&
        this.toggleClass(enums.UIState.DISABLED, !this._interactionState);
  }),
  (UTMentalityTableCellView.prototype.setId = function setId(e) {
    var t = utils.JS.isNumber(e);
    utils.Debug.Assert(t, 'Cell ID assignment expected a number.'),
      t && (this._id = e);
  }),
  (UTMentalityTableCellView.prototype.getId = function getId() {
    return this._id;
  }),
  (UTMentalityTableCellView.prototype.setMentalityNameById = function setMentalityNameById(
    e
  ) {
    this.__name.textContent = services.Localization.localize(
      'tactics.mentality.type.' + e
    );
  }),
  (UTMentalityTableCellView.prototype.setOffensiveStyleById = function setOffensiveStyleById(
    e
  ) {
    this.__valueOffensiveStyle.textContent = services.Localization.localize(
      'tactics.mentality.style.offensive.' + e
    );
  }),
  (UTMentalityTableCellView.prototype.setDefensiveStyleById = function setDefensiveStyleById(
    e
  ) {
    this.__valueDefensiveStyle.textContent = services.Localization.localize(
      'tactics.mentality.style.defensive.' + e
    );
  }),
  (UTMentalityTableCellView.prototype.setFormationName = function setFormationName(
    e
  ) {
    this.__valueFormation.textContent = e;
  }),
  (UTMentalityTableCellView.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIState.HOVER);
  }),
  (UTMentalityTableCellView.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass(enums.UIState.HOVER);
  }),
  (UTMentalityTableCellView.prototype._touchStarted = function _touchStarted(
    e
  ) {
    this.superclass(e), this.addClass(enums.UIState.ACTIVE);
  }),
  (UTMentalityTableCellView.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(e), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTMentalityTableCellView.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(e), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTMentalityTableCellView.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(e), this._triggerActions(enums.Event.TAP);
  }),
  utils.JS.inherits(UTTacticsMentalitySelectView, UTTargetActionView),
  (UTTacticsMentalitySelectView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tactics-mentality-select-view');
      var t = document.createElement('header');
      (this.__title = document.createElement('h1')),
        this.__title.classList.add('ut-tactics-mentality-select-view--title'),
        t.appendChild(this.__title),
        (this._btnExit = new UTImageButtonControl()),
        this._btnExit.getRootElement().classList.add('exit-btn'),
        t.appendChild(this._btnExit.getRootElement()),
        e.appendChild(t),
        (this.__table = document.createElement('div')),
        this.__table.classList.add('ut-tactics-mentality-select-view--table'),
        e.appendChild(this.__table),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTacticsMentalitySelectView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      this._btnExit.destroy(),
      (this.__table = null);
  }),
  (UTTacticsMentalitySelectView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTacticsMentalitySelectView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTacticsMentalitySelectView.Event = {
    DISMISS: 'UTTacticsMentalitySelectView.Event.DISMISS',
    MENTALITY_SELECTED: 'UTTacticsMentalitySelectView.Event.MENTALITY_SELECTED'
  }),
  (UTTacticsMentalitySelectView.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      this._btnExit.init(),
      this._btnExit.addTarget(
        this,
        this._eDismissButtonSelected,
        enums.Event.TAP
      ),
      (this.__title.textContent = services.Localization.localize(
        'tactics.label.changementality'
      ));
  }),
  (UTTacticsMentalitySelectView.prototype.dealloc = function dealloc() {
    this.superclass(), this._clearMentalityCells();
  }),
  (UTTacticsMentalitySelectView.prototype._clearMentalityCells = function _clearMentalityCells() {
    this._mentalityCellViews.forEach(function(e) {
      e.dealloc();
    }),
      (this._mentalityCellViews = []);
  }),
  (UTTacticsMentalitySelectView.prototype._generateMentalityCell = function _generateMentalityCell(
    e
  ) {
    var t = new UTMentalityTableCellView();
    t.init(),
      t.setId(e.getId()),
      t.setMentalityNameById(e.getId()),
      t.setDefensiveStyleById(e.getDefensiveStyle()),
      t.setOffensiveStyleById(e.getOffensiveStyle()),
      t.setFormationName(e.getFormation().getDisplayName()),
      t.addTarget(this, this._eMentalitySelected, enums.Event.TAP),
      this._mentalityCellViews.push(t),
      this.addSubview(t, this.__table);
  }),
  (UTTacticsMentalitySelectView.prototype.setMentalities = function setMentalities(
    e
  ) {
    this._clearMentalityCells(),
      e.forEach(this._generateMentalityCell, this),
      this.layoutSubviews();
  }),
  (UTTacticsMentalitySelectView.prototype.setMentalityCellInteractionStateById = function setMentalityCellInteractionStateById(
    t,
    e
  ) {
    var i = utils.JS.find(this._mentalityCellViews, function(e) {
      return e.getId() === t;
    });
    i && i.setInteractionState(e);
  }),
  (UTTacticsMentalitySelectView.prototype._eDismissButtonSelected = function _eDismissButtonSelected(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTTacticsMentalitySelectView.Event.DISMISS);
  }),
  (UTTacticsMentalitySelectView.prototype._eMentalitySelected = function _eMentalitySelected(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(
        UTTacticsMentalitySelectView.Event.MENTALITY_SELECTED,
        {
          id: e.getId()
        }
      );
  }),
  utils.JS.inherits(UTTacticsMentalitySelectViewController, UTViewController),
  (UTTacticsMentalitySelectViewController.prototype.initWithTacticsViewModel = function initWithTacticsViewModel(
    e
  ) {
    if (!this.initialized) {
      var t = e instanceof UTSquadTacticsViewModel;
      utils.Debug.Assert(
        t,
        'View controller initialization expected a tactics view model.'
      ),
        t && (this._tacticsViewModel = e),
        this.init();
    }
  }),
  (UTTacticsMentalitySelectViewController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._tacticsViewModel = null);
  }),
  (UTTacticsMentalitySelectViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTacticsMentalitySelectView();
  }),
  (UTTacticsMentalitySelectViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    this._tacticsViewModel &&
      (e.setMentalities(this._tacticsViewModel.getMentalities()),
      e.setMentalityCellInteractionStateById(
        this._tacticsViewModel.getSelectedMentality().getId(),
        !1
      )),
      e.addTarget(
        this,
        this._eDismissSelected,
        UTTacticsMentalitySelectView.Event.DISMISS
      ),
      e.addTarget(
        this,
        this._eMentalitySelected,
        UTTacticsMentalitySelectView.Event.MENTALITY_SELECTED
      );
    var t = getBackButtonEventController();
    t && t.registerDelegate(this, UTBackButtonEventController.PRIORITY.POPUP);
  }),
  (UTTacticsMentalitySelectViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass();
    var e = this.getView();
    e.removeTarget(
      this,
      this._eDismissSelected,
      UTTacticsMentalitySelectView.Event.DISMISS
    ),
      e.removeTarget(
        this,
        this._eMentalitySelected,
        UTTacticsMentalitySelectView.Event.MENTALITY_SELECTED
      );
    var t = getBackButtonEventController();
    t && t.unregisterDelegate(this, UTBackButtonEventController.PRIORITY.POPUP);
  }),
  (UTTacticsMentalitySelectViewController.prototype.handleBackButtonEvent = function handleBackButtonEvent(
    e
  ) {
    this.getParentViewController().dismissViewController();
  }),
  (UTTacticsMentalitySelectViewController.prototype._eDismissSelected = function _eDismissSelected(
    e,
    t,
    i
  ) {
    var s = this.getParentViewController();
    s && s.getPresentedViewController() === this && s.dismissViewController(!0);
  }),
  (UTTacticsMentalitySelectViewController.prototype._eMentalitySelected = function _eMentalitySelected(
    e,
    t,
    i
  ) {
    var s = this.getParentViewController();
    this._tacticsViewModel &&
      this._tacticsViewModel.setSelectedMentalityById(i.id),
      s &&
        s.getPresentedViewController() === this &&
        s.dismissViewController(!0);
  }),
  utils.JS.inherits(UTRangeControl, UTControl),
  (UTRangeControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('input');
      e.setAttribute('type', 'range'),
        e.classList.add('ut-range-control'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTRangeControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTRangeControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTRangeControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTRangeControl.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTRangeControl.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    var t = this._interactionState;
    this.superclass(e),
      this._interactionState !== t &&
        this.toggleClass(enums.UIState.DISABLED, !this._interactionState);
  }),
  (UTRangeControl.prototype._startHandlingEvents = function _startHandlingEvents(
    e
  ) {
    this.superclass(e),
      this._addListener(
        enums.Event.CHANGE,
        this._eventElement,
        this._handleChangeEvent.bind(this)
      ),
      this._addListener(
        enums.Event.INPUT,
        this._eventElement,
        this._handleInputEvent.bind(this)
      );
  }),
  (UTRangeControl.prototype.setMin = function setMin(e) {
    var t = this.getRootElement();
    utils.JS.isNumber(e) &&
      e.toString() !== t.getAttribute('min') &&
      t.setAttribute('min', e);
  }),
  (UTRangeControl.prototype.getMin = function getMin() {
    return parseFloat(this.getRootElement().getAttribute('min'));
  }),
  (UTRangeControl.prototype.setMax = function setMax(e) {
    var t = this.getRootElement();
    utils.JS.isNumber(e) &&
      e.toString() !== t.getAttribute('max') &&
      t.setAttribute('max', e);
  }),
  (UTRangeControl.prototype.getMax = function getMax() {
    return parseFloat(this.getRootElement().getAttribute('max'));
  }),
  (UTRangeControl.prototype.setStep = function setStep(e) {
    var t = this.getRootElement();
    utils.JS.isNumber(e) &&
      e.toString() !== t.getAttribute('step') &&
      t.setAttribute('step', e);
  }),
  (UTRangeControl.prototype.getStep = function getStep() {
    return parseFloat(this.getRootElement().getAttribute('step'));
  }),
  (UTRangeControl.prototype.setValue = function setValue(e) {
    utils.JS.isNumber(e) && (this.getRootElement().value = e);
  }),
  (UTRangeControl.prototype.getValue = function getValue() {
    return parseFloat(this.getRootElement().value);
  }),
  (UTRangeControl.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(e), this.addClass(enums.UIButtonState.ACTIVE);
  }),
  (UTRangeControl.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(e), this.removeClass(enums.UIButtonState.ACTIVE);
  });

function UTItemInfoChangeButtonControl() {
  UTNavigationButtonControl.call(this),
    (this._currentState = enums.UIItemInfoState.MAIN),
    Object.defineProperty(this, '_currentState', {
      writable: !0,
      enumerable: !1
    });
}

function UTBootFlowNavigationController(e, t) {
  UTNavigationController.call(this, e, t),
    (this._settingsNavButton = new UTNavigationButtonControl()),
    (this._settingsToolbarButton = new UTToolbarButtonControl());
}

function UTShowOffSquadOverviewView() {
  UTSquadOverviewView.call(this);
}

function UTShowOffSquadOverviewViewController() {
  UTSquadOverviewViewController.call(this);
}

function UTSquadShowOffActionsView() {
  UTView.call(this);
}

function UTSquadShowOffActionsViewController() {
  UTViewController.call(this);
}

function UTSlotActionPanelViewController() {
  UTViewController.call(this),
    (this._quickListPanel = new controllers.views.QuickListPanel()),
    (this._item = null),
    (this._squad = null),
    (this._challenge = null),
    (this._slot = 0),
    (this._iterator = null),
    (this.onDiscard = new UTObservable()),
    Object.defineProperty(this, 'onDiscard', {
      writable: !1,
      enumerable: !0
    }),
    (this.onMove = new UTObservable()),
    Object.defineProperty(this, 'onMove', {
      writable: !1,
      enumerable: !0
    }),
    (this.onRemove = new UTObservable()),
    Object.defineProperty(this, 'onRemove', {
      writable: !1,
      enumerable: !0
    }),
    (this.onPlayerBio = new UTObservable()),
    Object.defineProperty(this, 'onPlayerBio', {
      writable: !1,
      enumerable: !0
    }),
    (this.onItemChange = new UTObservable()),
    Object.defineProperty(this, 'onItemChange', {
      writable: !1,
      enumerable: !0
    });
}

function UTSlotDetailsViewController() {
  UTViewController.call(this),
    (this._panel = null),
    (this._panelView = null),
    (this._viewmodel = null),
    (this._squad = null),
    (this._challenge = null),
    (this.onSlotChange = new UTObservable()),
    Object.defineProperty(this, 'onSlotChange', {
      writable: !1
    });
}

function UTShowOffSquadSplitViewController() {
  UTBaseSquadSplitViewController.call(this),
    (this._panelController = new UTSquadShowOffActionsViewController());
}

function UTCurrencyNavigationBarView() {
  views.NavigationBar.call(this), this._generate();
}

function UTGameFlowNavigationController(e, t) {
  e || (e = new UTCurrencyNavigationBarView()),
    UTNavigationController.call(this, e, t),
    (this._itemInfoStateViewModel = new UTItemInfoStateViewModel(
      gUserSettingsModel
    )),
    (this._itemInfoSwitchButton = new UTItemInfoChangeButtonControl()),
    (this._settingsNavButton = new UTNavigationButtonControl());
}

function UTSBCChallengeTileView() {
  UTTileView.call(this), (this._data = null);
}

function UTSBCFavoriteButtonControl() {
  UTToggleButtonControl.call(this),
    (this._data = null),
    (this._isToggling = !1);
}

function UTRewardsFooterView() {
  UTView.call(this), (this._data = null), (this._rewards = []);
}

function UTSBCSetInfoView() {
  UTView.call(this);
}

function UTSBCChallengesView() {
  UTTargetActionView.call(this), (this._challengeTiles = []);
}

function UTSBCChallengesViewController() {
  UTViewController.call(this),
    (this._requirementsOverlay = null),
    (this._set = null);
}

function UTSBCChallengeRequirementsView() {
  UTView.call(this);
}

function UTSBCChallengeDetailsView() {
  UTView.call(this);
}

function UTSBCRequirementsPopupView() {
  UTView.call(this),
    (this.onConfirm = new UTObservable()),
    Object.defineProperty(this, 'onConfirm', {
      enumerable: !0,
      writable: !1
    }),
    (this.onCancel = new UTObservable()),
    Object.defineProperty(this, 'onCancel', {
      enumerable: !0,
      writable: !1
    });
}

function UTSBCConfirmSubmissionPopupView(e) {
  UTView.call(this), (this._players = e), this._generate();
}

function UTSBCConfirmSubmissionPopupViewController(e) {
  controllers.views.popups.BasePopup.call(this), (this.playerNames = e || []);
}

function UTSBCSummaryProgressView() {
  UTToggleButtonControl.call(this);
}

function UTSBCSquadSummaryBannerView() {
  UTSquadSummaryBannerView.call(this),
    (this.onRequirementsSelect = new UTObservable()),
    Object.defineProperty(this, 'onRequirementsSelect', {
      writable: !1,
      enumerable: !0
    });
}

function UTSBCSquadOverviewView() {
  UTSquadOverviewView.call(this);
}

function UTSBCItemWarningViewModel() {
  UTObject.call(this),
    (this._requests = []),
    Object.defineProperty(this, '_requests', {
      writable: !0,
      enumerable: !1
    }),
    (this._squads = []),
    Object.defineProperty(this, '_squads', {
      writable: !0,
      enumerable: !1
    }),
    (this._players = new UTHashTable()),
    Object.defineProperty(this, '_players', {
      writable: !0,
      enumerable: !1
    });
}

function UTSBCSquadOverviewViewController() {
  UTSquadOverviewViewController.call(this),
    (this._set = null),
    (this._challenge = null),
    (this._viewmodel = new UTSBCItemWarningViewModel());
}

function UTSBCSquadDetailPanelView() {
  UTView.call(this);
}

function UTSBCSquadDetailPanelViewController() {
  UTViewController.call(this),
    (this._set = null),
    (this._challenge = null),
    (this._challengeActionDelegate = null),
    (this._viewmodel = new UTSBCItemWarningViewModel());
}

function UTSBCRequirementsNotificationView() {
  UTTargetActionView.call(this);
}

function UTSBCRequirementsNotificationViewController() {
  UTViewController.call(this), (this._challenge = null);
}

function UTSBCSquadSplitViewController() {
  UTBaseSquadSplitViewController.call(this),
    (this._challengeDetailsController = null),
    (this._set = null),
    (this._challengeId = 0),
    (this._requirementsNotification = new UTSBCRequirementsNotificationViewController()),
    (this._searchFlowActive = !1),
    (this._viewmodel = new UTSBCItemWarningViewModel());
}

function UTSBCTimerLabelView() {
  UTView.call(this),
    (this._endTime = 0),
    (this._canExpire = !1),
    (this._updateInterval = 0),
    (this._updateTime = 2e4);
}

function UTSBCSetTileView() {
  UTTileView.call(this), (this._data = null);
}

function UTSBCHubView() {
  UTTargetActionView.call(this), (this._sbcSetTiles = []);
}

function UTSBCRewardPreviewView() {
  UTView.call(this);
}
(UTRangeControl.prototype._touchCancelled = function _touchCancelled(e) {
  this.superclass(e), this.removeClass(enums.UIButtonState.ACTIVE);
}),
  (UTRangeControl.prototype._mouseLeave = function _mouseLeave(e) {
    this.superclass(e), this.removeClass(enums.UIButtonState.ACTIVE);
  }),
  (UTRangeControl.prototype._handleChangeEvent = function _handleChangeEvent(
    e
  ) {
    this._triggerActions(enums.Event.CHANGE, {
      value: parseInt(this.getRootElement().value, 10)
    });
  }),
  (UTRangeControl.prototype._handleInputEvent = function _handleInputEvent(e) {
    this._triggerActions(enums.Event.INPUT, {
      value: parseInt(this.getRootElement().value, 10)
    });
  }),
  utils.JS.inherits(UTTacticsEditRangeControl, UTTargetActionView),
  (UTTacticsEditRangeControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tactics-edit-range-control'),
        (this.__pseudoTrack = document.createElement('div')),
        this.__pseudoTrack.classList.add(
          'ut-tactics-edit-range-control--track'
        ),
        (this.__pseudoTrackInner = document.createElement('div')),
        this.__pseudoTrackInner.classList.add('inner'),
        this.__pseudoTrack.appendChild(this.__pseudoTrackInner),
        e.appendChild(this.__pseudoTrack),
        (this._range = new UTRangeControl()),
        e.appendChild(this._range.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTacticsEditRangeControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__pseudoTrack = null),
      (this.__pseudoTrackInner = null),
      this._range.destroy();
  }),
  (UTTacticsEditRangeControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTacticsEditRangeControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTacticsEditRangeControl.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      this._range.init(),
      this._range.addTarget(this, this._handleRangeEvent, enums.Event.CHANGE),
      this._range.addTarget(this, this._handleRangeEvent, enums.Event.INPUT);
  }),
  (UTTacticsEditRangeControl.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    this.superclass(e), this._range.setInteractionState(e);
  }),
  (UTTacticsEditRangeControl.prototype.setMin = function setMin(e) {
    this._range.setMin(e);
  }),
  (UTTacticsEditRangeControl.prototype.setMax = function setMax(e) {
    this._range.setMax(e);
  }),
  (UTTacticsEditRangeControl.prototype.setStep = function setStep(e) {
    this._range.setStep(e);
  }),
  (UTTacticsEditRangeControl.prototype.setValue = function setValue(e) {
    this._range.setValue(e), this._paintTrackProgress();
  }),
  (UTTacticsEditRangeControl.prototype.paintStepTicks = function paintStepTicks() {
    var e = this._range.getMax() / this._range.getStep(),
      t = this._range.getRootElement().offsetWidth,
      i = (14 / t) * 100,
      s = (16 / t) * 100,
      n = ((t - 30) / (e - 1) / t) * 100;
    this.__pseudoTrackInner.style.backgroundImage =
      'repeating-linear-gradient(90deg, transparent, transparent ' +
      i +
      '%, white ' +
      i +
      '%, white ' +
      s +
      '%, transparent ' +
      s +
      '%, transparent ' +
      n +
      '%)';
  }),
  (UTTacticsEditRangeControl.prototype._paintTrackProgress = function _paintTrackProgress() {
    var e = this._range.getValue(),
      t = this._range.getStep(),
      i = this._range.getMax() / t,
      s = this._range.getRootElement().offsetWidth,
      n = (e - t) * (((s - 30) / (i - 1) / s) * 100);
    if ('rtl' === getAppRoot().getAttribute('dir')) {
      var o = 100 - n;
      this.__pseudoTrack.style.backgroundImage =
        'linear-gradient(90deg, #e5e5e5 ' + o + '%, #3fe3ef ' + o + '%)';
    } else
      this.__pseudoTrack.style.backgroundImage =
        'linear-gradient(90deg, #3fe3ef ' + n + '%, #e5e5e5 ' + n + '%)';
  }),
  (UTTacticsEditRangeControl.prototype._handleRangeEvent = function _handleRangeEvent(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      (t === enums.Event.INPUT && this._paintTrackProgress(),
      this._triggerActions(t, i));
  }),
  utils.JS.inherits(UTTacticsStyleAdjustmentView, UTTargetActionView),
  (UTTacticsStyleAdjustmentView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tactics-style-adjustment-view'),
        (this.__adjustmentArea = document.createElement('div')),
        this.__adjustmentArea.classList.add(
          'ut-tactics-style-adjustment-view--pitch-container'
        );
      var t = document.createElement('div');
      t.classList.add('ut-tactics-style-adjustment-view--pitch-images'),
        (this._imgPitch = new UTImageView()),
        this._imgPitch.getRootElement().classList.add('pitch'),
        t.appendChild(this._imgPitch.getRootElement()),
        this.__adjustmentArea.appendChild(t),
        e.appendChild(this.__adjustmentArea),
        (this.__description = document.createElement('p')),
        this.__description.classList.add(
          'ut-tactics-style-adjustment-view--description'
        ),
        e.appendChild(this.__description),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTacticsStyleAdjustmentView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__adjustmentArea = null),
      this._imgPitch.destroy(),
      (this.__description = null);
  }),
  (UTTacticsStyleAdjustmentView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTacticsStyleAdjustmentView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTacticsStyleAdjustmentView.Event = {
    DROP_DOWN_CHANGED: 'UTTacticsStyleAdjustmentView.Event.DROP_DOWN_CHANGED',
    RANGE_CHANGED: 'UTTacticsStyleAdjustmentView.Event.RANGE_CHANGED'
  }),
  (UTTacticsStyleAdjustmentView.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTTacticsStyleAdjustmentView.prototype.dealloc = function dealloc() {
    this._removeRangeControl(),
      this._removeDropDownControl(),
      this.superclass();
  }),
  (UTTacticsStyleAdjustmentView.prototype._removeRangeControl = function _removeRangeControl() {
    this._styleRange && (this._styleRange.dealloc(), (this._styleRange = null));
  }),
  (UTTacticsStyleAdjustmentView.prototype._removeDropDownControl = function _removeDropDownControl() {
    this._styleDropDown &&
      (this._styleDropDown.dealloc(), (this._styleDropDown = null));
  }),
  (UTTacticsStyleAdjustmentView.prototype.setDescriptionByStyleId = function setDescriptionByStyleId(
    e,
    t
  ) {
    this.__description.textContent = services.Localization.localize(
      'tactics.description.style.' + e + '.' + t
    );
  }),
  (UTTacticsStyleAdjustmentView.prototype.setStyleOptionById = function setStyleOptionById(
    e,
    t
  ) {
    var i;
    e === UTSquadMentalityEntity.STYLE.OFFENSIVE_STYLE
      ? (i = factories.DataProvider.getTacticOffensiveStyleDP())
      : e === UTSquadMentalityEntity.STYLE.DEFENSIVE_STYLE &&
        (i = factories.DataProvider.getTacticDefensiveStyleDP()),
      i &&
        (this._removeRangeControl(),
        this._styleDropDown ||
          ((this._styleDropDown = new UTDropDownControl()),
          this._styleDropDown.init(),
          this._styleDropDown.addTarget(
            this,
            this._eDropDownControlChange,
            enums.Event.CHANGE
          ),
          this.addSubview(this._styleDropDown, this.__adjustmentArea),
          this.layoutSubviews()),
        this._styleDropDown.setOptions(i),
        this._styleDropDown.setDefaultIndexByValue(t, !0));
  }),
  (UTTacticsStyleAdjustmentView.prototype.setStyleRange = function setStyleRange(
    e,
    t,
    i,
    s
  ) {
    this._removeDropDownControl(),
      this._styleRange ||
        ((this._styleRange = new UTTacticsEditRangeControl()),
        this._styleRange.init(),
        this._styleRange.addTarget(
          this,
          this._eRangeControlChange,
          enums.Event.INPUT
        ),
        this.addSubview(this._styleRange, this.__adjustmentArea),
        this.layoutSubviews()),
      this._styleRange.setMin(e),
      this._styleRange.setMax(t),
      this._styleRange.setStep(i),
      this._styleRange.setValue(s),
      this._styleRange.paintStepTicks();
  }),
  (UTTacticsStyleAdjustmentView.prototype.setStyleImage = function setStyleImage(
    e
  ) {
    this._imgPitch.setLocalResource(e);
  }),
  (UTTacticsStyleAdjustmentView.prototype._eRangeControlChange = function _eRangeControlChange(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTTacticsStyleAdjustmentView.Event.RANGE_CHANGED, {
        value: i.value
      });
  }),
  (UTTacticsStyleAdjustmentView.prototype._eDropDownControlChange = function _eDropDownControlChange(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(
        UTTacticsStyleAdjustmentView.Event.DROP_DOWN_CHANGED,
        {
          value: i.value
        }
      );
  }),
  utils.JS.inherits(UTTacticsStyleAdjustmentViewController, UTViewController),
  (UTTacticsStyleAdjustmentViewController.prototype.initWithTacticsViewModel = function initWithTacticsViewModel(
    e
  ) {
    if (!this.initialized) {
      var t = e instanceof UTSquadTacticsViewModel;
      utils.Debug.Assert(
        t,
        'View controller initialization expected a tactics view model.'
      ),
        t && (this._tacticsViewModel = e),
        this.init();
    }
  }),
  (UTTacticsStyleAdjustmentViewController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._tacticsViewModel = null);
  }),
  (UTTacticsStyleAdjustmentViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTacticsStyleAdjustmentView();
  }),
  (UTTacticsStyleAdjustmentViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    var e = this._tacticsViewModel
      ? 'tactics.mentality.style.' + this._tacticsViewModel.getSelectedStyleId()
      : 'tactics.label.styles';
    return services.Localization.localize(e);
  }),
  (UTTacticsStyleAdjustmentViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._tacticsViewModel &&
        this._setStyleById(this._tacticsViewModel.getSelectedStyleId());
    var e = this.getView();
    e.addTarget(
      this,
      this._eStyleValueChanged,
      UTTacticsStyleAdjustmentView.Event.RANGE_CHANGED
    ),
      e.addTarget(
        this,
        this._eStyleValueChanged,
        UTTacticsStyleAdjustmentView.Event.DROP_DOWN_CHANGED
      );
  }),
  (UTTacticsStyleAdjustmentViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass();
    var e = this.getView();
    e.removeTarget(
      this,
      this._eStyleValueChanged,
      UTTacticsStyleAdjustmentView.Event.RANGE_CHANGED
    ),
      e.removeTarget(
        this,
        this._eStyleValueChanged,
        UTTacticsStyleAdjustmentView.Event.DROP_DOWN_CHANGED
      );
  }),
  (UTTacticsStyleAdjustmentViewController.prototype._getDescriptionVariant = function _getDescriptionVariant(
    e,
    t
  ) {
    if (10 <= t) {
      if (8 <= e) return 2;
      if (4 <= e) return 1;
    } else if (5 <= t) {
      if (4 <= e) return 2;
      if (3 === e) return 1;
    }
    return 0;
  }),
  (UTTacticsStyleAdjustmentViewController.prototype._generateImageURI = function _generateImageURI(
    e,
    t
  ) {
    switch (e) {
      case UTSquadMentalityEntity.STYLE.OFFENSIVE_STYLE:
        return 'images/tactics/Tactic00' + t + '.gif';
      case UTSquadMentalityEntity.STYLE.OFFENSIVE_WIDTH:
        return 'images/tactics/Tactic01' + (t - 1) + '.gif';
      case UTSquadMentalityEntity.STYLE.OFFENSIVE_PLAYERS_IN_BOX:
        return 'images/tactics/Tactic02' + (t - 1) + '.gif';
      case UTSquadMentalityEntity.STYLE.DEFENSIVE_STYLE:
        return 'images/tactics/Tactic10' + t + '.gif';
      case UTSquadMentalityEntity.STYLE.DEFENSIVE_WIDTH:
        return 'images/tactics/Tactic11' + (t - 1) + '.gif';
      case UTSquadMentalityEntity.STYLE.DEFENSIVE_DEPTH:
        return 'images/tactics/Tactic12' + (t - 1) + '.gif';
      case UTSquadMentalityEntity.STYLE.CORNER_PLAYERS_IN_BOX:
        return 'images/tactics/Tactic20' + (t - 1) + '.gif';
      case UTSquadMentalityEntity.STYLE.FREE_KICK_PLAYERS_IN_BOX:
        return 'images/tactics/Tactic21' + (t - 1) + '.gif';
    }
    return 'images/transparent.png';
  }),
  (UTTacticsStyleAdjustmentViewController.prototype._setStyleById = function _setStyleById(
    e
  ) {
    var t = this.getView(),
      i = this._tacticsViewModel.getSelectedMentality();
    switch (e) {
      case UTSquadMentalityEntity.STYLE.OFFENSIVE_STYLE:
        var s = i.getOffensiveStyle();
        t.setStyleOptionById(e, s),
          t.setDescriptionByStyleId(e, s),
          t.setStyleImage(this._generateImageURI(e, s));
        break;
      case UTSquadMentalityEntity.STYLE.DEFENSIVE_STYLE:
        var n = i.getDefensiveStyle();
        t.setStyleOptionById(e, n),
          t.setDescriptionByStyleId(e, n),
          t.setStyleImage(this._generateImageURI(e, n));
        break;
      case UTSquadMentalityEntity.STYLE.OFFENSIVE_WIDTH:
        var o = i.getOffensiveWidth();
        t.setStyleRange(
          UTSquadMentalityEntity.MIN_OFFENSIVE_WIDTH,
          UTSquadMentalityEntity.MAX_OFFENSIVE_WIDTH,
          1,
          o
        ),
          t.setDescriptionByStyleId(
            e,
            this._getDescriptionVariant(
              o,
              UTSquadMentalityEntity.MAX_OFFENSIVE_WIDTH
            )
          ),
          t.setStyleImage(this._generateImageURI(e, o));
        break;
      case UTSquadMentalityEntity.STYLE.OFFENSIVE_PLAYERS_IN_BOX:
        var a = i.getOffensivePlayersInBox();
        t.setStyleRange(
          UTSquadMentalityEntity.MIN_OFFENSIVE_PLAYERS_IN_BOX,
          UTSquadMentalityEntity.MAX_OFFENSIVE_PLAYERS_IN_BOX,
          1,
          a
        ),
          t.setDescriptionByStyleId(
            e,
            this._getDescriptionVariant(
              a,
              UTSquadMentalityEntity.MAX_OFFENSIVE_PLAYERS_IN_BOX
            )
          ),
          t.setStyleImage(this._generateImageURI(e, a));
        break;
      case UTSquadMentalityEntity.STYLE.CORNER_PLAYERS_IN_BOX:
        var r = i.getCornerPlayersInBox();
        t.setStyleRange(
          UTSquadMentalityEntity.MIN_CORNER_PLAYERS_IN_BOX,
          UTSquadMentalityEntity.MAX_CORNER_PLAYERS_IN_BOX,
          1,
          r
        ),
          t.setDescriptionByStyleId(
            e,
            this._getDescriptionVariant(
              r,
              UTSquadMentalityEntity.MAX_CORNER_PLAYERS_IN_BOX
            )
          ),
          t.setStyleImage(this._generateImageURI(e, r));
        break;
      case UTSquadMentalityEntity.STYLE.FREE_KICK_PLAYERS_IN_BOX:
        var l = i.getFreeKickPlayersInBox();
        t.setStyleRange(
          UTSquadMentalityEntity.MIN_FREEKICK_PLAYERS_IN_BOX,
          UTSquadMentalityEntity.MAX_FREEKICK_PLAYERS_IN_BOX,
          1,
          l
        ),
          t.setDescriptionByStyleId(
            e,
            this._getDescriptionVariant(
              l,
              UTSquadMentalityEntity.MAX_FREEKICK_PLAYERS_IN_BOX
            )
          ),
          t.setStyleImage(this._generateImageURI(e, l));
        break;
      case UTSquadMentalityEntity.STYLE.DEFENSIVE_WIDTH:
        var c = i.getDefensiveWidth();
        t.setStyleRange(
          UTSquadMentalityEntity.MIN_DEFENSIVE_WIDTH,
          UTSquadMentalityEntity.MAX_DEFENSIVE_WIDTH,
          1,
          c
        ),
          t.setDescriptionByStyleId(
            e,
            this._getDescriptionVariant(
              c,
              UTSquadMentalityEntity.MAX_DEFENSIVE_WIDTH
            )
          ),
          t.setStyleImage(this._generateImageURI(e, c));
        break;
      case UTSquadMentalityEntity.STYLE.DEFENSIVE_DEPTH:
        var u = i.getDefensiveDepth();
        t.setStyleRange(
          UTSquadMentalityEntity.MIN_DEFENSIVE_DEPTH,
          UTSquadMentalityEntity.MAX_DEFENSIVE_DEPTH,
          1,
          u
        ),
          t.setDescriptionByStyleId(
            e,
            this._getDescriptionVariant(
              u,
              UTSquadMentalityEntity.MAX_DEFENSIVE_DEPTH
            )
          ),
          t.setStyleImage(this._generateImageURI(e, u));
    }
  }),
  (UTTacticsStyleAdjustmentViewController.prototype._eStyleValueChanged = function _eStyleValueChanged(
    e,
    t,
    i
  ) {
    if (this._tacticsViewModel) {
      var s = this._tacticsViewModel.getSelectedMentality(),
        n = this._tacticsViewModel.getSelectedStyleId(),
        o = this.getView();
      switch (n) {
        case UTSquadMentalityEntity.STYLE.OFFENSIVE_STYLE:
          s.setOffensiveStyle(i.value), o.setDescriptionByStyleId(n, i.value);
          break;
        case UTSquadMentalityEntity.STYLE.DEFENSIVE_STYLE:
          s.setDefensiveStyle(i.value), o.setDescriptionByStyleId(n, i.value);
          break;
        case UTSquadMentalityEntity.STYLE.OFFENSIVE_WIDTH:
          s.setOffensiveWidth(i.value),
            o.setDescriptionByStyleId(
              n,
              this._getDescriptionVariant(
                i.value,
                UTSquadMentalityEntity.MAX_OFFENSIVE_WIDTH
              )
            );
          break;
        case UTSquadMentalityEntity.STYLE.OFFENSIVE_PLAYERS_IN_BOX:
          s.setOffensivePlayersInBox(i.value),
            o.setDescriptionByStyleId(
              n,
              this._getDescriptionVariant(
                i.value,
                UTSquadMentalityEntity.MAX_OFFENSIVE_PLAYERS_IN_BOX
              )
            );
          break;
        case UTSquadMentalityEntity.STYLE.CORNER_PLAYERS_IN_BOX:
          s.setCornerPlayersInBox(i.value),
            o.setDescriptionByStyleId(
              n,
              this._getDescriptionVariant(
                i.value,
                UTSquadMentalityEntity.MAX_CORNER_PLAYERS_IN_BOX
              )
            );
          break;
        case UTSquadMentalityEntity.STYLE.FREE_KICK_PLAYERS_IN_BOX:
          s.setFreeKickPlayersInBox(i.value),
            o.setDescriptionByStyleId(
              n,
              this._getDescriptionVariant(
                i.value,
                UTSquadMentalityEntity.MAX_FREEKICK_PLAYERS_IN_BOX
              )
            );
          break;
        case UTSquadMentalityEntity.STYLE.DEFENSIVE_WIDTH:
          s.setDefensiveWidth(i.value),
            o.setDescriptionByStyleId(
              n,
              this._getDescriptionVariant(
                i.value,
                UTSquadMentalityEntity.MAX_DEFENSIVE_WIDTH
              )
            );
          break;
        case UTSquadMentalityEntity.STYLE.DEFENSIVE_DEPTH:
          s.setDefensiveDepth(i.value),
            o.setDescriptionByStyleId(
              n,
              this._getDescriptionVariant(
                i.value,
                UTSquadMentalityEntity.MAX_DEFENSIVE_DEPTH
              )
            );
      }
      o.setStyleImage(this._generateImageURI(n, i.value));
    }
  }),
  utils.JS.inherits(UTTacticsStyleBarView, UTView),
  (UTTacticsStyleBarView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tactics-style-bar-view'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTacticsStyleBarView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTTacticsStyleBarView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTacticsStyleBarView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTacticsStyleBarView.prototype._clearSections = function _clearSections() {
    this._sections.forEach(function(e) {
      DOMKit.remove(e);
    }),
      (this._sections = []);
  }),
  (UTTacticsStyleBarView.prototype._generateSection = function _generateSection() {
    var e = document.createElement('div');
    DOMKit.addClass(e, 'ut-tactics-style-bar-view--section'),
      this._sections.push(e),
      this.getRootElement().appendChild(e);
  }),
  (UTTacticsStyleBarView.prototype.setSectionCount = function setSectionCount(
    e
  ) {
    this._clearSections();
    for (var t = 0; t < e; t++) this._generateSection();
  }),
  (UTTacticsStyleBarView.prototype.setNumFilledSections = function setNumFilledSections(
    i
  ) {
    this._sections.forEach(function(e, t) {
      DOMKit.toggleClass(e, 'filled', t < i);
    });
  }),
  utils.JS.inherits(UTTacticStyleTableCellView, UTTargetActionView),
  (UTTacticStyleTableCellView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tactic-style-table-cell-view'),
        (this.__label = document.createElement('span')),
        this.__label.classList.add('ut-tactic-style-table-cell-view--label'),
        e.appendChild(this.__label),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTacticStyleTableCellView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__label = null);
  }),
  (UTTacticStyleTableCellView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTacticStyleTableCellView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTacticStyleTableCellView.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTTacticStyleTableCellView.prototype.dealloc = function dealloc() {
    this._styleBar && (this._styleBar.dealloc(), (this._styleBar = null)),
      this._valueLabel &&
        (DOMKit.remove(this._valueLabel), (this._valueLabel = null)),
      this.superclass();
  }),
  (UTTacticStyleTableCellView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    var t = this._interactionState;
    this.superclass(e),
      this._interactionState !== t &&
        this.toggleClass(enums.UIState.DISABLED, !this._interactionState);
  }),
  (UTTacticStyleTableCellView.prototype.setId = function setId(e) {
    var t = utils.JS.isNumber(e);
    utils.Debug.Assert(t, 'Cell ID assignment expected a number.'),
      t && (this._id = e);
  }),
  (UTTacticStyleTableCellView.prototype.getId = function getId() {
    return this._id;
  }),
  (UTTacticStyleTableCellView.prototype.setLabelByStyleId = function setLabelByStyleId(
    e
  ) {
    this.__label.textContent = services.Localization.localize(
      'tactics.mentality.style.' + e
    );
  }),
  (UTTacticStyleTableCellView.prototype.setLevel = function setLevel(e, t) {
    this._styleBar ||
      ((this._styleBar = new UTTacticsStyleBarView()),
      this._styleBar.init(),
      this.addSubview(this._styleBar),
      this.layoutSubviews()),
      this._valueLabel &&
        (DOMKit.remove(this._valueLabel), (this._valueLabel = null)),
      this._styleBar.setSectionCount(t),
      this._styleBar.setNumFilledSections(e);
  }),
  (UTTacticStyleTableCellView.prototype.setStyleValue = function setStyleValue(
    e,
    t
  ) {
    if (!this._styleBar) {
      this._valueLabel ||
        ((this._valueLabel = document.createElement('p')),
        this.getRootElement().appendChild(this._valueLabel),
        DOMKit.addClass(this._valueLabel, 'textField'));
      var i =
        e === UTSquadMentalityEntity.STYLE.OFFENSIVE_STYLE
          ? 'offensive'
          : 'defensive';
      this._valueLabel.textContent = services.Localization.localize(
        'tactics.mentality.style.' + i + '.' + t
      );
    }
  }),
  (UTTacticStyleTableCellView.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIState.HOVER);
  }),
  (UTTacticStyleTableCellView.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass(enums.UIState.HOVER);
  }),
  (UTTacticStyleTableCellView.prototype._touchStarted = function _touchStarted(
    e
  ) {
    this.superclass(e), this.addClass(enums.UIState.ACTIVE);
  }),
  (UTTacticStyleTableCellView.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(e), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTTacticStyleTableCellView.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(e), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTTacticStyleTableCellView.prototype._tapDetected = function _tapDetected(
    e
  ) {
    this.superclass(e), this._triggerActions(enums.Event.TAP);
  }),
  utils.JS.inherits(UTTacticsStyleMenuView, UTTargetActionView),
  (UTTacticsStyleMenuView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tactics-style-menu-view');
      var t = document.createElement('header');
      t.classList.add('ut-tactics-style-menu-view--header'),
        (this.__titleDefense = document.createElement('h1')),
        this.__titleDefense.classList.add('ut-tactics-style-menu-view--title'),
        t.appendChild(this.__titleDefense),
        (this._btnSave = new UTStandardButtonControl()),
        this._btnSave.getRootElement().classList.add('mini'),
        this._btnSave.getRootElement().classList.add('call-to-action'),
        t.appendChild(this._btnSave.getRootElement()),
        e.appendChild(t),
        (this.__tableDefense = document.createElement('div')),
        this.__tableDefense.classList.add('ut-tactics-style-menu-view--table'),
        (this._defensiveStyle = new UTTacticStyleTableCellView()),
        this.__tableDefense.appendChild(this._defensiveStyle.getRootElement()),
        (this._defensiveWidth = new UTTacticStyleTableCellView()),
        this.__tableDefense.appendChild(this._defensiveWidth.getRootElement()),
        (this._defensiveDepth = new UTTacticStyleTableCellView()),
        this.__tableDefense.appendChild(this._defensiveDepth.getRootElement()),
        e.appendChild(this.__tableDefense);
      var i = document.createElement('header');
      i.classList.add('ut-tactics-style-menu-view--header'),
        (this.__titleOffense = document.createElement('h1')),
        this.__titleOffense.classList.add('ut-tactics-style-menu-view--title'),
        i.appendChild(this.__titleOffense),
        e.appendChild(i),
        (this.__tableOffense = document.createElement('div')),
        this.__tableOffense.classList.add('ut-tactics-style-menu-view--table'),
        (this._offensiveStyle = new UTTacticStyleTableCellView()),
        this.__tableOffense.appendChild(this._offensiveStyle.getRootElement()),
        (this._offensiveWidth = new UTTacticStyleTableCellView()),
        this.__tableOffense.appendChild(this._offensiveWidth.getRootElement()),
        (this._offensivePlayersInBox = new UTTacticStyleTableCellView()),
        this.__tableOffense.appendChild(
          this._offensivePlayersInBox.getRootElement()
        ),
        (this._offensiveCorners = new UTTacticStyleTableCellView()),
        this.__tableOffense.appendChild(
          this._offensiveCorners.getRootElement()
        ),
        (this._offensiveFreeKicks = new UTTacticStyleTableCellView()),
        this.__tableOffense.appendChild(
          this._offensiveFreeKicks.getRootElement()
        ),
        e.appendChild(this.__tableOffense),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTacticsStyleMenuView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__titleDefense = null),
      this._btnSave.destroy(),
      (this.__tableDefense = null),
      this._defensiveStyle.destroy(),
      this._defensiveWidth.destroy(),
      this._defensiveDepth.destroy(),
      (this.__titleOffense = null),
      (this.__tableOffense = null),
      this._offensiveStyle.destroy(),
      this._offensiveWidth.destroy(),
      this._offensivePlayersInBox.destroy(),
      this._offensiveCorners.destroy(),
      this._offensiveFreeKicks.destroy();
  }),
  (UTTacticsStyleMenuView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTacticsStyleMenuView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTacticsStyleMenuView.Event = {
    SAVE_MENTALITY: 'UTTacticsStyleMenuView.Event.SAVE_MENTALITY',
    SELECT_STYLE: 'UTTacticsStyleMenuView.Event.SELECT_STYLE'
  }),
  (UTTacticsStyleMenuView.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      this._btnSave.init(),
      this._btnSave.setText(
        services.Localization.localize('tactics.label.save')
      ),
      isPhone()
        ? this._btnSave.addTarget(
            this,
            this._eSaveButtonSelected,
            enums.Event.TAP
          )
        : this._btnSave.hide(),
      (this.__titleOffense.textContent = services.Localization.localize(
        'tactics.label.offense'
      )),
      (this.__titleDefense.textContent = services.Localization.localize(
        'tactics.label.defense'
      )),
      this._offensiveStyle.init(),
      this._offensiveStyle.setId(UTSquadMentalityEntity.STYLE.OFFENSIVE_STYLE),
      this._offensiveStyle.setLabelByStyleId(
        UTSquadMentalityEntity.STYLE.OFFENSIVE_STYLE
      ),
      this._offensiveStyle.addTarget(
        this,
        this._eCellSelected,
        enums.Event.TAP
      ),
      this._offensiveWidth.init(),
      this._offensiveWidth.setId(UTSquadMentalityEntity.STYLE.OFFENSIVE_WIDTH),
      this._offensiveWidth.setLabelByStyleId(
        UTSquadMentalityEntity.STYLE.OFFENSIVE_WIDTH
      ),
      this._offensiveWidth.addTarget(
        this,
        this._eCellSelected,
        enums.Event.TAP
      ),
      this._offensivePlayersInBox.init(),
      this._offensivePlayersInBox.setId(
        UTSquadMentalityEntity.STYLE.OFFENSIVE_PLAYERS_IN_BOX
      ),
      this._offensivePlayersInBox.setLabelByStyleId(
        UTSquadMentalityEntity.STYLE.OFFENSIVE_PLAYERS_IN_BOX
      ),
      this._offensivePlayersInBox.addTarget(
        this,
        this._eCellSelected,
        enums.Event.TAP
      ),
      this._offensiveCorners.init(),
      this._offensiveCorners.setId(
        UTSquadMentalityEntity.STYLE.CORNER_PLAYERS_IN_BOX
      ),
      this._offensiveCorners.setLabelByStyleId(
        UTSquadMentalityEntity.STYLE.CORNER_PLAYERS_IN_BOX
      ),
      this._offensiveCorners.addTarget(
        this,
        this._eCellSelected,
        enums.Event.TAP
      ),
      this._offensiveFreeKicks.init(),
      this._offensiveFreeKicks.setId(
        UTSquadMentalityEntity.STYLE.FREE_KICK_PLAYERS_IN_BOX
      ),
      this._offensiveFreeKicks.setLabelByStyleId(
        UTSquadMentalityEntity.STYLE.FREE_KICK_PLAYERS_IN_BOX
      ),
      this._offensiveFreeKicks.addTarget(
        this,
        this._eCellSelected,
        enums.Event.TAP
      ),
      this._defensiveStyle.init(),
      this._defensiveStyle.setId(UTSquadMentalityEntity.STYLE.DEFENSIVE_STYLE),
      this._defensiveStyle.setLabelByStyleId(
        UTSquadMentalityEntity.STYLE.DEFENSIVE_STYLE
      ),
      this._defensiveStyle.addTarget(
        this,
        this._eCellSelected,
        enums.Event.TAP
      ),
      this._defensiveWidth.init(),
      this._defensiveWidth.setId(UTSquadMentalityEntity.STYLE.DEFENSIVE_WIDTH),
      this._defensiveWidth.setLabelByStyleId(
        UTSquadMentalityEntity.STYLE.DEFENSIVE_WIDTH
      ),
      this._defensiveWidth.addTarget(
        this,
        this._eCellSelected,
        enums.Event.TAP
      ),
      this._defensiveDepth.init(),
      this._defensiveDepth.setId(UTSquadMentalityEntity.STYLE.DEFENSIVE_DEPTH),
      this._defensiveDepth.setLabelByStyleId(
        UTSquadMentalityEntity.STYLE.DEFENSIVE_DEPTH
      ),
      this._defensiveDepth.addTarget(
        this,
        this._eCellSelected,
        enums.Event.TAP
      );
  }),
  (UTTacticsStyleMenuView.prototype.setSaveButtonInteractionState = function setSaveButtonInteractionState(
    e
  ) {
    this._btnSave.setInteractionState(e);
  }),
  (UTTacticsStyleMenuView.prototype.setOffensiveStyle = function setOffensiveStyle(
    e
  ) {
    this._offensiveStyle.setStyleValue(
      UTSquadMentalityEntity.STYLE.OFFENSIVE_STYLE,
      e
    );
  }),
  (UTTacticsStyleMenuView.prototype.setOffensiveWidth = function setOffensiveWidth(
    e,
    t
  ) {
    this._offensiveWidth.setLevel(e, t);
  }),
  (UTTacticsStyleMenuView.prototype.setOffensivePlayersInBox = function setOffensivePlayersInBox(
    e,
    t
  ) {
    this._offensivePlayersInBox.setLevel(e, t);
  }),
  (UTTacticsStyleMenuView.prototype.setOffensiveCorners = function setOffensiveCorners(
    e,
    t
  ) {
    this._offensiveCorners.setLevel(e, t);
  }),
  (UTTacticsStyleMenuView.prototype.setOffensiveFreeKicks = function setOffensiveFreeKicks(
    e,
    t
  ) {
    this._offensiveFreeKicks.setLevel(e, t);
  }),
  (UTTacticsStyleMenuView.prototype.setDefensiveStyle = function setDefensiveStyle(
    e
  ) {
    this._defensiveStyle.setStyleValue(
      UTSquadMentalityEntity.STYLE.DEFENSIVE_STYLE,
      e
    );
  }),
  (UTTacticsStyleMenuView.prototype.setDefensiveWidth = function setDefensiveWidth(
    e,
    t
  ) {
    this._defensiveWidth.setLevel(e, t);
  }),
  (UTTacticsStyleMenuView.prototype.setDefensiveDepth = function setDefensiveDepth(
    e,
    t
  ) {
    this._defensiveDepth.setLevel(e, t);
  }),
  (UTTacticsStyleMenuView.prototype._eSaveButtonSelected = function _eSaveButtonSelected(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTTacticsStyleMenuView.Event.SAVE_MENTALITY);
  }),
  (UTTacticsStyleMenuView.prototype._eCellSelected = function _eCellSelected(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTTacticsStyleMenuView.Event.SELECT_STYLE, {
        id: e.getId()
      });
  }),
  utils.JS.inherits(UTTacticsStyleMenuViewController, UTViewController),
  (UTTacticsStyleMenuViewController.prototype.initWithTacticsViewModel = function initWithTacticsViewModel(
    e
  ) {
    if (!this.initialized) {
      var t = e instanceof UTSquadTacticsViewModel;
      utils.Debug.Assert(
        t,
        'View controller initialization expected a tactics view model.'
      ),
        t && (this._tacticsViewModel = e),
        this.init();
    }
  }),
  (UTTacticsStyleMenuViewController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._tacticsViewModel = null);
  }),
  (UTTacticsStyleMenuViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTacticsStyleMenuView();
  }),
  (UTTacticsStyleMenuViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('tactics.label.styles');
  }),
  (UTTacticsStyleMenuViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getNavigationController();
    e &&
      (e.setNavigationVisibility(!0, !1),
      isPhone() || e.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY)),
      this._tacticsViewModel &&
        (this._setDisplayedMentality(
          this._tacticsViewModel.getSelectedMentality()
        ),
        this._tacticsViewModel.onDataUpdated.observe(
          this,
          this._eTacticsViewModelUpdated
        ));
    var t = this.getView();
    t.addTarget(
      this,
      this._eStyleSelected,
      UTTacticsStyleMenuView.Event.SELECT_STYLE
    ),
      t.addTarget(
        this,
        this._eSaveMentality,
        UTTacticsStyleMenuView.Event.SAVE_MENTALITY
      );
  }),
  (UTTacticsStyleMenuViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      this._tacticsViewModel &&
        this._tacticsViewModel.onDataUpdated.unobserve(this);
    var e = this.getView();
    e.removeTarget(
      this,
      this._eStyleSelected,
      UTTacticsStyleMenuView.Event.SELECT_STYLE
    ),
      e.removeTarget(
        this,
        this._eSaveMentality,
        UTTacticsStyleMenuView.Event.SAVE_MENTALITY
      );
  }),
  (UTTacticsStyleMenuViewController.prototype._setDisplayedMentality = function _setDisplayedMentality(
    e
  ) {
    var t = this.getView();
    t.setOffensiveStyle(e.getOffensiveStyle()),
      t.setOffensiveWidth(
        e.getOffensiveWidth(),
        UTSquadMentalityEntity.MAX_OFFENSIVE_WIDTH
      ),
      t.setOffensivePlayersInBox(
        e.getOffensivePlayersInBox(),
        UTSquadMentalityEntity.MAX_OFFENSIVE_PLAYERS_IN_BOX
      ),
      t.setOffensiveCorners(
        e.getCornerPlayersInBox(),
        UTSquadMentalityEntity.MAX_CORNER_PLAYERS_IN_BOX
      ),
      t.setOffensiveFreeKicks(
        e.getFreeKickPlayersInBox(),
        UTSquadMentalityEntity.MAX_FREEKICK_PLAYERS_IN_BOX
      ),
      t.setDefensiveStyle(e.getDefensiveStyle()),
      t.setDefensiveWidth(
        e.getDefensiveWidth(),
        UTSquadMentalityEntity.MAX_DEFENSIVE_WIDTH
      ),
      t.setDefensiveDepth(
        e.getDefensiveDepth(),
        UTSquadMentalityEntity.MAX_DEFENSIVE_DEPTH
      ),
      t.setSaveButtonInteractionState(
        this._tacticsViewModel.getSquad().hasModifiedTactics()
      );
  }),
  (UTTacticsStyleMenuViewController.prototype._eStyleSelected = function _eStyleSelected(
    e,
    t,
    i
  ) {
    if (
      (utils.Debug.Assert(
        utils.JS.isValid(this._tacticsViewModel),
        'Missing tactics view model. Unable to load tactic.'
      ),
      this._tacticsViewModel)
    ) {
      var s = this.getNavigationController();
      if (
        (utils.JS.isNumber(i.id) &&
          this._tacticsViewModel.setSelectedStyleId(i.id),
        s)
      ) {
        var n = new UTTacticsStyleAdjustmentViewController();
        n.initWithTacticsViewModel(this._tacticsViewModel),
          s.pushViewController(n);
      }
    }
  }),
  (UTTacticsStyleMenuViewController.prototype._eSaveMentality = function _eSaveMentality(
    e,
    t,
    i
  ) {
    utils.Debug.Assert(
      utils.JS.isValid(this._tacticsViewModel),
      'Missing tactics view model. Unable to save mentality.'
    ),
      this._tacticsViewModel &&
        this._tacticsViewModel
          .saveModifiedMentalities()
          .observe(this, function _onSaveMentalitiesComplete(e, t) {
            e.unobserve(this),
              this.getView().setSaveButtonInteractionState(!t.success);
          });
  }),
  (UTTacticsStyleMenuViewController.prototype._eTacticsViewModelUpdated = function _eTacticsViewModelUpdated(
    e,
    t
  ) {
    utils.JS.isObject(t) &&
      t.selectedMentality &&
      this._setDisplayedMentality(t.selectedMentality);
  }),
  utils.JS.inherits(UTTacticsMentalityMenuView, UTTargetActionView),
  (UTTacticsMentalityMenuView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tactics-mentality-menu-view');
      var t = document.createElement('header');
      t.classList.add('ut-tactics-mentality-menu-view--header'),
        (this.__title = document.createElement('h1')),
        this.__title.classList.add('ut-tactics-mentality-menu-view--title'),
        t.appendChild(this.__title),
        (this._btnSave = new UTStandardButtonControl()),
        this._btnSave.getRootElement().classList.add('mini'),
        this._btnSave.getRootElement().classList.add('call-to-action'),
        t.appendChild(this._btnSave.getRootElement()),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('ut-tactics-mentality-menu-view--details'),
        (this.__titleDefensiveStyle = document.createElement('h2')),
        this.__titleDefensiveStyle.classList.add('title'),
        i.appendChild(this.__titleDefensiveStyle),
        (this.__valueDefensiveStyle = document.createElement('p')),
        this.__valueDefensiveStyle.classList.add('value'),
        i.appendChild(this.__valueDefensiveStyle),
        (this.__titleOffensiveStyle = document.createElement('h2')),
        this.__titleOffensiveStyle.classList.add('title'),
        i.appendChild(this.__titleOffensiveStyle),
        (this.__valueOffensiveStyle = document.createElement('p')),
        this.__valueOffensiveStyle.classList.add('value'),
        i.appendChild(this.__valueOffensiveStyle),
        (this.__titleFormation = document.createElement('h2')),
        this.__titleFormation.classList.add('title'),
        i.appendChild(this.__titleFormation),
        (this.__valueFormation = document.createElement('p')),
        this.__valueFormation.classList.add('value'),
        i.appendChild(this.__valueFormation),
        (this._btnChangeMentality = new UTStandardButtonControl()),
        this._btnChangeMentality.getRootElement().classList.add('mini'),
        this._btnChangeMentality
          .getRootElement()
          .classList.add('call-to-action'),
        i.appendChild(this._btnChangeMentality.getRootElement()),
        e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('ut-button-group'),
        (this._btnStyles = new UTGroupButtonControl()),
        this._btnStyles.getRootElement().classList.add('more'),
        s.appendChild(this._btnStyles.getRootElement()),
        (this._btnInstructions = new UTGroupButtonControl()),
        this._btnInstructions.getRootElement().classList.add('more'),
        s.appendChild(this._btnInstructions.getRootElement()),
        (this._btnFormation = new UTGroupButtonControl()),
        this._btnFormation.getRootElement().classList.add('more'),
        s.appendChild(this._btnFormation.getRootElement()),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTacticsMentalityMenuView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      this._btnSave.destroy(),
      (this.__titleDefensiveStyle = null),
      (this.__valueDefensiveStyle = null),
      (this.__titleOffensiveStyle = null),
      (this.__valueOffensiveStyle = null),
      (this.__titleFormation = null),
      (this.__valueFormation = null),
      this._btnChangeMentality.destroy(),
      this._btnStyles.destroy(),
      this._btnInstructions.destroy(),
      this._btnFormation.destroy();
  }),
  (UTTacticsMentalityMenuView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTacticsMentalityMenuView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTacticsMentalityMenuView.Event = {
    CHANGE_MENTALITY: 'UTTacticsMentalityMenuView.Event.CHANGE_MENTALITY',
    SAVE_MENTALITY: 'UTTacticsMentalityMenuView.Event.SAVE_MENTALITY',
    SELECT_FORMATION: 'UTTacticsMentalityMenuView.Event.SELECT_FORMATION',
    SELECT_INSTRUCTIONS: 'UTTacticsMentalityMenuView.Event.SELECT_INSTRUCTIONS',
    SELECT_STYLES: 'UTTacticsMentalityMenuView.Event.SELECT_STYLES'
  }),
  (UTTacticsMentalityMenuView.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      this._btnSave.init(),
      this._btnSave.setText(
        services.Localization.localize('tactics.label.save')
      ),
      this._btnSave.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._btnChangeMentality.init(),
      this._btnChangeMentality.setText(
        services.Localization.localize('tactics.label.changementality')
      ),
      this._btnChangeMentality.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._btnStyles.init(),
      this._btnStyles.setText(
        services.Localization.localize('tactics.label.styles')
      ),
      this._btnStyles.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      isPhone() || this._btnStyles.addClass(enums.UIState.SELECTED),
      this._btnInstructions.init(),
      this._btnInstructions.setText(
        services.Localization.localize('tactics.label.instructions')
      ),
      this._btnInstructions.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._btnFormation.init(),
      this._btnFormation.setText(
        services.Localization.localize('tactics.label.formation')
      ),
      this._btnFormation.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      (this.__titleOffensiveStyle.textContent = services.Localization.localize(
        'tactics.label.offensivestyle'
      )),
      (this.__titleDefensiveStyle.textContent = services.Localization.localize(
        'tactics.label.defensivestyle'
      )),
      (this.__titleFormation.textContent = services.Localization.localize(
        'squads.formation'
      ));
  }),
  (UTTacticsMentalityMenuView.prototype.setMentalityNameById = function setMentalityNameById(
    e
  ) {
    this.__title.textContent = services.Localization.localize(
      'tactics.mentality.type.' + e
    );
  }),
  (UTTacticsMentalityMenuView.prototype.setOffensiveStyleById = function setOffensiveStyleById(
    e
  ) {
    this.__valueOffensiveStyle.textContent = services.Localization.localize(
      'tactics.mentality.style.offensive.' + e
    );
  }),
  (UTTacticsMentalityMenuView.prototype.setDefensiveStyleById = function setDefensiveStyleById(
    e
  ) {
    this.__valueDefensiveStyle.textContent = services.Localization.localize(
      'tactics.mentality.style.defensive.' + e
    );
  }),
  (UTTacticsMentalityMenuView.prototype.setFormationName = function setFormationName(
    e
  ) {
    this.__valueFormation.textContent = e;
  }),
  (UTTacticsMentalityMenuView.prototype.setSaveButtonInteractionState = function setSaveButtonInteractionState(
    e
  ) {
    this._btnSave.setInteractionState(e);
  }),
  (UTTacticsMentalityMenuView.prototype.resetSelectedButtonState = function resetSelectedButtonState() {
    isPhone() ||
      (this._btnStyles.addClass(enums.UIState.SELECTED),
      this._btnInstructions.removeClass(enums.UIState.SELECTED),
      this._btnFormation.removeClass(enums.UIState.SELECTED));
  }),
  (UTTacticsMentalityMenuView.prototype._eButtonSelected = function _eButtonSelected(
    e,
    t,
    i
  ) {
    var s;
    this.isInteractionEnabled() &&
      (e === this._btnChangeMentality
        ? (s = UTTacticsMentalityMenuView.Event.CHANGE_MENTALITY)
        : e === this._btnSave
        ? (s = UTTacticsMentalityMenuView.Event.SAVE_MENTALITY)
        : e === this._btnStyles
        ? ((s = UTTacticsMentalityMenuView.Event.SELECT_STYLES),
          isPhone() ||
            (this._btnStyles.addClass(enums.UIState.SELECTED),
            this._btnInstructions.removeClass(enums.UIState.SELECTED),
            this._btnFormation.removeClass(enums.UIState.SELECTED)))
        : e === this._btnInstructions
        ? ((s = UTTacticsMentalityMenuView.Event.SELECT_INSTRUCTIONS),
          isPhone() ||
            (this._btnStyles.removeClass(enums.UIState.SELECTED),
            this._btnInstructions.addClass(enums.UIState.SELECTED),
            this._btnFormation.removeClass(enums.UIState.SELECTED)))
        : e === this._btnFormation &&
          ((s = UTTacticsMentalityMenuView.Event.SELECT_FORMATION),
          isPhone() ||
            (this._btnStyles.removeClass(enums.UIState.SELECTED),
            this._btnInstructions.removeClass(enums.UIState.SELECTED),
            this._btnFormation.addClass(enums.UIState.SELECTED))),
      this._triggerActions(s));
  }),
  utils.JS.inherits(UTTacticsMentalityMenuViewController, UTViewController),
  (UTTacticsMentalityMenuViewController.prototype.initWithTacticsViewModel = function initWithTacticsViewModel(
    e
  ) {
    if (!this.initialized) {
      var t = e instanceof UTSquadTacticsViewModel;
      utils.Debug.Assert(
        t,
        'View controller initialization expected a tactics view model.'
      ),
        t && (this._tacticsViewModel = e),
        this.init();
    }
  }),
  (UTTacticsMentalityMenuViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._mentalitySelectViewController &&
        (this._mentalitySelectViewController.dealloc(),
        (this._mentalitySelectViewController = null)),
      this._menuDelegate && (this._menuDelegate = null);
  }),
  (UTTacticsMentalityMenuViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTacticsMentalityMenuView();
  }),
  (UTTacticsMentalityMenuViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    var e = this._tacticsViewModel ? this._tacticsViewModel.getSquad() : null;
    return e ? e.getName() : '';
  }),
  (UTTacticsMentalityMenuViewController.prototype.viewDidAppear = function viewDidAppear() {
    if ((this.superclass(), this._tacticsViewModel)) {
      var e = this.getView();
      this._setDisplayedMentality(
        this._tacticsViewModel.getSelectedMentality()
      ),
        e.addTarget(
          this,
          this._eChangeMentality,
          UTTacticsMentalityMenuView.Event.CHANGE_MENTALITY
        ),
        e.addTarget(
          this,
          this._eSaveMentality,
          UTTacticsMentalityMenuView.Event.SAVE_MENTALITY
        ),
        e.addTarget(
          this,
          this._eSelectMenuOption,
          UTTacticsMentalityMenuView.Event.SELECT_FORMATION
        ),
        e.addTarget(
          this,
          this._eSelectMenuOption,
          UTTacticsMentalityMenuView.Event.SELECT_INSTRUCTIONS
        ),
        e.addTarget(
          this,
          this._eSelectMenuOption,
          UTTacticsMentalityMenuView.Event.SELECT_STYLES
        ),
        this._tacticsViewModel.onDataUpdated.observe(
          this,
          this._eTacticsViewModelUpdated
        );
    }
  }),
  (UTTacticsMentalityMenuViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    var e = this.getView();
    e.removeTarget(
      this,
      this._eChangeMentality,
      UTTacticsMentalityMenuView.Event.CHANGE_MENTALITY
    ),
      e.removeTarget(
        this,
        this._eSaveMentality,
        UTTacticsMentalityMenuView.Event.SAVE_MENTALITY
      ),
      e.removeTarget(
        this,
        this._eSelectMenuOption,
        UTTacticsMentalityMenuView.Event.SELECT_FORMATION
      ),
      e.removeTarget(
        this,
        this._eSelectMenuOption,
        UTTacticsMentalityMenuView.Event.SELECT_INSTRUCTIONS
      ),
      e.removeTarget(
        this,
        this._eSelectMenuOption,
        UTTacticsMentalityMenuView.Event.SELECT_STYLES
      ),
      this._tacticsViewModel &&
        this._tacticsViewModel.onDataUpdated.unobserve(this);
  }),
  (UTTacticsMentalityMenuViewController.prototype.setMentalityMenuDelegate = function setMentalityMenuDelegate(
    e
  ) {
    e.conforms(interfaces.TacticsMentalityMenuDelegate) &&
      (this._menuDelegate = e);
  }),
  (UTTacticsMentalityMenuViewController.prototype._setDisplayedMentality = function _setDisplayedMentality(
    e
  ) {
    var t = this.getView();
    t.setMentalityNameById(e.getId()),
      t.setOffensiveStyleById(e.getOffensiveStyle()),
      t.setDefensiveStyleById(e.getDefensiveStyle()),
      t.setFormationName(e.getFormation().getDisplayName()),
      t.setSaveButtonInteractionState(
        this._tacticsViewModel.getSquad().hasModifiedTactics()
      );
  }),
  (UTTacticsMentalityMenuViewController.prototype._loadStyleMenu = function _loadStyleMenu() {
    if (
      (utils.Debug.Assert(
        utils.JS.isValid(this._tacticsViewModel),
        'Missing tactics view model. Unable to load tactic styles.'
      ),
      this._tacticsViewModel)
    )
      if (this._menuDelegate) this._menuDelegate.showStylesMenu();
      else {
        var e = this.getNavigationController();
        if (e) {
          var t = new UTTacticsStyleMenuViewController();
          t.initWithTacticsViewModel(this._tacticsViewModel),
            e.pushViewController(t);
        }
      }
  }),
  (UTTacticsMentalityMenuViewController.prototype._loadInstructionsSelection = function _loadInstructionsSelection() {
    if (
      (utils.Debug.Assert(
        utils.JS.isValid(this._tacticsViewModel),
        'Missing tactics view model. Unable to load tactic styles.'
      ),
      this._tacticsViewModel)
    )
      if (this._menuDelegate) this._menuDelegate.showInstructionsSelection();
      else {
        var e = this.getNavigationController();
        if (e) {
          var t = new UTTacticsInstructionSlotSelectViewController();
          t.initWithTacticsViewModel(this._tacticsViewModel),
            e.pushViewController(t);
        }
      }
  }),
  (UTTacticsMentalityMenuViewController.prototype._loadFormationSelection = function _loadFormationSelection() {
    if (
      (utils.Debug.Assert(
        utils.JS.isValid(this._tacticsViewModel),
        'Missing tactics view model. Unable to load tactic styles.'
      ),
      this._tacticsViewModel)
    )
      if (this._menuDelegate) this._menuDelegate.showFormationSelection();
      else {
        var e = this.getNavigationController();
        if (e) {
          var t = new UTTacticsFormationSelectViewController();
          t.initWithTacticsViewModel(this._tacticsViewModel),
            e.pushViewController(t);
        }
      }
  }),
  (UTTacticsMentalityMenuViewController.prototype._eChangeMentality = function _eChangeMentality(
    e,
    t,
    i
  ) {
    utils.Debug.Assert(
      utils.JS.isValid(this._tacticsViewModel),
      'Missing tactics view model. Unable to load mentality selection view.'
    ),
      this._tacticsViewModel &&
        ((this._mentalitySelectViewController = new UTTacticsMentalitySelectViewController()),
        this._mentalitySelectViewController.initWithTacticsViewModel(
          this._tacticsViewModel
        ),
        (this._mentalitySelectViewController.modalDisplayStyle =
          enums.UIModalDisplayStyles.FORM),
        this.presentViewController(this._mentalitySelectViewController, !0));
  }),
  (UTTacticsMentalityMenuViewController.prototype._eSaveMentality = function _eSaveMentality(
    e,
    t,
    i
  ) {
    utils.Debug.Assert(
      utils.JS.isValid(this._tacticsViewModel),
      'Missing tactics view model. Unable to save mentality.'
    ),
      this._tacticsViewModel &&
        this._tacticsViewModel
          .saveModifiedMentalities()
          .observe(this, function _onSaveMentalitiesComplete(e, t) {
            e.unobserve(this),
              this.getView().setSaveButtonInteractionState(!t.success);
          });
  }),
  (UTTacticsMentalityMenuViewController.prototype._eSelectMenuOption = function _eSelectMenuOption(
    e,
    t,
    i
  ) {
    t === UTTacticsMentalityMenuView.Event.SELECT_STYLES
      ? this._loadStyleMenu()
      : t === UTTacticsMentalityMenuView.Event.SELECT_INSTRUCTIONS
      ? this._loadInstructionsSelection()
      : t === UTTacticsMentalityMenuView.Event.SELECT_FORMATION &&
        this._loadFormationSelection();
  }),
  (UTTacticsMentalityMenuViewController.prototype._eTacticsViewModelUpdated = function _eTacticsViewModelUpdated(
    e,
    t
  ) {
    if (utils.JS.isObject(t)) {
      var i = this.getView();
      t.selectedMentality &&
        (this._setDisplayedMentality(t.selectedMentality),
        i.resetSelectedButtonState()),
        t.tactics &&
          t.tactics.mentality &&
          (i.setSaveButtonInteractionState(
            this._tacticsViewModel.getSquad().hasModifiedTactics()
          ),
          i.setOffensiveStyleById(t.tactics.mentality.getOffensiveStyle()),
          i.setDefensiveStyleById(t.tactics.mentality.getDefensiveStyle()),
          i.setFormationName(
            t.tactics.mentality.getFormation().getDisplayName()
          ));
    }
  }),
  utils.JS.inherits(UTTacticsStyleNavigationController, UTNavigationController),
  (UTTacticsStyleNavigationController.prototype.init = function init() {
    if (!this.initialized) {
      var e = this.getRootController();
      this._tacticsViewModel
        ? e.initWithTacticsViewModel(this._tacticsViewModel)
        : e.init(),
        this.superclass();
    }
  }),
  (UTTacticsStyleNavigationController.prototype.initWithTacticsViewModel = function initWithTacticsViewModel(
    e
  ) {
    if (!this.initialized) {
      var t = e instanceof UTSquadTacticsViewModel;
      utils.Debug.Assert(
        t,
        'View controller initialization expected a tactics view model.'
      ),
        t && (this._tacticsViewModel = e),
        this.init();
    }
  }),
  (UTTacticsStyleNavigationController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._tacticsViewModel = null);
  }),
  (UTTacticsStyleNavigationController.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new UTTacticsStyleMenuViewController();
  }),
  utils.JS.inherits(UTTacticsSplitViewController, UTSplitViewController),
  (UTTacticsSplitViewController.prototype.init = function init() {
    this.initialized ||
      (this.setLayout(UTSplitViewController.Layout.SIDEBAR_LEFT),
      this.superclass(),
      this._tacticsViewModel
        ? (this._mentalityMenuController.initWithTacticsViewModel(
            this._tacticsViewModel
          ),
          this._styleNavigationController.initWithTacticsViewModel(
            this._tacticsViewModel
          ))
        : (this._mentalityMenuController.init(),
          this._styleNavigationController.init()),
      this._mentalityMenuController.setMentalityMenuDelegate(this));
  }),
  (UTTacticsSplitViewController.prototype.initWithTacticsViewModel = function initWithTacticsViewModel(
    e
  ) {
    if (!this.initialized) {
      var t = e instanceof UTSquadTacticsViewModel;
      utils.Debug.Assert(
        t,
        'View controller initialization expected a tactics view model.'
      ),
        t && (this._tacticsViewModel = e),
        this.init();
    }
  }),
  (UTTacticsSplitViewController.prototype.dealloc = function dealloc() {
    this._mentalityMenuController &&
      (this._mentalityMenuController.dealloc(),
      (this._mentalityMenuController = null)),
      this._styleNavigationController &&
        (this._styleNavigationController.dealloc(),
        (this._styleNavigationController = null)),
      this._instructionsNavigationController &&
        (this._instructionsNavigationController.dealloc(),
        (this._instructionsNavigationController = null)),
      this._formationNavigationController &&
        (this._formationNavigationController.dealloc(),
        (this._formationNavigationController = null)),
      (this._tacticsViewModel = null),
      this.superclass();
  }),
  (UTTacticsSplitViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._mentalityMenuController.getNavigationTitle();
  }),
  (UTTacticsSplitViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._setLeftController(this._mentalityMenuController),
      this._setRightController(this._styleNavigationController),
      this._tacticsViewModel &&
        this._tacticsViewModel.onDataUpdated.observe(
          this,
          this._eTacticsViewModelUpdated
        );
  }),
  (UTTacticsSplitViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      this._tacticsViewModel &&
        this._tacticsViewModel.onDataUpdated.unobserve(this);
  }),
  (UTTacticsSplitViewController.prototype.showStylesMenu = function showStylesMenu() {
    this._setRightController(this._styleNavigationController),
      this._styleNavigationController.popToRootViewController();
  }),
  (UTTacticsSplitViewController.prototype.showInstructionsSelection = function showInstructionsSelection() {
    if (!this._instructionsNavigationController) {
      var e = new UTTacticsInstructionSlotSelectViewController();
      e.initWithTacticsViewModel(this._tacticsViewModel),
        (this._instructionsNavigationController = new UTNavigationController()),
        this._instructionsNavigationController.initWithRootController(e);
    }
    this._setRightController(this._instructionsNavigationController),
      this._instructionsNavigationController.popToRootViewController();
  }),
  (UTTacticsSplitViewController.prototype.showFormationSelection = function showFormationSelection() {
    if (!this._formationNavigationController) {
      var e = new UTTacticsFormationSelectViewController();
      e.initWithTacticsViewModel(this._tacticsViewModel),
        (this._formationNavigationController = new UTNavigationController()),
        this._formationNavigationController.initWithRootController(e);
    }
    this._setRightController(this._formationNavigationController),
      this._formationNavigationController.popToRootViewController();
  }),
  (UTTacticsSplitViewController.prototype._eTacticsViewModelUpdated = function _eTacticsViewModelUpdated(
    e,
    t
  ) {
    utils.JS.isObject(t) && t.selectedMentality && this.showStylesMenu();
  }),
  NamespaceManager.Register('views.popups'),
  (views.popups.NameSquad = function NameSquadPopupView() {
    UTView.call(this),
      (this.onTextChange = new UTObservable()),
      Object.defineProperty(this, 'onTextChange', {
        writable: !1
      }),
      (this.onConfirm = new UTObservable()),
      Object.defineProperty(this, 'onConfirm', {
        writable: !1
      }),
      (this.onCancel = new UTObservable()),
      Object.defineProperty(this, 'onCancel', {
        writable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.popups.NameSquad, UTView),
  (views.popups.NameSquad.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-popup'), e.classList.add('ut-name-squad');
      var t = document.createElement('header');
      (this.__titleText = document.createElement('h1')),
        t.appendChild(this.__titleText),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('bodySection'),
        (this._squadNameInput = new UTTextInputControl()),
        this._squadNameInput.getRootElement().classList.add('round'),
        i.appendChild(this._squadNameInput.getRootElement()),
        (this.__hint = document.createElement('span')),
        this.__hint.classList.add('ut-name-squad--hint'),
        i.appendChild(this.__hint),
        e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('ut-button-group'),
        (this._confirmBtn = new UTGroupButtonControl()),
        s.appendChild(this._confirmBtn.getRootElement()),
        (this._cancelBtn = new UTGroupButtonControl()),
        s.appendChild(this._cancelBtn.getRootElement()),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.popups.NameSquad.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__titleText = null),
      this._squadNameInput.destroy(),
      (this.__hint = null),
      this._confirmBtn.destroy(),
      this._cancelBtn.destroy();
  }),
  (views.popups.NameSquad.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.popups.NameSquad.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.popups.NameSquad.prototype.init = function init() {
    this._cancelBtn.init(),
      this._cancelBtn.setText(
        services.Localization.localize('common.dialog.cancel')
      ),
      this._cancelBtn.setInteractionState(!0),
      this._confirmBtn.init(),
      this._confirmBtn.setInteractionState(!1),
      this._confirmBtn.addTarget(
        this,
        this.onConfirm.notify.bind(this.onConfirm),
        enums.Event.TAP
      ),
      this._cancelBtn.addTarget(
        this,
        this.onCancel.notify.bind(this.onCancel),
        enums.Event.TAP
      ),
      this._squadNameInput.init(),
      this._squadNameInput.addTarget(
        this,
        this._handleInputEvents,
        enums.Event.INPUT
      ),
      this._squadNameInput.setMaxLength(15);
  }),
  (views.popups.NameSquad.prototype.dealloc = function dealloc() {
    this.onTextChange.dealloc(),
      this.onCancel.dealloc(),
      this.onConfirm.dealloc(),
      this.superclass();
  }),
  (views.popups.NameSquad.prototype.focus = function focus() {
    this._squadNameInput.focus();
  }),
  (views.popups.NameSquad.prototype.render = function render(e, t) {
    (this.__titleText.textContent = e),
      this._confirmBtn.setText(t),
      (this.__hint.textContent = services.Localization.localize(
        'renamesquad.hint',
        [15]
      ));
  }),
  (views.popups.NameSquad.prototype.getSquadText = function getSquadText() {
    return this._squadNameInput.getValue();
  }),
  (views.popups.NameSquad.prototype.setSquadText = function setSquadText(e) {
    this._squadNameInput.setValue(e),
      this.onTextChange.notify(this._squadNameInput.getValue());
  }),
  (views.popups.NameSquad.prototype.setConfirmButtonEnabled = function setConfirmButtonEnabled(
    e
  ) {
    this._confirmBtn.setInteractionState(e);
  }),
  (views.popups.NameSquad.prototype.onBackButton = function onBackButton() {
    return !0;
  }),
  (views.popups.NameSquad.prototype._handleInputEvents = function _handleInputEvents(
    e,
    t,
    i
  ) {
    this.onTextChange.notify(i.value);
  }),
  NamespaceManager.Register('controllers.views.popups'),
  (controllers.views.popups.NameSquad = function NameSquad(e, t, i) {
    controllers.views.popups.BasePopup.call(this),
      (this._title = utils.JS.isValid(t)
        ? t
        : services.Localization.localize('manage.squadlist.createsquad')),
      (this._buttonTxt = utils.JS.isValid(i)
        ? i
        : services.Localization.localize('infopanel.button.create')),
      (this._defaultName = e),
      Object.defineProperty(this, '_defaultName', {
        writable: !1
      }),
      (this.onConfirm = new UTObservable()),
      Object.defineProperty(this, 'onConfirm', {
        writable: !1
      });
  }),
  utils.JS.inherits(
    controllers.views.popups.NameSquad,
    controllers.views.popups.BasePopup
  ),
  (controllers.views.popups.NameSquad.prototype.init = function init() {
    this.superclass();
    var e = this.getView();
    e.onConfirm.observe(this, this._eConfirm),
      e.onCancel.observe(this, this._eCancel),
      e.onTextChange.observe(this, this.updateConfirmButtonStatus),
      e.render(this._title, this._buttonTxt),
      e.setSquadText(this._defaultName);
  }),
  (controllers.views.popups.NameSquad.prototype.dealloc = function dealloc() {
    this.onConfirm.dealloc(), this.superclass();
  }),
  (controllers.views.popups.NameSquad.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this.getView().focus();
  }),
  (controllers.views.popups.NameSquad.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.NameSquad();
  }),
  (controllers.views.popups.NameSquad.prototype._confirmName = function _confirmName() {
    var i = this.getView(),
      s = utils.TextUtils.cleanString(i.getSquadText());
    s.length < 3 ||
      (i.setInteractionState(!1),
      services.Squad.requestSquadList().observe(this, function(e, t) {
        e.unobserve(this),
          utils.TextUtils.squadNameExists(s, t.data.squads)
            ? (isWeb() && this.onExit.notify(enums.UIDialogOptions.CANCEL),
              utils.PopupManager.ShowAlert(
                utils.PopupManager.Alerts.DUPLICATE_SQUAD_NAME
              ),
              i.setInteractionState(!0))
            : (this.onConfirm.notify(s),
              this.onExit.notify(enums.UIDialogOptions.OK));
      }));
  }),
  (controllers.views.popups.NameSquad.prototype._eConfirm = function _eConfirm(
    e
  ) {
    this._confirmName();
  }),
  (controllers.views.popups.NameSquad.prototype._eCancel = function _eCancel(
    e
  ) {
    this.onExit.notify(enums.UIDialogOptions.CANCEL);
  }),
  (controllers.views.popups.NameSquad.prototype.updateConfirmButtonStatus = function updateConfirmButtonStatus(
    e,
    t
  ) {
    var i,
      s = utils.TextUtils.restrictSpecialCharacters(t);
    s !== t && this.getView().setSquadText(s),
      (i = utils.TextUtils.isValidNameSquad(t)),
      this.getView().setConfirmButtonEnabled(i);
  }),
  (controllers.views.popups.NameSquad.prototype.handleKeyUpEvent = function handleKeyUpEvent(
    e
  ) {
    e.key === enums.KeyboardKey.ESCAPE || e.key === enums.KeyboardKey.MS_ESCAPE
      ? this.onExit.notify(enums.UIDialogOptions.CANCEL)
      : e.key === enums.KeyboardKey.ENTER && this._confirmName();
  }),
  NamespaceManager.Register('views.popups'),
  (views.popups.SquadLinkCopy = function SquadLinkCopy() {
    UTView.call(this);
  }),
  utils.JS.inherits(views.popups.SquadLinkCopy, UTView),
  (views.popups.SquadLinkCopy.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('squad-link-copy');
      var t = document.createElement('header');
      (this.__title = document.createElement('h1')),
        t.appendChild(this.__title),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('squad-link-body'),
        (this.__msg = document.createElement('p')),
        i.appendChild(this.__msg);
      var s = document.createElement('div');
      s.classList.add('input-group'),
        (this._url = new UTTextInputControl()),
        this._url.getRootElement().classList.add('round'),
        this._url.getRootElement().classList.add('form-control'),
        s.appendChild(this._url.getRootElement()),
        (this._copyBtn = new UTStandardButtonControl()),
        this._copyBtn.getRootElement().classList.add('fut_icon'),
        this._copyBtn.getRootElement().classList.add('round'),
        this._copyBtn.getRootElement().classList.add('input-group-btn'),
        this._copyBtn.getRootElement().classList.add('call-to-action'),
        s.appendChild(this._copyBtn.getRootElement()),
        i.appendChild(s),
        e.appendChild(i);
      var n = document.createElement('div');
      n.classList.add('ut-button-group'),
        (this._closeBtn = new UTGroupButtonControl()),
        n.appendChild(this._closeBtn.getRootElement()),
        e.appendChild(n),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.popups.SquadLinkCopy.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      (this.__msg = null),
      this._url.destroy(),
      this._copyBtn.destroy(),
      this._closeBtn.destroy();
  }),
  (views.popups.SquadLinkCopy.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.popups.SquadLinkCopy.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.popups.SquadLinkCopy.prototype.init = function init() {
    this._closeBtn.init(), this._copyBtn.init();
  }),
  (views.popups.SquadLinkCopy.prototype.render = function render(e) {
    this._url.init(),
      this._url.setValue(e),
      (this.__title.textContent = services.Localization.localize(
        'popups.copylink.title'
      )),
      (this.__msg.textContent = services.Localization.localize(
        'popups.copylink.msg'
      )),
      this._closeBtn.setText(
        services.Localization.localize('infopanel.label.close')
      ),
      this._closeBtn.addClass('hitboxPadding'),
      this._copyBtn.addClass('icon_link');
  }),
  (views.popups.SquadLinkCopy.prototype.getCloseBtn = function getCloseBtn() {
    return this._closeBtn;
  }),
  (views.popups.SquadLinkCopy.prototype.getCopyBtn = function getCopyBtn() {
    return this._copyBtn;
  }),
  (views.popups.SquadLinkCopy.prototype.getUrlInput = function getUrlInput() {
    return this._url;
  }),
  NamespaceManager.Register('controllers.views.popups'),
  (controllers.views.popups.SquadLinkCopy = function SquadLinkCopy(e) {
    controllers.views.popups.BasePopup.call(this), (this._url = e);
  }),
  utils.JS.inherits(
    controllers.views.popups.SquadLinkCopy,
    controllers.views.popups.BasePopup
  ),
  (controllers.views.popups.SquadLinkCopy.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    e.getCloseBtn().addTarget(this, this._eCloseTap, enums.Event.TAP),
      e.getCopyBtn().addTarget(this, this._eCopyTap, enums.Event.TAP),
      e
        .getUrlInput()
        .addTarget(this, this._handleInputEvents, enums.Event.INPUT),
      e.render(this._url);
  }),
  (controllers.views.popups.SquadLinkCopy.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass();
    var e = this.getView();
    e.getCloseBtn().removeTarget(this, this._eCloseTap, enums.Event.TAP),
      e.getCopyBtn().removeTarget(this, this._eCopyTap, enums.Event.TAP),
      e
        .getUrlInput()
        .removeTarget(this, this._handleInputEvents, enums.Event.INPUT);
  }),
  (controllers.views.popups.SquadLinkCopy.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.SquadLinkCopy();
  }),
  (controllers.views.popups.SquadLinkCopy.prototype._gotoLink = function _gotoLink() {
    services.URL.process(this._url), this.onExit.notify();
  }),
  (controllers.views.popups.SquadLinkCopy.prototype._copyToClipboard = function _copyToClipboard() {
    if (
      document.queryCommandSupported &&
      document.queryCommandSupported('copy')
    ) {
      var e = document.createElement('textarea');
      if (
        ((e.textContent = this._url),
        (e.style.position = 'fixed'),
        document.body.appendChild(e),
        navigator.userAgent.match(/ipad|ipod|iphone/i))
      ) {
        var t = e.contentEditable,
          i = e.readOnly,
          s = document.createRange();
        (e.contentEditable = !0), (e.readOnly = !1), s.selectNodeContents(e);
        var n = window.getSelection();
        n.removeAllRanges(),
          n.addRange(s),
          e.setSelectionRange(0, 9999),
          (e.contentEditable = t),
          (e.readOnly = i);
      } else e.select();
      try {
        document.execCommand('copy'),
          services.Notification.queue([
            services.Localization.localize('notification.linkcopy.success'),
            enums.UINotificationType.POSITIVE
          ]);
      } catch (e) {
        services.Notification.queue([
          services.Localization.localize('notification.linkcopy.fail'),
          enums.UINotificationType.NEGATIVE
        ]);
      } finally {
        document.body.removeChild(e);
      }
    }
  }),
  (controllers.views.popups.SquadLinkCopy.prototype.handleKeyUpEvent = function handleKeyUpEvent(
    e
  ) {
    (e.key !== enums.KeyboardKey.ESCAPE &&
      e.key !== enums.KeyboardKey.MS_ESCAPE &&
      e.key !== enums.KeyboardKey.ENTER) ||
      this.onExit.notify();
  }),
  (controllers.views.popups.SquadLinkCopy.prototype._eCloseTap = function _eCloseTap(
    e,
    t
  ) {
    this.onExit.notify();
  }),
  (controllers.views.popups.SquadLinkCopy.prototype._handleInputEvents = function _handleInputEvents(
    e,
    t,
    i
  ) {
    i.value !== this._url && e.setValue(this._url);
  }),
  (controllers.views.popups.SquadLinkCopy.prototype._eCopyTap = function _eCopyTap(
    e,
    t
  ) {
    this._copyToClipboard();
  }),
  utils.JS.inherits(UTSquadActionsViewController, UTViewController),
  (UTSquadActionsViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      e.addTarget(
        this,
        this._onMakeActive,
        UTSquadActionsView.Event.MAKE_SQUAD_ACTIVE
      ),
        e.addTarget(this, this._onOpen, UTSquadActionsView.Event.OPEN_SQUAD),
        e.addTarget(this, this._onShare, UTSquadActionsView.Event.SHARE_SQUAD),
        e.addTarget(
          this,
          this._onRename,
          UTSquadActionsView.Event.RENAME_SQUAD
        ),
        e.addTarget(
          this,
          this._onCopy,
          UTSquadActionsView.Event.DUPLICATE_SQUAD
        ),
        e.addTarget(this, this._onClear, UTSquadActionsView.Event.CLEAR_SQUAD),
        e.addTarget(
          this,
          this._onDelete,
          UTSquadActionsView.Event.DELETE_SQUAD
        ),
        e.addTarget(
          this,
          this._onSquadBuilder,
          UTSquadActionsView.Event.SELECT_SQUAD_BUILDER
        ),
        e.addTarget(
          this,
          this._eTacticsSelected,
          UTSquadActionsView.Event.SELECT_TACTICS
        );
    }
  }),
  (UTSquadActionsViewController.prototype.initWithSquad = function initWithSquad(
    e
  ) {
    this.initialized || ((this._squad = e), this.init());
  }),
  (UTSquadActionsViewController.prototype.dealloc = function dealloc() {
    this.onDataChange.dealloc(),
      (this.onDataChange = null),
      (this._squad = null),
      this.superclass();
  }),
  (UTSquadActionsViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSquadActionsView();
  }),
  (UTSquadActionsViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Squad Details';
  }),
  (UTSquadActionsViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._squad
      ? this._squad.getName()
      : services.Localization.localize('squads.detail.title');
  }),
  (UTSquadActionsViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    e.setFormations(this._formations),
      e.setupCarousel(this._inSquadContext && !isPhone()),
      this._setViewButtonStates(),
      this._checkSquadListFull(),
      this._squad &&
        (this._inSquadContext || isPhone()) &&
        this.setSquad(this._squad);
    var t = this._getFormationDPIndex();
    e.setCurrentFormation(t),
      e.getFormationDropdown().setIndex(t),
      e.handleFormationCarousel(),
      e.addTarget(
        this,
        this._onFormationChange,
        UTSquadActionsView.Event.FORMATION_CHANGE
      );
  }),
  (UTSquadActionsViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass();
    var e = this.getView();
    e.destroyCarousel(),
      e.removeTarget(
        this,
        this._onFormationChange,
        UTSquadActionsView.Event.FORMATION_CHANGE
      ),
      this._squad &&
        (this._squad.onDataUpdated.unobserve(this),
        this._squad.isModified() &&
          this._squad.save().observe(this, this._handleSquadSave));
  }),
  (UTSquadActionsViewController.prototype.setSquadContext = function setSquadContext(
    e
  ) {
    this._inSquadContext = e;
  }),
  (UTSquadActionsViewController.prototype.setSquad = function setSquad(e) {
    var t = this.getView();
    if (
      (t.setInteractionState(!1),
      !this._squad || this._squad.getId() !== e.getId())
    ) {
      this._squad &&
        (this._squad.onDataUpdated.unobserve(this),
        this._squad.isModified() &&
          this._squad.save().observe(this, this._handleSquadSave)),
        (this._squad = e),
        this._squad.onDataUpdated.observe(this, this._eSquadUpdate),
        this._setViewButtonStates(),
        this._checkSquadListFull();
      var i = this._getFormationDPIndex();
      t.setCurrentFormation(i), t.getFormationDropdown().setIndex(i);
    }
    t.setInteractionState(!0);
  }),
  (UTSquadActionsViewController.prototype._setViewButtonStates = function _setViewButtonStates() {
    var e = this.getView(),
      t = utils.JS.isValid(this._squad),
      i = t && this._squad.getId() === services.Squad.getActiveSquadId();
    e.displayMakeActiveButton(t),
      e.displayDeleteButton(!i && !this._inSquadContext),
      e.displayRenameButton(t),
      e.displayCopyButton(t),
      e.displayShareButton(t),
      e.displaySquadBuilderButton(t && this._inSquadContext),
      e.displayClearButton(t && this._inSquadContext),
      e.displayOpenButton(t && !this._inSquadContext),
      e.displayTacticsButton(t && !this._squad.isDream()),
      e.toggleMakeActiveState(i),
      e.toggleClearState(t && !this._squad.isSquadEmpty());
  }),
  (UTSquadActionsViewController.prototype._getFormationDPIndex = function _getFormationDPIndex() {
    if (this._squad)
      for (
        var e = this._squad.getFormation().getName(),
          t = this._formations.length;
        0 < t--;

      )
        if (this._formations[t].value === e) return t;
    return 0;
  }),
  (UTSquadActionsViewController.prototype._checkSquadListFull = function _checkSquadListFull() {
    services.Squad.requestSquadList().observe(this, function(e, t) {
      e.unobserve(this),
        t.success &&
          this.isViewDisplayed() &&
          this.getView().toggleCopyState(t.data.listFull);
    });
  }),
  (UTSquadActionsViewController.prototype._onMakeActive = function _onMakeActive() {
    function _onActiveSquadSet(e, t) {
      e.unobserve(this),
        t.success
          ? (this.onDataChange.notify(),
            this._setViewButtonStates(),
            services.Notification.queue([
              services.Localization.localize('notification.squad.setActive'),
              enums.UINotificationType.NEUTRAL
            ]))
          : NetworkErrorManager.handleStatus(t.status);
    }
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.SQUADS,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Squads - Set Active'
    ),
      this._squad.isModified()
        ? this._squad.save().observe(this, function(e, t) {
            e.unobserve(this),
              t.success
                ? services.Squad.setActiveSquad(this._squad.getId()).observe(
                    this,
                    _onActiveSquadSet
                  )
                : services.Notification.queue([
                    services.Localization.localize(
                      'popup.error.activesquad.SaveFailed'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]);
          })
        : services.Squad.setActiveSquad(this._squad.getId()).observe(
            this,
            _onActiveSquadSet
          );
  }),
  (UTSquadActionsViewController.prototype._onSquadBuilder = function _onSquadBuilder() {
    var e = new UTSquadBuilderViewController();
    this._squad ? e.initWithSquad(this._squad) : e.init(),
      this.getNavigationController().pushViewController(e),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.SQUADS,
        'Squad Builder'
      );
  }),
  (UTSquadActionsViewController.prototype._onShare = function _onShare() {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Squad.addShowOff(this._squad.getId()).observe(this, function(
        e,
        t
      ) {
        if (
          (e.unobserve(this),
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING),
          t.success)
        ) {
          utils.Debug.Assert(
            utils.JS.isObject(t.data),
            'Expected a data object associated with the API response.'
          );
          var i = new controllers.views.popups.SquadLinkCopy(t.data.url);
          gPopupClickShield.setActivePopup(i);
        } else NetworkErrorManager.handleStatus(t.status);
      });
  }),
  (UTSquadActionsViewController.prototype._onRename = function _onRename() {
    var e = new controllers.views.popups.NameSquad(
      this._squad.getName(),
      services.Localization.localize('renamesquad.title', [
        this._squad.getName()
      ]),
      services.Localization.localize('common.dialog.ok')
    );
    e.onConfirm.observe(this, function _onRenameConfirm(e, t) {
      e.unobserve(this),
        services.Squad.rename(this._squad.getId(), t).observe(
          this,
          this._onSquadRenamed
        );
    }),
      gPopupClickShield.setActivePopup(e);
  }),
  (UTSquadActionsViewController.prototype._onSquadRenamed = function _onSquadRenamed(
    e,
    t
  ) {
    if ((e.unobserve(this), t.success)) {
      this._squad.setName(t.data.squad.getName(), []);
      var i = this.getNavigationController();
      i && i.setNavigationTitle(this._squad.getName()),
        services.Notification.queue([
          services.Localization.localize('notification.squad.renamed'),
          enums.UINotificationType.NEUTRAL
        ]);
    } else {
      var s;
      switch (t.status) {
        case enums.HTTPStatusCode.NAME_EXISTS:
          s = 'popup.error.duplicateSquadName';
          break;
        case enums.HTTPStatusCode.PROFANITY:
          s = 'popup.error.profanity';
          break;
        default:
          s = 'popup.body.genericError';
      }
      services.Notification.queue([
        services.Localization.localize(s),
        enums.UINotificationType.NEGATIVE
      ]);
    }
  }),
  (UTSquadActionsViewController.prototype._onCopy = function _onCopy() {
    function _onCopySquadConfirm(e, t) {
      e.unobserve(this),
        services.Squad.copy(this._squad.getId(), t).observe(
          this,
          this._onSquadCreated
        );
    }
    TelemetryManager.trackPage(
      TelemetryManager.Sections.SQUADS,
      'Squad List - Copy Squad'
    ),
      services.Squad.requestSquadList().observe(this, function(e, t) {
        e.unobserve(this);
        var i = new controllers.views.popups.NameSquad(
          utils.TextUtils.createSquadNameCopy(
            this._squad.getName(),
            t.data.squads
          )
        );
        i.onConfirm.observe(this, _onCopySquadConfirm),
          gPopupClickShield.setActivePopup(i);
      });
  }),
  (UTSquadActionsViewController.prototype._onSquadCreated = function _onSquadCreated(
    e,
    t
  ) {
    if ((e.unobserve(this), t.success))
      this._checkSquadListFull(),
        services.Notification.queue([
          services.Localization.localize('notification.squad.copied'),
          enums.UINotificationType.NEUTRAL
        ]);
    else if (NetworkErrorManager.checkCriticalStatus(t.status))
      NetworkErrorManager.handle(
        NetworkErrorManager.generateDefaultStatusMessage(t.status),
        !1
      );
    else {
      var i;
      switch (t.status) {
        case enums.HTTPStatusCode.NAME_EXISTS:
          i = 'popup.error.duplicateSquadName';
          break;
        case enums.HTTPStatusCode.PERMISSION_DENIED:
          i = 'popup.error.squadsFull';
          break;
        case enums.HTTPStatusCode.PROFANITY:
          i = 'popup.error.profanity';
          break;
        default:
          i = 'popup.body.genericError';
      }
      services.Notification.queue([
        services.Localization.localize(i),
        enums.UINotificationType.NEGATIVE
      ]);
    }
  }),
  (UTSquadActionsViewController.prototype._onClear = function _onClear() {
    utils.PopupManager.ShowConfirmation(
      utils.PopupManager.Confirmations.CLEAR_SQUAD,
      null,
      function _onClearConfirm() {
        this._squad.removeAllItems() &&
          this._squad.save().observe(this, function(e, t) {
            e.unobserve(this),
              t.success
                ? (this.getView().toggleClearState(!1),
                  services.Notification.queue([
                    services.Localization.localize(
                      'notification.squad.cleared'
                    ),
                    enums.UINotificationType.NEUTRAL
                  ]))
                : services.Notification.queue([
                    services.Localization.localize(
                      'popup.error.activesquad.SaveFailed'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]);
          });
      }.bind(this)
    );
  }),
  (UTSquadActionsViewController.prototype._onDelete = function _onDelete() {
    function _completeSquadDelete(e, t) {
      if ((e.unobserve(this), t.success)) {
        if (
          (services.Notification.queue([
            services.Localization.localize('notification.squad.deleted'),
            enums.UINotificationType.NEUTRAL
          ]),
          isPhone())
        ) {
          var i = this.getNavigationController();
          i && i.popViewController(!0);
        }
      } else NetworkErrorManager.handleStatus(t.status);
    }
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.SQUADS,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Squads - Delete Squad'
    ),
      this._squad.getId() === services.Squad.getActiveSquadId()
        ? utils.PopupManager.ShowAlert(
            utils.PopupManager.Alerts.CANNOT_DELETE_SQUAD
          )
        : utils.PopupManager.ShowConfirmation(
            utils.PopupManager.Confirmations.DELETE_SQUAD,
            [this._squad.getName()],
            function _confirmSquadDelete() {
              services.Squad.remove(this._squad.getId()).observe(
                this,
                _completeSquadDelete
              );
            }.bind(this),
            function() {}
          );
  }),
  (UTSquadActionsViewController.prototype._onOpen = function _onOpen() {
    var i = this.getView();

    function _openSquad() {
      var e = this.getNavigationController();
      if (e) {
        var t = isPhone()
          ? new UTSquadOverviewViewController()
          : new UTSquadSplitViewController();
        t.initWithSquad(this._squad), e.pushViewController(t);
      }
    }
    this._squad &&
      (this._squad.isSquadLoaded()
        ? _openSquad.call(this)
        : (i.setInteractionState(!1),
          services.Squad.requestSquadById(this._squad.getId()).observe(
            this,
            function(e, t) {
              e.unobserve(this),
                t.success && (this._squad = t.data.squad),
                i.setInteractionState(!0),
                _openSquad.call(this);
            }
          )));
  }),
  (UTSquadActionsViewController.prototype._onFormationChange = function _onFormationChange(
    e,
    t,
    i
  ) {
    var s = this.getView();

    function triggerFormationChange() {
      this._squad.setFormation(
        repositories.Squad.getFormation(this._formations[i.index].value)
      ),
        this._inSquadContext || this.onDataChange.notify();
    }
    this._inSquadContext || this._squad.isSquadLoaded()
      ? triggerFormationChange.call(this)
      : (s.setInteractionState(!1),
        services.Squad.requestSquadById(this._squad.getId()).observe(
          this,
          function(e, t) {
            e.unobserve(this),
              t.success &&
                (this.setSquad(t.data.squad),
                triggerFormationChange.call(this),
                s.toggleClearState(!this._squad.isSquadEmpty())),
              s.setInteractionState(!0);
          }
        ));
  }),
  (UTSquadActionsViewController.prototype._eTacticsSelected = function _eTacticsSelected(
    e,
    t,
    i
  ) {
    function _openTactics() {
      var e = isPhone()
          ? new UTTacticsMentalityMenuViewController()
          : new UTTacticsSplitViewController(),
        t = new UTSquadTacticsViewModel(services.Squad);
      t.setSquad(this._squad),
        e.initWithTacticsViewModel(t),
        this.getRootNavigationController().pushViewController(e),
        gUserSettingsModel.getSessionItem(
          models.UserSettingsModel.SAVE_TACTICS_MESSAGE_DISPLAYED
        ) ||
          (utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.SAVE_TACTICS),
          gUserSettingsModel.setSessionItem(
            models.UserSettingsModel.SAVE_TACTICS_MESSAGE_DISPLAYED,
            'true'
          ));
    }
    if (this._squad)
      if (this._squad.isSquadLoaded()) _openTactics.call(this);
      else {
        var s = this.getView();
        s.setInteractionState(!1),
          services.Squad.requestSquadById(this._squad.getId()).observe(
            this,
            function(e, t) {
              e.unobserve(this),
                t.success && (this._squad = t.data.squad),
                s.setInteractionState(!0),
                _openTactics.call(this);
            }
          );
      }
  }),
  (UTSquadActionsViewController.prototype._eSquadUpdate = function _eSquadUpdate(
    e,
    t
  ) {
    var i = this.getView();

    function _updateState() {
      t.slots &&
        this.isViewDisplayed() &&
        i.toggleClearState(this._squad && !this._squad.isSquadEmpty());
    }
    t &&
      (this._inSquadContext
        ? (_updateState.call(this),
          i.setCurrentFormation(this._getFormationDPIndex()))
        : ((t.chemistry && t.chemistry !== this._squad.getChemistry()) ||
            (t.rating && t.rating !== this._squad.getRating()) ||
            (t.type && t.type !== this._squad.getType()) ||
            (t.formation &&
              t.formation.getId() !== this._squad.getFormation().getId()) ||
            (t.name && t.name !== this._squad.getName())) &&
          (_updateState.call(this), this.onDataChange.notify()));
  }),
  (UTSquadActionsViewController.prototype._handleSquadSave = function _handleSquadSave(
    e,
    t
  ) {
    e.unobserve(this),
      t.success ||
        services.Notification.queue([
          services.Localization.localize('popup.error.activesquad.SaveFailed'),
          enums.UINotificationType.NEGATIVE
        ]);
  }),
  NamespaceManager.Register('interfaces'),
  (interfaces.SquadViewDelegate = function ISquadViewDelegate() {}),
  (interfaces.SquadViewDelegate.prototype.updateSlot = function updateSlot(
    e
  ) {}),
  (interfaces.SquadViewDelegate.prototype.selectSlot = function selectSlot(
    e
  ) {}),
  utils.JS.inherits(UTSquadSlotDockView, UTView),
  (UTSquadSlotDockView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squad-slot-dock-view'),
        (this.__content = document.createElement('div')),
        this.__content.classList.add('content-container'),
        (this.__slotContainer = document.createElement('div')),
        this.__slotContainer.classList.add(
          'ut-squad-slot-dock-view--slot-container'
        ),
        this.__content.appendChild(this.__slotContainer),
        e.appendChild(this.__content),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadSlotDockView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__content = null),
      (this.__slotContainer = null);
  }),
  (UTSquadSlotDockView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadSlotDockView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadSlotDockView.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      (this.allowLegacyPropagation = !0);
  }),
  (UTSquadSlotDockView.prototype.dealloc = function dealloc() {
    this._clearSlotViews(),
      (this._onOpenCallback = null),
      (this._onCloseCallback = null),
      this.superclass();
  }),
  (UTSquadSlotDockView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    (e = !!e), this.isInteractionEnabled() !== e && this.superclass(e);
  }),
  (UTSquadSlotDockView.prototype._clearSlotViews = function _clearSlotViews() {
    this._slots.forEach(function(e) {
      e.dealloc();
    }),
      (this._slots = []);
  }),
  (UTSquadSlotDockView.prototype.getSlotViews = function getSlotViews() {
    return this._slots;
  }),
  (UTSquadSlotDockView.prototype.setSlots = function setSlots(e, i) {
    this._clearSlotViews(),
      e.forEach(function(e) {
        if (!(e.getIndex() < 0)) {
          var t = new UTSquadSlotView();
          t.init(),
            t.render(e, i, !1),
            this.addSubview(t, this.__slotContainer),
            this._slots.push(t);
        }
      }, this),
      this.layoutSubviews();
  }),
  (UTSquadSlotDockView.prototype.updateSlot = function updateSlot(t, e) {
    var i = utils.JS.find(this._slots, function(e) {
      return e.getIndex() === t.getIndex();
    });
    i && i.render(t, e);
  }),
  (UTSquadSlotDockView.prototype.updateChemistry = function updateChemistry(i) {
    this._slots.forEach(function _updateSlotChemistry(t) {
      var e = utils.JS.find(i, function(e) {
        return e.getIndex() === t.getIndex();
      });
      e &&
        t
          .getItemView()
          .renderChemistry(e.getItem(), e.getChemistry(), e.getManagerBonus());
    }, this);
  }),
  (UTSquadSlotDockView.prototype.setInstructions = function setInstructions(e) {
    this.__instructions ||
      ((this.__instructions = document.createElement('p')),
      DOMKit.addClass(this.__instructions, 'dock-instructions'),
      this.__content.appendChild(this.__instructions)),
      (this.__instructions.innerHTML = e);
  }),
  (UTSquadSlotDockView.prototype._setViewState = function _setViewState(e, t) {
    (this.isAnimating = !0),
      requestAnimationFrame(
        function() {
          (this.getRootElement().style.bottom = e
            ? this.__content.clientHeight + 'px'
            : ''),
            this.getRoot().on(
              enums.Event.TRANSITIONEND,
              function() {
                this.getRoot().off(enums.Event.TRANSITIONEND),
                  (this.isVisible = e),
                  (this.isAnimating = !1),
                  utils.JS.isFunction(t) && t();
              }.bind(this)
            );
        }.bind(this)
      );
  }),
  (UTSquadSlotDockView.prototype.setIsSBC = function setIsSBC(e) {
    this.toggleClass('sbc', e);
  }),
  (UTSquadSlotDockView.prototype.getContentHeight = function getContentHeight() {
    return this.__content.clientHeight;
  }),
  (UTSquadSlotDockView.prototype.open = function open(e) {
    this.isAnimating || this._setViewState(!0, e);
  }),
  (UTSquadSlotDockView.prototype.close = function close(e) {
    this.isAnimating || this._setViewState(!1, e);
  }),
  (UTSquadSlotDockView.prototype.toggle = function toggle() {
    this.isAnimating || (this.isVisible ? this.close() : this.open());
  }),
  utils.JS.inherits(UTSquadTabButtonControl, UTButtonControl),
  (UTSquadTabButtonControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      e.classList.add('ut-squad-tab-button-control');
      var t = document.createElement('div');
      t.classList.add('icon'),
        e.appendChild(t),
        (this.__text = document.createElement('span')),
        e.appendChild(this.__text),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadTabButtonControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__text = null);
  }),
  (UTSquadTabButtonControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadTabButtonControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadTabButtonControl.prototype.setText = function setText(e) {
    this.__text.textContent = e;
  }),
  (UTSquadTabButtonControl.prototype.assignLeft = function assignLeft() {
    this.removeClass('right'), this.addClass('left');
  }),
  (UTSquadTabButtonControl.prototype.setArrowDirection = function setArrowDirection(
    e
  ) {
    var t = [
      enums.UIDirection.RIGHT,
      enums.UIDirection.LEFT,
      enums.UIDirection.UP,
      enums.UIDirection.DOWN
    ].join(' ');
    this.removeClass(t), this.addClass(e);
  }),
  (UTSquadTabButtonControl.prototype.setType = function setType(e) {
    var t = [
      enums.UISquadTabTypes.WORK_AREA,
      enums.UISquadTabTypes.DOCK_TAB,
      enums.UISquadTabTypes.DEFAULT
    ].join(' ');
    this.removeClass(t), this.addClass(e);
  }),
  (UTSquadTabButtonControl.prototype.assignRight = function assignRight() {
    this.removeClass('left'), this.addClass('right');
  }),
  utils.JS.inherits(UTSquadChemistryBarView, UTView),
  (UTSquadChemistryBarView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('progress-bar-container'),
        (this._progressBar = new UTProgressBarView()),
        this._progressBar.getRootElement().classList.add('rounded'),
        this._progressBar.getRootElement().classList.add('chemistryRatingBars'),
        e.appendChild(this._progressBar.getRootElement()),
        (this.__chemistryValue = document.createElement('span')),
        this.__chemistryValue.classList.add('ut-squad-summary-value'),
        e.appendChild(this.__chemistryValue),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadChemistryBarView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._progressBar.destroy(),
      (this.__chemistryValue = null);
  }),
  (UTSquadChemistryBarView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadChemistryBarView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadChemistryBarView.prototype.init = function init() {
    this.superclass(),
      this._progressBar.init(),
      (this.__chemistryValue.textContent = '0');
  }),
  (UTSquadChemistryBarView.prototype.setChemistry = function setChemistry(
    e,
    t
  ) {
    this._value !== e &&
      ((this._value = e),
      (this.__chemistryValue.textContent = e.toString()),
      this._progressBar.setProgress(e));
  }),
  (UTSquadChemistryBarView.prototype.updateChemistry = function updateChemistry(
    e
  ) {
    this.setChemistry(e, !0);
  }),
  utils.JS.inherits(UTStarRatingView, UTView),
  (UTStarRatingView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-star-rating'),
        (this.__fill = document.createElement('div')),
        this.__fill.classList.add('ut-star-rating--fill'),
        e.appendChild(this.__fill),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTStarRatingView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__fill = null);
  }),
  (UTStarRatingView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTStarRatingView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTStarRatingView.prototype.setRatingPercent = function setRatingPercent(e) {
    utils.JS.isNumber(e) && (this.__fill.style.width = e + '%');
  }),
  utils.JS.inherits(UTSquadStarRatingView, UTView),
  (UTSquadStarRatingView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      (this._ratingStars = new UTStarRatingView()),
        e.appendChild(this._ratingStars.getRootElement()),
        (this.__ratingValue = document.createElement('span')),
        this.__ratingValue.classList.add('ratingValue'),
        e.appendChild(this.__ratingValue),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadStarRatingView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._ratingStars.destroy(),
      (this.__ratingValue = null);
  }),
  (UTSquadStarRatingView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadStarRatingView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadStarRatingView.prototype.init = function init() {
    this.superclass(),
      (this.__ratingValue.textContent = this._value.toString());
  }),
  (UTSquadStarRatingView.prototype._calculateFillWidthFromRating = function _calculateFillWidthFromRating(
    e
  ) {
    return e > enums.TeamStarRanges.RATING_4_5
      ? 100
      : e > enums.TeamStarRanges.RATING_4_0
      ? 90
      : e > enums.TeamStarRanges.RATING_3_5
      ? 80
      : e > enums.TeamStarRanges.RATING_3_0
      ? 70
      : e > enums.TeamStarRanges.RATING_2_5
      ? 60
      : e > enums.TeamStarRanges.RATING_2_0
      ? 50
      : e > enums.TeamStarRanges.RATING_1_5
      ? 40
      : e > enums.TeamStarRanges.RATING_1_0
      ? 30
      : e > enums.TeamStarRanges.RATING_0_5
      ? 20
      : e > enums.TeamStarRanges.RATING_0_0
      ? 10
      : 0;
  }),
  (UTSquadStarRatingView.prototype._setRating = function _setRating(e) {
    (this._value = e),
      (this.__ratingValue.textContent = e.toString()),
      this._ratingStars.setRatingPercent(this._calculateFillWidthFromRating(e));
  }),
  (UTSquadStarRatingView.prototype.setRating = function setRating(e, t) {
    e !== this._value && this._setRating(e);
  }),
  NamespaceManager.Register('components'),
  (components.SquadStats = function() {
    this._generate();
  }),
  (components.SquadStats.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squad-summary-info--right'),
        e.classList.add('ut-squad-summary-info');
      var t = document.createElement('div');
      t.classList.add('rating'),
        (this.__labelRating = document.createElement('span')),
        this.__labelRating.classList.add('ut-squad-summary-label'),
        t.appendChild(this.__labelRating),
        (this._ratingStars = new UTSquadStarRatingView()),
        t.appendChild(this._ratingStars.getRootElement()),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('chemistry'),
        (this.__labelChemistry = document.createElement('span')),
        this.__labelChemistry.classList.add('ut-squad-summary-label'),
        i.appendChild(this.__labelChemistry),
        (this._chemistryBar = new UTSquadChemistryBarView()),
        i.appendChild(this._chemistryBar.getRootElement()),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.SquadStats.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__labelRating = null),
      this._ratingStars.destroy(),
      (this.__labelChemistry = null),
      this._chemistryBar.destroy();
  }),
  (components.SquadStats.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.SquadStats.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.SquadStats.prototype.init = function init() {
    (this.__labelChemistry.textContent = services.Localization.localize(
      'squads.chemistry'
    )),
      (this.__labelRating.textContent = services.Localization.localize(
        'squads.rating'
      )),
      this._ratingStars.init(),
      this._chemistryBar.init();
  }),
  (components.SquadStats.prototype.destroy = function destroy() {
    this.destroyGeneratedElements();
  }),
  (components.SquadStats.prototype.set = function set(e, t) {
    this._chemistryBar.setChemistry(e), this._ratingStars.setRating(t);
  }),
  (components.SquadStats.prototype.setChemistry = function setChemistry(e, t) {
    t
      ? this._chemistryBar.updateChemistry(e)
      : this._chemistryBar.setChemistry(e);
  }),
  (components.SquadStats.prototype.setRating = function setRating(e, t) {
    this._ratingStars.setRating(e, t);
  }),
  (components.SquadStats.prototype.update = function update(e, t) {
    this._chemistryBar.updateChemistry(e), this._ratingStars.setRating(t, !0);
  }),
  utils.JS.inherits(UTSquadSummaryBannerView, UTView),
  (UTSquadSummaryBannerView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squad-summary');
      var t = document.createElement('div');
      t.classList.add('ut-squad-summary-info'),
        (this.__formationTitle = document.createElement('h1')),
        this.__formationTitle.classList.add('ut-squad-summary-label'),
        t.appendChild(this.__formationTitle),
        (this.__formationValue = document.createElement('div')),
        this.__formationValue.classList.add('ut-squad-summary-value'),
        t.appendChild(this.__formationValue),
        e.appendChild(t),
        (this._squadStats = new components.SquadStats()),
        e.appendChild(this._squadStats.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadSummaryBannerView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__formationTitle = null),
      (this.__formationValue = null),
      this._squadStats.destroy();
  }),
  (UTSquadSummaryBannerView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadSummaryBannerView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadSummaryBannerView.prototype.init = function init() {
    this.superclass(),
      this._squadStats.init(),
      this.__formationTitle &&
        (this.__formationTitle.textContent = services.Localization.localize(
          'squads.formation'
        ));
  }),
  (UTSquadSummaryBannerView.prototype.setChemistryAndRating = function setChemistryAndRating(
    e,
    t,
    i
  ) {
    this.setChemistry(e, i), this.setRating(t, i);
  }),
  (UTSquadSummaryBannerView.prototype.setChemistry = function setChemistry(
    e,
    t
  ) {
    this._squadStats.setChemistry(e, t);
  }),
  (UTSquadSummaryBannerView.prototype.setRating = function setRating(e, t) {
    this._squadStats.setRating(e, t);
  }),
  (UTSquadSummaryBannerView.prototype.setFormation = function setFormation(e) {
    this.__formationValue && (this.__formationValue.textContent = e);
  }),
  (UTSquadSummaryBannerView.prototype.show = function show() {
    this.setDisplay(!0);
  }),
  (UTSquadSummaryBannerView.prototype.hide = function hide() {
    this.setDisplay(!1);
  }),
  utils.JS.inherits(UTSquadOverviewView, UTTargetActionView),
  (UTSquadOverviewView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squad-overview'),
        (this.__draggableArea = document.createElement('div')),
        this.__draggableArea.classList.add('ut-draggable'),
        (this._pitch = new UTSquadPitchView()),
        this.__draggableArea.appendChild(this._pitch.getRootElement()),
        e.appendChild(this.__draggableArea),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadOverviewView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__draggableArea = null),
      this._pitch.destroy();
  }),
  (UTSquadOverviewView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadOverviewView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadOverviewView.prototype.init = function init() {
    this.superclass(), this._pitch.init();
    var e = this.getSummaryPanel();
    e.init(),
      this.getRoot().prepend(e.getRoot()),
      this._initTabViews(),
      this.setInteractionState(!0),
      (this.allowLegacyPropagation = !0),
      $(window).on('resize', this._onWindowResize.bind(this));
  }),
  (UTSquadOverviewView.prototype.dealloc = function dealloc() {
    this.superclass(),
      $(window).off('resize'),
      this._utilDragDrop &&
        (this._utilDragDrop.clearListenersByScope(this),
        (this._utilDragDrop = null)),
      this._summaryPanel &&
        (this._summaryPanel.dealloc(), (this._summaryPanel = null)),
      this._leftTab && this._leftTab.dealloc(),
      this._rightTab && this._rightTab.dealloc(),
      this._leftDock && this._leftDock.dealloc(),
      this._rightDock && this._rightDock.dealloc(),
      this._detailsButton && this._detailsButton.dealloc(),
      (this._leftTab = null),
      (this._rightTab = null),
      (this._leftDock = null),
      (this._rightDock = null),
      (this._detailsButton = null),
      (this._hoverCallback = null),
      (this._slotViews = []);
  }),
  (UTSquadOverviewView.prototype.getSummaryPanel = function getSummaryPanel() {
    return (
      this._summaryPanel ||
        (this._summaryPanel = new UTSquadSummaryBannerView()),
      this._summaryPanel
    );
  }),
  (UTSquadOverviewView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    this.superclass(e), this._pitch.setInteractionState(e);
  }),
  (UTSquadOverviewView.prototype.setTheme = function setTheme(e) {
    this._pitch.setTheme(e);
  }),
  (UTSquadOverviewView.prototype.setType = function setType(e) {
    this._pitch.setType(e);
  }),
  (UTSquadOverviewView.prototype.setMode = function setMode(e) {
    this._pitch.setMode(e);
  }),
  (UTSquadOverviewView.prototype.setChemistry = function setChemistry(e, t) {
    this._summaryPanel.setChemistry(e, t);
  }),
  (UTSquadOverviewView.prototype.setRating = function setRating(e, t) {
    this._summaryPanel.setRating(e, t);
  }),
  (UTSquadOverviewView.prototype.setFormation = function setFormation(e, t) {
    var i = this.isInteractionEnabled();
    this.setInteractionState(!1),
      this._summaryPanel && this._summaryPanel.setFormation(e.getDisplayName()),
      requestAnimationFrame(
        function() {
          this._pitch.setFormation(
            e.getName(),
            t,
            function() {
              this.setInteractionState(i);
            }.bind(this)
          );
        }.bind(this)
      );
  }),
  (UTSquadOverviewView.prototype.setSquad = function setSquad(e) {
    this._summaryPanel &&
      (this._summaryPanel.setChemistry(e.getChemistry()),
      this._summaryPanel.setRating(e.getRating()));
    var t = this.getSelectedSlot(),
      i = t ? t.getIndex() : -1,
      s = this.renderManager
        ? e.getFieldPlayers().concat(e.getManager())
        : e.getFieldPlayers();
    this._pitch.setSlots(s, this.renderConcepts, this.renderChemistry),
      this._leftDock &&
        this._leftDock.setSlots(e.getSubPlayers(), this.renderConcepts),
      this._rightDock &&
        this._rightDock.setSlots(e.getReservePlayers(), this.renderConcepts),
      (this._slotViews = this._getDropSlotViews()),
      this._slotViews.forEach(function(e) {
        e.addTarget(this, this._eSlotTapped, enums.Event.TAP),
          e.addTarget(this, this._eSlotMouseEnter, enums.Event.MOUSEENTER),
          e.addTarget(this, this._eSlotMouseLeave, enums.Event.MOUSELEAVE);
      }, this),
      0 <= i && this.selectSlot(i),
      this.setFormation(e.getFormation(), e.getChemistryLinks());
  }),
  (UTSquadOverviewView.prototype.addSlotInteractionState = function setSlotInteractionState(
    t,
    i
  ) {
    this._slotViews.forEach(function(e) {
      e.toggleClass(i, e.getIndex() === t);
    });
  }),
  (UTSquadOverviewView.prototype.removeSlotInteractionState = function removeSlotInteractionState(
    t,
    e
  ) {
    var i = utils.JS.find(this._slotViews, function(e) {
      return e.getIndex() === t;
    });
    i && i.removeClass(e);
  }),
  (UTSquadOverviewView.prototype.clearSlotInteractionState = function clearSlotInteractionState(
    t
  ) {
    this._slotViews.forEach(function(e) {
      e.removeClass(t);
    });
  }),
  (UTSquadOverviewView.prototype.selectSlot = function selectSlot(e) {
    this.addSlotInteractionState(e, enums.UISlotInteractionState.SELECTED);
  }),
  (UTSquadOverviewView.prototype.getSelectedSlot = function getSelectedSlot() {
    return utils.JS.find(this._slotViews, function(e) {
      return e.hasClass(enums.UISlotInteractionState.SELECTED);
    });
  }),
  (UTSquadOverviewView.prototype.updatePitchChemistry = function updatePitchChemistry(
    e,
    t
  ) {
    this.renderChemistry && this._pitch.updateChemistry(e, t);
  }),
  (UTSquadOverviewView.prototype.updateDocksChemistry = function updateDocksChemistry(
    e
  ) {
    this.renderChemistry &&
      (this._leftDock && this._leftDock.updateChemistry(e),
      this._rightDock && this._rightDock.updateChemistry(e));
  }),
  (UTSquadOverviewView.prototype.updateSlot = function updateSlot(e) {
    this._pitch.updateSlot(e, this.renderConcepts, this.renderChemistry),
      this._leftDock && this._leftDock.updateSlot(e, this.renderConcepts),
      this._rightDock && this._rightDock.updateSlot(e, this.renderConcepts);
  }),
  (UTSquadOverviewView.prototype._setDockLocalization = function _setDockLocalization() {
    this._utilDragDrop &&
      this._utilDragDrop.enabled &&
      (this._leftDock &&
        this._leftDock.setInstructions(
          services.Localization.localize('dock.label.dragSubsIntoPitchToSwap')
        ),
      this._rightDock &&
        this._rightDock.setInstructions(
          services.Localization.localize('dock.label.dragResIntoPitchToSwap')
        ));
  }),
  (UTSquadOverviewView.prototype._initTabViews = function _initTabViews() {
    (this._leftDock = new UTSquadSlotDockView()),
      (this._rightDock = new UTSquadSlotDockView()),
      (this._leftTab = new UTSquadTabButtonControl()),
      (this._rightTab = new UTSquadTabButtonControl()),
      this._leftTab.init(),
      this._rightTab.init(),
      this._leftDock.init(),
      this._rightDock.init(),
      this._leftTab.addTarget(
        this,
        this._onDockBtnPressed.bind(
          this,
          this._leftDock,
          this._leftTab,
          this._dropAreas.LEFT_DOCK,
          this._rightDock
        ),
        enums.Event.TAP
      ),
      this._rightTab.addTarget(
        this,
        this._onDockBtnPressed.bind(
          this,
          this._rightDock,
          this._rightTab,
          this._dropAreas.RIGHT_DOCK,
          this._leftDock
        ),
        enums.Event.TAP
      ),
      this._leftTab.setText(
        services.Localization.localize('extendedPlayerInfo.sub')
      ),
      this._leftTab.assignLeft(),
      this._rightTab.setText(
        services.Localization.localize('extendedPlayerInfo.res')
      ),
      this._rightTab.assignRight(),
      this._leftTab.setType(enums.UISquadTabTypes.DOCK_TAB),
      this._rightTab.setType(enums.UISquadTabTypes.DOCK_TAB),
      this._setDockLocalization(),
      this.addSubview(this._leftTab, this.__draggableArea),
      this.addSubview(this._rightTab, this.__draggableArea),
      this.addSubview(this._leftDock, this.__draggableArea),
      this.addSubview(this._rightDock, this.__draggableArea),
      this.layoutSubviews();
  }),
  (UTSquadOverviewView.prototype.initDragDrop = function initDragDrop(e, t) {
    this._utilDragDrop ||
      (this._utilDragDrop = new utils.DragDrop(this.__draggableArea)),
      this._setupDropSlots(e, t),
      this._setupDropContainers(),
      this._utilDragDrop.clearListenersByScope(this),
      this._utilDragDrop.addListener(
        utils.DragDrop.DRAG.START,
        this,
        this._onDragStart
      ),
      this._utilDragDrop.addListener(
        utils.DragDrop.DRAG.MOVE,
        this,
        this._onDragMove
      ),
      this._utilDragDrop.addListener(
        utils.DragDrop.DRAG.DROPPABLE,
        this,
        this._onDragDroppable
      ),
      this._utilDragDrop.addListener(
        utils.DragDrop.DRAG.END,
        this,
        this._onDragEnd
      ),
      this._utilDragDrop.addListener(
        utils.DragDrop.DRAG.DROP,
        this,
        this._onDragDrop
      ),
      this._utilDragDrop.enabled
        ? this._utilDragDrop.updateDropSlotCache()
        : (this._utilDragDrop.enable(), this._setDockLocalization());
  }),
  (UTSquadOverviewView.prototype._updateDropContainer = function _updateDropContainer(
    e
  ) {
    this._utilDragDrop &&
      (this._utilDragDrop.setDroppablesContainer(e),
      this._utilDragDrop.updateCollisionData());
  }),
  (UTSquadOverviewView.prototype._getDropSlotViews = function _getDropSlotViews() {
    var e = this._pitch.getSlotViews();
    return (
      this._leftDock && (e = e.concat(this._leftDock.getSlotViews())),
      this._rightDock && (e = e.concat(this._rightDock.getSlotViews())),
      e
    );
  }),
  (UTSquadOverviewView.prototype._setupDropSlots = function _setupDropSlots(
    n,
    o
  ) {
    this._getDropSlotViews().forEach(function(e) {
      var t = e.getItemView(),
        i = e.getIndex(),
        s = 0 <= n.indexOf(i);
      this._utilDragDrop.setDraggable(t, s),
        this._utilDragDrop.setDroppable(t, 0 <= o.indexOf(i)),
        this._utilDragDrop.setSwapAnimation(
          t,
          s && i < entities.Squad.FIELD_PLAYERS
        );
    }, this);
  }),
  (UTSquadOverviewView.prototype._setupDropContainers = function _setupDropContainers() {
    this._utilDragDrop.addDropContainer(this._dropAreas.FIELD, this._pitch, !0),
      this._leftDock &&
        this._utilDragDrop.addDropContainer(
          this._dropAreas.LEFT_DOCK,
          this._leftDock
        ),
      this._rightDock &&
        this._utilDragDrop.addDropContainer(
          this._dropAreas.RIGHT_DOCK,
          this._rightDock
        );
  }),
  (UTSquadOverviewView.prototype._updateDockLayers = function _updateDockLayers(
    e
  ) {
    var t = e.closest('.ut-squad-slot-dock-view').get(0),
      i = this._leftDock ? this._leftDock.getRootElement() : null,
      s = this._rightDock ? this._rightDock.getRootElement() : null;
    t && i && t === i
      ? ((i.style.zIndex = 3), s && (s.style.zIndex = 2))
      : t && s && t === s && (i && (i.style.zIndex = 2), (s.style.zIndex = 3));
  }),
  (UTSquadOverviewView.prototype._resetDockLayers = function _resetDockLayers() {
    var e = this._leftDock ? this._leftDock.getRootElement() : null,
      t = this._rightDock ? this._rightDock.getRootElement() : null;
    e && (e.style.zIndex = 2), t && (t.style.zIndex = 2);
  }),
  (UTSquadOverviewView.prototype._onWindowResize = function _onWindowResize(e) {
    this.closeDocks(), this._utilDragDrop.updateInteractiveContainer();
  }),
  (UTSquadOverviewView.prototype._onDragStart = function _onDragStart(e, t) {
    this._triggerActions(enums.UISquadPitchEvent.DRAG_START, {
      item: t.data('info')
    });
    var i = t.parent(),
      s = i.data('view');
    s.addClass('empty'),
      isPhone() ||
        this.addSlotInteractionState(
          s.getIndex(),
          enums.UISlotInteractionState.SELECTED
        ),
      this._updateDockLayers(i),
      requestAnimationFrame(
        function() {
          (this._leftTabClientRect = this._leftTab
            ? this._leftTab.getBoundingClientRect()
            : null),
            (this._rightTabClientRect = this._rightTab
              ? this._rightTab.getBoundingClientRect()
              : null),
            (this._leftDockClientRect = this._leftDock
              ? this._leftDock.getBoundingClientRect()
              : null),
            (this._rightDockClientRect = this._rightDock
              ? this._rightDock.getBoundingClientRect()
              : null);
        }.bind(this)
      );
  }),
  (UTSquadOverviewView.prototype._onDragMove = function _onDragMove(e, t) {
    function _isColliding(e, t) {
      return (
        !!t &&
        (e.clientY >= t.top &&
          e.clientY <= t.bottom &&
          e.clientX >= t.left &&
          e.clientX <= t.right)
      );
    }

    function _calculateLeftDockBounds() {
      (this._leftTabClientRect = this._leftTab
        ? this._leftTab.getBoundingClientRect()
        : null),
        (this._leftDockClientRect = this._leftDock.getBoundingClientRect()),
        this._utilDragDrop.updateCollisionData();
    }

    function _calculateRightDockBounds() {
      (this._rightTabClientRect = this._rightTab
        ? this._rightTab.getBoundingClientRect()
        : null),
        (this._rightDockClientRect = this._rightDock.getBoundingClientRect()),
        this._utilDragDrop.updateCollisionData();
    }
    !function _canTriggerDockOpening() {
      return (
        (this._leftDock || this._rightDock) &&
        !function _isDockAnimating() {
          return (
            (this._leftDock && this._leftDock.isAnimating) ||
            (this._rightDock && this._rightDock.isAnimating)
          );
        }.call(this) &&
        !function _isDockVisible() {
          return (
            (this._leftDock && this._leftDock.isVisible) ||
            (this._rightDock && this._rightDock.isVisible)
          );
        }.call(this)
      );
    }.call(this)
      ? this._leftDockClientRect &&
        this._leftDock.isVisible &&
        !this._leftDock.isAnimating &&
        t.clientY < this._leftDockClientRect.top
        ? this._closeLeftDock(_calculateLeftDockBounds.bind(this))
        : this._rightDockClientRect &&
          this._rightDock.isVisible &&
          !this._rightDock.isAnimating &&
          t.clientY < this._rightDockClientRect.top &&
          this._closeRightDock(_calculateRightDockBounds.bind(this))
      : this._leftDock && _isColliding.call(this, t, this._leftTabClientRect)
      ? this._openLeftDock(_calculateLeftDockBounds.bind(this))
      : this._rightDock &&
        _isColliding.call(this, t, this._rightTabClientRect) &&
        this._openRightDock(_calculateRightDockBounds.bind(this));
  }),
  (UTSquadOverviewView.prototype._onDragDroppable = function _onDragDroppable(
    e,
    t
  ) {
    var i = t.dragging.data('info'),
      s = t.target.data('info');
    utils.JS.isValid(this._hoverCallback) &&
      utils.JS.isValid(i) &&
      utils.JS.isValid(s) &&
      this._hoverCallback(i, s);
  }),
  (UTSquadOverviewView.prototype._onDragEnd = function _onDragEnd(e, t) {
    var i = t.parent(),
      s = t.data('info');
    e.moved
      ? (this.setInteractionState(!1),
        utils.JS.isValid(s) &&
          this._triggerActions(enums.UISquadPitchEvent.DRAG_END, {
            item: s
          }),
        t.stop().animate(
          {
            top: i.offset().top,
            left: i.offset().left
          },
          {
            duration: this._animationDuration,
            queue: !1,
            complete: function() {
              this._onDragReset(t);
            }.bind(this)
          }
        ))
      : this._onDragReset(t);
  }),
  (UTSquadOverviewView.prototype._onDragDrop = function _onDragDrop(e, t) {
    this.clearSlotInteractionState(enums.UISlotInteractionState.SELECTED),
      this.setInteractionState(!1),
      this._swapElements(t.dragging, t.target),
      this._utilDragDrop.updateDropSlotCache();
  }),
  (UTSquadOverviewView.prototype._onDragReset = function _onDragReset(e) {
    e.parent().removeClass('empty'),
      this._utilDragDrop.resetDrag(),
      utils.JS.isValid(this._rightDock) && this._rightDock.isVisible
        ? this._updateDropContainer(this._dropAreas.RIGHT_DOCK)
        : utils.JS.isValid(this._leftDock) &&
          this._leftDock.isVisible &&
          this._updateDropContainer(this._dropAreas.LEFT_DOCK),
      this._resetDockLayers(),
      this.setInteractionState(!0);
  }),
  (UTSquadOverviewView.prototype._swapElements = function _swapElements(e, t) {
    var i = e.parent(),
      s = t.parent(),
      n = t.offset(),
      o = t.data('info');
    if (utils.JS.isValid(o)) {
      o.isValid() &&
        t.addClass('dropTarget').css({
          left: n.left,
          top: n.top
        }),
        s.addClass('empty'),
        i.append(t),
        s.append(e),
        e.stop().animate(
          {
            top: s.offset().top,
            left: s.offset().left
          },
          {
            duration: this._animationDuration,
            queue: !1,
            complete: function() {
              this._onDragReset(e);
            }.bind(this)
          }
        ),
        o.isValid()
          ? (i.addClass('noBackground'),
            t.stop().animate(
              {
                top: i.offset().top,
                left: i.offset().left
              },
              {
                duration: this._animationDuration,
                queue: !1,
                complete: function() {
                  t.removeClass('dropTarget'),
                    t[0].style.removeProperty('left'),
                    t[0].style.removeProperty('top'),
                    i.removeClass('empty'),
                    i.removeClass('noBackground');
                }
              }
            ))
          : i.removeClass('empty');
      var a = i.data('view'),
        r = s.data('view'),
        l = a.getItemView();
      a.setItemView(r.getItemView()),
        r.setItemView(l),
        this._triggerActions(enums.UISquadPitchEvent.ITEM_SWAP, {
          swapFrom: a.getIndex(),
          swapTo: r.getIndex()
        });
    } else utils.Debug.Assert(!1, 'Variable targetData undefined.');
  }),
  (UTSquadOverviewView.prototype.closeDocks = function closeDocks(e) {
    this._closeLeftDock(e), this._closeRightDock(e);
  }),
  (UTSquadOverviewView.prototype._onDockBtnPressed = function _onDockBtnPressed(
    e,
    t,
    i,
    s
  ) {
    utils.Debug.Assert(utils.JS.isValid(e), "variable 'dock' must be valid"),
      utils.Debug.Assert(
        utils.JS.isValid(t),
        "variable 'dockTab' must be valid"
      ),
      (utils.JS.isValid(s) && (s.isVisible || s.isAnimating)) ||
        (e.isVisible ? this._closeDock(e, t) : this._openDock(e, t, i));
  }),
  (UTSquadOverviewView.prototype._closeDock = function _closeDock(e, t, i) {
    utils.Debug.Assert(utils.JS.isValid(e), "variable 'dock' must be valid"),
      utils.Debug.Assert(
        utils.JS.isValid(t),
        "variable 'dockTab' must be valid"
      ),
      e.isVisible &&
        !e.isAnimating &&
        (t.setArrowDirection(enums.UIDirection.UP),
        this._updateDropContainer(this._dropAreas.FIELD),
        e.close(i),
        requestAnimationFrame(function() {
          t.getRoot().css('bottom', 0);
        }));
  }),
  (UTSquadOverviewView.prototype._openDock = function _openDock(e, t, i, s) {
    utils.Debug.Assert(utils.JS.isValid(e), "variable 'dock' must be valid"),
      utils.Debug.Assert(
        utils.JS.isValid(t),
        "variable 'dockTab' must be valid"
      ),
      e.isVisible ||
        e.isAnimating ||
        (t.setArrowDirection(enums.UIDirection.DOWN),
        e.open(s),
        requestAnimationFrame(function() {
          t.getRoot().css('bottom', e.getContentHeight());
        }),
        this._updateDropContainer(i));
  }),
  (UTSquadOverviewView.prototype._closeRightDock = function _closeRightDock(e) {
    utils.JS.isValid(this._rightDock) &&
      utils.JS.isValid(this._rightTab) &&
      this._closeDock(this._rightDock, this._rightTab, e);
  }),
  (UTSquadOverviewView.prototype._closeLeftDock = function _closeLeftDock(e) {
    utils.JS.isValid(this._leftDock) &&
      utils.JS.isValid(this._leftTab) &&
      this._closeDock(this._leftDock, this._leftTab, e);
  }),
  (UTSquadOverviewView.prototype._openRightDock = function _openRightDock(e) {
    utils.JS.isValid(this._rightDock) &&
      utils.JS.isValid(this._rightTab) &&
      this._openDock(
        this._rightDock,
        this._rightTab,
        this._dropAreas.RIGHT_DOCK,
        e
      );
  }),
  (UTSquadOverviewView.prototype._openLeftDock = function _openLeftDock(e) {
    utils.JS.isValid(this._leftDock) &&
      utils.JS.isValid(this._leftTab) &&
      this._openDock(
        this._leftDock,
        this._leftTab,
        this._dropAreas.LEFT_DOCK,
        e
      );
  }),
  (UTSquadOverviewView.prototype.setHoverCallback = function setHoverCallback(
    e
  ) {
    this._hoverCallback = e;
  }),
  (UTSquadOverviewView.prototype.setSwapCallback = function setHoverCallback(
    e
  ) {
    this._swapCallback = e;
  }),
  (UTSquadOverviewView.prototype.getPitch = function getPitch() {
    return this._pitch;
  }),
  (UTSquadOverviewView.prototype.getRightTab = function getRightTab() {
    return this._rightTab;
  }),
  (UTSquadOverviewView.prototype.getLeftTab = function getLeftTab() {
    return this._leftTab;
  }),
  (UTSquadOverviewView.prototype.getLeftDock = function getLeftDock() {
    return this._leftDock;
  }),
  (UTSquadOverviewView.prototype.getRightDock = function getRightDock() {
    return this._rightDock;
  }),
  (UTSquadOverviewView.prototype.getDetailsButton = function getDetailsButton() {
    return (
      this._detailsButton ||
        ((this._detailsButton = new UTFlatButtonControl()),
        this._detailsButton.init(),
        this._detailsButton.addClass('pitch-icon'),
        this.addSubview(this._detailsButton, this.__draggableArea),
        this.layoutSubviews()),
      this._detailsButton
    );
  }),
  (UTSquadOverviewView.prototype._eSlotTapped = function _eSlotTapped(e, t, i) {
    this.isInteractionEnabled() &&
      this._triggerActions(enums.UISquadPitchEvent.SLOT_SELECT, {
        slot: e,
        slotIndex: e.getIndex()
      });
  }),
  (UTSquadOverviewView.prototype._eSlotMouseEnter = function _eSlotMouseEnter(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(enums.Event.MOUSEENTER, {
        slot: e,
        slotIndex: e.getIndex()
      });
  }),
  (UTSquadOverviewView.prototype._eSlotMouseLeave = function _eSlotMouseLeave(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(enums.Event.MOUSELEAVE, {
        slot: e,
        slotIndex: e.getIndex()
      });
  }),
  NamespaceManager.Register('controllers.squads'),
  utils.JS.inherits(UTSquadOverviewViewController, UTViewController),
  (UTSquadOverviewViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      gConfigurationModel.getConfigBoolean(
        models.ConfigurationModel.KEY_WINTER_THEME
      ) && e.setTheme(enums.SquadPitchThemes.WINTER),
        e.getPitch().addTarget(this, this._ePitchTapped, enums.Event.TAP),
        e.addTarget(this, this._eItemTap, enums.UISquadPitchEvent.SLOT_SELECT),
        e.addTarget(this, this._eItemSwap, enums.UISquadPitchEvent.ITEM_SWAP),
        e.addTarget(this, this._eDragStart, enums.UISquadPitchEvent.DRAG_START),
        e.addTarget(this, this._eDragEnd, enums.UISquadPitchEvent.DRAG_END),
        e.addTarget(this, this._eItemMouseEnter, enums.Event.MOUSEENTER),
        e.addTarget(this, this._eItemMouseLeave, enums.Event.MOUSELEAVE);
    }
  }),
  (UTSquadOverviewViewController.prototype.initWithSquad = function initWithSquad(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.Squad,
        'Initialization expected a squad entity.'
      ),
      (this._squad = e),
      this._squad.onDataUpdated.observe(this, this._eSquadDataChange),
      this.init());
  }),
  (UTSquadOverviewViewController.prototype.dealloc = function dealloc() {
    this.onItemMove.dealloc(),
      this.onItemSwap.dealloc(),
      this.onDragEnd.dealloc(),
      (this.onItemMove = null),
      (this.onItemSwap = null),
      (this.onDragEnd = null),
      this._squad &&
        (this._squad.onDataUpdated.unobserve(this), (this._squad = null)),
      (this._squadOverviewDelegate = null),
      this.superclass();
  }),
  (UTSquadOverviewViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSquadOverviewView();
  }),
  (UTSquadOverviewViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Squads - Squad Overview';
  }),
  (UTSquadOverviewViewController.prototype._trackPageView = function _trackPageView() {
    TelemetryManager.trackPage(
      TelemetryManager.Sections.SQUADS,
      this._getTelemetryId()
    );
  }),
  (UTSquadOverviewViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._squad ? this._squad.getName() : '';
  }),
  (UTSquadOverviewViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      getDefaultDispatcher().addObserver(
        enums.Notification.UI_ITEM_STATE_CHANGE,
        this,
        this._nInfoStateChanged
      ),
      utils.Debug.Assert(
        this._squad instanceof entities.Squad,
        'View appearing on screen without a squad to display.'
      ),
      this._squad && this._pushSquadToView(this._squad),
      isPhone() &&
        !this._squad.isTOTW() &&
        this.getView()
          .getDetailsButton()
          .addTarget(this, this._eDetailsButtonSelected, enums.Event.TAP),
      this._trackPageView();
  }),
  (UTSquadOverviewViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      getDefaultDispatcher().removeObserver(
        enums.Notification.UI_ITEM_STATE_CHANGE,
        this
      );
  }),
  (UTSquadOverviewViewController.prototype.onWindowSizeChange = function onWindowSizeChange() {
    this.getView().closeDocks();
  }),
  (UTSquadOverviewViewController.prototype._updateDragDrop = function _updateDragDrop() {
    var e = this._squad ? this._squad.getNonBrickSlots(!0) : [];
    this.getView().initDragDrop(
      e.reduce(function _reduceSlotToValidIndex(e, t) {
        return t.getItem().isValid() && e.push(t.getIndex()), e;
      }, []),
      e.map(function _mapSlotToIndex(e) {
        return e.getIndex();
      })
    );
  }),
  (UTSquadOverviewViewController.prototype._pushSquadToView = function _pushSquadToView(
    e
  ) {
    var t = this.getView();
    t.setType(
      e.isDream()
        ? enums.SquadPitchTypes.CONCEPT
        : enums.SquadPitchTypes.REGULAR
    ),
      t.setSquad(e),
      this._updateDragDrop();
  }),
  (UTSquadOverviewViewController.prototype.setSquadOverviewDelegate = function setSquadOverviewDelegate(
    e
  ) {
    e.conforms(interfaces.SquadOverviewDelegate) &&
      (this._squadOverviewDelegate = e);
  }),
  (UTSquadOverviewViewController.prototype.setSquadById = function setSquadById(
    e
  ) {
    services.Squad.requestSquadById(e).observe(this, function _onGetSquad(
      e,
      t
    ) {
      if ((e.unobserve(this), t.success)) {
        var i = t.data.squad instanceof entities.Squad;
        utils.Debug.Assert(i, 'Missing squad entity.'),
          i && this.setSquad(t.data.squad);
      }
    });
  }),
  (UTSquadOverviewViewController.prototype._setSquad = function _setSquad(e) {
    this._squad && this._squad.onDataUpdated.unobserve(this),
      (this._squad = e),
      this._squad.onDataUpdated.observe(this, this._eSquadDataChange);
  }),
  (UTSquadOverviewViewController.prototype.setSquad = function setSquad(e) {
    this._setSquad(e), this._pushSquadToView(e);
  }),
  (UTSquadOverviewViewController.prototype.selectSlot = function selectSlot(e) {
    this.getView().selectSlot(e);
  }),
  (UTSquadOverviewViewController.prototype.updateSlot = function updateSlot(e) {
    this.getView().updateSlot(e);
  }),
  (UTSquadOverviewViewController.prototype._gotoDetailsView = function _gotoDetailsView(
    e
  ) {
    var t = this.getNavigationController();
    if (t) {
      var i = new controllers.navigation.SquadItemDetails();
      this._squad ? i.initWithSquad(this._squad, e) : i.init(),
        i.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY),
        t.pushViewController(i);
    }
  }),
  (UTSquadOverviewViewController.prototype.applyDataChange = function applyDataChange() {
    this._pushSquadToView(this._squad);
  }),
  (UTSquadOverviewViewController.prototype._eSquadDataChange = function _eSquadDataChange(
    e,
    t
  ) {
    if (this._squad && this.isViewDisplayed()) {
      var i = this.getView();
      if (t.type) {
        var s =
          t.type === enums.SquadType.DREAM
            ? enums.SquadPitchTypes.CONCEPT
            : enums.SquadPitchTypes.REGULAR;
        i.setType(s);
      }
      if (
        (utils.JS.isNumber(t.chemistry) && i.setChemistry(t.chemistry, !0),
        utils.JS.isNumber(t.rating) && i.setRating(t.rating, !0),
        Array.isArray(t.slots))
      )
        if (
          (t.slots.forEach(this.updateSlot, this),
          this._updateDragDrop(),
          !t.formation)
        )
          i.updatePitchChemistry(
            this._squad.getFieldPlayers(),
            this._squad.getChemistryLinks()
          ),
            utils.JS.isValid(
              utils.JS.find(
                t.slots,
                function(e) {
                  return e.getItem().isManager();
                },
                this
              )
            ) && i.updateDocksChemistry(this._squad.getSubAndReservePlayers());
      t.formation &&
        i.setFormation(t.formation, this._squad.getChemistryLinks()),
        t.name && this.getNavigationController().setNavigationTitle(t.name);
    }
  }),
  (UTSquadOverviewViewController.prototype._eItemTap = function _eItemTap(
    e,
    t,
    i
  ) {
    var s = i && utils.JS.isNumber(i.slotIndex) ? i.slotIndex : 0;
    (this._squad && 0 <= this._squad.simpleBrickIndices.indexOf(s)) ||
      (this._squadOverviewDelegate
        ? this._squadOverviewDelegate.selectSlotIndexForSquad(
            this,
            this._squad,
            s
          )
        : this._gotoDetailsView(s));
  }),
  (UTSquadOverviewViewController.prototype._eItemSwap = function _eItemSwap(
    e,
    t,
    i
  ) {
    var s = utils.JS.isNumber(i.swapFrom) ? i.swapFrom : -1,
      n = utils.JS.isNumber(i.swapTo) ? i.swapTo : -1,
      o = this.getView();
    o.removeSlotInteractionState(s, enums.UISlotInteractionState.HOVER),
      o.removeSlotInteractionState(n, enums.UISlotInteractionState.HOVER),
      this._squad.swapPlayersByIndex(s, n),
      this._squad.save(),
      this.onItemSwap.notify(s, n),
      o.updatePitchChemistry(
        this._squad.getFieldPlayers(),
        this._squad.getChemistryLinks()
      );
  }),
  (UTSquadOverviewViewController.prototype._eDragStart = function _eDragStart(
    e,
    t,
    i
  ) {
    this.onItemMove.notify(i.item);
  }),
  (UTSquadOverviewViewController.prototype._eDragEnd = function _eDragEnd(
    e,
    t,
    i
  ) {
    this.onDragEnd.notify(i.item);
  }),
  (UTSquadOverviewViewController.prototype._ePitchTapped = function _ePitchTapped(
    e,
    t,
    i
  ) {
    var s = this.getView();
    s.clearSlotInteractionState(enums.UISlotInteractionState.SELECTED),
      s.closeDocks();
  }),
  (UTSquadOverviewViewController.prototype._eItemMouseEnter = function _eItemMouseEnter(
    e,
    t,
    i
  ) {
    this.getView().addSlotInteractionState(
      i.slotIndex,
      enums.UISlotInteractionState.HOVER
    );
  }),
  (UTSquadOverviewViewController.prototype._eItemMouseLeave = function _eItemMouseLeave(
    e,
    t,
    i
  ) {
    this.getView().removeSlotInteractionState(
      i.slotIndex,
      enums.UISlotInteractionState.HOVER
    );
  }),
  (UTSquadOverviewViewController.prototype._eDetailsButtonSelected = function _eDetailsButtonSelected(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController();
    if (s) {
      var n = new UTSquadActionsViewController();
      n.initWithSquad(this._squad),
        n.setSquadContext(!0),
        s.pushViewController(n);
    }
  }),
  (UTSquadOverviewViewController.prototype._nInfoStateChanged = function _nInfoStateChanged(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.SQUADS,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Item Info Switch Button - Squad'
    );
  }),
  services.URL.registerDeepLinkID(enums.DeepLinkSections.ACTIVE_SQUAD, function(
    e
  ) {
    var t = getAppMain().getRootViewController();
    t.setGameViewTab(UTGameTabBarController.TabTag.SQUADS);
    var s = t.getPresentedViewController().getCurrentViewController();
    s &&
      (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Squad.requestSquadByType(enums.UserSquadId.ACTIVE).observe(
        this,
        function _onSquadLoadComplete(e, t) {
          if ((e.unobserve(this), t.success)) {
            var i = isPhone()
              ? new UTSquadOverviewViewController()
              : new UTSquadSplitViewController();
            i.initWithSquad(t.data.squad), s.pushViewController(i);
          } else
            services.Notification.queue([
              services.Localization.localize('notification.squad.failedToLoad'),
              enums.UINotificationType.NEGATIVE
            ]);
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      ));
  }),
  NamespaceManager.Register('controllers.navigation'),
  (controllers.navigation.SquadDetails = function SquadDetailsNavController(
    e,
    t,
    i
  ) {
    UTNavigationController.call(this, t, i),
      (this._withSquadView = e),
      Object.defineProperty(this, 'withSquadView', {
        writable: !1
      }),
      (this.onDataChange = new UTObservable()),
      Object.defineProperty(this, 'onDataChange', {
        writable: !1
      });
  }),
  utils.JS.inherits(
    controllers.navigation.SquadDetails,
    UTNavigationController
  ),
  (controllers.navigation.SquadDetails.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getRootController();
      e.onDataChange.observe(
        this,
        this.onDataChange.notify.bind(this.onDataChange)
      ),
        e.setSquadContext(this._withSquadView);
    }
  }),
  (controllers.navigation.SquadDetails.prototype.dealloc = function dealloc() {
    this.onDataChange.dealloc(), (this.onDataChange = null), this.superclass();
  }),
  (controllers.navigation.SquadDetails.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new UTSquadActionsViewController();
  }),
  (controllers.navigation.SquadDetails.prototype.didPush = function didPush(e) {
    e === this.getRootController() && this.setNavigationVisibility(!1, !0);
  }),
  (controllers.navigation.SquadDetails.prototype.setSquad = function setSquad(
    e
  ) {
    utils.Debug.Assert(
      e instanceof entities.Squad,
      'Initialization expected a squad entity.'
    ),
      this.popToRootViewController(),
      this.getRootController().setSquad(e);
  }),
  NamespaceManager.Register('interfaces'),
  (interfaces.SquadOverviewDelegate = function ISquadOverviewDelegate() {}),
  (interfaces.SquadOverviewDelegate.prototype.conforms = function conforms(
    e
  ) {}),
  (interfaces.SquadOverviewDelegate.prototype.selectSlotIndexForSquad = function selectSlotIndexForSquad(
    e,
    t,
    i
  ) {}),
  utils.JS.inherits(UTSquadComparePlayersViewController, UTViewController),
  (UTSquadComparePlayersViewController.prototype.init = function init() {
    this.superclass(),
      this._panel.init(),
      this.addChildViewController(this._panel),
      this.initialized;
  }),
  (UTSquadComparePlayersViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.CompareDetails();
  }),
  (UTSquadComparePlayersViewController.prototype.setItemData = function setItemData(
    e,
    t
  ) {
    this.getView().render(e, t), this._panel.setItems(e, t);
  }),
  (UTSquadComparePlayersViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    this._panel &&
      !this._panel.getView().isSubview(e) &&
      (e.appendPanel(this._panel.getView()),
      e.layoutSubviews(),
      this._panel.viewDidAppear());
  }),
  (UTSquadComparePlayersViewController.prototype.setViewAsSBC = function setViewAsSBC(
    e
  ) {
    this.getView().setAsSBC(e);
  }),
  utils.JS.inherits(UTBaseSquadSplitViewController, UTSplitViewController),
  (UTBaseSquadSplitViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      this.getView().addClass('full-width'),
      (this._overviewController = this._generateSquadOverview()),
      this._overviewController.setSquadOverviewDelegate(this),
      this.addChildViewController(this._overviewController),
      this._setupSquadOverview());
  }),
  (UTBaseSquadSplitViewController.prototype.initWithSquad = function initWithSquad(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.Squad,
        'Initialization expected to receive a squad entity.'
      ),
      (this._squad = e),
      this.init());
  }),
  (UTBaseSquadSplitViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._overviewController && this._overviewController.dealloc(),
      this._itemDetailController && this._itemDetailController.dealloc(),
      this._compareItemsController && this._compareItemsController.dealloc(),
      (this._overviewController = null),
      (this._itemDetailController = null),
      (this._compareItemsController = null),
      (this._squad = null);
  }),
  (UTBaseSquadSplitViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._overviewController.getNavigationTitle();
  }),
  (UTBaseSquadSplitViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._setRightController(this.getDefaultPanel()),
      this._setLeftController(this._overviewController);
  }),
  (UTBaseSquadSplitViewController.prototype.getDefaultPanel = function getDefaultPanel() {
    return (
      utils.Debug.Assert(
        !1,
        'getDefaultPanel needs to be overrided by child classes'
      ),
      null
    );
  }),
  (UTBaseSquadSplitViewController.prototype.selectSlotIndexForSquad = function selectSlotIndexForSquad(
    e,
    t,
    i
  ) {
    this._squad.simpleBrickIndices.indexOf(i) < 0 &&
      (this._overviewController.selectSlot(i),
      e === this._overviewController && this._showSlotDetails(i));
  }),
  (UTBaseSquadSplitViewController.prototype._setupSquadOverview = function _setupSquadOverview() {
    if (this._squad) {
      var e = this._overviewController.getView();
      e.setHoverCallback(this._eItemHovered.bind(this)),
        e.getPitch().addTarget(this, this._ePitchTapped, enums.Event.TAP),
        this._overviewController.onItemMove.observe(this, this._eItemMoved),
        this._overviewController.onItemSwap.observe(this, this._eItemSwap),
        this._overviewController.onDragEnd.observe(this, this._eDragEnd);
    }
  }),
  (UTBaseSquadSplitViewController.prototype._generateSquadOverview = function _generateSquadOverview() {
    var e = new UTSquadOverviewViewController();
    return this._squad ? e.initWithSquad(this._squad) : e.init(), e;
  }),
  (UTBaseSquadSplitViewController.prototype._generateItemDetails = function _generateItemDetails(
    e
  ) {
    var t = new controllers.navigation.SquadItemDetails();
    return this._squad ? t.initWithSquad(this._squad, e) : t.init(), t;
  }),
  (UTBaseSquadSplitViewController.prototype._generateCompareDetails = function _generateCompareDetails() {
    var e = new UTSquadComparePlayersViewController();
    return e.init(), e.setViewAsSBC(this._squad.isSBC()), e;
  }),
  (UTBaseSquadSplitViewController.prototype._showSlotDetails = function _showSlotDetails(
    e
  ) {
    this._itemDetailController ||
      ((this._itemDetailController = this._generateItemDetails(e)),
      this._itemDetailController.setNavigationStyle(
        enums.UINavigationBarStyle.SECONDARY
      ),
      this._itemDetailController.onSlotChange.observe(
        this,
        this._eDetailSlotChange
      ),
      this._itemDetailController
        .getRootPrimaryNavigationItem()
        .addTarget(this, this._eDetailsExit, enums.Event.TAP),
      this.addChildViewController(this._itemDetailController)),
      this._itemDetailController.setSlot(e),
      this._setRightController(this._itemDetailController);
  }),
  (UTBaseSquadSplitViewController.prototype._showDefaultPanel = function _showDefaultPanel() {
    var e = this.getDefaultPanel();
    e instanceof UTNavigationController && e.popToRootViewController(),
      this._setRightController(e),
      this._overviewController
        .getView()
        .clearSlotInteractionState(enums.UISlotInteractionState.SELECTED);
  }),
  (UTBaseSquadSplitViewController.prototype._showComparePlayersPanel = function _showComparePlayersPanel(
    e,
    t
  ) {
    this._compareItemsController ||
      ((this._compareItemsController = this._generateCompareDetails()),
      this.addChildViewController(this._compareItemsController)),
      this._setRightController(this._compareItemsController),
      this._compareItemsController.setItemData(e, t);
  }),
  (UTBaseSquadSplitViewController.prototype._eDetailSlotChange = function _eDetailSlotChange(
    e,
    t
  ) {
    if (
      (utils.Debug.Assert(
        this._squad instanceof entities.Squad,
        'Squad entity has gone missing.'
      ),
      t.slot)
    ) {
      var i = t.slot.getIndex();
      this._overviewController.selectSlot(i);
    }
  }),
  (UTBaseSquadSplitViewController.prototype._eItemSwap = function _eItemSwap(
    e,
    t,
    i
  ) {
    this._showDefaultPanel();
  }),
  (UTBaseSquadSplitViewController.prototype._eDragEnd = function _eDragEnd(
    e,
    t
  ) {
    this._showSlotDetails(this._squad.getSlot(t).getIndex());
  }),
  (UTBaseSquadSplitViewController.prototype._eItemMoved = function _eItemMoved(
    e,
    t
  ) {
    this._showComparePlayersPanel(t);
  }),
  (UTBaseSquadSplitViewController.prototype._eDetailsExit = function _eDetailsExit(
    e,
    t,
    i
  ) {
    this._showDefaultPanel();
  }),
  (UTBaseSquadSplitViewController.prototype._eItemHovered = function _eItemHovered(
    e,
    t
  ) {
    this._showComparePlayersPanel(e, t);
  }),
  (UTBaseSquadSplitViewController.prototype._ePitchTapped = function _ePitchTapped(
    e,
    t,
    i
  ) {
    this._showDefaultPanel();
  }),
  utils.JS.inherits(UTSquadSplitViewController, UTBaseSquadSplitViewController),
  (UTSquadSplitViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      this._panelController.init(),
      this._panelController.onDataChange.observe(
        this,
        this._overviewController.applyDataChange.bind(this._overviewController)
      ),
      this._panelController.setNavigationStyle(
        enums.UINavigationBarStyle.SECONDARY
      ),
      this.addChildViewController(this._panelController));
  }),
  (UTSquadSplitViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._panelController.dealloc(),
      (this._panelController = null);
  }),
  (UTSquadSplitViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._squad && this._panelController.setSquad(this._squad);
  }),
  (UTSquadSplitViewController.prototype.getDefaultPanel = function getDefaultPanel() {
    return this._panelController;
  }),
  utils.JS.inherits(UTTransferListView, UTView),
  (UTTransferListView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-transfer-list-view'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTransferListView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTTransferListView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTransferListView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTransferListView.prototype.dealloc = function dealloc() {
    utils.JS.isValid(this._emptyListView) &&
      (this._emptyListView.destroy(), (this._emptyListView = null)),
      this.clearSections(),
      this.superclass();
  }),
  (UTTransferListView.prototype.clearSections = function clearSections() {
    this._sections.forEach(function(e) {
      e.dealloc();
    }),
      (this._sections = []);
  }),
  (UTTransferListView.prototype.renderSection = function renderSection(
    e,
    t,
    i
  ) {
    var s = this._sections[t];
    return (
      s
        ? s.clearList()
        : ((s = new views.lists.SectionedItemList()).init(),
          (this._sections[t] = s)),
      s.addItems(e, i),
      s.render(),
      this.getRoot()
        .empty()
        .append(
          this._sections.map(function(e) {
            return e.getRoot();
          })
        ),
      s
    );
  }),
  (UTTransferListView.prototype.getSection = function getSection(e) {
    return this._sections[e] || null;
  }),
  (UTTransferListView.prototype.renderEmptyView = function renderEmptyView(
    e,
    t,
    i
  ) {
    this.clearSections(),
      (this._emptyListView = new UTListNoResultsView()),
      this._emptyListView.init(),
      this._emptyListView.setText(e),
      this._emptyListView.setDescription(
        services.Localization.localize('popup.error.noresults.description')
      ),
      utils.JS.isFunction(i) && this._emptyListView.setupButton(t, i),
      this.getRoot().append(this._emptyListView.getRoot());
  }),
  (UTTransferListView.prototype.onTimedUpdate = function onTimedUpdate() {
    this._sections.forEach(function(e) {
      e.onTimedUpdate();
    });
  }),
  (UTTransferListView.prototype.selectListRow = function selectListRow(t) {
    this._sections.forEach(function(e) {
      e.selectRowByItemId(t);
    });
  }),
  (UTTransferListView.prototype.removeItemsById = function removeItemsById(t) {
    this._sections.forEach(function(e) {
      e.removeItemsById(t);
    });
  }),
  (viewmodels.TransferSectionList = function(e) {
    viewmodels.ItemSectionList.call(this, e),
      (this.refreshActiveTrades = !1),
      this.setSection(
        viewmodels.TransferSectionList.SECTION.SOLD,
        function(e) {
          return e.getAuctionData().isSold();
        },
        viewmodels.TransferSectionList.SECTION.SOLD
      ),
      this.setSection(
        viewmodels.TransferSectionList.SECTION.UNSOLD,
        function(e) {
          var t = e.getAuctionData();
          return t.isExpired() || (t.isValid() && t.isInactive());
        },
        viewmodels.TransferSectionList.SECTION.UNSOLD
      ),
      this.setSection(
        viewmodels.TransferSectionList.SECTION.AVAILABLE,
        function(e) {
          return !e.getAuctionData().isValid();
        },
        viewmodels.TransferSectionList.SECTION.AVAILABLE
      ),
      this.setSection(
        viewmodels.TransferSectionList.SECTION.ACTIVE,
        function(e) {
          return e.getAuctionData().isActiveTrade();
        },
        viewmodels.TransferSectionList.SECTION.ACTIVE
      ),
      this._organizeItems();
  }),
  utils.JS.inherits(viewmodels.TransferSectionList, viewmodels.ItemSectionList),
  (viewmodels.TransferSectionList.SECTION = {
    SOLD: 0,
    UNSOLD: 1,
    AVAILABLE: 2,
    ACTIVE: 3
  }),
  (viewmodels.TransferSectionList.prototype.startAuctionUpdates = function startAuctionUpdates(
    e
  ) {
    (e = !!e),
      this.refreshActiveTrades &&
        (this.values().forEach(function(e) {
          var t = e.getAuctionData();
          t.isActiveTrade() && t.setStale(!0);
        }, this),
        (this.refreshActiveTrades = !1)),
      this.superclass(e);
  }),
  (viewmodels.TransferSectionList.prototype.hasSoldItems = function hasSoldItems() {
    return (
      -1 <
      this.indexOf(function(e) {
        return e.getAuctionData().isSold();
      })
    );
  }),
  (viewmodels.TransferSectionList.prototype.getSoldItems = function getSoldItems() {
    return this.values().filter(function(e) {
      return e.getAuctionData().isSold();
    });
  }),
  (viewmodels.TransferSectionList.prototype.hasUnsoldItems = function hasUnsoldItems() {
    return (
      -1 <
      this.indexOf(function(e) {
        var t = e.getAuctionData();
        return t.isExpired() || (t.isValid() && t.isInactive());
      })
    );
  }),
  (viewmodels.TransferSectionList.prototype.getUnsoldItems = function getUnsoldItems() {
    return this.values().filter(function(e) {
      var t = e.getAuctionData();
      return t.isExpired() || (t.isValid() && t.isInactive());
    });
  }),
  (viewmodels.TransferSectionList.prototype.getActiveItems = function getActiveItems() {
    return this.values().filter(function(e) {
      return e.getAuctionData().isActiveTrade();
    });
  }),
  utils.JS.inherits(UTTransferListViewController, UTViewController),
  (UTTransferListViewController.prototype.dealloc = function dealloc() {
    this.onDataChange.dealloc(),
      this.onItemSelected.dealloc(),
      this.superclass();
  }),
  (UTTransferListViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTransferListView();
  }),
  (UTTransferListViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Transfer List - List View';
  }),
  (UTTransferListViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('nav.label.trading');
  }),
  (UTTransferListViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      getDefaultDispatcher().addObserver(
        enums.Notification.UI_ITEM_STATE_CHANGE,
        this,
        this._nInfoStateChanged
      ),
      this._viewmodel.dataUpdated.observe(this, this._eViewmodelDataUpdated),
      this._requestItems(isPhone()),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.AUCTIONS,
        'Transfer List'
      );
  }),
  (UTTransferListViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      getDefaultDispatcher().removeObserver(
        enums.Notification.UI_ITEM_STATE_CHANGE,
        this
      ),
      this._viewmodel &&
        (this._viewmodel.dataUpdated.unobserve(this),
        this._viewmodel.stopAuctionUpdates());
  }),
  (UTTransferListViewController.prototype.getIterator = function getIterator() {
    return this._viewmodel;
  }),
  (UTTransferListViewController.prototype._requestItems = function _requestItems(
    e
  ) {
    var n = this.getView(),
      o = !utils.JS.isBoolean(e) || e;
    o && this._viewmodel.stopAuctionUpdates(),
      n.setInteractionState(!1),
      services.Item.requestTransferItems().observe(
        this,
        function _onRequestItemsComplete(e, t) {
          e.unobserve(this);
          var i = 0 < this._viewmodel.values().length;
          if (t.success) {
            var s = this._viewmodel.getIndex();
            this._viewmodel.resetCollection([]),
              this._viewmodel.addArray(t.data.items),
              0 <= s &&
                0 <= this._viewmodel.getLastIndex() &&
                this._viewmodel.setIndex(
                  Math.min(s, this._viewmodel.getLastIndex())
                ),
              this.onDataChange.notify({
                items: this._viewmodel.values()
              }),
              this._renderView(),
              0 < this._viewmodel.values().length &&
                !isPhone() &&
                n.selectListRow(this._viewmodel.current().id),
              n.setInteractionState(!0);
          } else
            services.Notification.queue([
              services.Localization.localize(
                'notification.transferList.failedToLoad'
              ),
              enums.UINotificationType.NEGATIVE
            ]),
              this.getNavigationController().popViewController(!0);
          (this._viewmodel.refreshActiveTrades = !i),
            o && this._viewmodel.startAuctionUpdates();
        }
      );
  }),
  (UTTransferListViewController.prototype.removeItemsById = function removeItemsById(
    e
  ) {
    if (0 < this._viewmodel.length) {
      var t = this.getView();
      t.removeItemsById(e),
        t.selectListRow(this._viewmodel.current().id),
        this._updateSectionHeaders();
    } else this._renderView();
  }),
  (UTTransferListViewController.prototype.refreshList = function refreshList() {
    repositories.Item.setDirty(enums.FUTItemPile.TRANSFER),
      this._requestItems();
  }),
  (UTTransferListViewController.prototype._updateSectionHeaders = function _updateSectionHeaders() {
    var e = this.getView(),
      t = e.getSection(viewmodels.TransferSectionList.SECTION.SOLD),
      i = e.getSection(viewmodels.TransferSectionList.SECTION.UNSOLD),
      s = e.getSection(viewmodels.TransferSectionList.SECTION.AVAILABLE),
      n = this._viewmodel.hasSoldItems(),
      o = this._viewmodel.hasUnsoldItems(),
      a = repositories.Item.isPileFull(enums.FUTItemPile.TRANSFER);
    if (
      (t &&
        (t.setHeader(
          services.Localization.localize(
            'tradepile.dock.categories.expired.sold'
          ),
          services.Localization.localize('tradepile.label.clearsolditems'),
          n ? this._clearSold.bind(this) : null
        ),
        t.toggleHeaderButton(n)),
      i)
    ) {
      var r =
        services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.TRADING_ENABLED
        ) && services.User.getUser().hasTradeAccess();
      i.setHeader(
        services.Localization.localize(
          'tradepile.dock.categories.expired.notsold'
        ),
        services.Localization.localize('tradepile.button.relistall'),
        r && o ? this._relistAll.bind(this) : null
      ),
        i.toggleHeaderButton(r && o);
    }
    s && s.toggleHeaderButtonEnabled(!a);
  }),
  (UTTransferListViewController.prototype._renderView = function _renderView() {
    var o = this.getView();

    function _rowTapCallback(t) {
      var e = this._viewmodel.indexOf(function(e) {
        return e.id === t.id;
      });
      if ((this._viewmodel.setIndex(e), isPhone())) {
        var i = t.getAuctionData();
        if (
          !services.Configuration.checkFeatureEnabled(
            enums.ServerFeature.TRADING_ENABLED
          ) &&
          (i.isActiveTrade() || i.isClosedTrade())
        )
          return void utils.PopupManager.ShowAlert(
            utils.PopupManager.Alerts.TRADING_DISABLED
          );
        var s = this.getNavigationController();
        if (s) {
          var n = new controllers.items.ItemDetails();
          n.initWithIterator(this._viewmodel), s.pushViewController(n, !0);
        }
      } else o.selectListRow(t.id), this.onItemSelected.notify(e);
    }
    o.clearSections(),
      o
        .renderSection(
          this._viewmodel.getSectionItems(
            viewmodels.TransferSectionList.SECTION.SOLD
          ),
          viewmodels.TransferSectionList.SECTION.SOLD,
          _rowTapCallback.bind(this)
        )
        .setEmptyMessage(
          services.Localization.localize('tradepile.sold.empty.header'),
          services.Localization.localize('tradepile.sold.empty.body')
        ),
      o
        .renderSection(
          this._viewmodel.getSectionItems(
            viewmodels.TransferSectionList.SECTION.UNSOLD
          ),
          viewmodels.TransferSectionList.SECTION.UNSOLD,
          _rowTapCallback.bind(this)
        )
        .setEmptyMessage(
          services.Localization.localize('tradepile.unsold.empty.header'),
          services.Localization.localize('tradepile.unsold.empty.body')
        );
    var e = o.renderSection(
      this._viewmodel.getSectionItems(
        viewmodels.TransferSectionList.SECTION.AVAILABLE
      ),
      viewmodels.TransferSectionList.SECTION.AVAILABLE,
      _rowTapCallback.bind(this)
    );
    e.setHeader(
      services.Localization.localize('tradepile.dock.categories.available'),
      services.Localization.localize('infopanel.label.addplayer'),
      function _eOnAddAvailableItems() {
        if (isPhone()) {
          var e = this.getNavigationController();
          if (e) {
            var t = new UTTransferListNavigationController();
            t.init(),
              t.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY),
              e.pushViewController(t, !0);
          }
        } else this.onSearchClub.notify();
      }.bind(this)
    ),
      e.setEmptyMessage(
        services.Localization.localize('tradepile.availableitems.empty.header'),
        services.Localization.localize('tradepile.availableitems.empty.body')
      );
    var t = repositories.Item.isPileFull(enums.FUTItemPile.TRANSFER);
    e.toggleHeaderButtonEnabled(!t);
    var i = o.renderSection(
      this._viewmodel.getSectionItems(
        viewmodels.TransferSectionList.SECTION.ACTIVE
      ),
      viewmodels.TransferSectionList.SECTION.ACTIVE,
      _rowTapCallback.bind(this)
    );
    i.setHeader(
      services.Localization.localize('tradepile.dock.categories.current'),
      '',
      null
    ),
      i.setEmptyMessage(
        services.Localization.localize(
          'tradepile.availabletransfers.empty.header'
        ),
        services.Localization.localize(
          'tradepile.availabletransfers.empty.body'
        )
      ),
      this._updateSectionHeaders(),
      0 < this._viewmodel.values().length &&
        !isPhone() &&
        o.selectListRow(this._viewmodel.current().id);
  }),
  (UTTransferListViewController.prototype._clearSold = function _clearSold() {
    this.getView().setInteractionState(!1),
      services.Item.clearSoldItems().observe(this, function _clearSoldComplete(
        e,
        t
      ) {
        e.unobserve(this), this.refreshList();
      });
  }),
  (UTTransferListViewController.prototype._relistAll = function _relistAll() {
    function _relistAllComplete(e, t) {
      e.unobserve(this),
        NetworkErrorManager.checkCriticalStatus(t.status)
          ? NetworkErrorManager.handleStatus(t.status)
          : (t.status === enums.HTTPStatusCode.FORBIDDEN
              ? services.Notification.queue([
                  services.Localization.localize(
                    'popup.error.relistall.forbidden.message'
                  ),
                  enums.UINotificationType.NEGATIVE
                ])
              : t.success ||
                services.Notification.queue([
                  services.Localization.localize('popup.error.relistall'),
                  enums.UINotificationType.NEGATIVE
                ]),
            this.refreshList());
    }
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.AUCTIONS,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Transfer List - Re-List All'
    ),
      this.getView().setInteractionState(!1),
      utils.PopupManager.ShowConfirmation(
        utils.PopupManager.Confirmations.CONFIRM_RELIST_ALL,
        null,
        function _relistAllConfirmed() {
          services.Item.relistExpiredAuctions().observe(
            this,
            _relistAllComplete
          );
        }.bind(this),
        function _relistAllCancelled() {
          this.getView().setInteractionState(!0);
        }.bind(this)
      );
  }),
  (UTTransferListViewController.prototype._eViewmodelDataUpdated = function _eViewmodelDataUpdated(
    e
  ) {
    var t = this.getView();
    t.onTimedUpdate(),
      this._viewmodel.getActiveItems().length !==
        t
          .getSection(viewmodels.TransferSectionList.SECTION.ACTIVE)
          .getNumOfRows() && this.refreshList();
  }),
  (UTTransferListViewController.prototype._nInfoStateChanged = function _nInfoStateChanged(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.AUCTIONS,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Item Info Switch Button - Transfer List'
    );
  }),
  services.URL.registerDeepLinkID(enums.DeepLinkSections.TRADE_PILE, function(
    e
  ) {
    var t = getAppMain().getRootViewController();
    if (
      (t.setGameViewTab(UTGameTabBarController.TabTag.TRANSFERS),
      !gConfigurationModel.getConfigBoolean(
        models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET
      ))
    ) {
      var i = t.getPresentedViewController().getCurrentViewController();
      if (i) {
        var s = isPhone()
          ? new UTTransferListViewController()
          : new UTTransferListSplitViewController();
        s.init(), i.pushViewController(s);
      }
    }
  }),
  NamespaceManager.Register('interfaces'),
  (interfaces.TransferClubSearch = function ITransferClubSearch() {}),
  (interfaces.TransferClubSearch.prototype.conforms = function conforms(e) {}),
  (interfaces.TransferClubSearch.prototype.addPlayer = function addPlayer() {}),
  utils.JS.inherits(UTTransferClubResultsViewController, UTViewController),
  (UTTransferClubResultsViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        TelemetryManager.trackPage(
          TelemetryManager.Sections.CLUB,
          'TransferList Club Results'
        );
      var e = this.getView();
      e.onSearch.observe(this, this._eModifySearchSelected),
        e.addTarget(
          this,
          this._eRowActionSelected,
          enums.UIListEvent.ROW_ACTION
        ),
        e.addTarget(this, this._eNextPage, enums.UIPaginationEvent.NEXT),
        e.addTarget(this, this._ePrevPage, enums.UIPaginationEvent.PREVIOUS);
    }
  }),
  (UTTransferClubResultsViewController.prototype.initWithSearchCriteria = function initWithSearchCriteria(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof transferobjects.SearchCriteria,
        'Expected a search criteria DTO during initialization.'
      ),
      (this._searchCriteria = e),
      (this._searchCriteria.count = this._viewmodel.numItemsPerPage + 1),
      this.init());
  }),
  (UTTransferClubResultsViewController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._searchCriteria = null), (this._viewmodel = null);
  }),
  (UTTransferClubResultsViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.club.ClubSearchResults();
  }),
  (UTTransferClubResultsViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('infopanel.label.sendTradePile');
  }),
  (UTTransferClubResultsViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._requestItems(),
      this.getView().updateListTopPosition();
  }),
  (UTTransferClubResultsViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(), this._viewmodel.resetCollection([]);
  }),
  (UTTransferClubResultsViewController.prototype.setTransferClubSearchDelegate = function setTransferClubSearchDelegate(
    e
  ) {
    e.conforms(interfaces.TransferClubSearch) &&
      (this._transferClubSearchDelegate = e);
  }),
  (UTTransferClubResultsViewController.prototype._updateItemList = function _updateItemList(
    e
  ) {
    var t = this.getView();
    0 < e.length
      ? t.setItems(e)
      : t.setEmptyListMessage(this._searchCriteria.isModified()),
      t.setPaginationState(
        this._viewmodel.hasPreviousPage(),
        this._viewmodel.hasNextPage()
      ),
      t.setRowActionCallback(null);
  }),
  (UTTransferClubResultsViewController.prototype._handleItemRetrieval = function _handleItemRetrieval(
    e,
    t
  ) {
    var i = this._viewmodel.getIndex(),
      s = this._searchCriteria.acquiredDate !== enums.SearchSort.NONE;
    (this._viewmodel.sortByRecency = s),
      (this._viewmodel.sort = s
        ? this._searchCriteria.acquiredDate
        : this._searchCriteria.sort),
      this._viewmodel.addArray(e),
      (this._viewmodel.isFull = t),
      this._viewmodel.setIndex(i),
      !this._viewmodel.canShowPage(this._viewmodel.getCurrentPage()) ||
      this._viewmodel.shouldRequestItems()
        ? ((this._searchCriteria.offset += this._searchCriteria.count),
          this._requestItems())
        : this._updateItemList(this._viewmodel.getPageItems());
  }),
  (UTTransferClubResultsViewController.prototype._onClubItemRetrievalComplete = function _onClubItemRetrievalComplete(
    e,
    t
  ) {
    e.unobserve(this),
      t.success
        ? this._handleItemRetrieval(t.data.items, t.data.retrievedAll)
        : t.data.error && NetworkErrorManager.handle(t.data.error, !1);
  }),
  (UTTransferClubResultsViewController.prototype._requestItems = function _requestItems() {
    this._viewmodel.canShowPage() && !this._viewmodel.shouldRequestItems()
      ? this._updateItemList(this._viewmodel.getPageItems())
      : this._searchCriteria &&
        services.Item.searchClub(this._searchCriteria).observe(
          this,
          this._onClubItemRetrievalComplete
        );
  }),
  (UTTransferClubResultsViewController.prototype._eRowActionSelected = function _eRowActionSelected(
    e,
    t,
    i
  ) {
    var s = i.item || null;
    utils.Debug.Assert(
      s instanceof entities.Item,
      'Expected to receive an item entity.'
    ),
      s &&
        services.Item.move(s, enums.FUTItemPile.TRANSFER).observe(
          this,
          function _eMoveComplete(e, t) {
            if ((e.unobserve(this), t.success)) {
              var i = this._viewmodel.getItemList(),
                s = this._viewmodel.getIndex();
              (i.length = s),
                (this._searchCriteria.offset = s),
                services.Item.searchClub(this._searchCriteria).observe(
                  this,
                  this._onClubItemRetrievalComplete
                ),
                this._transferClubSearchDelegate &&
                  this._transferClubSearchDelegate.addPlayer();
            } else
              t.status !== enums.HTTPStatusCode.UNKNOWN &&
                NetworkErrorManager.handleStatus(t.status),
                services.Notification.queue([
                  services.Localization.localize(
                    'notification.item.moveFailed'
                  ),
                  enums.UINotificationType.NEGATIVE
                ]),
                this._requestItems();
          }
        );
  }),
  (UTTransferClubResultsViewController.prototype._eModifySearchSelected = function _eModifySearchSelected(
    e
  ) {
    var t = this.getNavigationController();
    t && t.popViewController(!0);
  }),
  (UTTransferClubResultsViewController.prototype._eNextPage = function _eNextPage(
    e,
    t,
    i
  ) {
    this._viewmodel.hasNextPage() &&
      (this._viewmodel.nextPage(),
      this._viewmodel.shouldRequestItems()
        ? ((this._searchCriteria.offset += this._searchCriteria.count),
          this._requestItems())
        : this._updateItemList(this._viewmodel.getPageItems()));
  }),
  (UTTransferClubResultsViewController.prototype._ePrevPage = function _ePrevPage(
    e,
    t,
    i
  ) {
    this._viewmodel.hasPreviousPage() &&
      this._updateItemList(this._viewmodel.previousPage());
  }),
  (UTTransferClubSearchViewController = function UTTransferClubSearchViewController() {
    UTViewController.call(this),
      (this._viewmodel = new viewmodels.ItemSearch()),
      (this._transferClubSearchDelegate = null);
  }),
  utils.JS.inherits(UTTransferClubSearchViewController, UTViewController),
  (UTTransferClubSearchViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        TelemetryManager.trackPage(
          TelemetryManager.Sections.AUCTIONS,
          'Transfer List Club Search'
        );
      var e = this.getView();
      e
        .getSearchButton()
        .addTarget(this, this._eSearchSelected, enums.Event.TAP),
        e
          .getResetButton()
          .addTarget(this, this._eResetSelected, enums.Event.TAP),
        e
          .getPlayerNameSearch()
          .addTarget(this, this._ePlayerNameChange, enums.Event.CHANGE),
        e
          .getSortOptions()
          .addTarget(this, this._eSortToggled, enums.Event.CHANGE),
        e
          .getSortDropDown()
          .addTarget(this, this._eDropDownChanged, enums.Event.CHANGE),
        e.onFilterChange.observe(this, this._eFilterChanged),
        e.setupSortOptions(!1, !0),
        (this._viewmodel.searchCriteria.untradeables =
          enums.SearchUntradeables.EXCLUDE);
    }
  }),
  (UTTransferClubSearchViewController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._viewmodel = null);
  }),
  (UTTransferClubSearchViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.club.ClubSearchFilters();
  }),
  (UTTransferClubSearchViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    this.getNavigationController().setNavigationVisibility(!0, !0),
      (this._viewmodel.searchCriteria.excludeDefIds = []),
      e.getSortOptions().toggleSlider(enums.UISortOptionType.EXCLUDE_SQUAD, !1),
      this._viewmodel.updateSearchCriteria(this._viewmodel.searchCriteria),
      e.setFilters(this._viewmodel);
  }),
  (UTTransferClubSearchViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.clubsearch');
  }),
  (UTTransferClubSearchViewController.prototype.setSearchCriteria = function setSearchCriteria(
    e
  ) {
    this._viewmodel.updateSearchCriteria(e);
  }),
  (UTTransferClubSearchViewController.prototype.setTransferClubSearchDelegate = function setTransferClubSearchDelegate(
    e
  ) {
    e.conforms(interfaces.TransferClubSearch) &&
      (this._transferClubSearchDelegate = e);
  }),
  (UTTransferClubSearchViewController.prototype._eSortToggled = function _eSortToggled(
    e,
    t,
    i
  ) {
    i.id === enums.UISortOptionType.EXCLUDE_SQUAD &&
      (i.checked
        ? this._viewmodel
            .requestActiveSquadDefIds()
            .observe(this, function(e, t) {
              e.unobserve(this),
                (this._viewmodel.searchCriteria.excludeDefIds = t.data.defIds);
            })
        : (this._viewmodel.searchCriteria.excludeDefIds = []));
  }),
  (UTTransferClubSearchViewController.prototype._eDropDownChanged = function _eDropDownChanged(
    e,
    t,
    i
  ) {
    var s = 'Club Search Filters - Sort By DropDown changed to: ';
    switch (e.getId()) {
      case enums.SearchSortType.VALUE_DESC:
        (this._viewmodel.searchCriteria.sort = e.getValue()),
          (s += "'Highest Quick Sell'");
        break;
      case enums.SearchSortType.VALUE_ASC:
        (this._viewmodel.searchCriteria.sort = e.getValue()),
          (s += "'Lowest Quick Sell'");
        break;
      case enums.SearchSortType.RECENCY_DESC:
        (this._viewmodel.searchCriteria.acquiredDate = e.getValue()),
          (s += "'Most Recent'");
        break;
      default:
        utils.Debug.Assert(
          !1,
          'ClubSearchFilters :: Passed an invalid SearchSort Enums.'
        );
    }
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.CLUB,
      TelemetryManager.Categories.FILTER,
      s
    );
  }),
  (UTTransferClubSearchViewController.prototype._eFilterChanged = function _eFilterChanged(
    e,
    t,
    i,
    s
  ) {
    this._viewmodel.updateFromFilterChange(t, i, s),
      this.getView().setFilters(this._viewmodel);
  }),
  (UTTransferClubSearchViewController.prototype._eResetSelected = function _eResetSelected(
    e,
    t
  ) {
    this._viewmodel.resetSearch();
    var i = this.getView(),
      s = i.getSortDropDown();
    i.setFilters(this._viewmodel),
      i.getSortOptions().reset(),
      s.setIndex(s.getDefaultIndex());
  }),
  (UTTransferClubSearchViewController.prototype._ePlayerNameChange = function _ePlayerNameChange(
    e,
    t
  ) {
    var i = this.getView()
        .getPlayerNameSearch()
        .getSelected(),
      s = this.getView();
    utils.JS.isValid(i)
      ? this._viewmodel.setPlayerData(i)
      : this._viewmodel.clearPlayerData(),
      s.setFilters(this._viewmodel),
      utils.JS.isValid(i) &&
        (s.setFilterValue(enums.UISearchFilters.NATION, -1),
        s.setFilterValue(enums.UISearchFilters.LEAGUE, -1),
        s.setFilterValue(enums.UISearchFilters.CLUB, -1));
  }),
  (UTTransferClubSearchViewController.prototype._eSearchSelected = function _eSearchSelected(
    e,
    t,
    i
  ) {
    if (hasConnection()) {
      var s = new UTTransferClubResultsViewController(),
        n = this._viewmodel.searchCriteria;
      this._transferClubSearchDelegate &&
        s.setTransferClubSearchDelegate(this._transferClubSearchDelegate),
        (n.offset = 0),
        s.initWithSearchCriteria(n),
        this.getNavigationController().pushViewController(s, !0);
    } else
      utils.PopupManager.ShowAlert(
        utils.PopupManager.Alerts.NO_INTERNET_CONNECTION
      );
  }),
  utils.JS.inherits(UTTransferListNavigationController, UTNavigationController),
  (UTTransferListNavigationController.prototype.dealloc = function dealloc() {
    this.superclass(), this.onAddPlayer.dealloc(), (this.onAddPlayer = null);
  }),
  (UTTransferListNavigationController.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new UTTransferClubSearchViewController();
  }),
  (UTTransferListNavigationController.prototype.setTransferClubSearchDelegate = function setTransferClubSearchDelegate(
    e
  ) {
    e.conforms(interfaces.TransferClubSearch) &&
      ((this._transferClubSearchDelegate = e),
      this.getRootController().setTransferClubSearchDelegate(e));
  }),
  utils.JS.inherits(UTTransferListSplitViewController, UTSplitViewController),
  (UTTransferListSplitViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        this._listController.init(),
        this._listController.onDataChange.observe(this, this._eListDataChanged),
        this._listController.onItemSelected.observe(this, this._eItemSelected),
        this._listController.onSearchClub.observe(
          this,
          this._eAddPlayerSelected
        ),
        this._itemDetailController.initWithIterator(
          this._listController.getIterator()
        ),
        this._itemDetailController.enableSwiping(!1),
        this.addChildViewController(this._listController),
        this.addChildViewController(this._itemDetailController);
      var e = getDefaultDispatcher();
      e.addObserver(
        enums.Notification.ITEM_ACTIVATE,
        this,
        this._nItemActivated
      ),
        e.addObserver(
          enums.Notification.ITEM_DISCARD,
          this,
          this._nItemDiscarded
        ),
        e.addObserver(enums.Notification.ITEM_LIST, this, this._nItemListed),
        e.addObserver(enums.Notification.ITEM_MOVE, this, this._nItemMoved),
        e.addObserver(
          enums.Notification.ITEM_CLEARSOLD,
          this,
          this._nClearSold
        );
    }
  }),
  (UTTransferListSplitViewController.prototype.dealloc = function dealloc() {
    this._itemDetailController.dealloc(),
      (this._itemDetailController = null),
      this._listController.dealloc(),
      (this._listController = null),
      this._clubSearchController &&
        (this._clubSearchController.dealloc(),
        (this._clubSearchController = null));
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.ITEM_ACTIVATE, this),
      e.removeObserver(enums.Notification.ITEM_DISCARD, this),
      e.removeObserver(enums.Notification.ITEM_LIST, this),
      e.removeObserver(enums.Notification.ITEM_MOVE, this),
      e.removeObserver(enums.Notification.ITEM_CLEARSOLD, this),
      this.superclass();
  }),
  (UTTransferListSplitViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._listController.getNavigationTitle();
  }),
  (UTTransferListSplitViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._setLeftController(this._listController),
      this._itemDetailController.setNavigationStyle(
        enums.UINavigationBarStyle.SECONDARY
      );
  }),
  (UTTransferListSplitViewController.prototype._eItemSelected = function _eItemSelected(
    e,
    t
  ) {
    this._itemDetailController.setIndex(t),
      this._setRightController(this._itemDetailController),
      this._resetSearch();
  }),
  (UTTransferListSplitViewController.prototype._eAddPlayerSelected = function _eAddPlayerSelected(
    e
  ) {
    this._clubSearchController ||
      ((this._clubSearchController = new UTTransferListNavigationController()),
      this._clubSearchController.setTransferClubSearchDelegate(this),
      this._clubSearchController.init(),
      this.addChildViewController(this._clubSearchController)),
      this._setRightController(this._clubSearchController);
  }),
  (UTTransferListSplitViewController.prototype.addPlayer = function addPLayer() {
    this._listController.refreshList();
  }),
  (UTTransferListSplitViewController.prototype._eListDataChanged = function _eListDataChanged(
    e,
    t
  ) {
    t.items &&
      (0 < t.items.length
        ? (repositories.Item.isPileFull(enums.FUTItemPile.TRANSFER) &&
            this._resetSearch(),
          this._getRightController() instanceof
            UTTransferListNavigationController ||
            this._setRightController(this._itemDetailController),
          this._itemDetailController.setIndex(
            this._listController.getIterator().getIndex()
          ))
        : (this._resetSearch(), this.hideRightController()));
  }),
  (UTTransferListSplitViewController.prototype._nItemActivated = function _nItemActivated(
    e,
    t,
    i
  ) {
    this._listController.removeItemsById(i.itemIds || []);
  }),
  (UTTransferListSplitViewController.prototype._nItemDiscarded = function _nItemDiscarded(
    e,
    t,
    i
  ) {
    this._listController.removeItemsById(i.itemIds || []),
      this._listController.getIterator().length ||
        (this._resetSearch(), this.hideRightController());
  }),
  (UTTransferListSplitViewController.prototype._nClearSold = function _nClearSold(
    e,
    t,
    i
  ) {
    this._listController.removeItemsById(i.itemIds || []);
  }),
  (UTTransferListSplitViewController.prototype._nItemListed = function _nItemListed(
    e,
    t,
    i
  ) {
    this._listController.refreshList(), this._resetSearch();
  }),
  (UTTransferListSplitViewController.prototype._nItemMoved = function _nItemMoved(
    e,
    t,
    i
  ) {
    this._listController.refreshList();
  }),
  (UTTransferListSplitViewController.prototype._resetSearch = function _resetSearch() {
    this._clubSearchController &&
      this._clubSearchController.popToRootViewController();
  }),
  NamespaceManager.Register('views.popups'),
  (views.popups.DailyGift = function DailyGiftPopupView() {
    UTView.call(this),
      (this.onComplete = new UTObservable()),
      Object.defineProperty(this, 'onComplete', {
        writable: !1
      });
  }),
  utils.JS.inherits(views.popups.DailyGift, UTView),
  (views.popups.DailyGift.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('daily-gift');
      var t = document.createElement('header');
      (this.__popupTitle = document.createElement('h1')),
        this.__popupTitle.classList.add('daily-gift-title'),
        t.appendChild(this.__popupTitle),
        e.appendChild(t),
        (this.__textInfo = document.createElement('p')),
        this.__textInfo.classList.add('text-info'),
        e.appendChild(this.__textInfo);
      var i = document.createElement('div');
      i.classList.add('daily-gift-body'),
        (this.__packGiftImage = document.createElement('div')),
        this.__packGiftImage.classList.add('pack-gift-image'),
        (this._packBackgroundImage = new UTImageView()),
        this._packBackgroundImage
          .getRootElement()
          .classList.add('pack-background-image'),
        this.__packGiftImage.appendChild(
          this._packBackgroundImage.getRootElement()
        ),
        (this._packForegroundImage = new UTImageView()),
        this._packForegroundImage
          .getRootElement()
          .classList.add('pack-foreground-image'),
        this.__packGiftImage.appendChild(
          this._packForegroundImage.getRootElement()
        ),
        i.appendChild(this.__packGiftImage),
        (this.__coinGiftImage = document.createElement('div')),
        this.__coinGiftImage.classList.add('coin-gift-image'),
        (this._coinGiftBackground = new UTImageView()),
        this._coinGiftBackground
          .getRootElement()
          .classList.add('pack-background-image'),
        this.__coinGiftImage.appendChild(
          this._coinGiftBackground.getRootElement()
        ),
        (this._coinGiftForeground = new UTImageView()),
        this._coinGiftForeground
          .getRootElement()
          .classList.add('pack-foreground-image'),
        this.__coinGiftImage.appendChild(
          this._coinGiftForeground.getRootElement()
        ),
        i.appendChild(this.__coinGiftImage),
        (this.__giftType = document.createElement('p')),
        this.__giftType.classList.add('daily-gift-award'),
        i.appendChild(this.__giftType),
        e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('daily-gift-footer'),
        (this._claimButton = new UTStandardButtonControl()),
        this._claimButton.getRootElement().classList.add('call-to-action'),
        s.appendChild(this._claimButton.getRootElement()),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.popups.DailyGift.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__popupTitle = null),
      (this.__textInfo = null),
      (this.__packGiftImage = null),
      this._packBackgroundImage.destroy(),
      this._packForegroundImage.destroy(),
      (this.__coinGiftImage = null),
      this._coinGiftBackground.destroy(),
      this._coinGiftForeground.destroy(),
      (this.__giftType = null),
      this._claimButton.destroy();
  }),
  (views.popups.DailyGift.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.popups.DailyGift.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.popups.DailyGift.COIN_ASSET_ID = 99),
  (views.popups.DailyGift.prototype.init = function init() {
    this._claimButton.init(),
      this._claimButton.setText(
        services.Localization.localize('common.dialog.accept')
      ),
      this._claimButton.addTarget(
        this.onComplete,
        this.onComplete.notify,
        enums.Event.TAP
      ),
      (this.__textInfo.textContent = services.Localization.localize(
        'dailyreward.popupInfo'
      )),
      this.superclass();
  }),
  (views.popups.DailyGift.prototype.dealloc = function dealloc() {
    this.onComplete.dealloc(), this.superclass();
  }),
  (views.popups.DailyGift.prototype.render = function render(e, t) {
    var i = 0;
    e === enums.AwardType.COIN
      ? (DOMKit.toggleDisplayStyle(this.__packGiftImage, !1),
        DOMKit.toggleDisplayStyle(this.__coinGiftImage, !0),
        (i = views.popups.DailyGift.COIN_ASSET_ID),
        this._coinGiftBackground.setResource(
          utils.AssetLocator.getImage(
            utils.AssetLocator.IMAGE_TYPE_PACKS_BACKGROUND,
            enums.Year.ASSET,
            i,
            i
          )
        ),
        this._coinGiftForeground.setResource(
          utils.AssetLocator.getImage(
            utils.AssetLocator.IMAGE_TYPE_BOOST_COIN,
            enums.Year.ASSET,
            1,
            0
          )
        ),
        (this.__giftType.textContent =
          services.Localization.localizeNumber(t) +
          ' ' +
          services.Localization.localize('card.title.coins')))
      : e === enums.AwardType.PACK &&
        ((i = enums.Purchase.DisplayGroupId.MYPACKS),
        DOMKit.toggleDisplayStyle(this.__packGiftImage, !0),
        DOMKit.toggleDisplayStyle(this.__coinGiftImage, !1),
        this._packBackgroundImage.setResource(
          utils.AssetLocator.getImage(
            utils.AssetLocator.IMAGE_TYPE_PACKS_BACKGROUND,
            enums.Year.ASSET,
            i,
            i
          )
        ),
        this._packForegroundImage.setResource(
          utils.AssetLocator.getImage(
            utils.AssetLocator.IMAGE_TYPE_PACKS_FOREGROUND,
            enums.Year.ASSET,
            i,
            0
          )
        ),
        (this.__giftType.textContent = services.Localization.localize(
          'FUT_STORE_PACK_' + t.toString() + '_NAME_MOBILE'
        ))),
      (this.__popupTitle.textContent = services.Localization.localize(
        'dailyreward.popupheader'
      ).toUpperCase());
  }),
  NamespaceManager.Register('controllers.views.popups'),
  (controllers.views.popups.DailyGift = function DailyGift(e) {
    controllers.views.popups.BasePopup.call(this),
      (this._rewardType = e.rewardType || ''),
      Object.defineProperty(this, '_rewardType', {
        writable: !1
      }),
      (this._rewardValue = e.rewardValue || -1),
      Object.defineProperty(this, '_rewardValue', {
        writable: !1
      });
  }),
  utils.JS.inherits(
    controllers.views.popups.DailyGift,
    controllers.views.popups.BasePopup
  ),
  (controllers.views.popups.DailyGift.prototype.init = function init() {
    this.superclass(),
      this.getView().render(this._rewardType, this._rewardValue),
      this.getView().onComplete.observe(
        this,
        this.onExit.notify.bind(this.onExit)
      ),
      TelemetryManager.trackPage(TelemetryManager.Sections.MISC, 'Daily Gift');
  }),
  (controllers.views.popups.DailyGift.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.DailyGift();
  }),
  utils.JS.inherits(UTHomeHubViewModel, UTObject),
  (UTHomeHubViewModel.prototype.dealloc = function dealloc() {
    this.superclass(), this.cancelRequests();
  }),
  (UTHomeHubViewModel.prototype.cancelRequests = function cancelRequests() {
    0 < this._requests.length &&
      (this._requests.forEach(function(e) {
        e.clearObservers(),
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
      }, this),
      (this._requests = []));
  }),
  (UTHomeHubViewModel.prototype._completeRequest = function _completeRequest(
    e,
    t
  ) {
    e.unobserve(this),
      gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
    var i = this._requests.indexOf(e);
    0 <= i && this._requests.splice(i, 1);
  }),
  (UTHomeHubViewModel.prototype.requestUpcomingChampionsEvents = function requestUpcomingChampionsEvents() {
    var e = services.Champions.requestUpcomingEvents();
    return (
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      this._requests.push(e.observe(this, this._completeRequest)),
      e
    );
  }),
  (UTHomeHubViewModel.prototype.requestWeekendLeagueState = function requestWeekendLeagueState() {
    var e = services.Rivals.requestWeekendLeagueState();
    return (
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      this._requests.push(e.observe(this, this._completeRequest)),
      e
    );
  }),
  (UTHomeHubViewModel.prototype.requestWeekendLeagueAccess = function requestWeekendLeagueAccess() {
    var e = services.Rivals.accessWeekendLeague();
    return (
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      this._requests.push(e.observe(this, this._completeRequest)),
      e
    );
  }),
  utils.JS.inherits(UTWeekendLeagueProgressView, UTTargetActionView),
  (UTWeekendLeagueProgressView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-weekend-league-progress-view');
      var t = document.createElement('div');
      t.classList.add('ut-weekend-league-progress-view--body'),
        (this.__title = document.createElement('h1')),
        this.__title.classList.add('ut-weekend-league-progress-view--title'),
        t.appendChild(this.__title),
        (this.__description = document.createElement('p')),
        this.__description.classList.add(
          'ut-weekend-league-progress-view--description'
        ),
        t.appendChild(this.__description),
        (this.__progress = document.createElement('div')),
        this.__progress.classList.add(
          'ut-weekend-league-progress-view--progress'
        ),
        (this._imgWeekendLeague = new UTImageView()),
        this._imgWeekendLeague
          .getRootElement()
          .classList.add('ut-weekend-league-progress-view--img-weekend'),
        this.__progress.appendChild(this._imgWeekendLeague.getRootElement()),
        (this._progressBar = new UTProgressBarView()),
        this._progressBar.getRootElement().classList.add('large'),
        this.__progress.appendChild(this._progressBar.getRootElement()),
        t.appendChild(this.__progress),
        (this.__countdown = document.createElement('p')),
        this.__countdown.classList.add(
          'ut-weekend-league-progress-view--countdown'
        ),
        t.appendChild(this.__countdown),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('ut-weekend-league-progress-view--action'),
        (this._imgChampions = new UTImageView()),
        this._imgChampions
          .getRootElement()
          .classList.add('ut-weekend-league-progress-view--img-champions'),
        i.appendChild(this._imgChampions.getRootElement()),
        (this._btnRedeem = new UTStandardButtonControl()),
        this._btnRedeem
          .getRootElement()
          .classList.add('ut-weekend-league-progress-view--btn-redeem'),
        this._btnRedeem.getRootElement().classList.add('mini'),
        this._btnRedeem.getRootElement().classList.add('call-to-action'),
        i.appendChild(this._btnRedeem.getRootElement()),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTWeekendLeagueProgressView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      (this.__description = null),
      (this.__progress = null),
      this._imgWeekendLeague.destroy(),
      this._progressBar.destroy(),
      (this.__countdown = null),
      this._imgChampions.destroy(),
      this._btnRedeem.destroy();
  }),
  (UTWeekendLeagueProgressView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTWeekendLeagueProgressView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTWeekendLeagueProgressView.Event = {
    COUNTDOWN_COMPLETED:
      'UTWeekendLeagueProgressView.Event.COUNTDOWN_COMPLETED',
    REDEEM: 'UTWeekendLeagueProgressView.Event.REDEEM'
  }),
  (UTWeekendLeagueProgressView.prototype.init = function init() {
    this.superclass(),
      this.setTitle(
        services.Localization.localize('rivals.weekendleague.title')
      ),
      this._btnRedeem.init(),
      this._btnRedeem.setText(
        services.Localization.localize('rivals.weekendleague.redeem')
      ),
      this._btnRedeem.addTarget(
        this,
        this._eActionButtonSelected,
        enums.Event.TAP
      ),
      1 === window.devicePixelRatio
        ? (this._imgChampions.setLocalResource('images/champions_logo@1x.png'),
          this._imgWeekendLeague.setLocalResource(
            'images/weekend_league_logo@1x.png'
          ))
        : 2 === window.devicePixelRatio
        ? (this._imgChampions.setLocalResource('images/champions_logo@2x.png'),
          this._imgWeekendLeague.setLocalResource(
            'images/weekend_league_logo@2x.png'
          ))
        : (this._imgChampions.setLocalResource('images/champions_logo@3x.png'),
          this._imgWeekendLeague.setLocalResource(
            'images/weekend_league_logo@3x.png'
          )),
      this._timer.setInterval(1e3),
      this._timer.setWorkFunc(this._handleEventTimer.bind(this));
  }),
  (UTWeekendLeagueProgressView.prototype.dealloc = function dealloc() {
    this._timer.dealloc(), this.superclass();
  }),
  (UTWeekendLeagueProgressView.prototype.setTitle = function setTitle(e) {
    this.__title.textContent = e;
  }),
  (UTWeekendLeagueProgressView.prototype.setDescription = function setDescription(
    e
  ) {
    this.__description.textContent = e;
  }),
  (UTWeekendLeagueProgressView.prototype.setProgress = function setProgress(
    e,
    t
  ) {
    var i = 0 < t ? Math.floor((e / t) * 100) : 0;
    this._progressBar.setProgress(i),
      this._progressBar.setProgressLabel(
        services.Localization.localize('rivals.weekendleague.progress', [
          services.Localization.localizeNumber(e),
          services.Localization.localizeNumber(t)
        ])
      ),
      this._btnRedeem.setInteractionState(t <= e && 0 < t),
      this._btnRedeem.setDisplay(t <= e && 0 < t);
  }),
  (UTWeekendLeagueProgressView.prototype.setEventTime = function setEventTime(
    e,
    t
  ) {
    this._startTime = e;
  }),
  (UTWeekendLeagueProgressView.prototype.startEventTimer = function startEventTimer() {
    var e = Math.round(Date.now() / 1e3),
      t = this._startTime < e,
      i = this._calculateCountdownTime(e, t);
    this._timer.stop(),
      0 < i
        ? ((this.__countdown.textContent = services.Localization.localize(
            t
              ? 'rivals.weekendleague.countdown.graceperiod'
              : 'rivals.weekendleague.countdown.start',
            [services.Localization.localizeTimeRemaining(i)]
          )),
          this._timer.start())
        : (this.__countdown.textContent = '');
  }),
  (UTWeekendLeagueProgressView.prototype.stopEventTimer = function stopEventTimer() {
    this._timer.stop();
  }),
  (UTWeekendLeagueProgressView.prototype._handleEventTimer = function _handleEventTimer() {
    var e = Math.round(Date.now() / 1e3),
      t = this._startTime < e,
      i = this._calculateCountdownTime(e, t);
    0 < i
      ? (this.__countdown.textContent = services.Localization.localize(
          t
            ? 'rivals.weekendleague.countdown.graceperiod'
            : 'rivals.weekendleague.countdown.start',
          [services.Localization.localizeTimeRemaining(i)]
        ))
      : ((this.__countdown.textContent = ''),
        this._timer.stop(),
        this._triggerActions(
          UTWeekendLeagueProgressView.Event.COUNTDOWN_COMPLETED
        ));
  }),
  (UTWeekendLeagueProgressView.prototype._calculateCountdownTime = function _calculateCountdownTime(
    e,
    t
  ) {
    var i = t
      ? 3600 *
        (services.Configuration.getFeatureSetting(
          enums.ServerFeature.WEEKEND_LEAGUE_GRACE_PERIOD_HOURS
        ) || 0)
      : 0;
    return Math.max(this._startTime + i - e, 0);
  }),
  (UTWeekendLeagueProgressView.prototype._eActionButtonSelected = function _eActionButtonSelected(
    e,
    t,
    i
  ) {
    this._triggerActions(UTWeekendLeagueProgressView.Event.REDEEM, {
      inGracePeriod: this._startTime < Math.round(Date.now() / 1e3)
    });
  }),
  utils.JS.inherits(UTSquadTileContentView, UTView),
  (UTSquadTileContentView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tile-content-squad');
      var t = document.createElement('div');
      t.classList.add('pitch-image'), e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('info-container'),
        (this.__squadName = document.createElement('div')),
        this.__squadName.classList.add('squad-name'),
        i.appendChild(this.__squadName),
        (this.__formation = document.createElement('div')),
        this.__formation.classList.add('formation'),
        i.appendChild(this.__formation),
        e.appendChild(i),
        (this._squadStats = new components.SquadStats()),
        e.appendChild(this._squadStats.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadTileContentView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__squadName = null),
      (this.__formation = null),
      this._squadStats.destroy();
  }),
  (UTSquadTileContentView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadTileContentView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadTileContentView.prototype.init = function init() {
    this.superclass(), this._squadStats.init();
  }),
  (UTSquadTileContentView.prototype.setSquad = function setSquad(e) {
    (this.__squadName.textContent = e.getName()),
      this._squadStats.set(e.getChemistry(), e.getRating()),
      (this.__formation.textContent = e.getFormation().getDisplayName()),
      e.isDream() ? this.addClass('concept') : this.removeClass('concept');
  }),
  utils.JS.inherits(UTSquadTileView, UTTileView),
  (UTSquadTileView.prototype._getContentViewInstance = function _getContentViewInstance() {
    return new UTSquadTileContentView();
  }),
  (UTSquadTileView.prototype.setSquad = function setSquad(e) {
    this.getContentView().setSquad(e);
  }),
  utils.JS.inherits(UTGraphicalInfoTileContentView, UTView),
  (UTGraphicalInfoTileContentView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tile-content-graphic-info');
      var t = document.createElement('div');
      t.classList.add('image'),
        e.appendChild(t),
        (this.__description = document.createElement('p')),
        this.__description.classList.add('description'),
        e.appendChild(this.__description),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTGraphicalInfoTileContentView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__description = null);
  }),
  (UTGraphicalInfoTileContentView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTGraphicalInfoTileContentView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTGraphicalInfoTileContentView.prototype.setDescription = function setDescription(
    e
  ) {
    this.__description.textContent = e.toString();
  }),
  utils.JS.inherits(UTGraphicalInfoTileView, UTTileView),
  (UTGraphicalInfoTileView.prototype._getContentViewInstance = function _getContentViewInstance() {
    return new UTGraphicalInfoTileContentView();
  }),
  (UTGraphicalInfoTileView.prototype.setDescription = function setDescription(
    e
  ) {
    this.getContentView().setDescription(e);
  }),
  utils.JS.inherits(UTObjectivesHubTileContentView, UTView),
  (UTObjectivesHubTileContentView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tile-content-objectives'),
        (this.__unclaimedRewardsBubble = document.createElement('span')),
        this.__unclaimedRewardsBubble.classList.add(
          'ut-numeric-notification-bubble'
        ),
        e.appendChild(this.__unclaimedRewardsBubble);
      var t = document.createElement('div');
      t.classList.add('ut-tile-view--campaign-content'),
        (this.__subtitle = document.createElement('h2')),
        this.__subtitle.classList.add('ut-tile-view--subtitle'),
        t.appendChild(this.__subtitle),
        (this.__expiry = document.createElement('div')),
        this.__expiry.classList.add('ut-tile-view--expiry'),
        t.appendChild(this.__expiry),
        e.appendChild(t),
        (this.__unclaimedRewardsTag = document.createElement('div')),
        this.__unclaimedRewardsTag.classList.add('ut-tile-view--tag'),
        e.appendChild(this.__unclaimedRewardsTag);
      var i = document.createElement('div');
      i.classList.add('image'),
        e.appendChild(i),
        (this.__description = document.createElement('p')),
        this.__description.classList.add('description'),
        e.appendChild(this.__description),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTObjectivesHubTileContentView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__unclaimedRewardsBubble = null),
      (this.__subtitle = null),
      (this.__expiry = null),
      (this.__unclaimedRewardsTag = null),
      (this.__description = null);
  }),
  (UTObjectivesHubTileContentView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTObjectivesHubTileContentView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTObjectivesHubTileContentView.prototype.setUnclaimedTagText = function setUnclaimedTagText(
    e
  ) {
    this.__unclaimedRewardsTag && (this.__unclaimedRewardsTag.textContent = e);
  }),
  (UTObjectivesHubTileContentView.prototype.toggleNumUnclaimedObjectives = function toggleNumUnclaimedObjectives(
    e
  ) {
    this.__unclaimedRewardsBubble &&
      DOMKit.toggleDisplayStyle(this.__unclaimedRewardsBubble, e);
  }),
  (UTObjectivesHubTileContentView.prototype.setNumUnclaimedObjectives = function setNumUnclaimedObjectives(
    e
  ) {
    this.__unclaimedRewardsBubble &&
      (this.__unclaimedRewardsBubble.textContent = e);
  }),
  (UTObjectivesHubTileContentView.prototype.setSubtitle = function setSubtitle(
    e
  ) {
    this.__subtitle && (this.__subtitle.textContent = e);
  }),
  (UTObjectivesHubTileContentView.prototype.setExpiryLabel = function setExpiryLabel(
    e
  ) {
    this.__expiry && (this.__expiry.textContent = e);
  }),
  (UTObjectivesHubTileContentView.prototype.setDescription = function setDescription(
    e
  ) {
    this.__description.textContent = e.toString();
  }),
  utils.JS.inherits(UTObjectivesHubTileView, UTTileView),
  (UTObjectivesHubTileView.prototype.init = function init() {
    this.superclass();
  }),
  (UTObjectivesHubTileView.prototype.dealloc = function dealloc() {
    this.superclass();
  }),
  (UTObjectivesHubTileView.prototype._getContentViewInstance = function _getContentViewInstance() {
    return new UTObjectivesHubTileContentView();
  }),
  (UTObjectivesHubTileView.prototype.setUnclaimedTagText = function setUnclaimedTagText(
    e
  ) {
    e && this.getContentView().setUnclaimedTagText(e);
  }),
  (UTObjectivesHubTileView.prototype.setNumUnclaimedObjectives = function setNumUnclaimedObjectives(
    e
  ) {
    this.getContentView().setNumUnclaimedObjectives(0 < e ? e.toString() : ''),
      this.getContentView().toggleNumUnclaimedObjectives(0 < e),
      this.toggleClass('has-unclaimed-rewards', 0 < e);
  }),
  (UTObjectivesHubTileView.prototype.setSubtitle = function setSubtitle(e) {
    e && this.getContentView().setSubtitle(e);
  }),
  (UTObjectivesHubTileView.prototype.setExpiryLabel = function setExpiryLabel(
    e
  ) {
    e && this.getContentView().setExpiryLabel(e);
  }),
  (UTObjectivesHubTileView.prototype.setDescriptionFromObjectiveState = function setDescriptionFromObjectiveState(
    e,
    t
  ) {
    t
      ? 1 < e
        ? this.getContentView().setDescription(
            services.Localization.localize(
              'dynamicObjective.tile.unclaimedDescription'
            )
          )
        : 1 === e
        ? this.getContentView().setDescription(
            services.Localization.localize(
              'dynamicObjective.tile.unclaimedDescription.singular'
            )
          )
        : this.getContentView().setDescription(
            services.Localization.localize('dynamicObjective.tile.description')
          )
      : this.getContentView().setDescription(
          services.Localization.localize('dynamicObjective.tile.disabled')
        );
  }),
  utils.JS.inherits(UTTransfersTileContentView, UTView),
  (UTTransfersTileContentView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-tile-content-transfers');
      var t = document.createElement('div');
      t.classList.add('total-transfers'),
        (this.__totalTransferValue = document.createElement('span')),
        this.__totalTransferValue.classList.add('value'),
        t.appendChild(this.__totalTransferValue),
        (this.__totalTransferLabel = document.createElement('span')),
        this.__totalTransferLabel.classList.add('label'),
        t.appendChild(this.__totalTransferLabel),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('active-transfers'),
        (this.__activeTransferLabel = document.createElement('span')),
        this.__activeTransferLabel.classList.add('label'),
        i.appendChild(this.__activeTransferLabel),
        (this.__activeTransferValue = document.createElement('span')),
        this.__activeTransferValue.classList.add('value'),
        i.appendChild(this.__activeTransferValue),
        e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('finished-transfers'),
        (this.__finishedTransferLabel = document.createElement('span')),
        this.__finishedTransferLabel.classList.add('label'),
        s.appendChild(this.__finishedTransferLabel),
        (this.__finishedTransferValue = document.createElement('span')),
        this.__finishedTransferValue.classList.add('value'),
        s.appendChild(this.__finishedTransferValue),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTransfersTileContentView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__totalTransferValue = null),
      (this.__totalTransferLabel = null),
      (this.__activeTransferLabel = null),
      (this.__activeTransferValue = null),
      (this.__finishedTransferLabel = null),
      (this.__finishedTransferValue = null);
  }),
  (UTTransfersTileContentView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTransfersTileContentView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTransfersTileContentView.prototype.setTotalTransferLabel = function setTotalTransferLabel(
    e
  ) {
    this.__totalTransferLabel.textContent = e;
  }),
  (UTTransfersTileContentView.prototype.setActiveTransferLabel = function setActiveTransferLabel(
    e
  ) {
    this.__activeTransferLabel.textContent = e;
  }),
  (UTTransfersTileContentView.prototype.setFinishedTransferLabel = function setFinishedTransferLabel(
    e
  ) {
    this.__finishedTransferLabel.textContent = e;
  }),
  (UTTransfersTileContentView.prototype.setTotalTransferCount = function setTotalTransferCount(
    e
  ) {
    this.__totalTransferValue.textContent = e.toString();
  }),
  (UTTransfersTileContentView.prototype.setActiveTransferCount = function setActiveTransferCount(
    e
  ) {
    this.__activeTransferValue.textContent = e.toString();
  }),
  (UTTransfersTileContentView.prototype.setFinishedTransferCount = function setFinishedTransferCount(
    e
  ) {
    this.__finishedTransferValue.textContent = e.toString();
  }),
  utils.JS.inherits(UTTransfersTileView, UTTileView),
  (UTTransfersTileView.prototype.init = function init() {
    this.superclass(),
      this.setDimOverlayType(UTTileDimOverlayView.OverlayType.LOCKED);
  }),
  (UTTransfersTileView.prototype._getContentViewInstance = function _getContentViewInstance() {
    return new UTTransfersTileContentView();
  }),
  (UTTransfersTileView.prototype.setTotalTransferLabel = function setTotalTransferLabel(
    e
  ) {
    this.getContentView().setTotalTransferLabel(e);
  }),
  (UTTransfersTileView.prototype.setActiveTransferLabel = function setActiveTransferLabel(
    e
  ) {
    this.getContentView().setActiveTransferLabel(e);
  }),
  (UTTransfersTileView.prototype.setFinishedTransferLabel = function setFinishedTransferLabel(
    e
  ) {
    this.getContentView().setFinishedTransferLabel(e);
  }),
  (UTTransfersTileView.prototype.setTotalTransferCount = function setTotalTransferCount(
    e
  ) {
    this.getContentView().setTotalTransferCount(e);
  }),
  (UTTransfersTileView.prototype.setActiveTransferCount = function setActiveTransferCount(
    e
  ) {
    this.getContentView().setActiveTransferCount(e);
  }),
  (UTTransfersTileView.prototype.setFinishedTransferCount = function setFinishedTransferCount(
    e
  ) {
    this.getContentView().setFinishedTransferCount(e);
  }),
  utils.JS.inherits(UTHubMessagesTileView, UTTileView),
  (UTHubMessagesTileView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-hub-messages-tile-view'),
        e.classList.add('tile'),
        (this.__header = document.createElement('header')),
        (this.__tileTitle = document.createElement('h1')),
        this.__tileTitle.classList.add('tileHeader'),
        this.__header.appendChild(this.__tileTitle),
        e.appendChild(this.__header),
        (this._tnsCarousel = new TNSContainerView()),
        this._tnsCarousel.getRootElement().classList.add('carousel'),
        e.appendChild(this._tnsCarousel.getRootElement());
      var t = document.createElement('div');
      t.classList.add('FETContent'),
        (this.__content = document.createElement('p')),
        t.appendChild(this.__content),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('loadingSpinner'),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTHubMessagesTileView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__header = null),
      (this.__tileTitle = null),
      this._tnsCarousel.destroy(),
      (this.__content = null);
  }),
  (UTHubMessagesTileView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTHubMessagesTileView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTHubMessagesTileView.Event = {
    GOTOLINK: 'UTHubMessagesTileView.Event.GOTOLINK'
  }),
  (UTHubMessagesTileView.prototype.init = function init() {
    this.superclass(), this.showLoadingState();
  }),
  (UTHubMessagesTileView.prototype.dealloc = function dealloc() {
    this.superclass(), (this._data = []), this._stopCountdownTimer();
  }),
  (UTHubMessagesTileView.prototype.useDefaultState = function useDefaultState() {
    var e = document.createElement('img');
    e.setAttribute('src', 'images/tileFETDefault.png'),
      DOMKit.addClass(e, 'FETImage'),
      this._tnsCarousel.appendElem(e),
      (this.__tileTitle.textContent = services.Localization.localize(
        'tile.fet.title'
      )),
      (this.__content.textContent = services.Localization.localize(
        'tile.fet.message'
      )),
      this.setInteractionState(!1),
      this.hideLoadingState();
  }),
  (UTHubMessagesTileView.prototype.setData = function setData(e, t) {
    (this._data = e),
      (this._loadedImages = 0),
      this._tnsCarousel.teardown(this.getRootElement()),
      0 < this._data.length
        ? (this.addClass('loading-images'),
          this._data.forEach(function(e) {
            this._tnsCarousel.appendElem(this._createMessageImg(e));
          }, this),
          this.setInteractionState(!utils.JS.isEmpty(this._data[0].goToLink)),
          this._data[0].hasCountdowns(enums.ArubaTextFieldType.TITLE) ||
            (this.__tileTitle.textContent = this._data[0].textFields.get(
              enums.ArubaTextFieldType.TITLE
            ).text),
          this._data[0].hasCountdowns(enums.ArubaTextFieldType.BODY) ||
            this._renderContent(
              this._data[0].textFields.get(enums.ArubaTextFieldType.BODY).text
            ),
          this._data[0].hasCountdowns() &&
            this._startCountdownTimer(this._data[0]),
          this.hideLoadingState())
        : this.useDefaultState();
  }),
  (UTHubMessagesTileView.prototype.showLoadingState = function showLoadingState() {
    this.addClass('loading');
  }),
  (UTHubMessagesTileView.prototype.hideLoadingState = function hideLoadingState() {
    this.removeClass('loading');
  }),
  (UTHubMessagesTileView.prototype._onSlideFadeOut = function _onSlideFadeOut(
    e
  ) {
    var t = this._data[e];
    t &&
      (this.setInteractionState(!utils.JS.isEmpty(t.goToLink)),
      this._stopCountdownTimer(),
      $(this.__header)
        .addClass('fade-out')
        .delay(500)
        .queue(
          function(e) {
            t.hasCountdowns(enums.ArubaTextFieldType.TITLE) ||
              (this.__tileTitle.textContent = t.textFields.get(
                enums.ArubaTextFieldType.TITLE
              ).text),
              DOMKit.removeClass(this.__header, 'fade-out'),
              e();
          }.bind(this)
        ),
      $(this.__content)
        .addClass('fade-out')
        .delay(500)
        .queue(
          function(e) {
            t.hasCountdowns(enums.ArubaTextFieldType.BODY) ||
              this._renderContent(
                t.textFields.get(enums.ArubaTextFieldType.BODY).text
              ),
              t.hasCountdowns() && this._startCountdownTimer(t),
              DOMKit.removeClass(this.__content, 'fade-out'),
              e();
          }.bind(this)
        ));
  }),
  (UTHubMessagesTileView.prototype._startCountdownTimer = function _startCountdownTimer(
    e
  ) {
    this._countdownTimer ||
      (this._updateCountdownTimer(e),
      (this._countdownTimer = new utils.UTTimer(
        1e3,
        this._updateCountdownTimer.bind(this, e)
      )),
      this._countdownTimer.start());
  }),
  (UTHubMessagesTileView.prototype._stopCountdownTimer = function _stopCountdownTimer() {
    this._countdownTimer &&
      (this._countdownTimer.reset(), (this._countdownTimer = null));
  }),
  (UTHubMessagesTileView.prototype._updateCountdownTimer = function _updateCountdownTimer(
    s
  ) {
    s.countdowns.keys().forEach(
      function(e) {
        var t = Math.max(0, Math.round(s.countdowns.get(e) - Date.now() / 1e3)),
          i = s.textFields
            .get(e)
            .text.replace(
              enums.ArubaStringKeys.COUNTDOWN,
              services.Localization.localizeTimeRemaining(t)
            );
        e === enums.ArubaTextFieldType.BODY
          ? this._renderContent(i)
          : e === enums.ArubaTextFieldType.TITLE &&
            (this.__tileTitle.textContent = i);
      }.bind(this)
    );
  }),
  (UTHubMessagesTileView.prototype._renderContent = function _renderContent(e) {
    this.__content.innerHTML = e;
  }),
  (UTHubMessagesTileView.prototype._createMessageImg = function _createMessageImg(
    e
  ) {
    var t = new UTImageView(),
      i = e.images.get(enums.ArubaImageType.BODY) || '';
    return (
      t.setExternalResource(i, !0).observe(this, this._imageLoad),
      t.addClass('FETImage'),
      t.getRootElement()
    );
  }),
  (UTHubMessagesTileView.prototype._imageLoad = function _imageLoad(
    e,
    t,
    i,
    s
  ) {
    if (
      (e.unobserve(this),
      t || i.setLocalResource('images/tileFETDefault.png'),
      ++this._loadedImages >= this._data.length &&
        (this.removeClass('loading-images'), !this._tnsCarousel.isOn()))
    ) {
      var n = new TNSPropertiesDTO();
      (n.nav = !0),
        (n.controls = !1),
        (n.loop = !0),
        (n.autoplay = !0),
        (n.autoplaySpeed = 4e3),
        (n.container = this._tnsCarousel.getRootElement()),
        this._tnsCarousel.setup(n),
        1 < this._data.length &&
          this._tnsCarousel.afterChange(this._onSlideFadeOut.bind(this));
    }
  }),
  (UTHubMessagesTileView.prototype._handleLink = function _handleLink(e) {
    this._triggerActions(UTHubMessagesTileView.Event.GOTOLINK, e);
  }),
  (UTHubMessagesTileView.prototype._touchStarted = function _touchStarted(e) {
    this._isTouchTargetValid(e.target) && this.superclass(e);
  }),
  (UTHubMessagesTileView.prototype._tapDetected = function _tapDetected(e) {
    if (this._isTouchTargetValid(e.target)) {
      this.superclass(e);
      var t = this._data[this._tnsCarousel.getCurrentSlide()];
      utils.JS.isEmpty(t.goToLink) || this._handleLink(t);
    }
  }),
  (UTHubMessagesTileView.prototype._isTouchTargetValid = function _isTouchTargetValid(
    e
  ) {
    for (; e !== this.__root; ) {
      if (DOMKit.hasClass(e, 'tns-nav')) return !1;
      e = e.parentNode;
    }
    return !0;
  }),
  (UTHubMessagesTileView.prototype.destroyCarousel = function destroyCarousel() {
    DOMKit.toggleDisplayStyle(this._tnsCarousel.getRootElement(), !1),
      this._tnsCarousel.teardown(this.getRootElement());
  }),
  utils.JS.inherits(UTPlayerPicksTileView, UTTileView),
  (UTPlayerPicksTileView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-player-picks-tile-view'), e.classList.add('tile');
      var t = document.createElement('header');
      (this.__tileTitle = document.createElement('h1')),
        this.__tileTitle.classList.add('tileHeader'),
        t.appendChild(this.__tileTitle),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('img'),
        e.appendChild(i),
        (this.__label = document.createElement('div')),
        this.__label.classList.add('reward-tile--label'),
        e.appendChild(this.__label),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTPlayerPicksTileView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__tileTitle = null),
      (this.__label = null);
  }),
  (UTPlayerPicksTileView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPlayerPicksTileView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPlayerPicksTileView.prototype.init = function init() {
    this.superclass(),
      this.setTitle(services.Localization.localize('playerpicks.tile.header')),
      (this.__label.innerHTML = services.Localization.localize(
        'playerpicks.tile.content'
      ));
  }),
  utils.JS.inherits(UTLeaderboardsTileView, UTTileView),
  (UTLeaderboardsTileView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-leaderboards-tile-view'), e.classList.add('tile');
      var t = document.createElement('div');
      t.classList.add('loadingSpinner'), e.appendChild(t);
      var i = document.createElement('header');
      (this.__tileTitle = document.createElement('h1')),
        this.__tileTitle.classList.add('tileHeader'),
        i.appendChild(this.__tileTitle),
        e.appendChild(i),
        (this.__tileContent = document.createElement('div')),
        this.__tileContent.classList.add('tileContent'),
        (this.__label = document.createElement('div')),
        this.__label.classList.add('label'),
        this.__tileContent.appendChild(this.__label),
        (this._badge = new UTImageView()),
        this.__tileContent.appendChild(this._badge.getRootElement()),
        e.appendChild(this.__tileContent),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTLeaderboardsTileView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__tileTitle = null),
      (this.__tileContent = null),
      (this.__label = null),
      this._badge.destroy();
  }),
  (UTLeaderboardsTileView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTLeaderboardsTileView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTLeaderboardsTileView.prototype.init = function init() {
    this.superclass(),
      this.setTitle(services.Localization.localize('leaderboards.tile.title'));
  }),
  (UTLeaderboardsTileView.prototype.setBadge = function setBadge(e) {
    this._badge.setResource(
      utils.AssetLocator.getImage(
        utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT,
        enums.Year.ASSET,
        e
      ),
      !0
    );
  }),
  (UTLeaderboardsTileView.prototype.setName = function setName(e) {
    this.__label.textContent = e;
  }),
  utils.JS.inherits(UTUnassignedTileView, UTTileView),
  (UTUnassignedTileView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-unassigned-tile-view'), e.classList.add('tile');
      var t = document.createElement('header');
      (this.__tileTitle = document.createElement('h1')),
        this.__tileTitle.classList.add('tileHeader'),
        t.appendChild(this.__tileTitle),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('img'), e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('data-container'),
        (this.__number = document.createElement('span')),
        this.__number.classList.add('itemsNumber'),
        s.appendChild(this.__number),
        (this.__label = document.createElement('span')),
        this.__label.classList.add('itemsLabel'),
        s.appendChild(this.__label),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTUnassignedTileView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__tileTitle = null),
      (this.__number = null),
      (this.__label = null);
  }),
  (UTUnassignedTileView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTUnassignedTileView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTUnassignedTileView.prototype.init = function init() {
    this.superclass(),
      this.setTitle(services.Localization.localize('navbar.label.newitems'));
  }),
  (UTUnassignedTileView.prototype.setNumberOfItems = function setNumberOfItems(
    e
  ) {
    (this.__number.textContent = e.toString()),
      (this.__label.innerHTML = services.Localization.localize(
        1 === e
          ? 'unassigned.tile.itemRemaining'
          : 'unassigned.tile.itemsRemaining'
      ));
  }),
  utils.JS.inherits(UTChampionsTileView, UTTileView),
  (UTChampionsTileView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-champions-tile-view'), e.classList.add('tile');
      var t = document.createElement('header');
      (this.__tileTitle = document.createElement('h1')),
        this.__tileTitle.classList.add('tileHeader'),
        t.appendChild(this.__tileTitle),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('img'),
        e.appendChild(i),
        (this.__label = document.createElement('div')),
        this.__label.classList.add('reward-tile--label'),
        e.appendChild(this.__label),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTChampionsTileView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__tileTitle = null),
      (this.__label = null);
  }),
  (UTChampionsTileView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTChampionsTileView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTChampionsTileView.prototype.init = function init() {
    this.superclass(),
      this.setTitle(services.Localization.localize('futchampions.tile.header')),
      (this.__label.innerHTML = services.Localization.localize(
        'futchampions.tile.content'
      ));
  }),
  utils.JS.inherits(UTRivalsTileView, UTTileView),
  (UTRivalsTileView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-rivals-tile-view'), e.classList.add('tile');
      var t = document.createElement('header');
      (this.__tileTitle = document.createElement('h1')),
        this.__tileTitle.classList.add('tileHeader'),
        t.appendChild(this.__tileTitle),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('img'),
        e.appendChild(i),
        (this.__label = document.createElement('div')),
        this.__label.classList.add('reward-tile--label'),
        e.appendChild(this.__label),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTRivalsTileView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__tileTitle = null),
      (this.__label = null);
  }),
  (UTRivalsTileView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTRivalsTileView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTRivalsTileView.prototype.init = function init() {
    this.superclass(),
      this.setTitle(services.Localization.localize('rivals.view.title')),
      (this.__label.textContent = services.Localization.localize(
        'rivals.view.content'
      ));
  }),
  utils.JS.inherits(UTSquadBattlesTileView, UTTileView),
  (UTSquadBattlesTileView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squad-battles-tile-view'), e.classList.add('tile');
      var t = document.createElement('header');
      (this.__tileTitle = document.createElement('h1')),
        this.__tileTitle.classList.add('tileHeader'),
        t.appendChild(this.__tileTitle),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('img'),
        e.appendChild(i),
        (this.__message = document.createElement('div')),
        this.__message.classList.add('reward-tile--label'),
        e.appendChild(this.__message);
      var s = document.createElement('div');
      s.classList.add('data-container'),
        (this.__tierEmblem = document.createElement('span')),
        this.__tierEmblem.classList.add('squadBattleTier'),
        s.appendChild(this.__tierEmblem),
        (this.__pointsNumber = document.createElement('span')),
        this.__pointsNumber.classList.add('squadBattlePoints'),
        s.appendChild(this.__pointsNumber),
        (this.__pointsLabel = document.createElement('span')),
        this.__pointsLabel.classList.add('squadBattlePointsLabel'),
        s.appendChild(this.__pointsLabel),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadBattlesTileView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__tileTitle = null),
      (this.__message = null),
      (this.__tierEmblem = null),
      (this.__pointsNumber = null),
      (this.__pointsLabel = null);
  }),
  (UTSquadBattlesTileView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadBattlesTileView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadBattlesTileView.prototype.init = function init() {
    this.superclass(),
      this.setTitle(services.Localization.localize('squadbattles.view.title')),
      (this.__message.textContent = services.Localization.localize(
        'squadbattles.view.content'
      ));
  }),
  (UTSquadBattlesTileView.prototype.setPoints = function setPoints(e) {
    this.__pointsNumber.textContent = e.toString();
  }),
  (UTSquadBattlesTileView.prototype.setTier = function setTier(e) {
    this._resetTiers(), DOMKit.addClass(this.__tierEmblem, 'tier' + e);
  }),
  (UTSquadBattlesTileView.prototype._resetTiers = function _resetTiers() {
    DOMKit.removeClass(
      this.__tierEmblem,
      (function _getTierClasses(e) {
        return (e.className.match(/(^|\s)tier\S+/g) || []).join(' ');
      })(this.__tierEmblem)
    );
  }),
  utils.JS.inherits(UTHomeHubView, UTView),
  (UTHomeHubView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div'),
        t = document.createElement('div');
      t.classList.add('grid'),
        t.classList.add('layout-hub'),
        (this._unassignedTile = new UTUnassignedTileView()),
        this._unassignedTile.getRootElement().classList.add('col-1-1'),
        t.appendChild(this._unassignedTile.getRootElement()),
        (this._futChampionsTile = new UTChampionsTileView()),
        this._futChampionsTile.getRootElement().classList.add('col-1-1'),
        t.appendChild(this._futChampionsTile.getRootElement()),
        (this._squadBattlesTile = new UTSquadBattlesTileView()),
        this._squadBattlesTile.getRootElement().classList.add('col-1-1'),
        t.appendChild(this._squadBattlesTile.getRootElement()),
        (this._futRivalsTile = new UTRivalsTileView()),
        this._futRivalsTile.getRootElement().classList.add('col-1-1'),
        t.appendChild(this._futRivalsTile.getRootElement()),
        (this._playerPicksTile = new UTPlayerPicksTileView()),
        this._playerPicksTile.getRootElement().classList.add('col-1-1'),
        t.appendChild(this._playerPicksTile.getRootElement()),
        (this._objectivesTile = new UTObjectivesHubTileView()),
        this._objectivesTile.getRootElement().classList.add('col-1-2'),
        this._objectivesTile
          .getRootElement()
          .classList.add('ut-tile-hub-objective'),
        t.appendChild(this._objectivesTile.getRootElement()),
        (this._sbcTile = new UTGraphicalInfoTileView()),
        this._sbcTile.getRootElement().classList.add('col-1-2'),
        this._sbcTile.getRootElement().classList.add('ut-tile-hub-sbc'),
        t.appendChild(this._sbcTile.getRootElement()),
        (this._hubMessagesTile = new UTHubMessagesTileView()),
        this._hubMessagesTile.getRootElement().classList.add('col-1-1'),
        t.appendChild(this._hubMessagesTile.getRootElement()),
        (this._leaderboardsTile = new UTLeaderboardsTileView()),
        this._leaderboardsTile.getRootElement().classList.add('col-1-2'),
        t.appendChild(this._leaderboardsTile.getRootElement()),
        (this._transferListTile = new UTTransfersTileView()),
        this._transferListTile.getRootElement().classList.add('has-separator'),
        this._transferListTile.getRootElement().classList.add('col-1-3-md'),
        this._transferListTile.getRootElement().classList.add('col-1-2'),
        this._transferListTile
          .getRootElement()
          .classList.add('ut-tile-transfer-list'),
        t.appendChild(this._transferListTile.getRootElement()),
        (this._activeSquadTile = new UTSquadTileView()),
        this._activeSquadTile.getRootElement().classList.add('col-2-3-md'),
        t.appendChild(this._activeSquadTile.getRootElement()),
        (this._weekendLeagueProgress = new UTWeekendLeagueProgressView()),
        this._weekendLeagueProgress.getRootElement().classList.add('col-1-1'),
        t.appendChild(this._weekendLeagueProgress.getRootElement()),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTHomeHubView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._unassignedTile.destroy(),
      this._futChampionsTile.destroy(),
      this._squadBattlesTile.destroy(),
      this._futRivalsTile.destroy(),
      this._playerPicksTile.destroy(),
      this._objectivesTile.destroy(),
      this._sbcTile.destroy(),
      this._hubMessagesTile.destroy(),
      this._leaderboardsTile.destroy(),
      this._transferListTile.destroy(),
      this._activeSquadTile.destroy(),
      this._weekendLeagueProgress.destroy();
  }),
  (UTHomeHubView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTHomeHubView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTHomeHubView.prototype.init = function init() {
    this._activeSquadTile.init(),
      this._activeSquadTile.setTitle(
        services.Localization.localize('navbar.label.activesquad')
      ),
      this._objectivesTile.init(),
      this._objectivesTile.setTitle(
        services.Localization.localize('navbar.label.objectivehub')
      ),
      this._hubMessagesTile.init(),
      this._sbcTile.init(),
      this._sbcTile.setTitle(
        services.Localization.localize('navbar.label.sbcHub')
      ),
      this._transferListTile.init(),
      this._transferListTile.setTitle(
        services.Localization.localize('navbar.label.tradepile')
      ),
      this._transferListTile.setTotalTransferLabel(
        services.Localization.localize('dock.label.items')
      ),
      this._transferListTile.setTotalTransferCount(0),
      this._transferListTile.setActiveTransferLabel(
        services.Localization.localize('dock.label.selling')
      ),
      this._transferListTile.setActiveTransferCount(0),
      this._transferListTile.setFinishedTransferLabel(
        services.Localization.localize('tradepile.dock.categories.sold')
      ),
      this._transferListTile.setFinishedTransferCount(0),
      this._leaderboardsTile.init(),
      isPhone() || this._leaderboardsTile.hide(),
      this._unassignedTile.init(),
      this._unassignedTile.hide(),
      this._futChampionsTile.init(),
      this._futChampionsTile.hide(),
      this._futRivalsTile.init(),
      this._futRivalsTile.hide(),
      this._squadBattlesTile.init(),
      this._squadBattlesTile.hide(),
      this._playerPicksTile.init(),
      this._playerPicksTile.hide(),
      this._weekendLeagueProgress.init(),
      this._weekendLeagueProgress.hide();
  }),
  (UTHomeHubView.prototype.renderActiveSquadTile = function renderActiveSquadTile(
    e
  ) {
    this._activeSquadTile.setSquad(e);
  }),
  (UTHomeHubView.prototype.renderHubMessagesTile = function renderHubMessagesTile(
    e
  ) {
    this._hubMessagesTile.setData(e);
  }),
  (UTHomeHubView.prototype.renderObjectivesTile = function renderObjectivesTile(
    e
  ) {
    this._objectivesTile.setDescription(e);
  }),
  (UTHomeHubView.prototype.renderUnassignedTile = function renderUnassignedTile(
    e
  ) {
    this._unassignedTile.setNumberOfItems(e),
      this._unassignedTile.setDisplay(0 < e);
  }),
  (UTHomeHubView.prototype.getActiveSquadTile = function getActiveSquadTile() {
    return this._activeSquadTile;
  }),
  (UTHomeHubView.prototype.getObjectivesTile = function getObjectivesTile() {
    return this._objectivesTile;
  }),
  (UTHomeHubView.prototype.getSBCTile = function getSBCTile() {
    return this._sbcTile;
  }),
  (UTHomeHubView.prototype.getTransferListTile = function getTransferListTile() {
    return this._transferListTile;
  }),
  (UTHomeHubView.prototype.getLeaderboardsTile = function getLeaderboardsTile() {
    return this._leaderboardsTile;
  }),
  (UTHomeHubView.prototype.getUnassignedTile = function getUnassignedTile() {
    return this._unassignedTile;
  }),
  (UTHomeHubView.prototype.getChampionsTile = function getChampionsTile() {
    return this._futChampionsTile;
  }),
  (UTHomeHubView.prototype.getRivalsTile = function getRivalsTile() {
    return this._futRivalsTile;
  }),
  (UTHomeHubView.prototype.getSquadBattlesTile = function getSquadBattlesTile() {
    return this._squadBattlesTile;
  }),
  (UTHomeHubView.prototype.getHubMessagesTile = function getHubMessagesTile() {
    return this._hubMessagesTile;
  }),
  (UTHomeHubView.prototype.getPlayerPicksTile = function getPlayerPicksTile() {
    return this._playerPicksTile;
  }),
  (UTHomeHubView.prototype.getWeekendLeagueProgress = function getWeekendLeagueProgress() {
    return this._weekendLeagueProgress;
  }),
  NamespaceManager.Register('controllers.home'),
  utils.JS.inherits(UTHomeHubViewController, UTViewController),
  (UTHomeHubViewController.prototype.init = function init() {
    this.initialized || (this.superclass(), this._goToLinkController.init());
  }),
  (UTHomeHubViewController.prototype.dealloc = function dealloc() {
    this._viewmodel.dealloc(),
      this._goToLinkController.dealloc(),
      (this._playerPicks = []),
      this.superclass();
  }),
  (UTHomeHubViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTHomeHubView();
  }),
  (UTHomeHubViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Hub - Home';
  }),
  (UTHomeHubViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.home');
  }),
  (UTHomeHubViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var i = this.getView();
    this.getNavigationController().setNavigationVisibility(!0, !0),
      this._goToLinkController.setNavigationController(
        this.getNavigationController()
      );
    var e = services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.SBC_ENABLED
      ),
      t = i.getSBCTile();
    t.setInteractionState(e),
      t.setDescription(
        services.Localization.localize(
          e ? 'sbc.tile.description' : 'sbc.notification.disabled'
        )
      ),
      hasConnection() &&
        (services.Messages.getLiveMessages().observe(
          this,
          this._onLiveMessagesRetrieved
        ),
        this._populateLeaderboardsTile(),
        services.Item.requestUnassignedItems().observe(
          this,
          this._onUnassignedItemsRequested
        ),
        services.Squad.requestSquadByType(enums.UserSquadId.ACTIVE).observe(
          this,
          this._onActiveSquadRequested
        ),
        services.Champions.requestUnclaimedEvents().observe(this, function(
          e,
          t
        ) {
          e.unobserve(this),
            t.data && 0 < t.data.unclaimedEvents.length
              ? i.getChampionsTile().show()
              : NetworkErrorManager.checkCriticalStatus(t.status)
              ? NetworkErrorManager.handleStatus(t.status)
              : (i.getChampionsTile().hide(),
                services.SquadBattles.requestCurrentEvent().observe(
                  this,
                  function(e, t) {
                    t.data && t.data.event && t.data.event.isPrizeAvailable
                      ? i.getSquadBattlesTile().show()
                      : NetworkErrorManager.checkCriticalStatus(t.status)
                      ? NetworkErrorManager.handleStatus(t.status)
                      : (i.getSquadBattlesTile().hide(),
                        services.Rivals.getRewardsInfo().observe(this, function(
                          e,
                          t
                        ) {
                          e.unobserve(this),
                            t.data && 0 < t.data.unclaimedRewards.length
                              ? i.getRivalsTile().show()
                              : NetworkErrorManager.checkCriticalStatus(
                                  t.status
                                )
                              ? NetworkErrorManager.handleStatus(t.status)
                              : i.getRivalsTile().hide();
                        }));
                  }
                ));
        }),
        services.Objectives.getActiveCampaign().observe(
          this,
          this._onActiveCampaignRequested
        ),
        services.User.getUser().hasPlayerPicksPending
          ? services.Item.requestPendingPlayerPickItemSelection().observe(
              this,
              this._onPendingPlayerPickItemsRequested
            )
          : i.getPlayerPicksTile().hide(),
        this._viewmodel
          .requestWeekendLeagueState()
          .observe(this, this._onWeekendLeagueStateRequested),
        this._requestTransferListData(),
        services.Messages.getHubMessages(3).observe(
          this,
          this._onHubMessagesRequested
        ),
        services.Configuration.loadStaffStatData()),
      getDefaultDispatcher().addObserver(
        enums.Notification.UNASSIGNED_ITEM_ADDED,
        this,
        this._nUnassignedItemAdded
      );
    var s = i.getWeekendLeagueProgress();
    i
      .getActiveSquadTile()
      .addTarget(this, this._eActiveSquadTileSelected, enums.Event.TAP),
      i.getSBCTile().addTarget(this, this._eSBCTileSelected, enums.Event.TAP),
      i
        .getTransferListTile()
        .addTarget(this, this._eTransferListTileSelected, enums.Event.TAP),
      i
        .getUnassignedTile()
        .addTarget(this, this._eUnassignedTileSelected, enums.Event.TAP),
      i
        .getChampionsTile()
        .addTarget(this, this._eChampionsTileSelected, enums.Event.TAP),
      i
        .getSquadBattlesTile()
        .addTarget(this, this._eSquadBattlesTileSelected, enums.Event.TAP),
      i
        .getRivalsTile()
        .addTarget(this, this._eRivalsTileSelected, enums.Event.TAP),
      i
        .getPlayerPicksTile()
        .addTarget(this, this._ePlayerPicksTileSelected, enums.Event.TAP),
      i
        .getObjectivesTile()
        .addTarget(this, this._eObjectivesTileSelected, enums.Event.TAP),
      i
        .getHubMessagesTile()
        .addTarget(this, this._eGoToLink, UTHubMessagesTileView.Event.GOTOLINK),
      i
        .getLeaderboardsTile()
        .addTarget(this, this._eLeaderboardsTileSelected, enums.Event.TAP),
      s.addTarget(
        this,
        this._eWeekendLeagueAccess,
        UTWeekendLeagueProgressView.Event.REDEEM
      ),
      s.addTarget(
        this,
        this._eWeekendLeagueCountdownCompleted,
        UTWeekendLeagueProgressView.Event.COUNTDOWN_COMPLETED
      ),
      TelemetryManager.trackPage(TelemetryManager.Sections.HOME, 'Home');
  }),
  (UTHomeHubViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass();
    var e = this.getView(),
      t = e.getWeekendLeagueProgress();
    e.getHubMessagesTile().destroyCarousel(),
      getDefaultDispatcher().removeObserver(
        enums.Notification.UNASSIGNED_ITEM_ADDED,
        this
      ),
      e
        .getActiveSquadTile()
        .removeTarget(this, this._eActiveSquadTileSelected, enums.Event.TAP),
      e
        .getSBCTile()
        .removeTarget(this, this._eSBCTileSelected, enums.Event.TAP),
      e
        .getTransferListTile()
        .removeTarget(this, this._eTransferListTileSelected, enums.Event.TAP),
      e
        .getUnassignedTile()
        .removeTarget(this, this._eUnassignedTileSelected, enums.Event.TAP),
      e
        .getChampionsTile()
        .removeTarget(this, this._eChampionsTileSelected, enums.Event.TAP),
      e
        .getSquadBattlesTile()
        .removeTarget(this, this._eSquadBattlesTileSelected, enums.Event.TAP),
      e
        .getRivalsTile()
        .removeTarget(this, this._eRivalsTileSelected, enums.Event.TAP),
      e
        .getPlayerPicksTile()
        .removeTarget(this, this._ePlayerPicksTileSelected, enums.Event.TAP),
      e
        .getObjectivesTile()
        .removeTarget(this, this._eObjectivesTileSelected, enums.Event.TAP),
      e
        .getHubMessagesTile()
        .removeTarget(
          this,
          this._eGoToLink,
          UTHubMessagesTileView.Event.GOTOLINK
        ),
      e
        .getLeaderboardsTile()
        .removeTarget(this, this._eLeaderboardsTileSelected, enums.Event.TAP),
      t.removeTarget(
        this,
        this._eWeekendLeagueAccess,
        UTWeekendLeagueProgressView.Event.REDEEM
      ),
      t.removeTarget(
        this,
        this._eWeekendLeagueCountdownCompleted,
        UTWeekendLeagueProgressView.Event.COUNTDOWN_COMPLETED
      ),
      t.stopEventTimer();
  }),
  (UTHomeHubViewController.prototype.didDismiss = function didDismiss(e) {
    this.superclass(),
      e instanceof UTPlayerPicksViewController &&
        !services.User.getUser().hasPlayerPicksPending &&
        (this.getView()
          .getPlayerPicksTile()
          .hide(),
        (this._playerPicks = [])),
      e.dealloc();
  }),
  (UTHomeHubViewController.prototype._gotoActiveSquadOverview = function _gotoActiveSquadOverview() {
    var s = this.getNavigationController();
    s &&
      (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Squad.requestSquadByType(enums.UserSquadId.ACTIVE).observe(
        this,
        function _onSquadLoadComplete(e, t) {
          if ((e.unobserve(this), t.success)) {
            var i = isPhone()
              ? new UTSquadOverviewViewController()
              : new UTSquadSplitViewController();
            i.initWithSquad(t.data.squad), s.pushViewController(i);
          } else
            NetworkErrorManager.checkCriticalStatus(t.status)
              ? NetworkErrorManager.handleStatus(t.status)
              : services.Notification.queue([
                  services.Localization.localize(
                    'notification.squad.failedToLoad'
                  ),
                  enums.UINotificationType.NEGATIVE
                ]);
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      ));
  }),
  (UTHomeHubViewController.prototype._onLiveMessagesRetrieved = function _onLiveMessagesRetrieved(
    e,
    t
  ) {
    e.unobserve(this);
    var i = !1,
      s = !1;
    if (0 < t.data.messages.length) {
      (i = t.data.promoCoins), (s = t.data.promoItems);
      var n = new controllers.views.popups.LiveMessage(t.data.messages);
      n.onExit.observe(this, function onLiveMessagesRead(e) {
        e.unobserve(this),
          i && services.User.requestCurrencies(),
          s && repositories.Item.setDirty(enums.FUTItemPile.PURCHASED);
      }),
        gPopupClickShield.setActivePopup(n);
    }
    this._displayLoyaltyRewards(),
      services.Messages.getDailyGift().observe(
        this,
        this._onDailyGiftRequested
      );
  }),
  (UTHomeHubViewController.prototype._displayLoyaltyRewards = function _displayLoyaltyRewards() {
    var e = services.User.getUser().getSelectedPersona(),
      t = e.getLoyaltyRewards();
    if (0 < t.length) {
      var i = new controllers.views.popups.InGameRewards(t);
      i.setTitle(
        services.Localization.localize(
          'mobilestart.title.loyaltyRewards'
        ).toUpperCase()
      ),
        i.setDescription(
          services.Localization.localize('mobilestart.text.rewardInfo')
        ),
        i.setButtonText(services.Localization.localize('common.dialog.accept')),
        gPopupClickShield.setActivePopup(i),
        e.setLoyaltyRewards([]),
        TelemetryManager.trackPage(
          TelemetryManager.Sections.MISC,
          'Loyalty Rewards Popup'
        );
    }
  }),
  (UTHomeHubViewController.prototype._requestTransferListData = function _requestTransferListData() {
    var o = this.getView().getTransferListTile();
    o.showLoadingState(),
      services.Item.requestTransferItems().observe(
        this,
        function _onRequestTransferItemsComplete(e, t) {
          if ((e.unobserve(this), o.hideLoadingState(), o && t.success)) {
            var i = new viewmodels.TransferSectionList(t.data.items),
              s = t.data.items.length,
              n =
                1 === s
                  ? services.Localization.localize('dock.label.item')
                  : services.Localization.localize('dock.label.items');
            o.setTotalTransferLabel(n),
              o.setTotalTransferCount(s),
              o.setActiveTransferCount(i.getActiveItems().length),
              o.setFinishedTransferCount(i.getSoldItems().length),
              o.setInteractionState(!0),
              o.setDimmed(!1);
          } else
            NetworkErrorManager.checkCriticalStatus(t.status)
              ? NetworkErrorManager.handleStatus(t.status)
              : t.success ||
                (services.Notification.queue([
                  services.Localization.localize('tradepile.unavailable'),
                  enums.UINotificationType.NEGATIVE
                ]),
                o.setInteractionState(!1),
                o.setDimmed(!0));
        }
      );
  }),
  (UTHomeHubViewController.prototype._populateLeaderboardsTile = function _populateLeaderboardsTile() {
    var e = this.getView().getLeaderboardsTile();
    if (e) {
      var t = services.User.getUser().getSelectedPersona(),
        i = t.getCurrentClub().assetId;
      e.setName(t.name), e.setBadge(i);
    }
  }),
  (UTHomeHubViewController.prototype._onUnassignedItemsRequested = function _onUnassignedItemsRequested(
    e,
    t
  ) {
    e.unobserve(this),
      t.success
        ? this.getView().renderUnassignedTile(t.data.items.length)
        : NetworkErrorManager.checkCriticalStatus(t.status) &&
          NetworkErrorManager.handleStatus(t.status);
  }),
  (UTHomeHubViewController.prototype._onHubMessagesRequested = function _onHubMessagesRequested(
    e,
    t
  ) {
    e.unobserve(this), this.getView().renderHubMessagesTile(t.data.messages);
  }),
  (UTHomeHubViewController.prototype._onActiveSquadRequested = function _onActiveSquadRequested(
    e,
    t
  ) {
    e.unobserve(this),
      t.success
        ? this.getView().renderActiveSquadTile(t.data.squad)
        : NetworkErrorManager.checkCriticalStatus(t.status) &&
          NetworkErrorManager.handleStatus(t.status);
  }),
  (UTHomeHubViewController.prototype._eClaimExpiredRewards = function _eClaimExpiredRewards(
    e,
    t,
    i
  ) {
    services.Objectives.claimExpiredRewards().observe(this, function(e, t) {
      if ((e.unobserve(this), t.success)) {
        gPopupClickShield.setActivePopup(
          new UTObjectiveRewardsViewController(null, t.data.rewards)
        );
        var i = this.getView().getObjectivesTile();
        i.removeTarget(this, this._eClaimExpiredRewards, enums.Event.TAP),
          i.addTarget(this, this._eObjectivesTileSelected, enums.Event.TAP);
      }
    });
  }),
  (UTHomeHubViewController.prototype._onActiveCampaignRequested = function _onActiveCampaignRequested(
    e,
    t
  ) {
    if (
      (e.unobserve(this),
      t.success || !NetworkErrorManager.checkCriticalStatus(t.status))
    ) {
      var i = this.getView().getObjectivesTile(),
        s = t.success ? t.data.campaign : null,
        n = Math.round(Date.now() / 1e3),
        o = t.status !== enums.HTTPStatusCode.SERVICE_IS_DISABLED,
        a = s ? s.remainingRewards : 0,
        r = !!s && (s.startTime <= n && n <= s.startTime + 172800),
        l = s ? s.endTime - n : 0;
      i.setNumUnclaimedObjectives(a),
        i.setDescriptionFromObjectiveState(a, o),
        s &&
          (i.setSubtitle(s.title),
          0 < l &&
            i.setExpiryLabel(
              services.Localization.localize('scmp.campaign.countdown', [
                services.Localization.localizeTimeRemaining(l)
              ])
            ),
          r &&
            !s.needsAutoClaim &&
            i.setUnclaimedTagText(
              services.Localization.localize('scmp.campaign.refreshed')
            ),
          s.needsAutoClaim &&
            (i.removeTarget(
              this,
              this._eObjectivesTileSelected,
              enums.Event.TAP
            ),
            i.addTarget(this, this._eClaimExpiredRewards, enums.Event.TAP),
            i.setUnclaimedTagText(
              services.Localization.localize('scmp.campaign.entertoClaim')
            ),
            i.toggleClass('has-unclaimed-rewards', !0))),
        i.setInteractionState(o);
    } else NetworkErrorManager.handleStatus(t.status);
  }),
  (UTHomeHubViewController.prototype._onPendingPlayerPickItemsRequested = function _onPendingPlayerPickItemsRequested(
    e,
    t
  ) {
    e.unobserve(this),
      t.success
        ? ((this._playerPicks = t.data.items),
          this.getView()
            .getPlayerPicksTile()
            .show())
        : NetworkErrorManager.checkCriticalStatus(response.status) &&
          NetworkErrorManager.handleStatus(response.status);
  }),
  (UTHomeHubViewController.prototype._onWeekendLeagueStateRequested = function _onWeekendLeagueStateRequested(
    e,
    t
  ) {
    if ((e.unobserve(this), t.success)) {
      var i = this.getView().getWeekendLeagueProgress(),
        s =
          t.success && t.data.enabled && !t.data.qualified && 0 < t.data.points;
      s &&
        (i.setProgress(t.data.points, t.data.threshold),
        this._viewmodel
          .requestUpcomingChampionsEvents()
          .observe(this, this._onUpcomingChampionsEventsRequested)),
        i.setDisplay(s);
    } else
      t.status !== enums.HTTPStatusCode.NOT_FOUND &&
        NetworkErrorManager.checkCriticalStatus(t.status) &&
        NetworkErrorManager.handleStatus(t.status);
  }),
  (UTHomeHubViewController.prototype._onUpcomingChampionsEventsRequested = function _onUpcomingChampionsEventsRequested(
    e,
    t
  ) {
    if ((e.unobserve(this), t.success && 0 < t.data.events.length)) {
      var i,
        s = Math.round(Date.now() / 1e3);
      if (
        (t.data.events.forEach(function(e) {
          e.isValid() &&
            (e.isInGracePeriod() || e.getStartTime() > s) &&
            (!i || e.getStartTime() < i.getStartTime()) &&
            (i = e);
        }),
        i)
      ) {
        var n = this.getView().getWeekendLeagueProgress();
        n.setDescription(
          services.Localization.localize(
            i.isInGracePeriod()
              ? 'rivals.weekendleague.description.graceperiod'
              : 'rivals.weekendleague.description.nextevent'
          )
        ),
          n.setEventTime(i.getStartTime(), i.getEndTime()),
          n.startEventTimer();
      }
    } else
      NetworkErrorManager.checkCriticalStatus(t.status) &&
        NetworkErrorManager.handleStatus(t.status);
  }),
  (UTHomeHubViewController.prototype._onDailyGiftRequested = function _onDailyGiftRequested(
    e,
    i
  ) {
    function onGiftClaimed(e, t) {
      e.unobserve(this),
        t.success
          ? services.Notification.queue([
              services.Localization.localize('infopanel.label.claimed'),
              enums.UINotificationType.POSITIVE
            ])
          : NetworkErrorManager.checkCriticalStatus(i.status)
          ? NetworkErrorManager.handleStatus(i.status)
          : services.Notification.queue([
              services.Localization.localize('dailyreward.claimfailed'),
              enums.UINotificationType.NEGATIVE
            ]);
    }
    if ((e.unobserve(this), i.success && utils.JS.isValid(i.data.dailyGift))) {
      var t = new controllers.views.popups.DailyGift(i.data.dailyGift);
      t.onExit.observe(this, function onCloseDailyGiftPopup(e) {
        e.unobserve(this),
          services.Messages.claimDailyGift().observe(this, onGiftClaimed);
      }),
        gPopupClickShield.setActivePopup(t);
    }
  }),
  (UTHomeHubViewController.prototype._eActiveSquadTileSelected = function _eActiveSquadTileSelected(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.HOME,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Home - Active Squad Tile'
    ),
      this._gotoActiveSquadOverview();
  }),
  (UTHomeHubViewController.prototype._eTransferListTileSelected = function _eTransferListTileSelected(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.HOME,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Home - Transfer List Tile'
    );
    var s = this.getNavigationController();
    if (s) {
      var n = isPhone()
        ? new UTTransferListViewController()
        : new UTTransferListSplitViewController();
      n.init(), s.pushViewController(n);
    }
  }),
  (UTHomeHubViewController.prototype._eUnassignedTileSelected = function _eUnassignedTileSelected(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.HOME,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Home - Unassigned Tile'
    ),
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Item.requestUnassignedItems().observe(
        this,
        function _onRequestUnassignedComplete(e, t) {
          if (
            (e.unobserve(this),
            t.success || !NetworkErrorManager.checkCriticalStatus(t.status))
          ) {
            var i = this.getNavigationController();
            if (i) {
              var s = isPhone()
                ? new UTUnassignedItemsViewController()
                : new UTUnassignedItemsSplitViewController();
              t.success ? s.initWithItems(t.data.items) : s.init(),
                i.pushViewController(s);
            }
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
          } else NetworkErrorManager.handleStatus(t.status);
        }
      );
  }),
  (UTHomeHubViewController.prototype._eClosePopup = function _eClosePopup(
    e,
    t,
    i
  ) {
    e.removeTarget(
      this,
      this._eClosePopup,
      UTRewardSelectionChoiceView.Event.CONFIRM
    ),
      gPopupClickShield.closeActivePopup();
  }),
  (UTHomeHubViewController.prototype._eChampionsTileSelected = function _eChampionsTileSelected(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.HOME,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Home - Champions Tile'
    ),
      services.Champions.claimRewards().observe(this, function(e, t) {
        e.unobserve(this);
        var i,
          s = t.data.awards;
        t.success &&
          0 < s.length &&
          (1 === s.length
            ? ((i = new controllers.views.popups.InGameRewards(
                s[0].awards
              )).setTitle(
                services.Localization.localize('champions.rewards.title')
              ),
              i.setDescription(
                services.Localization.localize('champions.rewards.description')
              ),
              i.setButtonText(
                services.Localization.localize('champions.rewards.claim')
              ))
            : ((i = new UTRewardSelectionChoiceViewController(s)).setTitleText(
                services.Localization.localize('champions.rewards.title')
              ),
              i
                .getView()
                .addTarget(
                  this,
                  this._eClosePopup,
                  UTRewardSelectionChoiceView.Event.CONFIRM
                )),
          gPopupClickShield.setActivePopup(i),
          t.data.allClaimed &&
            this.getView()
              .getChampionsTile()
              .hide());
      });
  }),
  (UTHomeHubViewController.prototype._eSquadBattlesTileSelected = function _eSquadBattlesTileSelected(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.HOME,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Home - Squad Battles Tile'
    ),
      services.SquadBattles.claimRewards().observe(this, function(e, t) {
        var i,
          s = t.data.awards;
        t.success && 0 < s.length
          ? (1 === s.length
              ? ((i = new controllers.views.popups.InGameRewards(
                  s[0].awards
                )).setTitle(
                  services.Localization.localize('squadbattles.rewards.title')
                ),
                i.setDescription(
                  services.Localization.localize(
                    'squadbattles.rewards.description'
                  )
                ),
                i.setButtonText(
                  services.Localization.localize('squadbattles.rewards.claim')
                ))
              : ((i = new UTRewardSelectionChoiceViewController(
                  s
                )).setTitleText(
                  services.Localization.localize('squadbattles.rewards.title')
                ),
                i
                  .getView()
                  .addTarget(
                    this,
                    this._eClosePopup,
                    UTRewardSelectionChoiceView.Event.CONFIRM
                  )),
            gPopupClickShield.setActivePopup(i),
            t.data.allClaimed &&
              this.getView()
                .getSquadBattlesTile()
                .hide())
          : NetworkErrorManager.checkCriticalStatus(response.status) &&
            NetworkErrorManager.handleStatus(response.status);
      });
  }),
  (UTHomeHubViewController.prototype._eRivalsTileSelected = function _eRivalsTileSelected(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.HOME,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Home - Rivals Tile'
    ),
      services.Rivals.getRewardsInfo().observe(this, function(e, t) {
        e.unobserve(this);
        var i,
          s = t.data.unclaimedRewards;
        t.success && 0 < s.length
          ? 1 === s.length
            ? services.Rivals.claimById(s[0].id).observe(this, function(e, t) {
                e.unobserve(this),
                  t.success &&
                    0 < t.data.rewards.length &&
                    (this.getView()
                      .getRivalsTile()
                      .hide(),
                    (i = new controllers.views.popups.InGameRewards(
                      t.data.rewards
                    )).setTitle(
                      services.Localization.localize(
                        'rivals.rewards.claimedtitle'
                      )
                    ),
                    i.setDescription(
                      services.Localization.localize(
                        'rivals.rewards.description'
                      )
                    ),
                    i.setButtonText(
                      services.Localization.localize('rivals.rewards.claim')
                    ),
                    gPopupClickShield.setActivePopup(i));
              })
            : ((i = new UTRewardSelectionChoiceViewController(s)).setTitleText(
                services.Localization.localize('rivals.rewards.title')
              ),
              i
                .getView()
                .addTarget(
                  this,
                  this._eRivalRewardClaimed,
                  UTRewardSelectionChoiceView.Event.CONFIRM
                ),
              gPopupClickShield.setActivePopup(i))
          : NetworkErrorManager.checkCriticalStatus(response.status) &&
            NetworkErrorManager.handleStatus(response.status);
      });
  }),
  (UTHomeHubViewController.prototype._eRivalRewardClaimed = function _eRivalRewardClaimed(
    e,
    t,
    i
  ) {
    e.removeTarget(
      this,
      this._eRivalRewardClaimed,
      UTRewardSelectionChoiceView.Event.CONFIRM
    ),
      services.Rivals.claimById(i.selectedId).observe(this, function(e, t) {
        e.unobserve(this),
          t.success && 0 < t.data.rewards.length
            ? this.getView()
                .getRivalsTile()
                .hide()
            : NetworkErrorManager.checkCriticalStatus(response.status) &&
              NetworkErrorManager.handleStatus(response.status);
      });
  }),
  (UTHomeHubViewController.prototype._ePlayerPicksTileSelected = function _ePlayerPicksTileSelected(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.HOME,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Home - Player Picks Tile'
    );
    var s = new UTPlayerPicksViewController();
    s.initWithPicks(this._playerPicks),
      (s.modalDisplayStyle = isPhone()
        ? enums.UIModalDisplayStyles.FULLSCREEN
        : enums.UIModalDisplayStyles.FORM),
      this.presentViewController(s, !0);
  }),
  (UTHomeHubViewController.prototype._eObjectivesTileSelected = function _eObjectivesTileSelected(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController();
    if (
      (TelemetryManager.trackEvent(
        TelemetryManager.Sections.HOME,
        TelemetryManager.Categories.BUTTON_PRESS,
        'Home - Dynamic Objectives Tile'
      ),
      s)
    ) {
      var n = new UTObjectivesHubViewController();
      n.init(), s.pushViewController(n);
    }
  }),
  (UTHomeHubViewController.prototype._eSBCTileSelected = function _eSBCTileSelected(
    e,
    t,
    i
  ) {
    if (this.getNavigationController()) {
      var s = new UTSBCHubViewController();
      s.init(), this.getNavigationController().pushViewController(s);
    }
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.HOME,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Home - SBC Tile'
    );
  }),
  (UTHomeHubViewController.prototype._eLeaderboardsTileSelected = function _eLeaderboardsTileSelected(
    e,
    t,
    i
  ) {
    if (this.getNavigationController()) {
      var s = new UTLeaderboardsHubViewController();
      s.init(), this.getNavigationController().pushViewController(s);
    }
  }),
  (UTHomeHubViewController.prototype._eGoToLink = function _eGoToLink(e, t, i) {
    var s = i.goToLink;
    (0 === s.indexOf('goto')
      ? this._goToLinkController.attemptNavigation(s)
      : services.URL.process(s)) &&
      (TelemetryManager.trackEvent(
        TelemetryManager.Sections.HOME,
        TelemetryManager.Categories.BUTTON_PRESS,
        'Home - FET Tile'
      ),
      services.PIN.sendData(enums.PIN.EVENT.MESSAGE, {
        type: enums.PIN.MESSAGE_EVT_TYPE.FET,
        service: 'aruba',
        count: '1',
        track: {
          trackingTag: i.trackingTag
        },
        status: PIN_MESSAGE_EVT_STATUS,
        destination_id: s,
        msg_id: i.id.toString()
      }));
  }),
  (UTHomeHubViewController.prototype._eWeekendLeagueAccess = function _eWeekendLeagueAccess(
    e,
    t,
    i
  ) {
    function _onWeekendLeagueAccessComplete(e, t) {
      e.unobserve(this);
      var i = this.getView().getWeekendLeagueProgress();
      t.success
        ? (i.setDisplay(!1),
          services.Notification.queue([
            services.Localization.localize(
              'rivals.weekendleague.accessgranted'
            ),
            enums.UINotificationType.POSITIVE
          ]))
        : t.status === enums.HTTPStatusCode.FORBIDDEN
        ? services.Notification.queue([
            services.Localization.localize(
              'rivals.weekendleague.error.forbidden'
            ),
            enums.UINotificationType.NEGATIVE
          ])
        : t.status === enums.HTTPStatusCode.NOT_FOUND
        ? services.Notification.queue([
            services.Localization.localize(
              'rivals.weekendleague.error.eventnotfound'
            ),
            enums.UINotificationType.NEGATIVE
          ])
        : t.status === enums.HTTPStatusCode.CONFLICT
        ? (i.setDisplay(!1),
          services.Notification.queue([
            services.Localization.localize(
              'rivals.weekendleague.error.alreadyqualified'
            ),
            enums.UINotificationType.NEGATIVE
          ]))
        : t.status === enums.HTTPStatusCode.NOT_ENOUGH_CREDIT
        ? services.Notification.queue([
            services.Localization.localize(
              'rivals.weekendleague.error.insufficientpoints'
            ),
            enums.UINotificationType.NEGATIVE
          ])
        : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED
        ? services.Notification.queue([
            services.Localization.localize(
              'rivals.weekendleague.error.disabled'
            ),
            enums.UINotificationType.NEGATIVE
          ])
        : NetworkErrorManager.handleStatus(t.status);
    }
    utils.PopupManager.ShowConfirmation(
      i.inGracePeriod
        ? utils.PopupManager.Confirmations.WEEKEND_LEAGUE_ACCESS_GRACE_PERIOD
        : utils.PopupManager.Confirmations.WEEKEND_LEAGUE_ACCESS,
      null,
      function _onWeekendLeagueAccessConfirm() {
        this._viewmodel
          .requestWeekendLeagueAccess()
          .observe(this, _onWeekendLeagueAccessComplete);
      }.bind(this)
    );
  }),
  (UTHomeHubViewController.prototype._eWeekendLeagueCountdownCompleted = function _eWeekendLeagueCountdownCompleted(
    e,
    t,
    i
  ) {
    this._viewmodel
      .requestUpcomingChampionsEvents()
      .observe(this, this._onUpcomingChampionsEventsRequested);
  }),
  (UTHomeHubViewController.prototype._nUnassignedItemAdded = function _nUnassignedItemAdded(
    e,
    t,
    i
  ) {
    services.Item.requestUnassignedItems().observe(
      this,
      this._onUnassignedItemsRequested
    );
  }),
  services.URL.registerDeepLinkID(enums.DeepLinkSections.HOME, function(e) {
    getAppMain()
      .getRootViewController()
      .setGameViewTab(UTGameTabBarController.TabTag.HOME);
  }),
  utils.JS.inherits(UTAboutView, UTView),
  (UTAboutView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-about'),
        (this.__gamename = document.createElement('p')),
        e.appendChild(this.__gamename),
        (this.__message1 = document.createElement('p')),
        e.appendChild(this.__message1),
        (this.__message2 = document.createElement('p')),
        e.appendChild(this.__message2),
        (this.__message3 = document.createElement('p')),
        e.appendChild(this.__message3),
        (this.__version = document.createElement('p')),
        e.appendChild(this.__version),
        (this.__support = document.createElement('p')),
        e.appendChild(this.__support),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTAboutView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__gamename = null),
      (this.__message1 = null),
      (this.__message2 = null),
      (this.__message3 = null),
      (this.__version = null),
      (this.__support = null);
  }),
  (UTAboutView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTAboutView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTAboutView.prototype.init = function init() {
    this.superclass();
    for (var e = '', t = 1; t <= 3; t++)
      e +=
        services.Localization.localize('about.message3.part' + t + '.web') +
        ' ';
    (this.__gamename.innerHTML = services.Localization.localize(
      'about.gamename.web'
    )),
      (this.__message1.innerHTML = services.Localization.localize(
        'about.message1.web'
      )),
      (this.__message2.innerHTML = services.Localization.localize(
        'about.message2'
      )),
      (this.__message3.innerHTML = e),
      (this.__support.innerHTML = services.Localization.localize(
        'about.support'
      ));
  }),
  (UTAboutView.prototype.setVersion = function setVersion(e, t, i) {
    var s = 'v' + e;
    (s += '.' + t),
      utils.JS.isEmpty(i) || (s += '.p' + i.toString()),
      (this.__version.textContent = s);
  }),
  utils.JS.inherits(UTAboutViewController, UTViewController),
  (UTAboutViewController.prototype.init = function init() {
    this.superclass(),
      this.getView().setVersion(
        getAppVersion(),
        gConfigurationModel.getConfigString(
          models.ConfigurationModel.KEY_CHANGELIST
        ),
        gClientUpdate.getAppliedPatch()
      );
  }),
  (UTAboutViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Settings - About';
  }),
  (UTAboutViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTAboutView();
  }),
  (UTAboutViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.about');
  }),
  utils.JS.inherits(UTAppSettingsView, UTView),
  (UTAppSettingsView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-app-settings'),
        e.classList.add('ut-content-container');
      var t = document.createElement('div');
      t.classList.add('ut-content'),
        (this.__personaSelectorContainer = document.createElement('div')),
        this.__personaSelectorContainer.classList.add(
          'ut-app-settings-persona-selector'
        ),
        t.appendChild(this.__personaSelectorContainer);
      var i = document.createElement('div');
      i.classList.add('ut-app-settings-actions'),
        (this.__menuOptions = document.createElement('div')),
        this.__menuOptions.classList.add('ut-button-group'),
        (this._optionsPN = new UTToggleControlGroupView()),
        this.__menuOptions.appendChild(this._optionsPN.getRootElement()),
        (this._languageSelectBtn = new UTGroupButtonControl()),
        this.__menuOptions.appendChild(
          this._languageSelectBtn.getRootElement()
        ),
        (this._rateThisAppButton = new UTGroupButtonControl()),
        this.__menuOptions.appendChild(
          this._rateThisAppButton.getRootElement()
        ),
        (this._logoutButton = new UTGroupButtonControl()),
        this.__menuOptions.appendChild(this._logoutButton.getRootElement()),
        i.appendChild(this.__menuOptions);
      var s = document.createElement('div');
      s.classList.add('ut-button-group'),
        (this._aboutButton = new UTGroupButtonControl()),
        this._aboutButton.getRootElement().classList.add('more'),
        s.appendChild(this._aboutButton.getRootElement()),
        (this._licenseAgreementButton = new UTGroupButtonControl()),
        this._licenseAgreementButton.getRootElement().classList.add('more'),
        s.appendChild(this._licenseAgreementButton.getRootElement()),
        (this._privacyPolicyButton = new UTGroupButtonControl()),
        this._privacyPolicyButton.getRootElement().classList.add('more'),
        s.appendChild(this._privacyPolicyButton.getRootElement()),
        (this._usageSharingButton = new UTGroupButtonControl()),
        this._usageSharingButton.getRootElement().classList.add('more'),
        s.appendChild(this._usageSharingButton.getRootElement()),
        i.appendChild(s),
        t.appendChild(i),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTAppSettingsView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__personaSelectorContainer = null),
      (this.__menuOptions = null),
      this._optionsPN.destroy(),
      this._languageSelectBtn.destroy(),
      this._rateThisAppButton.destroy(),
      this._logoutButton.destroy(),
      this._aboutButton.destroy(),
      this._licenseAgreementButton.destroy(),
      this._privacyPolicyButton.destroy(),
      this._usageSharingButton.destroy();
  }),
  (UTAppSettingsView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTAppSettingsView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTAppSettingsView.PN_SLIDER = 'pnEnabled'),
  (UTAppSettingsView.prototype.init = function init() {
    this._languageSelectBtn.init(),
      this._aboutButton.init(),
      this._licenseAgreementButton.init(),
      this._privacyPolicyButton.init(),
      this._logoutButton.init(),
      this._usageSharingButton.init(),
      this._languageSelectBtn.setText(
        services.Localization.localize('navbar.label.selectLanguage')
      ),
      this._rateThisAppButton.setText(
        services.Localization.localize('navbar.label.ratethisapp')
      ),
      this._logoutButton.setText(
        services.Localization.localize('more.signout')
      ),
      this._aboutButton.setText(services.Localization.localize('more.about')),
      this._licenseAgreementButton.setText(
        services.Localization.localize('more.license')
      ),
      this._privacyPolicyButton.setText(
        services.Localization.localize('more.privacy')
      ),
      this.setUsageSharingLabel(
        gUserSettingsModel.getUsageSharingEnabled()
          ? 'more.usagesharing.disable'
          : 'more.usagesharing.enable'
      ),
      DOMKit.toggleDisplayStyle(this._rateThisAppButton.getRootElement(), !1),
      DOMKit.toggleDisplayStyle(this._optionsPN.getRootElement(), !1);
  }),
  (UTAppSettingsView.prototype.appendPersonaSelector = function appendPersonaSelector(
    e
  ) {
    this.addSubview(e, this.__personaSelectorContainer);
  }),
  (UTAppSettingsView.prototype.setUsageSharingLabel = function setUsageSharingLabel(
    e
  ) {
    this._usageSharingButton.setText(services.Localization.localize(e));
  }),
  (UTAppSettingsView.prototype.getPNToggle = function getPNToggle() {
    return this._optionsPN;
  }),
  (UTAppSettingsView.prototype.getLanguageSelectButton = function getLanguageSelectButton() {
    return this._languageSelectBtn;
  }),
  (UTAppSettingsView.prototype.getRateAppButton = function getRateAppButton() {
    return this._rateThisAppButton;
  }),
  (UTAppSettingsView.prototype.getLogoutButton = function getLogoutButton() {
    return this._logoutButton;
  }),
  (UTAppSettingsView.prototype.getAboutButton = function getAboutButton() {
    return this._aboutButton;
  }),
  (UTAppSettingsView.prototype.getLicenseAgreementButton = function getLicenseAgreementButton() {
    return this._licenseAgreementButton;
  }),
  (UTAppSettingsView.prototype.getPrivacyPolicyButton = function getPrivacyPolicyButton() {
    return this._privacyPolicyButton;
  }),
  (UTAppSettingsView.prototype.getUsageSharingButton = function getUsageSharingButton() {
    return this._usageSharingButton;
  }),
  utils.JS.inherits(UTAppSettingsViewController, UTViewController);

function UTSBCRewardPreviewViewController() {
  UTViewController.call(this), (this._previewImageId = '');
}

function UTSBCHubViewController() {
  UTViewController.call(this),
    (this._viewmodel = null),
    (this._previouslySelectedCategoryId = null);
}

function UTSquadsHubView() {
  UTView.call(this);
}

function UTSquadListViewModel(e) {
  UTIterator.call(this, e);
}

function UTSquadTableCellView() {
  UTTargetActionView.call(this),
    (this._squad = null),
    (this._dataComponent = null);
}

function UTSectionedSquadTableView() {
  UTTargetActionView.call(this),
    (this._cellViews = []),
    (this._emptyMessage = null);
}

function UTSquadListView() {
  UTTargetActionView.call(this);
}

function UTSquadListViewController() {
  UTViewController.call(this),
    (this._squadListViewDelegate = null),
    Object.defineProperty(this, '_squadListViewDelegate', {
      writable: !0,
      enumerable: !1
    }),
    (this._viewmodel = null);
}

function UTSquadListSplitViewController() {
  UTSplitViewController.call(this),
    (this._listViewController = new UTSquadListViewController()),
    (this._squadDetailsController = null);
}

function UTTOTWSquadListView() {
  UTTargetActionView.call(this),
    (this._cellViews = []),
    (this._noResultsView = null);
}

function UTTOTWHistoryViewModel(e) {
  UTViewModel.call(this),
    (this._squadCollection = null),
    Object.defineProperty(this, '_squadCollection', {
      writable: !0,
      enumerable: !1
    }),
    (this._squadServiceObject = e),
    Object.defineProperty(this, '_squadServiceObject', {
      writable: !0,
      enumerable: !1
    });
}

function UTTOTWSquadListViewController() {
  UTViewController.call(this),
    (this._totwHistoryViewModel = null),
    (this._squadSelectDelegate = null);
}

function UTTOTWSummaryBannerView() {
  UTSquadSummaryBannerView.call(this);
}

function UTTOTWSquadOverviewView() {
  UTSquadOverviewView.call(this);
}

function UTTOTWSquadOverviewViewController() {
  UTSquadOverviewViewController.call(this), (this._totwHistoryViewModel = null);
}

function UTTOTWSquadSplitViewController() {
  UTBaseSquadSplitViewController.call(this), (this._historyController = null);
}

function UTSquadsHubViewController() {
  UTViewController.call(this), (this._totwHistoryViewModel = null);
}

function UTCoordinateVO(e, t) {
  (this.x = e),
    Object.defineProperty(this, 'x', {
      writable: !1,
      enumerable: !0
    }),
    (this.y = t),
    Object.defineProperty(this, 'y', {
      writable: !1,
      enumerable: !0
    });
}

function UTParticle() {
  UTObject.call(this),
    (this.id = 0),
    (this.x = 0),
    (this.y = 0),
    (this.gravity = 1),
    (this.angle = 0),
    (this.speed = 1),
    (this.acceleration = 0),
    (this.rotation = 0),
    (this.rotationSpeed = 0),
    (this.size = 1),
    (this.alpha = 1),
    (this.decay = 0),
    (this.lifetime = 5e3),
    (this._timestamp = Date.now()),
    (this.color = '#000'),
    (this.coordinateHistory = []);
}

function UTParticleSystem(e) {
  UTObject.call(this),
    (this._ctx = e.getContext('2d')),
    Object.defineProperty(this, '_ctx', {
      writable: !0,
      enumerable: !1
    }),
    (this._particles = []),
    Object.defineProperty(this, '_particles', {
      writable: !0,
      enumerable: !1
    }),
    (this._parentParticleSystem = null),
    Object.defineProperty(this, '_parentParticleSystem', {
      writable: !0,
      enumerable: !1
    }),
    (this._childParticleSystems = []),
    Object.defineProperty(this, '_childParticleSystems', {
      writable: !0,
      enumerable: !1
    }),
    (this._runStart = 0),
    Object.defineProperty(this, '_runStart', {
      writable: !0,
      enumerable: !1
    }),
    (this._running = !1),
    Object.defineProperty(this, '_running', {
      writable: !0,
      enumerable: !1
    }),
    (this._lastSpawnTime = 0),
    Object.defineProperty(this, '_lastSpawnTime', {
      writable: !0,
      enumerable: !1
    }),
    (this._frameRequestId = null),
    Object.defineProperty(this, '_frameRequestId', {
      writable: !0,
      enumerable: !1
    }),
    (this.x = 0),
    (this.y = 0),
    (this.duration = 5e3),
    (this.loop = !1),
    (this.spawnRate = 10),
    (this.spawnInterval = 100),
    (this.spawnDelay = 0),
    (this.maxParticles = 100),
    (this.lifetime = 5),
    (this.gravity = 1),
    (this.angle = 0),
    (this.speed = 1),
    (this.acceleration = 0),
    (this.rotation = 0),
    (this.rotationSpeed = 0);
}

function UTConfettiParticle() {
  UTParticle.call(this), (this.tilt = 0);
}

function UTConfettiColourVO(e, t) {
  (this.primaryColour = e),
    Object.defineProperty(this, 'primaryColour', {
      writable: !1,
      enumerable: !0
    }),
    (this.secondaryColour = t),
    Object.defineProperty(this, 'secondaryColour', {
      writable: !1,
      enumerable: !0
    });
}

function UTConfettiRainParticleSystem(e) {
  UTParticleSystem.call(this, e),
    (this._confettiColor = new UTConfettiColourVO(
      {
        r: 0,
        g: 0,
        b: 0
      },
      {
        r: 0,
        g: 0,
        b: 0
      }
    ));
}

function UTConfettiCannonParticleSystem(e) {
  UTParticleSystem.call(this, e),
    (this._confettiColor = new UTConfettiColourVO(
      {
        r: 0,
        g: 0,
        b: 0
      },
      {
        r: 0,
        g: 0,
        b: 0
      }
    ));
}

function UTParticleTrail() {
  (this.color = '#000'),
    (this.time = 1),
    (this.width = 1),
    (this.lineCap = 'round');
}

function UTFireworksParticleSystem(e) {
  UTParticleSystem.call(this, e),
    (this._particleTrail = new UTParticleTrail()),
    (this._particleTrail.width = 10),
    (this._particleTrail.time = 0.1);
}

function UTSnowflakeParticle() {
  UTParticle.call(this);
}

function UTSnowfallParticleSystem(e) {
  UTParticleSystem.call(this, e);
}

function UTPackAnimationView() {
  UTView.call(this),
    (this._cardComponent = null),
    (this._particleSystem = null),
    (this._confettiGenerator = null),
    (this._confettiCannon1 = null),
    (this._confettiCannon2 = null),
    (this._fireworkGenerator = null),
    (this._snowParticleSystem = null),
    (this._windowResizeCallback = this._eWindowResize.bind(this));
}

function UTPackAnimationViewController() {
  UTViewController.call(this),
    (this._animationTimeout = 0),
    (this._running = !1),
    (this._presentedItem = null),
    (this._packTier = ''),
    (this._callback = null);
}

function UTPackOddsView() {
  UTView.call(this);
}

function UTPackOddsViewController() {
  UTViewController.call(this), (this._odds = []);
}

function UTCurrencyButtonControl() {
  UTButtonControl.call(this), (this._currencyType = null);
}

function UTStorePackDetailsView() {
  UTTargetActionView.call(this), (this._timeInterval = 0), (this._packId = 0);
}

function UTNimbleMTXDetailsView() {
  UTTargetActionView.call(this), (this._nimbleMTXsku = '');
}

function UTStoreView() {
  UTTargetActionView.call(this),
    (this._storePacks = []),
    (this._nimbleMTXItems = []);
}

function UTStoreViewController() {
  UTViewController.call(this),
    (this._viewmodel = null),
    Object.defineProperty(this, '_viewmodel', {
      writable: !0,
      enumerable: !1
    }),
    (this._startingCategory = enums.Purchase.DisplayGroup.MYPACKS),
    Object.defineProperty(this, '_startingCategory', {
      writable: !0,
      enumerable: !1
    }),
    (this._packLoadObservable = null),
    Object.defineProperty(this, '_packLoadObservable', {
      writable: !0,
      enumerable: !1
    }),
    (this._isOpeningPack = !1),
    Object.defineProperty(this, '_isOpeningPack', {
      writable: !0,
      enumerable: !1
    }),
    (this._isLoadingPacks = !1),
    Object.defineProperty(this, '_isLoadingPacks', {
      writable: !0,
      enumerable: !1
    });
}

function UTWatchListView() {
  UTView.call(this), (this._sections = []), (this._emptyListView = null);
}

function UTWatchListViewController() {
  UTViewController.call(this),
    (this._viewmodel = null),
    (this.onDataChange = new UTObservable()),
    Object.defineProperty(this, 'onDataChange', {
      writable: !1
    }),
    (this.onItemSelected = new UTObservable()),
    Object.defineProperty(this, 'onItemSelected', {
      writable: !1
    });
}

function UTWatchListSplitViewController() {
  UTSplitViewController.call(this),
    (this._listController = new UTWatchListViewController()),
    (this._itemDetailController = new controllers.navigation.ItemDetails());
}

function UTExternalLinkTileView() {
  UTTileView.call(this);
}

function UTTransfersHubView() {
  UTView.call(this);
}

function UTTransfersHubViewController() {
  UTViewController.call(this);
}

function UTWebClientUpdateView() {
  UTTargetActionView.call(this), this._generate();
}

function UTWebClientUpdateViewController() {
  UTViewController.call(this);
}

function UTRootView() {
  UTView.call(this), this._generate();
}

function UTRootViewController() {
  UTViewController.call(this);
}

function UTServerSettingsUpdateController() {
  UTObject.call(this),
    (this._observable = null),
    Object.defineProperty(this, '_observable', {
      writable: !0,
      enumerable: !1
    }),
    (this._timeout = 0),
    Object.defineProperty(this, '_timeout', {
      writable: !0,
      enumerable: !1
    });
}
(UTAppSettingsViewController.prototype.init = function init() {
  this.superclass();
  var e = this.getView(),
    t = services.User.getUser();
  services.Authentication.getFUTAuthState() !== enums.FUTAuthState.NO_DATA &&
    t &&
    ((this._personaController = new controllers.views.Persona()),
    this._personaController.init(),
    this.addChildViewController(this._personaController),
    e.appendPersonaSelector(this._personaController.getView())),
    e.getPNToggle().addTarget(this, this._ePN, enums.Event.CHANGE),
    e
      .getLanguageSelectButton()
      .addTarget(this, this._eLanguageSelect, enums.Event.TAP),
    e.getRateAppButton().addTarget(this, this._eRateApp, enums.Event.TAP),
    e.getLogoutButton().addTarget(this, this._eLogout, enums.Event.TAP),
    e.getAboutButton().addTarget(this, this._eAbout, enums.Event.TAP),
    e
      .getLicenseAgreementButton()
      .addTarget(this, this._eLicense, enums.Event.TAP),
    e.getPrivacyPolicyButton().addTarget(this, this._ePrivacy, enums.Event.TAP),
    e.getUsageSharingButton().addTarget(this, this._eUsage, enums.Event.TAP);
}),
  (UTAppSettingsViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._personaController &&
        (this._personaController.dealloc(), (this._personaController = null));
  }),
  (UTAppSettingsViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTAppSettingsView();
  }),
  (UTAppSettingsViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Settings';
  }),
  (UTAppSettingsViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('button.settings');
  }),
  (UTAppSettingsViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getNavigationController();
    e && e.setNavigationVisibility(!0, !0),
      this._personaController && this._personaController.viewDidAppear(),
      this.getView().layoutSubviews(),
      TelemetryManager.trackPage(TelemetryManager.Sections.HOME, 'Settings');
  }),
  (UTAppSettingsViewController.prototype._ePN = function _ePN(e, t, i) {
    if (!isWeb() && !isChrome()) {
      var s = services.User.getUser();
      if (s) {
        window.plugins.utilities.registerNimble(
          s.id,
          i.checked.toString(),
          function() {
            getStorage().setItem(STORAGE_PN_STATUS_KEY, i.checked);
            var e = i.checked
              ? services.Localization.localize(
                  'notification.pushNotifications.enabled'
                )
              : services.Localization.localize(
                  'notification.pushNotifications.disabled'
                );
            services.Notification.queue([e, enums.UINotificationType.NEUTRAL]);
          }.bind(this),
          function() {
            this.getView()
              .getPNToggle()
              .toggleSlider(UTAppSettingsView.PN_SLIDER, !i.checked),
              services.Notification.queue([
                services.Localization.localize(
                  'notification.pushNotifications.toggleFailed'
                ),
                enums.UINotificationType.NEGATIVE
              ]);
          }.bind(this)
        );
      }
    }
  }),
  (UTAppSettingsViewController.prototype._eLanguageSelect = function _eLanguageSelect(
    e,
    t,
    i
  ) {
    services.SBC.reset(),
      services.Messages.reset(),
      services.Objectives.reset();
    var s = this.getNavigationController();
    if (s) {
      var n = new UTLanguageSelectViewController();
      n.init(),
        n.setLanguageSelectCallback(function() {
          location.reload();
        }),
        s.pushViewController(n);
    }
  }),
  (UTAppSettingsViewController.prototype._eRateApp = function _eRateApp(
    e,
    t,
    i
  ) {
    this._canOpenExternalLinks
      ? window.plugins.utilities.showStoreAppPage(
          function _onRateSuccess() {
            console.log('Rate this app success!');
          }.bind(this),
          function _onRateFail() {
            services.Notification.queue([
              services.Localization.localize('popup.error.rateapp.Unavailable'),
              enums.UINotificationType.NEGATIVE
            ]);
          }.bind(this),
          !0
        )
      : console.log('Rate app not shown in Chrome');
  }),
  (UTAppSettingsViewController.prototype._eAbout = function _eAbout(e, t, i) {
    var s = this.getNavigationController();
    if (s) {
      var n = new UTAboutViewController();
      n.init(), s.pushViewController(n);
    }
  }),
  (UTAppSettingsViewController.prototype._eLicense = function _eLicense(
    e,
    t,
    i
  ) {
    services.URL.process(
      services.Localization.localize(enums.BaseURLHALString.USER_AGREEMENT)
    );
  }),
  (UTAppSettingsViewController.prototype._ePrivacy = function _ePrivacy(
    e,
    t,
    i
  ) {
    services.URL.process(
      services.Localization.localize(enums.BaseURLHALString.PRIVACY_POLICY)
    );
  }),
  (UTAppSettingsViewController.prototype._eLogout = function _eLogout(e, t, i) {
    utils.PopupManager.ShowConfirmation(
      utils.PopupManager.Confirmations.SIGN_OUT,
      null,
      function onLogoutConfirmed() {
        getAppMain()
          .getLoginController()
          .logout();
      }.bind(this)
    );
  }),
  (UTAppSettingsViewController.prototype._eUsage = function _eUsage(e, t, i) {
    var s = gUserSettingsModel.getUsageSharingEnabled()
      ? utils.PopupManager.Confirmations.DISABLE_USAGE_SHARING
      : utils.PopupManager.Confirmations.ENABLE_USAGE_SHARING;
    utils.PopupManager.ShowConfirmation(
      s,
      null,
      this.onConfirmToggleUsageSharing.bind(this),
      null
    );
  }),
  (UTAppSettingsViewController.prototype.onConfirmToggleUsageSharing = function onConfirmToggleUsageSharing(
    e,
    t,
    i
  ) {
    var s = !gUserSettingsModel.getUsageSharingEnabled();
    gUserSettingsModel.setUsageSharingEnabled(s),
      s
        ? (services.PIN.sendData(
            enums.PIN.EVENT.BOOT_START,
            {
              status: enums.PIN.BOOT_START_EVT_STATUS.SUCCESS,
              source: enums.PIN.BOOT_START_EVT_SOURCE.OPT_IN_TEL
            },
            !0
          ),
          services.PIN.sendData(
            enums.PIN.EVENT.SETTINGS,
            {
              type: 'opt_in_tel',
              status: enums.PIN.SETTINGS_EVT_STATUS.OPT_IN
            },
            !0
          ))
        : (services.PIN.sendData(
            enums.PIN.EVENT.BOOT_END,
            {
              end_reason: enums.PIN.BOOT_END_EVT_REASON.OPT_OUT_TEL
            },
            !0
          ),
          services.PIN.sendData(
            enums.PIN.EVENT.SETTINGS,
            {
              type: 'opt_in_tel',
              status: enums.PIN.SETTINGS_EVT_STATUS.OPT_OUT
            },
            !0
          )),
      this.getView().setUsageSharingLabel(
        s ? 'more.usagesharing.disable' : 'more.usagesharing.enable'
      );
  }),
  NamespaceManager.Register('views.onboarding'),
  (views.onboarding.WelcomeBack = function() {
    UTView.call(this), this._generate();
  }),
  utils.JS.inherits(views.onboarding.WelcomeBack, UTView),
  (views.onboarding.WelcomeBack.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('sm-ut-content-container'),
        e.classList.add('ut-content-container');
      var t = document.createElement('div');
      t.classList.add('ut-content'),
        (this.__personaSelectorContainer = document.createElement('div')),
        this.__personaSelectorContainer.classList.add(
          'ut-app-settings-persona-selector'
        ),
        t.appendChild(this.__personaSelectorContainer);
      var i = document.createElement('div');
      i.classList.add('ut-welcome-back'), i.classList.add('ut-login-generic');
      var s = document.createElement('div');
      s.classList.add('ut-login-generic-content');
      var n = document.createElement('div');
      (this.__welcomeText = document.createElement('h2')),
        this.__welcomeText.classList.add('title'),
        n.appendChild(this.__welcomeText),
        (this.__welcomeDesc = document.createElement('p')),
        n.appendChild(this.__welcomeDesc),
        s.appendChild(n);
      var o = document.createElement('div');
      o.classList.add('ut-button-container'),
        (this._btnSubmit = new UTStandardButtonControl()),
        this._btnSubmit.getRootElement().classList.add('call-to-action'),
        o.appendChild(this._btnSubmit.getRootElement()),
        s.appendChild(o),
        i.appendChild(s),
        t.appendChild(i),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.onboarding.WelcomeBack.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__personaSelectorContainer = null),
      (this.__welcomeText = null),
      (this.__welcomeDesc = null),
      this._btnSubmit.destroy();
  }),
  (views.onboarding.WelcomeBack.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.onboarding.WelcomeBack.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.onboarding.WelcomeBack.prototype.init = function init() {
    this.superclass(),
      this._btnSubmit.init(),
      this._btnSubmit.setText(
        services.Localization.localize('mobilestart.label.getStarted')
      );
  }),
  (views.onboarding.WelcomeBack.prototype.appendPersonaSelector = function appendPersonaSelector(
    e
  ) {
    this.addClass('has-persona-selector'),
      this.addSubview(e, this.__personaSelectorContainer);
  }),
  (views.onboarding.WelcomeBack.prototype.setTitle = function setTitle(e) {
    this.__welcomeText.innerHTML = e;
  }),
  (views.onboarding.WelcomeBack.prototype.setDescription = function setDescription(
    e
  ) {
    this.__welcomeDesc.textContent = e;
  }),
  (views.onboarding.WelcomeBack.prototype.getSubmitButton = function getSubmitButton() {
    return this._btnSubmit;
  }),
  NamespaceManager.Register('interfaces'),
  (interfaces.SlotIterationDelegate = function() {}),
  (interfaces.SlotIterationDelegate.prototype.setSlot = function(e, t) {}),
  utils.JS.inherits(UTItemInfoChangeButtonControl, UTNavigationButtonControl),
  (UTItemInfoChangeButtonControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      e.classList.add('ut-iteminfochange-button-control'),
        (this.__label = document.createElement('span')),
        e.appendChild(this.__label),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTItemInfoChangeButtonControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__label = null);
  }),
  (UTItemInfoChangeButtonControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTItemInfoChangeButtonControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTItemInfoChangeButtonControl.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      this._updateInfoStateAttribute();
  }),
  (UTItemInfoChangeButtonControl.prototype.setText = function setText(e) {
    this.__label.textContent = e;
  }),
  (UTItemInfoChangeButtonControl.prototype.setCurrentState = function setCurrentState(
    e
  ) {
    this._currentState !== e &&
      ((this._currentState = e), this._updateInfoStateAttribute());
  }),
  (UTItemInfoChangeButtonControl.prototype._updateInfoStateAttribute = function _updateInfoStateAttribute() {
    var e;
    switch (this._currentState) {
      case enums.UIItemInfoState.MAIN:
        e = 'main';
        break;
      case enums.UIItemInfoState.BIO:
        e = 'bio';
        break;
      case enums.UIItemInfoState.STATS:
        e = 'stats';
        break;
      case enums.UIItemInfoState.STYLE:
        e = 'style';
        break;
      default:
        e = 'main';
    }
    this.getRootElement().setAttribute('data-info-state', e);
  }),
  NamespaceManager.Register('views.onboarding'),
  (views.onboarding.StarterSquadOverview = function StarterSquadOverviewView() {
    UTView.call(this), (this._slotSelectHeight = 0), this._generate();
  }),
  utils.JS.inherits(views.onboarding.StarterSquadOverview, UTView),
  (views.onboarding.StarterSquadOverview.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('OnboardingSquad'),
        (this._squadOverview = new UTSquadOverviewView()),
        e.appendChild(this._squadOverview.getRootElement()),
        (this.__slotSelectContainer = document.createElement('div')),
        this.__slotSelectContainer.classList.add('button-container'),
        (this._btnSlotSelect = new UTStandardButtonControl()),
        this._btnSlotSelect.getRootElement().classList.add('call-to-action'),
        this.__slotSelectContainer.appendChild(
          this._btnSlotSelect.getRootElement()
        ),
        e.appendChild(this.__slotSelectContainer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.onboarding.StarterSquadOverview.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._squadOverview.destroy(),
      (this.__slotSelectContainer = null),
      this._btnSlotSelect.destroy();
  }),
  (views.onboarding.StarterSquadOverview.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.onboarding.StarterSquadOverview.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.onboarding.StarterSquadOverview.prototype.init = function init() {
    this.superclass(),
      this._squadOverview.init(),
      this._btnSlotSelect.init(),
      (this._squadOverview.renderManager = !1),
      this._btnSlotSelect.setInteractionState(!1),
      this._btnSlotSelect.setText(
        services.Localization.localize('common.dialog.continue')
      );
  }),
  (views.onboarding.StarterSquadOverview.prototype.didAddToSuperview = function didAddToSuperview() {
    this.superclass(),
      (this._slotSelectHeight = this.__slotSelectContainer.offsetHeight);
  }),
  (views.onboarding.StarterSquadOverview.prototype.getSquadOverview = function getSquadOverview() {
    return this._squadOverview;
  }),
  (views.onboarding.StarterSquadOverview.prototype.getSlotSelectButton = function getSlotSelectButton() {
    return this._btnSlotSelect;
  }),
  (views.onboarding.StarterSquadOverview.prototype.toggleSlotSelect = function toggleSlotSelect(
    e
  ) {
    var t = this._squadOverview.getRootElement();
    t.style.bottom = e
      ? ((this.__slotSelectContainer.style.display = ''),
        this._slotSelectHeight + 'px')
      : ((this.__slotSelectContainer.style.display = 'none'), '0px');
  }),
  NamespaceManager.Register('viewmodels'),
  (viewmodels.OnboardingLoanPlayerSelection = function OnboardingLoanPlayerSelectionViewmodel() {
    UTObject.call(this),
      (this._items = []),
      (this._positionList = [
        enums.PlayerPositionsAsInts.ST,
        enums.PlayerPositionsAsInts.LM,
        enums.PlayerPositionsAsInts.CM,
        enums.PlayerPositionsAsInts.RM,
        enums.PlayerPositionsAsInts.LB,
        enums.PlayerPositionsAsInts.CB,
        enums.PlayerPositionsAsInts.RB,
        enums.PlayerPositionsAsInts.GK
      ]);
  }),
  utils.JS.inherits(viewmodels.OnboardingLoanPlayerSelection, UTObject),
  (viewmodels.OnboardingLoanPlayerSelection.prototype.setItems = function setItems(
    e
  ) {
    this._items = e;
  }),
  (viewmodels.OnboardingLoanPlayerSelection.prototype.getPositionFromSlot = function getPositionFromSlot(
    e
  ) {
    var t = e.getGeneralPosition();
    if (t < 0) {
      var i = services.User.getUser().getSelectedPersona().id;
      t = this._positionList[(i + e.getIndex()) % this._positionList.length];
    }
    return t;
  }),
  (viewmodels.OnboardingLoanPlayerSelection.prototype.getLoanerSample = function getLoanerSample(
    e,
    t
  ) {
    return 0 === this._items.length
      ? []
      : ((e = e < 1 ? 1 : e),
        this._items
          .filter(function(e) {
            return e.preferredPosition === t;
          })
          .sort(function(e, t) {
            return utils.JS.sortCompare(e.rating, t.rating, !0);
          })
          .slice(0, e));
  }),
  NamespaceManager.Register('controllers.onboarding'),
  (controllers.onboarding.StarterSquadOverview = function StarterSquadOverviewViewController() {
    UTViewController.call(this),
      (this._squad = null),
      (this._selectedIndex = -1),
      (this._mobileInfoDisplayed = !1),
      (this._itemInfoStateViewModel = new UTItemInfoStateViewModel(
        gUserSettingsModel
      )),
      (this._itemInfoSwitchButton = new UTItemInfoChangeButtonControl()),
      (this._introMessage = null);
  }),
  utils.JS.inherits(
    controllers.onboarding.StarterSquadOverview,
    UTViewController
  ),
  (controllers.onboarding.StarterSquadOverview.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      this.getView()
        .getSlotSelectButton()
        .addTarget(this, this._eSlotSelected, enums.Event.TAP),
      this._itemInfoSwitchButton.init(),
      this._itemInfoSwitchButton.setInteractionState(!0),
      this._itemInfoSwitchButton.addTarget(
        this,
        this._eItemInfoSwitchButtonSelected,
        enums.Event.TAP
      ));
  }),
  (controllers.onboarding.StarterSquadOverview.prototype.initWithSquad = function initWithSquad(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.Squad,
        'Initialization expected a squad entity.'
      ),
      (this._squad = e),
      this._squad.onDataUpdated.observe(this, this._eSquadUpdated),
      this.init());
  }),
  (controllers.onboarding.StarterSquadOverview.prototype.dealloc = function dealloc() {
    this._squad && this._squad.onDataUpdated.unobserve(this),
      this._itemInfoSwitchButton.dealloc(),
      (this._squad = null),
      this.superclass();
  }),
  (controllers.onboarding.StarterSquadOverview.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.StarterSquadOverview();
  }),
  (controllers.onboarding.StarterSquadOverview.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('onboarding.complete.teamtitle');
  }),
  (controllers.onboarding.StarterSquadOverview.prototype.getNavigationItem = function getNavigationItem() {
    return this._itemInfoSwitchButton;
  }),
  (controllers.onboarding.StarterSquadOverview.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      utils.Debug.Assert(
        this._squad instanceof entities.Squad,
        'View appearing on screen without a squad to display.'
      ),
      this._itemInfoSwitchButton.setCurrentState(
        this._itemInfoStateViewModel.getState()
      );
    var e = this.getNavigationController();
    if (
      (e &&
        e.conforms(controllers.navigation.Onboarding) &&
        (e.setNavigationStyle(
          isPhone()
            ? enums.UINavigationBarStyle.DEFAULT
            : enums.UINavigationBarStyle.LANDSCAPE
        ),
        e.setToolbarVisibility(!1),
        e.setCurrentStep(enums.UIOnboardingStep.LOANER)),
      this._squad)
    ) {
      var t = this.getView().getSquadOverview();
      t.setSquad(this._squad),
        t.addTarget(this, this._eItemTap, enums.UISquadPitchEvent.SLOT_SELECT);
    }
    isPhone() &&
      !this._mobileInfoDisplayed &&
      ((this._mobileInfoDisplayed = !0),
      setTimeout(function() {
        if (!this._introMessage) {
          var e = utils.PopupManager.Alerts.ONBOARDING_INTRO.title,
            t = utils.PopupManager.Alerts.ONBOARDING_INTRO.message;
          (this._introMessage = new controllers.views.popups.Dialog(
            t,
            e,
            enums.UIDialogTypes.STANDARD,
            [],
            [enums.UIDialogOptions.OK]
          )),
            this._introMessage.init(),
            this._introMessage.viewWillAppear(),
            gPopupClickShield.setActivePopup(this._introMessage);
        }
      }, 1e3));
    var i = 'Onboarding - Squad';
    services.PIN.sendData(enums.PIN.EVENT.PAGE_VIEW, {
      type: PIN_PAGEVIEW_EVT_TYPE,
      pgid: i
    }),
      TelemetryManager.trackPage(TelemetryManager.Sections.ONBOARDING, i);
  }),
  (controllers.onboarding.StarterSquadOverview.prototype.setSlot = function setSlot(
    e
  ) {
    if (((this._selectedIndex = e), this._squad)) {
      var t = this.getView(),
        i = t.getSlotSelectButton(),
        s = '';
      e < entities.Squad.FIELD_PLAYERS
        ? (s = utils.FUTLocalization.getLocalizedPositionStringById(
            this._squad.getSlot(e).getGeneralPosition()
          ))
        : e < entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS
        ? (s = services.Localization.localize('dock.label.substitutes'))
        : e < entities.Squad.MANAGER_SLOT_INDEX &&
          (s = services.Localization.localize('dock.label.reserves')),
        i.setText(services.Localization.localize('swap.withposition', [s])),
        i.setInteractionState(!0),
        t
          .getSquadOverview()
          .addSlotInteractionState(e, enums.UISlotInteractionState.SELECTED);
    }
  }),
  (controllers.onboarding.StarterSquadOverview.prototype._loadLoanPlayers = function _loadLoanPlayers() {
    var o = this.getView(),
      a = this._squad.getSlot(this._selectedIndex);
    o.setInteractionState(!1),
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Onboarding.getLoanPlayers().observe(
        this,
        function _gotoLoanSelector(e, t) {
          if ((e.unobserve(this), t.success)) {
            var i = new controllers.onboarding.LoanSelector(),
              s = new viewmodels.OnboardingLoanPlayerSelection();
            s.setItems(t.data.items),
              i.initWithItems(
                s.getLoanerSample(5, s.getPositionFromSlot(a)),
                a.getItem()
              ),
              i.setSquadViewDelegate(o.getSquadOverview()),
              this._squad && i.setSquad(this._squad);
            var n = this.getNavigationController();
            n &&
              (n.pushViewController(i),
              o.getSlotSelectButton().setInteractionState(!1));
          } else o.setInteractionState(!0);
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      );
  }),
  (controllers.onboarding.StarterSquadOverview.prototype._eSquadUpdated = function _eSquadUpdated(
    e,
    t
  ) {
    var i = this.getView(),
      s = i.getSlotSelectButton();
    i.getSquadOverview().setSquad(this._squad),
      s.setText(services.Localization.localize('common.dialog.continue')),
      s.removeTarget(this, this._eSlotSelected, enums.Event.TAP),
      s.addTarget(this, this._eContinue, enums.Event.TAP),
      s.setInteractionState(!0);
  }),
  (controllers.onboarding.StarterSquadOverview.prototype._eItemTap = function _eItemTap(
    e,
    t,
    i
  ) {
    var s = this.getParentViewController(),
      n = i && utils.JS.isNumber(i.slotIndex) ? i.slotIndex : 0;
    n >= entities.Squad.MANAGER_SLOT_INDEX - 2 ||
      (this.setSlot(n),
      s && s.conforms(interfaces.SlotIterationDelegate) && s.setSlot(this, n));
  }),
  (controllers.onboarding.StarterSquadOverview.prototype._eSlotSelected = function _eSlotSelected(
    e,
    t,
    i
  ) {
    this._loadLoanPlayers();
  }),
  (controllers.onboarding.StarterSquadOverview.prototype._eContinue = function _eContinue(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController();
    if (s) {
      var n = new controllers.onboarding.KitSelect();
      n.init(), s.pushViewController(n, !0);
    }
  }),
  (controllers.onboarding.StarterSquadOverview.prototype._eItemInfoSwitchButtonSelected = function _eItemInfoSwitchButtonSelected(
    e,
    t,
    i
  ) {
    this._itemInfoSwitchButton.setCurrentState(
      this._itemInfoStateViewModel.nextState()
    );
  }),
  NamespaceManager.Register('views.lists'),
  (views.lists.ItemSelectionRow = function ItemSelectionListRowView() {
    UTTargetActionView.call(this),
      (this._itemView = null),
      (this._statsView = null),
      this._generate();
  }),
  utils.JS.inherits(views.lists.ItemSelectionRow, UTTargetActionView),
  (views.lists.ItemSelectionRow.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('li');
      e.classList.add('selectionRow'),
        e.classList.add('listFUTItem'),
        (this.__selectIcon = document.createElement('div')),
        this.__selectIcon.classList.add('selectIcon'),
        e.appendChild(this.__selectIcon),
        (this.__entityContainer = document.createElement('div')),
        this.__entityContainer.classList.add('entityContainer'),
        (this.__name = document.createElement('div')),
        this.__name.classList.add('name'),
        this.__entityContainer.appendChild(this.__name),
        e.appendChild(this.__entityContainer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.lists.ItemSelectionRow.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__selectIcon = null),
      (this.__entityContainer = null),
      (this.__name = null);
  }),
  (views.lists.ItemSelectionRow.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.lists.ItemSelectionRow.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.lists.ItemSelectionRow.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (views.lists.ItemSelectionRow.prototype.dealloc = function dealloc() {
    this._itemView && (this._itemView.destroy(), (this._itemView = null)),
      this._statsView && (this._statsView.destroy(), (this._statsView = null)),
      this.superclass();
  }),
  (views.lists.ItemSelectionRow.prototype.select = function select() {
    this.addClass(enums.UIListRowState.SELECTED);
  }),
  (views.lists.ItemSelectionRow.prototype.deselect = function deselect() {
    this.removeClass(enums.UIListRowState.SELECTED);
  }),
  (views.lists.ItemSelectionRow.prototype.toggleSelection = function toggleSelection(
    e
  ) {
    e ? this.select() : this.deselect();
  }),
  (views.lists.ItemSelectionRow.prototype.setData = function setData(e) {
    utils.Debug.Assert(
      e.item instanceof entities.Item,
      "Expected property 'item' to be an instance of entities.Item"
    ),
      this._renderName(e.item),
      this._renderItem(e.item),
      this._renderStats(e.item, e.comparison || null);
  }),
  (views.lists.ItemSelectionRow.prototype._renderName = function _renderName(
    e
  ) {
    this.__name.textContent = e.getStaticData().name;
  }),
  (views.lists.ItemSelectionRow.prototype._renderItem = function _renderItem(
    e
  ) {
    this._itemView
      ? this._itemView.canRender(e) ||
        (this._itemView.destroy(),
        (this._itemView = factories.ItemView.createSmallItem(e)),
        this._itemView.init(),
        this.__entityContainer.insertBefore(
          this._itemView.getRootElement(),
          this.__entityContainer.firstChild
        ))
      : ((this._itemView = factories.ItemView.createSmallItem(e)),
        this._itemView.init(),
        this.__entityContainer.insertBefore(
          this._itemView.getRootElement(),
          this.__entityContainer.firstChild
        )),
      this._itemView.render(e);
  }),
  (views.lists.ItemSelectionRow.prototype._renderStats = function _renderStats(
    e,
    t
  ) {
    this._statsView ||
      ((this._statsView = new UTListDataPlayerStatsView()),
      this.__entityContainer.appendChild(this._statsView.getRootElement())),
      t &&
        (utils.Debug.Assert(
          t instanceof entities.Item,
          "Expected property 'comparison' to be an instance of entities.Item"
        ),
        this._statsView.setComparisonData(t)),
      this._statsView.render(e);
  }),
  (views.lists.ItemSelectionRow.prototype._tapDetected = function _tapDetected(
    e
  ) {
    this._triggerActions(enums.Event.TAP);
  }),
  NamespaceManager.Register('views.onboarding'),
  (views.onboarding.LoanSelector = function LoanSelectorOnboardingView() {
    UTTargetActionView.call(this),
      (this._rows = []),
      (this._pinnedRow = null),
      Object.defineProperty(this, '_pinnedRow', {
        writable: !0,
        enumerable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.onboarding.LoanSelector, UTTargetActionView),
  (views.onboarding.LoanSelector.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-pinned-list-container'),
        e.classList.add('OnboardingLoanSelector'),
        (this.__pinnedDiv = document.createElement('div')),
        this.__pinnedDiv.classList.add('ut-pinned-item'),
        (this.__header = document.createElement('div')),
        this.__header.classList.add('header'),
        this.__pinnedDiv.appendChild(this.__header),
        e.appendChild(this.__pinnedDiv),
        (this.__itemList = document.createElement('div')),
        this.__itemList.classList.add('ut-pinned-list'),
        e.appendChild(this.__itemList);
      var t = document.createElement('div');
      t.classList.add('button-container'),
        (this._btnSelect = new UTStandardButtonControl()),
        this._btnSelect.getRootElement().classList.add('call-to-action'),
        t.appendChild(this._btnSelect.getRootElement()),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.onboarding.LoanSelector.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__pinnedDiv = null),
      (this.__header = null),
      (this.__itemList = null),
      this._btnSelect.destroy();
  }),
  (views.onboarding.LoanSelector.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.onboarding.LoanSelector.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.onboarding.LoanSelector.prototype.init = function init() {
    this.superclass(),
      (this.__header.textContent = services.Localization.localize(
        'search.pagination.header'
      )),
      DOMKit.toggleDisplayStyle(this.__header, !isPhone()),
      this._btnSelect.init(),
      this._btnSelect.setInteractionState(!1),
      this._btnSelect.setText(
        services.Localization.localize('common.dialog.continue')
      );
  }),
  (views.onboarding.LoanSelector.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._pinnedRow && (this._pinnedRow.destroy(), (this._pinnedRow = null)),
      this._clearRows();
  }),
  (views.onboarding.LoanSelector.prototype._clearRows = function _clearRows() {
    0 < this._rows.length &&
      (this._rows.forEach(function(e) {
        e.dealloc();
      }),
      (this._rows = []));
  }),
  (views.onboarding.LoanSelector.prototype.getContinueButton = function getContinueButton() {
    return this._btnSelect;
  }),
  (views.onboarding.LoanSelector.prototype.setItems = function setItems(e, t) {
    this._clearRows(),
      this._pinnedRow && this._pinnedRow.destroy(),
      (this._rows = e.map(function(e) {
        return this._generateItemSelectionRow(e, t || null);
      }, this)),
      t && (this._pinnedRow = this._generateComparisonItemView(t)),
      this.layoutSubviews();
  }),
  (views.onboarding.LoanSelector.prototype._generateItemSelectionRow = function _generateItemSelectionRow(
    e,
    t
  ) {
    var i = new views.lists.ItemSelectionRow();
    return (
      i.setData({
        item: e,
        comparison: t
      }),
      i.addTarget(this, this._eRowSelected, enums.Event.TAP),
      i.init(),
      this.addSubview(i, this.__itemList),
      i
    );
  }),
  (views.onboarding.LoanSelector.prototype._generateComparisonItemView = function _generateComparisonItemView(
    e
  ) {
    var t = new components.ListRowItem();
    t.setData(e), t.render(), this.__pinnedDiv.appendChild(t.getRootElement());
    var i = this.__pinnedDiv.clientHeight;
    return (this.__itemList.style.top = i + 'px'), t;
  }),
  (views.onboarding.LoanSelector.prototype._eRowSelected = function _eRowSelected(
    t,
    e,
    i
  ) {
    this._rows.forEach(function(e) {
      e.toggleSelection(t === e);
    }),
      this._triggerActions(enums.Event.TAP, {
        row: t,
        rowIndex: this._rows.indexOf(t)
      });
  }),
  NamespaceManager.Register('controllers.onboarding'),
  (controllers.onboarding.LoanSelector = function LoanSelectorOnboardingViewController() {
    UTViewController.call(this),
      (this._items = []),
      (this._comparison = null),
      (this._selectedItem = null),
      (this._squad = null),
      (this._squadViewDelegate = null);
  }),
  utils.JS.inherits(controllers.onboarding.LoanSelector, UTViewController),
  (controllers.onboarding.LoanSelector.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      e.addTarget(this, this._eRowSelected, enums.Event.TAP),
        e
          .getContinueButton()
          .addTarget(this, this._eContinueButtonTapped, enums.Event.TAP);
      var t = 'Onboarding - Loan Player';
      services.PIN.sendData(enums.PIN.EVENT.PAGE_VIEW, {
        type: PIN_PAGEVIEW_EVT_TYPE,
        pgid: t
      }),
        TelemetryManager.trackPage(TelemetryManager.Sections.ONBOARDING, t);
    }
  }),
  (controllers.onboarding.LoanSelector.prototype.initWithItems = function initWithItems(
    e,
    t
  ) {
    this.initialized ||
      ((this._items = e), (this._comparison = t || null), this.init());
  }),
  (controllers.onboarding.LoanSelector.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this._items = []),
      (this._comparison = null),
      (this._selectedItem = null),
      (this._squad = null),
      (this._squadViewDelegate = null);
  }),
  (controllers.onboarding.LoanSelector.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.LoanSelector();
  }),
  (controllers.onboarding.LoanSelector.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('search.pagination.header');
  }),
  (controllers.onboarding.LoanSelector.prototype.viewWillAppear = function viewWillAppear() {
    if ((this.superclass(), isPhone())) {
      var e = this.getNavigationController();
      e && e.showSettings(!1);
    }
  }),
  (controllers.onboarding.LoanSelector.prototype.viewWillDisappear = function viewWillDisappear() {
    if ((this.superclass(), isPhone())) {
      var e = this.getNavigationController();
      e && e.showSettings(!0);
    }
  }),
  (controllers.onboarding.LoanSelector.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this.getView().setItems(this._items, this._comparison);
  }),
  (controllers.onboarding.LoanSelector.prototype.setSquad = function setSquad(
    e
  ) {
    this._squad = e;
  }),
  (controllers.onboarding.LoanSelector.prototype.setSquadViewDelegate = function setSquadViewDelegate(
    e
  ) {
    e.conforms(interfaces.SquadViewDelegate) && (this._squadViewDelegate = e);
  }),
  (controllers.onboarding.LoanSelector.prototype._grantLoan = function _grantLoan() {
    if (
      (utils.Debug.Assert(
        utils.JS.isValid(this._selectedItem),
        'Expected a loan player item to have been selected.'
      ),
      utils.Debug.Assert(
        utils.JS.isValid(this._squad),
        'Expected a squad entity reference.'
      ),
      utils.Debug.Assert(
        utils.JS.isValid(this._comparison),
        'Expected a valid item to swap with the new loan player.'
      ),
      this._selectedItem && this._squad && this._comparison)
    ) {
      var n = null;
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
        services.Onboarding.grantLoanPlayer(this._selectedItem).observe(
          this,
          function _onGrantLoanComplete(e, t) {
            if ((e.unobserve(this), t.success)) {
              services.PIN.sendData(enums.PIN.EVENT.MILESTONE, {
                moment: PIN_MILESTONE_EVT_MOMENT,
                mode: PIN_MILESTONE_EVT_MODE,
                type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
                mstid: enums.PIN.MILESTONE_EVT_ID.LOANSELECT
              }),
                (n = t.data.item),
                services.Item.move(n, enums.FUTItemPile.CLUB).observe(
                  this,
                  _onLoanMoveComplete
                );
              var i = this.getRootNavigationController();
              i &&
                i.conforms(controllers.navigation.Onboarding) &&
                i.getOnboardingState().setLoanerDefId(n.getDefId());
            } else
              TelemetryManager.trackEvent(
                TelemetryManager.Sections.ONBOARDING,
                TelemetryManager.Categories.ERROR,
                '(' + t.status + ') Failed to grant loaner'
              ),
                gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
          }
        );
    }

    function _onLoanMoveComplete(e, t) {
      if ((e.unobserve(this), t.success)) {
        var i = this._squad.getSlot(this._comparison);
        i &&
          (this._squad.addItemToSlot(i.getIndex(), n),
          this._squad.addItemToSlot(
            entities.Squad.MANAGER_SLOT_INDEX - 1,
            this._comparison
          ),
          this._squad.save());
      } else
        TelemetryManager.trackEvent(
          TelemetryManager.Sections.ONBOARDING,
          TelemetryManager.Categories.ERROR,
          '(' + t.status + ') Failed to move loaner to club'
        ),
          NetworkErrorManager.handleStatus(t.status);
      this._squadViewDelegate &&
        this._squadViewDelegate.setInteractionState(!1);
      var s = this.getNavigationController();
      s && s.popViewController(),
        gClickShield.hideShield(components.ClickShield.SHIELD.LOADING),
        services.PIN.sendData(enums.PIN.EVENT.MILESTONE, {
          moment: PIN_MILESTONE_EVT_MOMENT,
          mode: PIN_MILESTONE_EVT_MODE,
          type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
          mstid: enums.PIN.MILESTONE_EVT_ID.LOANEXPLORE
        });
    }
  }),
  (controllers.onboarding.LoanSelector.prototype._eRowSelected = function _eRowSelected(
    e,
    t,
    i
  ) {
    (this._selectedItem = this._items[i.rowIndex] || null),
      this.getView()
        .getContinueButton()
        .setInteractionState(!!this._selectedItem);
  }),
  (controllers.onboarding.LoanSelector.prototype._eContinueButtonTapped = function _eContinueButtonTapped(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.ONBOARDING,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Loaner Selected'
    ),
      this._grantLoan();
  }),
  NamespaceManager.Register('views.onboarding'),
  (views.onboarding.OnboardingSummary = function OnboardingSummaryView() {
    UTView.call(this), (this._loanerView = null), this._generate();
  }),
  utils.JS.inherits(views.onboarding.OnboardingSummary, UTView),
  (views.onboarding.OnboardingSummary.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-onboarding-summary-view');
      var t = document.createElement('div');
      t.classList.add('ut-onboarding-summary-view--body'),
        (this.__summary = document.createElement('div')),
        this.__summary.classList.add('ut-onboarding-summary-view--details');
      var i = document.createElement('div');
      i.classList.add('nation'), i.classList.add('summary-detail');
      var s = document.createElement('div');
      s.classList.add('asset-container'),
        (this._nationImg = new UTImageView()),
        s.appendChild(this._nationImg.getRootElement()),
        i.appendChild(s),
        (this.__nationTitle = document.createElement('h1')),
        i.appendChild(this.__nationTitle),
        (this.__nationValue = document.createElement('span')),
        i.appendChild(this.__nationValue),
        this.__summary.appendChild(i);
      var n = document.createElement('div');
      n.classList.add('loan'),
        n.classList.add('summary-detail'),
        (this.__loanerContainer = document.createElement('div')),
        this.__loanerContainer.classList.add('asset-container'),
        n.appendChild(this.__loanerContainer),
        (this.__loanTitle = document.createElement('h1')),
        n.appendChild(this.__loanTitle),
        (this.__loanValue = document.createElement('span')),
        n.appendChild(this.__loanValue),
        this.__summary.appendChild(n);
      var o = document.createElement('div');
      o.classList.add('kits'), o.classList.add('summary-detail');
      var a = document.createElement('div');
      a.classList.add('asset-container'),
        (this._kitHomeImg = new UTImageView()),
        a.appendChild(this._kitHomeImg.getRootElement()),
        (this._kitAwayImg = new UTImageView()),
        a.appendChild(this._kitAwayImg.getRootElement()),
        o.appendChild(a),
        (this.__kitsTitle = document.createElement('h1')),
        o.appendChild(this.__kitsTitle),
        (this.__kitsValue = document.createElement('span')),
        o.appendChild(this.__kitsValue),
        this.__summary.appendChild(o);
      var r = document.createElement('div');
      r.classList.add('badge'), r.classList.add('summary-detail');
      var l = document.createElement('div');
      l.classList.add('asset-container'),
        (this._badgeImg = new UTImageView()),
        l.appendChild(this._badgeImg.getRootElement()),
        r.appendChild(l),
        (this.__badgeTitle = document.createElement('h1')),
        r.appendChild(this.__badgeTitle),
        (this.__badgeValue = document.createElement('span')),
        r.appendChild(this.__badgeValue),
        this.__summary.appendChild(r),
        t.appendChild(this.__summary),
        (this.__choiceInfo = document.createElement('div')),
        this.__choiceInfo.classList.add('ut-onboarding-summary-view--info'),
        (this.__title = document.createElement('h2')),
        this.__title.classList.add('ut-onboarding-info--title'),
        this.__choiceInfo.appendChild(this.__title),
        (this._btnContinue = new UTStandardButtonControl()),
        this._btnContinue
          .getRootElement()
          .classList.add('ut-onboarding-info--cta'),
        this._btnContinue.getRootElement().classList.add('call-to-action'),
        this.__choiceInfo.appendChild(this._btnContinue.getRootElement()),
        (this.__info = document.createElement('p')),
        this.__info.classList.add('ut-onboarding-info--description'),
        this.__choiceInfo.appendChild(this.__info),
        t.appendChild(this.__choiceInfo);
      var c = document.createElement('div');
      c.classList.add('ut-button-container'),
        (this._btnContinueMobile = new UTStandardButtonControl()),
        this._btnContinueMobile
          .getRootElement()
          .classList.add('call-to-action'),
        c.appendChild(this._btnContinueMobile.getRootElement()),
        t.appendChild(c),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.onboarding.OnboardingSummary.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__summary = null),
      this._nationImg.destroy(),
      (this.__nationTitle = null),
      (this.__nationValue = null),
      (this.__loanerContainer = null),
      (this.__loanTitle = null),
      (this.__loanValue = null),
      this._kitHomeImg.destroy(),
      this._kitAwayImg.destroy(),
      (this.__kitsTitle = null),
      (this.__kitsValue = null),
      this._badgeImg.destroy(),
      (this.__badgeTitle = null),
      (this.__badgeValue = null),
      (this.__choiceInfo = null),
      (this.__title = null),
      this._btnContinue.destroy(),
      (this.__info = null),
      this._btnContinueMobile.destroy();
  }),
  (views.onboarding.OnboardingSummary.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.onboarding.OnboardingSummary.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.onboarding.OnboardingSummary.prototype.init = function init() {
    this.superclass(),
      this._btnContinue.init(),
      this._btnContinue.setText(
        services.Localization.localize('onboarding.complete.start')
      ),
      this._btnContinueMobile.init(),
      this._btnContinueMobile.setText(
        services.Localization.localize('onboarding.complete.start')
      ),
      (this.__title.textContent = services.Localization.localize(
        'onboarding.complete.title'
      )),
      (this.__info.textContent = services.Localization.localize(
        'onboarding.complete.body'
      )),
      (this.__nationTitle.textContent = services.Localization.localize(
        'onboarding.complete.teamtitle'
      )),
      (this.__loanTitle.textContent = services.Localization.localize(
        'onboarding.complete.loantitle'
      )),
      (this.__kitsTitle.textContent = services.Localization.localize(
        'onboarding.complete.kitstitle'
      )),
      (this.__badgeTitle.textContent = services.Localization.localize(
        'onboarding.complete.badgetitle'
      ));
  }),
  (views.onboarding.OnboardingSummary.prototype.dealloc = function dealloc() {
    this._loanerView && (this._loanerView.destroy(), (this._loanerView = null)),
      this.superclass();
  }),
  (views.onboarding.OnboardingSummary.prototype.setNation = function setNation(
    e
  ) {
    var t = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_FLAG,
      enums.Year.ASSET,
      e
    );
    this._nationImg.setResource(t),
      (this.__nationValue.textContent = utils.FUTLocalization.getNationNameById(
        e
      ));
  }),
  (views.onboarding.OnboardingSummary.prototype.setLoaner = function setLoaner(
    e
  ) {
    this._loanerView && this._loanerView.destroy(),
      (this._loanerView = factories.ItemView.createSmallItem(e)),
      this._loanerView.init(),
      this._loanerView.render(e),
      this.__loanerContainer.appendChild(this._loanerView.getRootElement()),
      (this.__loanValue.textContent = e.getStaticData().name);
  }),
  (views.onboarding.OnboardingSummary.prototype.setKits = function setKits(
    e,
    t
  ) {
    var i = utils.AssetLocator.getImage(
        e.getStaticData().assetType,
        enums.Year.ASSET,
        e.teamId
      ),
      s = utils.AssetLocator.getImage(
        t.getStaticData().assetType,
        enums.Year.ASSET,
        t.teamId
      );
    this._kitHomeImg.setResource(i),
      this._kitAwayImg.setResource(s),
      (this.__kitsValue.textContent =
        utils.FUTLocalization.getTeamAbb15ByID(e.teamId) +
        ', ' +
        utils.FUTLocalization.getTeamAbb15ByID(t.teamId));
  }),
  (views.onboarding.OnboardingSummary.prototype.setBadge = function setBadge(
    e
  ) {
    var t = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT,
      enums.Year.ASSET,
      e.teamId
    );
    this._badgeImg.setResource(t),
      (this.__badgeValue.textContent = utils.FUTLocalization.getTeamAbb15ByID(
        e.teamId
      ));
  }),
  (views.onboarding.OnboardingSummary.prototype.getContinueButton = function getContinueButton() {
    return this._btnContinue;
  }),
  (views.onboarding.OnboardingSummary.prototype.getContinueButtonMobile = function getContinueButtonMobile() {
    return this._btnContinueMobile;
  }),
  NamespaceManager.Register('controllers.onboarding'),
  (controllers.onboarding.OnboardingSummary = function OnboardingSummaryViewController() {
    UTViewController.call(this);
  }),
  utils.JS.inherits(controllers.onboarding.OnboardingSummary, UTViewController),
  (controllers.onboarding.OnboardingSummary.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      e.getContinueButton().addTarget(this, this._eContinue, enums.Event.TAP),
        e
          .getContinueButtonMobile()
          .addTarget(this, this._eContinue, enums.Event.TAP),
        TelemetryManager.trackPage(
          TelemetryManager.Sections.ONBOARDING,
          'Onboarding - Summary'
        ),
        services.PIN.sendData(enums.PIN.EVENT.MILESTONE, {
          moment: PIN_MILESTONE_EVT_MOMENT,
          mode: PIN_MILESTONE_EVT_MODE,
          type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
          mstid: enums.PIN.MILESTONE_EVT_ID.SUMMARY
        });
    }
  }),
  (controllers.onboarding.OnboardingSummary.prototype.initWithViewmodel = function initWithViewmodel(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof viewmodels.OnboardingState,
        'Expected an OnboardingState viewmodel.'
      ),
      (this._viewmodel = e),
      this.init());
  }),
  (controllers.onboarding.OnboardingSummary.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.OnboardingSummary();
  }),
  (controllers.onboarding.OnboardingSummary.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getNavigationController();
    e &&
      e.conforms(controllers.navigation.Onboarding) &&
      (isPhone()
        ? (e.setNavigationTitle(
            services.Localization.localize('onboarding.complete.title')
          ),
          e.showStepChain(!0))
        : (e.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY),
          e.setToolbarVisibility(!0),
          e.showStepChain(!1)),
      e.setCurrentStep(enums.UIOnboardingStep.SUMMARY)),
      this._loadItems();
  }),
  (controllers.onboarding.OnboardingSummary.prototype._loadItems = function _loadItems() {
    var n = this.getView();
    var e = this.getNavigationController();
    if (e && e.conforms(controllers.navigation.Onboarding)) {
      var t = e.getOnboardingState(),
        i = [],
        s = 0;
      if (
        (n.setNation(
          utils.FUTData.mapOnboardingCountryIdToNationId(t.getCountryId())
        ),
        t.hasLoaner() && (s = t.getLoanerDefId()),
        t.hasHomeKit() && i.push(t.getHomeKitId()),
        t.hasAwayKit() && i.push(t.getAwayKitId()),
        t.hasBadge() && i.push(t.getBadgeId()),
        utils.Debug.Assert(0 < i.length, 'Expected valid items.'),
        gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
        services.Item.requestItemsById(i).observe(
          this,
          function _onGetClubItemsComplete(e, t) {
            if ((e.unobserve(this), t.success)) {
              var i = null,
                s = null;
              t.data.items.forEach(function(e) {
                e.isActiveHomeKit()
                  ? (i = e)
                  : e.isActiveAwayKit()
                  ? (s = e)
                  : e.isBadge()
                  ? n.setBadge(e)
                  : utils.Debug.Assert(
                      !1,
                      'Expected a valid onboarding selection item.'
                    );
              }, this),
                i && s && n.setKits(i, s);
            } else console.log('failed to load club items');
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
          }
        ),
        0 < s)
      ) {
        gClickShield.showShield(components.ClickShield.SHIELD.LOADING);
        var o = new transferobjects.SearchCriteria();
        (o.type = enums.SearchType.PLAYER),
          (o.defId = [s]),
          services.Item.searchClub(o).observe(
            this,
            function _onGetLoanerComplete(e, t) {
              e.unobserve(this),
                t.success
                  ? n.setLoaner(t.data.items[0])
                  : console.log('failed to load loaner item'),
                gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
            }
          );
      }
    }
  }),
  (controllers.onboarding.OnboardingSummary.prototype._eContinue = function _eContinue(
    e,
    t,
    i
  ) {
    getAppMain()
      .getLoginController()
      .login(!0);
  }),
  NamespaceManager.Register('views.onboarding'),
  (views.onboarding.CustomSelectionTile = function UTCustomSelectionTileView() {
    UTButtonControl.call(this);
  }),
  utils.JS.inherits(views.onboarding.CustomSelectionTile, UTButtonControl),
  (views.onboarding.CustomSelectionTile.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-custom-selection-tile-view');
      var t = document.createElement('div');
      t.classList.add('content-container'),
        (this._imgLoader = new UTImageView()),
        t.appendChild(this._imgLoader.getRootElement()),
        (this.__title = document.createElement('h1')),
        t.appendChild(this.__title),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.onboarding.CustomSelectionTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._imgLoader.destroy(),
      (this.__title = null);
  }),
  (views.onboarding.CustomSelectionTile.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.onboarding.CustomSelectionTile.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.onboarding.CustomSelectionTile.prototype.init = function init() {
    this.setInteractionState(!0);
  }),
  (views.onboarding.CustomSelectionTile.prototype.dealloc = function dealloc() {
    this.superclass();
  }),
  (views.onboarding.CustomSelectionTile.prototype.setText = function setText(
    e
  ) {
    this.__title.textContent = e;
  }),
  (views.onboarding.CustomSelectionTile.prototype.getImageSource = function getImageSource() {
    return this._imgLoader.getRootElement().getAttribute('src');
  }),
  (views.onboarding.CustomSelectionTile.prototype.setImagePath = function setImagePath(
    e,
    n
  ) {
    this._imgLoader
      .setResource(e, !0)
      .observe(this, function onResourceLoaded(e, t, i, s) {
        e.unobserve(this),
          t ||
            this._imgLoader.setResource(
              utils.AssetLocator.getImage(
                n,
                enums.Year.ASSET,
                (function getPlaceholderAssetId() {
                  switch (n) {
                    case utils.AssetLocator.IMAGE_TYPE_FLAG:
                      return enums.PlaceholderAssetId.FLAG;
                    case utils.AssetLocator.IMAGE_TYPE_KIT_HOME:
                    case utils.AssetLocator.IMAGE_TYPE_KIT_AWAY:
                      return enums.PlaceholderAssetId.KIT;
                    case utils.AssetLocator.IMAGE_TYPE_BALL:
                      return enums.PlaceholderAssetId.BALL;
                    case utils.AssetLocator.IMAGE_TYPE_BADGE_DARK:
                    case utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT:
                      return enums.PlaceholderAssetId.TEAM;
                    default:
                      return 0;
                  }
                })()
              )
            );
      });
  }),
  (views.onboarding.CustomSelectionTile.prototype.toggleTallState = function toggleTallState(
    e
  ) {
    this.toggleClass('tall', e);
  }),
  (views.onboarding.CustomSelectionTile.prototype.setSelected = function setSelected(
    e
  ) {
    this.toggleClass(enums.UIState.SELECTED, e);
  }),
  NamespaceManager.Register('views.onboarding'),
  (views.onboarding.OnboardingSelect = function OnboardingSelect() {
    UTView.call(this),
      (this._selectionTiles = []),
      (this._currentTile = null),
      (this._ids = []),
      (this._type = enums.UIOnboardingSelectionType.BADGE),
      this._generate();
  }),
  utils.JS.inherits(views.onboarding.OnboardingSelect, UTView),
  (views.onboarding.OnboardingSelect.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-onboarding-select-view');
      var t = document.createElement('div');
      t.classList.add('ut-onboarding-select-view--body'),
        (this.__selectGrid = document.createElement('div')),
        this.__selectGrid.classList.add('ut-onboarding-select-view--grid'),
        t.appendChild(this.__selectGrid),
        (this.__choiceInfo = document.createElement('div')),
        this.__choiceInfo.classList.add('ut-onboarding-select-view--info');
      var i = document.createElement('div');
      i.classList.add('ut-onboarding-info-content'),
        (this.__title = document.createElement('h2')),
        this.__title.classList.add('ut-onboarding-info--title'),
        i.appendChild(this.__title),
        (this._continueBtn = new UTStandardButtonControl()),
        this._continueBtn
          .getRootElement()
          .classList.add('ut-onboarding-info--cta'),
        this._continueBtn.getRootElement().classList.add('call-to-action'),
        i.appendChild(this._continueBtn.getRootElement()),
        (this.__info = document.createElement('p')),
        this.__info.classList.add('ut-onboarding-info--description'),
        i.appendChild(this.__info);
      var s = document.createElement('div');
      s.classList.add('selected-images'),
        (this._selectedImage = new UTImageView()),
        this._selectedImage.getRootElement().classList.add('selected-image-a'),
        s.appendChild(this._selectedImage.getRootElement()),
        (this._otherSelectedImage = new UTImageView()),
        this._otherSelectedImage
          .getRootElement()
          .classList.add('selected-image-b'),
        s.appendChild(this._otherSelectedImage.getRootElement()),
        i.appendChild(s),
        this.__choiceInfo.appendChild(i),
        t.appendChild(this.__choiceInfo);
      var n = document.createElement('div');
      n.classList.add('ut-button-container'),
        (this._continueBtnMobile = new UTStandardButtonControl()),
        this._continueBtnMobile
          .getRootElement()
          .classList.add('call-to-action'),
        n.appendChild(this._continueBtnMobile.getRootElement()),
        t.appendChild(n),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.onboarding.OnboardingSelect.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__selectGrid = null),
      (this.__choiceInfo = null),
      (this.__title = null),
      this._continueBtn.destroy(),
      (this.__info = null),
      this._selectedImage.destroy(),
      this._otherSelectedImage.destroy(),
      this._continueBtnMobile.destroy();
  }),
  (views.onboarding.OnboardingSelect.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.onboarding.OnboardingSelect.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.onboarding.OnboardingSelect.prototype.init = function init() {
    this.superclass(),
      this._continueBtn.init(),
      this._continueBtn.setInteractionState(!1),
      this._continueBtn.setText(
        services.Localization.localize('common.dialog.continue')
      ),
      this._continueBtnMobile.init(),
      this._continueBtnMobile.setInteractionState(!1),
      this._continueBtnMobile.setText(
        services.Localization.localize('common.dialog.continue')
      );
  }),
  (views.onboarding.OnboardingSelect.prototype.dealloc = function dealloc() {
    this.superclass(), this._clearTiles(), (this._ids = []);
  }),
  (views.onboarding.OnboardingSelect.prototype._clearTiles = function _clearTiles() {
    this._selectionTiles.forEach(function(e) {
      e.dealloc();
    }),
      (this._selectionTiles = []),
      (this._currentTile = null);
  }),
  (views.onboarding.OnboardingSelect.prototype.setTitle = function setTitle(e) {
    this.__title.textContent = e;
  }),
  (views.onboarding.OnboardingSelect.prototype.setDescription = function setDescription(
    e
  ) {
    this.__info.textContent = e;
  }),
  (views.onboarding.OnboardingSelect.prototype.setType = function setType(e) {
    (this._type = e),
      this.removeClass(enums.UIOnboardingSelectionType.BADGE),
      this.removeClass(enums.UIOnboardingSelectionType.HOME_KIT),
      this.removeClass(enums.UIOnboardingSelectionType.AWAY_KIT),
      this.removeClass(enums.UIOnboardingSelectionType.NATION),
      this.addClass(this._type);
  }),
  (views.onboarding.OnboardingSelect.prototype._generateTile = function _generateTile(
    e
  ) {
    var t = utils.AssetLocator.getImage(e.assetType, enums.Year.ASSET, e.id),
      i = this._type !== enums.UIOnboardingSelectionType.NATION,
      s = new views.onboarding.CustomSelectionTile();
    s.init(),
      s.toggleTallState(i),
      s.setText(e.name),
      s.setImagePath(t, e.assetType),
      s.addTarget(this, this._eTileSelected, enums.Event.TAP),
      this.addSubview(s, this.__selectGrid),
      this._selectionTiles.push(s);
  }),
  (views.onboarding.OnboardingSelect.prototype.setData = function setData(e) {
    this._clearTiles(),
      (this._ids = []),
      e.forEach(function(e) {
        this._ids.push(e.id), this._generateTile(e);
      }, this),
      this.layoutSubviews();
  }),
  (views.onboarding.OnboardingSelect.prototype.selectTile = function selectTile(
    e
  ) {
    var t = this._selectionTiles[e];
    this._currentTile && this._currentTile.setSelected(!1),
      (this._currentTile = t || null),
      this._currentTile && this._currentTile.setSelected(!0);
  }),
  (views.onboarding.OnboardingSelect.prototype.getContinueButton = function getContinueButton() {
    return this._continueBtn;
  }),
  (views.onboarding.OnboardingSelect.prototype.getContinueButtonMobile = function getContinueButtonMobile() {
    return this._continueBtnMobile;
  }),
  (views.onboarding.OnboardingSelect.prototype.getSelectedId = function getSelectedId() {
    return 0 < this._selectionTiles.length
      ? this._ids[this._selectionTiles.indexOf(this._currentTile)]
      : -1;
  }),
  (views.onboarding.OnboardingSelect.prototype.getSelectedIndex = function getSelectedIndex() {
    return this._selectionTiles.indexOf(this._currentTile);
  }),
  (views.onboarding.OnboardingSelect.prototype.setFirstImageLocalPath = function setFirstImageLocalPath(
    e
  ) {
    this._selectedImage.setLocalResource(e);
  }),
  (views.onboarding.OnboardingSelect.prototype.setSecondImageLocalPath = function setSecondImageLocalPath(
    e
  ) {
    this._otherSelectedImage.setLocalResource(e);
  }),
  (views.onboarding.OnboardingSelect.prototype._setBackground = function _setBackground(
    e
  ) {
    this._ids.forEach(function(e) {
      this.removeClass('ui-selected-' + e);
    }, this),
      this.addClass('ui-selected-' + e);
  }),
  (views.onboarding.OnboardingSelect.prototype._eTileSelected = function _eTileSelected(
    e,
    t,
    i
  ) {
    if (e !== this._currentTile) {
      var s = this._selectionTiles.indexOf(e);
      this.selectTile(s),
        this._type === enums.UIOnboardingSelectionType.NATION &&
          this._setBackground(this._ids[s]);
      var n = e.getImageSource();
      this._type === enums.UIOnboardingSelectionType.AWAY_KIT
        ? this._otherSelectedImage.setLocalResource(n)
        : this._selectedImage.setLocalResource(n),
        this._continueBtn.setInteractionState(!0),
        this._continueBtnMobile.setInteractionState(!0);
    }
  }),
  NamespaceManager.Register('controllers.onboarding'),
  (controllers.onboarding.BadgeSelect = function BadgeSelectOnboardingViewController() {
    UTViewController.call(this), (this._badges = []);
  }),
  utils.JS.inherits(controllers.onboarding.BadgeSelect, UTViewController),
  (controllers.onboarding.BadgeSelect.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      e.setType(enums.UIOnboardingSelectionType.BADGE),
        e.setTitle(services.Localization.localize('onboarding.badge.title')),
        e.setDescription(
          services.Localization.localize('onboarding.badge.body')
        ),
        e.setFirstImageLocalPath('images/badge.png'),
        e.getContinueButton().addTarget(this, this._eContinue, enums.Event.TAP),
        e
          .getContinueButtonMobile()
          .addTarget(this, this._eContinue, enums.Event.TAP);
      var t = 'Onboarding - Badge';
      services.PIN.sendData(enums.PIN.EVENT.PAGE_VIEW, {
        type: PIN_PAGEVIEW_EVT_TYPE,
        pgid: t
      }),
        TelemetryManager.trackPage(TelemetryManager.Sections.ONBOARDING, t);
    }
  }),
  (controllers.onboarding.BadgeSelect.prototype.dealloc = function dealloc() {
    this.superclass(), (this._badges = []);
  }),
  (controllers.onboarding.BadgeSelect.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.OnboardingSelect();
  }),
  (controllers.onboarding.BadgeSelect.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('onboarding.badge.title');
  }),
  (controllers.onboarding.BadgeSelect.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), 0 === this._badges.length && this._getBadges();
    var e = this.getNavigationController();
    e &&
      e.conforms(controllers.navigation.Onboarding) &&
      (isPhone() ||
        (e.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY),
        e.setToolbarVisibility(!0)),
      e.setCurrentStep(enums.UIOnboardingStep.BADGE));
  }),
  (controllers.onboarding.BadgeSelect.prototype._mapBadgesToData = function _mapBadgesToData(
    e
  ) {
    return e.map(function(e) {
      return {
        id: e.teamId,
        name: utils.FUTLocalization.getTeamAbb15ByID(e.teamId),
        assetType: utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT
      };
    });
  }),
  (controllers.onboarding.BadgeSelect.prototype._getBadges = function _getBadges() {
    services.Onboarding.getBadges().observe(this, function _onGetBadgesComplete(
      e,
      t
    ) {
      e.unobserve(this),
        t.success
          ? ((this._badges = t.data.badges),
            this.getView().setData(this._mapBadgesToData(this._badges)))
          : (NetworkErrorManager.handleStatus(
              enums.HTTPStatusCode.UNRECOVERABLE_ERROR
            ),
            TelemetryManager.trackEvent(
              TelemetryManager.Sections.ONBOARDING,
              TelemetryManager.Categories.ERROR,
              '(' + t.status + ') Failed to retrieve badges'
            ));
    });
  }),
  (controllers.onboarding.BadgeSelect.prototype._selectBadge = function _selectBadge() {
    var a = this._badges[this.getView().getSelectedIndex()];
    utils.Debug.Assert(
      utils.JS.isValid(a),
      'Expected badge reference to point to item entity.'
    ),
      a &&
        (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
        services.Onboarding.selectBadge(a).observe(
          this,
          function _onSelectBadgeComplete(e, t) {
            if ((e.unobserve(this), t.success)) {
              services.PIN.sendData(enums.PIN.EVENT.MILESTONE, {
                moment: PIN_MILESTONE_EVT_MOMENT,
                mode: PIN_MILESTONE_EVT_MODE,
                type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
                mstid: enums.PIN.MILESTONE_EVT_ID.BADGE
              });
              var i = this.getNavigationController();
              if (i) {
                i.conforms(controllers.navigation.Onboarding) &&
                  i.getOnboardingState().setBadgeId(t.data.badgeId);
                var s = services.User.getUser().getSelectedPersona(),
                  n = s ? s.getCurrentClub() : null;
                n && n.setAssetId(a.getStaticData().assetId);
                var o = new controllers.onboarding.OnboardingSummary();
                o.init(), i.pushViewController(o, !0);
              }
            } else
              services.Notification.queue([
                services.Localization.localize(
                  'onboarding.error.badgeselectfailure'
                ),
                enums.UINotificationType.NEGATIVE
              ]),
                TelemetryManager.trackEvent(
                  TelemetryManager.Sections.ONBOARDING,
                  TelemetryManager.Categories.ERROR,
                  '(' + t.status + ') Failed to select badge'
                );
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
          }
        ));
  }),
  (controllers.onboarding.BadgeSelect.prototype._eContinue = function _eContinue(
    e,
    t,
    i
  ) {
    this._selectBadge();
  }),
  NamespaceManager.Register('controllers.onboarding'),
  (controllers.onboarding.KitSelect = function KitSelectOnboardingViewController() {
    UTViewController.call(this),
      (this._homeKits = []),
      (this._awayKits = []),
      (this._selectedHomeKit = null),
      (this._selectedAwayKit = null);
  }),
  utils.JS.inherits(controllers.onboarding.KitSelect, UTViewController),
  (controllers.onboarding.KitSelect.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      e.setType(enums.UIOnboardingSelectionType.HOME_KIT),
        e.setTitle(services.Localization.localize('onboarding.kits.titlehome')),
        e.setDescription(
          services.Localization.localize('onboarding.kits.bodyhome')
        ),
        e.setFirstImageLocalPath('images/onboarding/kit.png'),
        e.setSecondImageLocalPath('images/onboarding/kit.png'),
        e.getContinueButton().addTarget(this, this._eContinue, enums.Event.TAP),
        e
          .getContinueButtonMobile()
          .addTarget(this, this._eContinue, enums.Event.TAP);
      var t = 'Onboarding - Kits';
      services.PIN.sendData(enums.PIN.EVENT.PAGE_VIEW, {
        type: PIN_PAGEVIEW_EVT_TYPE,
        pgid: t
      }),
        TelemetryManager.trackPage(TelemetryManager.Sections.ONBOARDING, t);
    }
  }),
  (controllers.onboarding.KitSelect.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this._homeKits = []),
      (this._awayKits = []),
      (this._selectedAwayKit = null),
      (this._selectedHomeKit = null);
  }),
  (controllers.onboarding.KitSelect.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.OnboardingSelect();
  }),
  (controllers.onboarding.KitSelect.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('onboarding.kits.titlehome');
  }),
  (controllers.onboarding.KitSelect.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      (0 !== this._homeKits.length && 0 !== this._awayKits.length) ||
        this._getKits();
    var e = this.getNavigationController();
    e &&
      e.conforms(controllers.navigation.Onboarding) &&
      (isPhone() ||
        (e.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY),
        e.setToolbarVisibility(!0)),
      e.setCurrentStep(enums.UIOnboardingStep.KITS));
  }),
  (controllers.onboarding.KitSelect.prototype._mapKitsToData = function _mapKitsToData(
    e
  ) {
    return e.map(function(e) {
      return {
        id: e.teamId,
        name: utils.FUTLocalization.getTeamAbb15ByID(e.teamId),
        assetType: e.getStaticData().assetType
      };
    });
  }),
  (controllers.onboarding.KitSelect.prototype._getKits = function _getKits() {
    services.Onboarding.getKits().observe(this, function _onGetKitsComplete(
      e,
      t
    ) {
      e.unobserve(this),
        t.success
          ? ((this._homeKits = t.data.homeKits),
            (this._awayKits = t.data.awayKits),
            this.getView().setData(this._mapKitsToData(this._homeKits)))
          : (NetworkErrorManager.handleStatus(
              enums.HTTPStatusCode.UNRECOVERABLE_ERROR
            ),
            TelemetryManager.trackEvent(
              TelemetryManager.Sections.ONBOARDING,
              TelemetryManager.Categories.ERROR,
              '(' + t.status + ') Failed to retrieve kits'
            ));
    });
  }),
  (controllers.onboarding.KitSelect.prototype._selectHomeKit = function _selectHomeKit() {
    var e = this.getView();
    (this._selectedHomeKit = this._homeKits[e.getSelectedIndex()]),
      services.PIN.sendData(enums.PIN.EVENT.MILESTONE, {
        moment: PIN_MILESTONE_EVT_MOMENT,
        mode: PIN_MILESTONE_EVT_MODE,
        type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
        mstid: enums.PIN.MILESTONE_EVT_ID.HOMEKIT
      }),
      e.setType(enums.UIOnboardingSelectionType.AWAY_KIT),
      e.setData(this._mapKitsToData(this._awayKits)),
      e.setTitle(services.Localization.localize('onboarding.kits.titleaway')),
      e.setDescription(
        services.Localization.localize('onboarding.kits.bodyaway')
      );
    var t = this.getNavigationController();
    t &&
      t.setNavigationTitle(
        services.Localization.localize('onboarding.kits.titleaway')
      );
  }),
  (controllers.onboarding.KitSelect.prototype._selectAwayKit = function _selectAwayKit() {
    (this._selectedAwayKit = this._awayKits[this.getView().getSelectedIndex()]),
      utils.Debug.Assert(
        utils.JS.isValid(this._selectedHomeKit) &&
          utils.JS.isValid(this._selectedAwayKit),
        'Expected both home and away kit references to point to item entities.'
      ),
      this._selectedHomeKit &&
        this._selectedAwayKit &&
        (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
        services.Onboarding.selectKits(
          this._selectedHomeKit,
          this._selectedAwayKit
        ).observe(this, function _onSelectKitsComplete(e, t) {
          if ((e.unobserve(this), t.success)) {
            services.PIN.sendData(enums.PIN.EVENT.MILESTONE, {
              moment: PIN_MILESTONE_EVT_MOMENT,
              mode: PIN_MILESTONE_EVT_MODE,
              type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
              mstid: enums.PIN.MILESTONE_EVT_ID.AWAYKIT
            });
            var i = this.getNavigationController();
            if (i) {
              if (i.conforms(controllers.navigation.Onboarding)) {
                var s = i.getOnboardingState();
                s.setHomeKitId(t.data.homeKitId),
                  s.setAwayKitId(t.data.awayKitId);
              }
              var n = new controllers.onboarding.BadgeSelect();
              n.init(), i.pushViewController(n, !0);
            }
          } else services.Notification.queue([services.Localization.localize('onboarding.error.kitselectfailure'), enums.UINotificationType.NEGATIVE]), TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.ERROR, '(' + t.status + ') Failed to select kits');
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }));
  }),
  (controllers.onboarding.KitSelect.prototype._eContinue = function _eContinue(
    e,
    t,
    i
  ) {
    this._selectedHomeKit ? this._selectAwayKit() : this._selectHomeKit();
  }),
  NamespaceManager.Register('views.onboarding'),
  (views.onboarding.SlotSelectPanel = function OnboardingSlotSelectPanelView() {
    UTView.call(this), this._generate();
  }),
  utils.JS.inherits(views.onboarding.SlotSelectPanel, UTView),
  (views.onboarding.SlotSelectPanel.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-item-detail-view-panel'),
        (this._btnSlotSelect = new UTStandardButtonControl()),
        this._btnSlotSelect.getRootElement().classList.add('call-to-action'),
        e.appendChild(this._btnSlotSelect.getRootElement()),
        (this.__description = document.createElement('div')),
        this.__description.classList.add('slotSelectDescription'),
        (this.__descTitle = document.createElement('h2')),
        this.__description.appendChild(this.__descTitle),
        (this.__descBody1 = document.createElement('p')),
        this.__description.appendChild(this.__descBody1),
        (this.__descBody2 = document.createElement('p')),
        this.__description.appendChild(this.__descBody2),
        e.appendChild(this.__description),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.onboarding.SlotSelectPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._btnSlotSelect.destroy(),
      (this.__description = null),
      (this.__descTitle = null),
      (this.__descBody1 = null),
      (this.__descBody2 = null);
  }),
  (views.onboarding.SlotSelectPanel.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.onboarding.SlotSelectPanel.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.onboarding.SlotSelectPanel.prototype.init = function init() {
    this.superclass(),
      this._btnSlotSelect.init(),
      this._btnSlotSelect.setInteractionState(!1),
      this._btnSlotSelect.setText(
        services.Localization.localize('common.dialog.continue')
      );
  }),
  (views.onboarding.SlotSelectPanel.prototype.getSlotSelectButton = function getSlotSelectButton() {
    return this._btnSlotSelect;
  }),
  (views.onboarding.SlotSelectPanel.prototype.setSlotSelectButtonState = function setSlotSelectButtonState(
    e,
    t
  ) {
    this._btnSlotSelect.setText(e), this._btnSlotSelect.setInteractionState(t);
  }),
  (views.onboarding.SlotSelectPanel.prototype.renderSwapDescription = function renderSwapDescription() {
    (this.__descTitle.textContent = services.Localization.localize(
      'onboarding.swapdescription.title'
    )),
      (this.__descBody1.textContent = services.Localization.localize(
        'onboarding.swapdescription.body1'
      )),
      (this.__descBody2.textContent = services.Localization.localize(
        'onboarding.swapdescription.body2'
      )),
      DOMKit.toggleDisplayStyle(this.__descBody2, !0),
      DOMKit.toggleClass(this.__root, 'swap-description', !0);
  }),
  (views.onboarding.SlotSelectPanel.prototype.renderLoanDescription = function renderLoanDescription() {
    (this.__descTitle.textContent = services.Localization.localize(
      'onboarding.loandescription.title'
    )),
      (this.__descBody1.textContent = services.Localization.localize(
        'onboarding.loandescription.body'
      )),
      DOMKit.toggleDisplayStyle(this.__descBody2, !1),
      DOMKit.toggleClass(this.__root, 'swap-description', !1);
  }),
  NamespaceManager.Register('controllers.onboarding'),
  (controllers.onboarding.StarterSquadSlotSelection = function StarterSquadSlotSelectionViewController() {
    UTViewController.call(this),
      (this._squad = null),
      (this._panelView = null),
      (this._itemIterator = null),
      (this._squadViewDelegate = null),
      (this._slotIterationDelegate = null),
      (this._slotSelected = !1);
  }),
  utils.JS.inherits(
    controllers.onboarding.StarterSquadSlotSelection,
    UTViewController
  ),
  (controllers.onboarding.StarterSquadSlotSelection.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        (this._panelView = new views.onboarding.SlotSelectPanel()),
        this._panelView.init(),
        this._panelView
          .getSlotSelectButton()
          .addTarget(this, this._eSlotSelected, enums.Event.TAP),
        this._panelView.renderSwapDescription();
      var e = this.getView();
      e.appendPanel(this._panelView),
        this._itemIterator &&
          e.addTarget(
            this,
            this._eIndexChange,
            views.items.ItemDetails.Event.INDEX_CHANGE
          );
    }
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype.initWithSquad = function initWithSquad(
    e,
    t
  ) {
    if (!this.initialized) {
      utils.Debug.Assert(
        e instanceof entities.Squad,
        'Initialization expected a squad entity'
      ),
        utils.Debug.Assert(
          utils.JS.isNumber(t),
          'Initialization expected a numeric slot index'
        );
      var i = (this._squad = e).getPlayers();
      (this._itemIterator = new UTIterator(i.slice(0, i.length - 2))),
        this._squad.onDataUpdated.observe(this, this._eSquadUpdated),
        this.init();
    }
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._panelView && this._panelView.dealloc(),
      this._squad && this._squad.onDataUpdated.unobserve(this),
      (this._panelView = null),
      (this._squad = null),
      (this._itemIterator = null),
      (this._squadViewDelegate = null),
      (this._slotIterationDelegate = null);
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.ItemDetails();
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype._getSlotName = function _getSlotName(
    e
  ) {
    var t = e.getIndex();
    return 0 <= t && t < entities.Squad.FIELD_PLAYERS
      ? utils.FUTLocalization.getLocalizedPositionStringById(
          e.getGeneralPosition()
        )
      : 0 <= t && t < entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS
      ? services.Localization.localize('dock.label.substitutes')
      : 0 <= t && t < entities.Squad.MANAGER_SLOT_INDEX
      ? services.Localization.localize('dock.label.reserves')
      : enums.Localization.BLANK_STR;
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype._renderView = function _renderView() {
    this._slotSelected
      ? this.getView().render(
          this._itemIterator.values().map(function(e) {
            return e.getItem();
          }, this),
          this._itemIterator.getIndex()
        )
      : this.getView().render(
          utils.JS.valToArray(this._squad.getSlot(-1).getItem()),
          0
        );
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype.setSlot = function setSlot(
    t
  ) {
    utils.Debug.Assert(
      this._itemIterator instanceof UTIterator,
      "Attempted to update iterator index when iterator doesn't exist."
    ),
      this._itemIterator &&
        this._itemIterator.current().getIndex() !== t &&
        ((this._slotSelected = !0),
        this._itemIterator.setIndex(
          this._itemIterator.indexOf(function(e) {
            return e.getIndex() === t;
          })
        ),
        this._renderView(),
        this._panelView.setSlotSelectButtonState(
          services.Localization.localize('swap.withposition', [
            this._getSlotName(this._itemIterator.current())
          ]),
          !0
        ));
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype.setSquadViewDelegate = function setSquadViewDelegate(
    e
  ) {
    e.conforms(interfaces.SquadViewDelegate) && (this._squadViewDelegate = e);
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype.setSlotIterationDelegate = function setSlotIterationDelegate(
    e
  ) {
    e.conforms(interfaces.SlotIterationDelegate) &&
      (this._slotIterationDelegate = e);
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this.getNavigationController().setNavigationVisibility(!1, !1),
      this._renderView();
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype._loadLoanPlayers = function _loadLoanPlayers() {
    var n = this.getView(),
      o = this._panelView,
      a = this._itemIterator.current();
    n.setInteractionState(!1),
      o.setInteractionState(!1),
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Onboarding.getLoanPlayers().observe(
        this,
        function _gotoLoanSelector(e, t) {
          if ((e.unobserve(this), t.success)) {
            var i = new controllers.onboarding.LoanSelector(),
              s = new viewmodels.OnboardingLoanPlayerSelection();
            s.setItems(t.data.items),
              i.initWithItems(
                s.getLoanerSample(5, s.getPositionFromSlot(a)),
                a.getItem()
              ),
              this._squad && i.setSquad(this._squad),
              this._squadViewDelegate &&
                i.setSquadViewDelegate(this._squadViewDelegate),
              this.getNavigationController().pushViewController(i);
          } else
            n.setInteractionState(!0),
              o.setInteractionState(!0),
              TelemetryManager.trackEvent(
                TelemetryManager.Sections.ONBOARDING,
                TelemetryManager.Categories.ERROR,
                '(' + t.status + ') Failed to retrieve loaner list'
              );
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      );
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype._eIndexChange = function _eIndexChange(
    e,
    t,
    i
  ) {
    this._slotIterationDelegate &&
      this._slotIterationDelegate.setSlot(this, i.index);
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype._eSlotSelected = function _eSlotSelected(
    e,
    t,
    i
  ) {
    this._loadLoanPlayers();
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype._eContinue = function _eContinue(
    e,
    t,
    i
  ) {
    var s = this.getRootNavigationController();
    if (s) {
      var n = new controllers.onboarding.KitSelect();
      n.init(), s.pushViewController(n, !0);
    }
  }),
  (controllers.onboarding.StarterSquadSlotSelection.prototype._eSquadUpdated = function _eSquadUpdated(
    e,
    t
  ) {
    this.getView().toggleCarouselSwiping(!1);
    var i = this._panelView.getSlotSelectButton();
    i.removeTarget(this, this._eSlotSelected, enums.Event.TAP),
      i.addTarget(this, this._eContinue, enums.Event.TAP),
      this._panelView.setSlotSelectButtonState(
        services.Localization.localize('common.dialog.continue'),
        !0
      ),
      this._panelView.renderLoanDescription();
  }),
  NamespaceManager.Register('controllers.navigation'),
  (controllers.navigation.LoanPlayerSelection = function LoanPlayerSelectionNavigationController(
    e,
    t
  ) {
    UTNavigationController.call(this, e, t),
      (this._squad = null),
      (this._squadViewDelegate = null);
  }),
  utils.JS.inherits(
    controllers.navigation.LoanPlayerSelection,
    UTNavigationController
  ),
  (controllers.navigation.LoanPlayerSelection.prototype.initWithSquad = function initWithSquad(
    e,
    t
  ) {
    utils.Debug.Assert(
      e instanceof entities.Squad,
      'Initialization expected a squad entity.'
    ),
      utils.Debug.Assert(
        utils.JS.isNumber(t),
        'Initialization expected a number for current squad slot.'
      ),
      (this._squad = e);
    var i = this._getRootControllerInstance();
    i.initWithSquad(this._squad, t), this.initWithRootController(i);
  }),
  (controllers.navigation.LoanPlayerSelection.prototype.dealloc = function dealloc() {
    this.superclass(), (this._squad = null), (this._squadViewDelegate = null);
  }),
  (controllers.navigation.LoanPlayerSelection.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new controllers.onboarding.StarterSquadSlotSelection();
  }),
  (controllers.navigation.LoanPlayerSelection.prototype.didMove = function didMove(
    e
  ) {
    this.superclass();
    var t = this.getRootController(),
      i = this.getParentViewController();
    t &&
      i &&
      i.conforms(interfaces.SlotIterationDelegate) &&
      t.setSlotIterationDelegate(i);
  }),
  (controllers.navigation.LoanPlayerSelection.prototype.setSlot = function setSlot(
    e
  ) {
    this.popToRootViewController(), this.getRootController().setSlot(e);
  }),
  (controllers.navigation.LoanPlayerSelection.prototype.setSquadViewDelegate = function setSquadViewDelegate(
    e
  ) {
    e.conforms(interfaces.SquadViewDelegate) &&
      ((this._squadViewDelegate = e),
      this.getRootController().setSquadViewDelegate(e));
  }),
  NamespaceManager.Register('controllers.onboarding'),
  (controllers.onboarding.StarterSquadLandscape = function StarterSquadLandscapeViewController() {
    UTSplitViewController.call(this),
      (this._overviewController = null),
      (this._panelController = null),
      (this._squad = null);
  }),
  utils.JS.inherits(
    controllers.onboarding.StarterSquadLandscape,
    UTSplitViewController
  ),
  (controllers.onboarding.StarterSquadLandscape.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      (this._overviewController = this._generateSquadOverview()),
      this.addChildViewController(this._overviewController),
      (this._panelController = this._generateLoanSelectNavController()),
      this.addChildViewController(this._panelController),
      this._panelController.setSquadViewDelegate(
        this._overviewController.getView().getSquadOverview()
      ));
  }),
  (controllers.onboarding.StarterSquadLandscape.prototype.initWithSquad = function initWithSquad(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.Squad,
        'Initialization expected to receive a squad entity.'
      ),
      (this._squad = e),
      this.init());
  }),
  (controllers.onboarding.StarterSquadLandscape.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._overviewController && this._overviewController.dealloc(),
      this._panelController && this._panelController.dealloc(),
      (this._overviewController = null),
      (this._panelController = null),
      (this._squad = null);
  }),
  (controllers.onboarding.StarterSquadLandscape.prototype._generateSquadOverview = function _generateSquadOverview() {
    var e = new controllers.onboarding.StarterSquadOverview();
    return this._squad ? e.initWithSquad(this._squad) : e.init(), e;
  }),
  (controllers.onboarding.StarterSquadLandscape.prototype._generateLoanSelectNavController = function _generateLoanSelectNavController() {
    var e = new controllers.navigation.LoanPlayerSelection();
    return (
      this._squad
        ? e.initWithSquad(this._squad, 0)
        : (utils.Debug.Assert(
            !1,
            'Expected to instantiate navigation controller with a squad'
          ),
          e.init()),
      e
    );
  }),
  (controllers.onboarding.StarterSquadLandscape.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('onboarding.complete.teamtitle');
  }),
  (controllers.onboarding.StarterSquadLandscape.prototype.getNavigationItem = function getNavigationItem() {
    return this._overviewController.getNavigationItem();
  }),
  (controllers.onboarding.StarterSquadLandscape.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._setLeftController(this._overviewController),
      this._setRightController(this._panelController),
      this._overviewController.getView().toggleSlotSelect(!1);
  }),
  (controllers.onboarding.StarterSquadLandscape.prototype.setSlot = function setSlot(
    e,
    t
  ) {
    e !== this._panelController && this._panelController.setSlot(t),
      e !== this._overviewController && this._overviewController.setSlot(t);
  }),
  NamespaceManager.Register('controllers.onboarding'),
  (controllers.onboarding.CountrySelect = function CountrySelectOnboardingViewController() {
    UTViewController.call(this), (this._countries = []);
  }),
  utils.JS.inherits(controllers.onboarding.CountrySelect, UTViewController),
  (controllers.onboarding.CountrySelect.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      e.setType(enums.UIOnboardingSelectionType.NATION),
        e.setTitle(services.Localization.localize('onboarding.nation.title')),
        e.setDescription(
          services.Localization.localize('onboarding.nation.body')
        ),
        e.setFirstImageLocalPath('images/onboarding/nation_flag.png'),
        e.getContinueButton().addTarget(this, this._eContinue, enums.Event.TAP),
        e
          .getContinueButtonMobile()
          .addTarget(this, this._eContinue, enums.Event.TAP);
      var t = 'Onboarding - Country';
      services.PIN.sendData(enums.PIN.EVENT.PAGE_VIEW, {
        type: PIN_PAGEVIEW_EVT_TYPE,
        pgid: t
      }),
        TelemetryManager.trackPage(TelemetryManager.Sections.ONBOARDING, t);
    }
  }),
  (controllers.onboarding.CountrySelect.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.OnboardingSelect();
  }),
  (controllers.onboarding.CountrySelect.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('onboarding.nation.title');
  }),
  (controllers.onboarding.CountrySelect.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), 0 === this._countries.length && this._getCountries();
    var e = this.getNavigationController();
    e &&
      e.conforms(controllers.navigation.Onboarding) &&
      (isPhone() ||
        (e.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY),
        e.setToolbarVisibility(!0)),
      e.setCurrentStep(enums.UIOnboardingStep.NATION));
  }),
  (controllers.onboarding.CountrySelect.prototype._getCountries = function _getCountries() {
    services.Onboarding.getCountries().observe(
      this,
      function _onGetCountriesComplete(e, t) {
        e.unobserve(this),
          t.success
            ? ((this._countries = t.data.countries),
              this.getView().setData(this._mapCountryObjects(this._countries)))
            : TelemetryManager.trackEvent(
                TelemetryManager.Sections.ONBOARDING,
                TelemetryManager.Categories.ERROR,
                '(' + t.status + ') Country Select load failure'
              );
      }
    );
  }),
  (controllers.onboarding.CountrySelect.prototype._generateCountryDataObject = function _generateCountryDataObject(
    e
  ) {
    return {
      id: e,
      name: utils.FUTLocalization.getNationNameById(e),
      assetType: utils.AssetLocator.IMAGE_TYPE_FLAG
    };
  }),
  (controllers.onboarding.CountrySelect.prototype._mapCountryObjects = function _mapCountryObjects(
    e
  ) {
    return e.map(function(e) {
      return this._generateCountryDataObject(e);
    }, this);
  }),
  (controllers.onboarding.CountrySelect.prototype._selectCountry = function _selectCountry() {
    var n = this.getView(),
      o = n.getSelectedId();

    function _onGetSquadComplete(e, t) {
      if ((e.unobserve(this), t.success)) {
        var i;
        services.PIN.sendData(enums.PIN.EVENT.MILESTONE, {
          moment: PIN_MILESTONE_EVT_MOMENT,
          mode: PIN_MILESTONE_EVT_MODE,
          type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
          mstid: enums.PIN.MILESTONE_EVT_ID.EXPLORESQUAD
        }),
          isPhone()
            ? (i = new controllers.onboarding.StarterSquadOverview()).initWithSquad(
                t.data.squad
              )
            : (i = new controllers.onboarding.StarterSquadLandscape()).initWithSquad(
                t.data.squad
              );
        var s = this.getNavigationController();
        s &&
          (s.conforms(controllers.navigation.Onboarding) &&
            s
              .getOnboardingState()
              .setCountryId(utils.FUTData.mapNationIdToOnboardingCountryId(o)),
          s.pushViewController(i, !0));
      } else
        n.setInteractionState(!0),
          TelemetryManager.trackEvent(
            TelemetryManager.Sections.ONBOARDING,
            TelemetryManager.Categories.ERROR,
            'Failed to load starter squad'
          );
      gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
    }

    function _onCreateClubComplete(e, t) {
      e.unobserve(this),
        t.success
          ? services.Squad.requestSquadById(0).observe(
              this,
              _onGetSquadComplete
            )
          : (n.setInteractionState(!0),
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING),
            services.Notification.queue([
              services.Localization.localize('onboarding.error.clubcreation'),
              enums.UINotificationType.NEGATIVE
            ]),
            TelemetryManager.trackEvent(
              TelemetryManager.Sections.ONBOARDING,
              TelemetryManager.Categories.ERROR,
              '(' + t.status + ') Failed to create club'
            ));
    }
    var e = utils.JS.isNumber(o) && 0 < o;
    utils.Debug.Assert(e, 'Invalid country ID'),
      e &&
        (n.setInteractionState(!1),
        gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
        services.Onboarding.selectCountry(o).observe(
          this,
          function _onCountrySelectComplete(e, t) {
            e.unobserve(this),
              t.success
                ? (services.PIN.sendData(enums.PIN.EVENT.MILESTONE, {
                    moment: PIN_MILESTONE_EVT_MOMENT,
                    mode: PIN_MILESTONE_EVT_MODE,
                    type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
                    mstid: enums.PIN.MILESTONE_EVT_ID.COUNTRY
                  }),
                  services.Onboarding.createClub().observe(
                    this,
                    _onCreateClubComplete
                  ))
                : (n.setInteractionState(!0),
                  gClickShield.hideShield(
                    components.ClickShield.SHIELD.LOADING
                  ),
                  services.Notification.queue([
                    services.Localization.localize(
                      'onboarding.error.clubcreation'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]),
                  TelemetryManager.trackEvent(
                    TelemetryManager.Sections.ONBOARDING,
                    TelemetryManager.Categories.ERROR,
                    '(' + t.status + ') Failed to save country selection'
                  ));
          }
        ));
  }),
  (controllers.onboarding.CountrySelect.prototype._eContinue = function _eContinue(
    e,
    t,
    i
  ) {
    this._selectCountry();
  }),
  NamespaceManager.Register('controllers.onboarding'),
  (controllers.onboarding.WelcomeBack = function() {
    UTViewController.call(this), (this._personaController = null);
  }),
  utils.JS.inherits(controllers.onboarding.WelcomeBack, UTViewController),
  (controllers.onboarding.WelcomeBack.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      (this._personaController = new controllers.views.Persona()),
      this._personaController.init(),
      (this._personaController.showPersonaChanger = !1),
      this.addChildViewController(this._personaController),
      this.getView()
        .getSubmitButton()
        .addTarget(this, this._eSubmitTap, enums.Event.TAP));
  }),
  (controllers.onboarding.WelcomeBack.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._personaController &&
        (this._personaController.dealloc(), (this._personaController = null));
  }),
  (controllers.onboarding.WelcomeBack.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Onboarding - Welcome Screen';
  }),
  (controllers.onboarding.WelcomeBack.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = services.User.getUser().getSelectedPersona(),
      t = this.getNavigationController(),
      i = this.getView();
    this._personaController &&
      (i.appendPersonaSelector(this._personaController.getView()),
      i.layoutSubviews(),
      this._personaController.viewDidAppear()),
      t &&
        !isPhone() &&
        (t.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY),
        t.setToolbarVisibility(!0)),
      i.setTitle(
        services.Localization.localize('mobilestart.text.welcomeBack', [e.name])
      ),
      i.setDescription(
        services.Localization.localize('mobilestart.text.gettingStarted')
      ),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.ONBOARDING,
        'Onboarding - Welcome Screen'
      );
  }),
  (controllers.onboarding.WelcomeBack.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.WelcomeBack();
  }),
  (controllers.onboarding.WelcomeBack.prototype._eSubmitTap = function _eSubmitTap(
    e,
    t
  ) {
    var i = this.getNavigationController(),
      s = new controllers.onboarding.CountrySelect();
    s.init(), i.showStepChain(!0), i.pushViewController(s, !0);
  }),
  NamespaceManager.Register('views'),
  (views.StepLink = function StepLinkView() {
    UTView.call(this),
      (this._state = enums.UICompletionState.INCOMPLETE),
      this._generate();
  }),
  utils.JS.inherits(views.StepLink, UTView),
  (views.StepLink.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('stepLink');
      var t = document.createElement('div');
      t.classList.add('linkLine'),
        e.appendChild(t),
        (this.__value = document.createElement('span')),
        this.__value.classList.add('linkValue'),
        e.appendChild(this.__value),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.StepLink.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__value = null);
  }),
  (views.StepLink.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.StepLink.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.StepLink.prototype.setValue = function setValue(e) {
    this.__value.textContent = e;
  }),
  (views.StepLink.prototype.setState = function setState(e) {
    if (this._state !== e) {
      if (e === enums.UICompletionState.INCOMPLETE)
        this.removeClass('inProgress complete');
      else if (e === enums.UICompletionState.IN_PROGRESS)
        this.addClass('inProgress'), this.removeClass('complete');
      else {
        if (e !== enums.UICompletionState.COMPLETE)
          return void utils.Debug.Assert(
            !1,
            'Encountered an unknown completion state'
          );
        this.addClass('complete'), this.removeClass('inProgress');
      }
      this._state = e;
    }
  }),
  NamespaceManager.Register('views'),
  (views.StepChain = function StepChainView() {
    UTView.call(this), (this._steps = []), this._generate();
  }),
  utils.JS.inherits(views.StepChain, UTView),
  (views.StepChain.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('stepChain'), (this.__root = e), (this._generated = !0);
    }
  }),
  (views.StepChain.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (views.StepChain.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.StepChain.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.StepChain.prototype.dealloc = function dealloc() {
    this._removeSteps(), this.superclass();
  }),
  (views.StepChain.prototype._removeSteps = function _removeSteps() {
    this._steps.forEach(function _deallocStep(e) {
      e.dealloc();
    }, this),
      (this._steps = []);
  }),
  (views.StepChain.prototype._generateStep = function _generateStep(e) {
    var t = new views.StepLink();
    t.setValue(e), this._steps.push(t), this.addSubview(t);
  }),
  (views.StepChain.prototype.setCurrentStep = function setCurrentStep(s) {
    this._steps.forEach(function _setStepState(e, t) {
      var i = t + 1;
      i < s
        ? e.setState(enums.UICompletionState.COMPLETE)
        : i === s
        ? e.setState(enums.UICompletionState.IN_PROGRESS)
        : e.setState(enums.UICompletionState.INCOMPLETE);
    }, this);
  }),
  (views.StepChain.prototype.setNumSteps = function setNumSteps(e) {
    this._removeSteps();
    for (var t = 0; t++ < e; ) this._generateStep(t.toString());
    this.layoutSubviews();
  }),
  (views.StepChain.prototype.setDarkStyle = function setDarkStyle(e) {
    this.toggleClass('dark', e);
  }),
  NamespaceManager.Register('views.onboarding'),
  (views.onboarding.OnboardingNavbar = function FUINavigationBar() {
    views.NavigationBar.call(this), this._generate();
  }),
  utils.JS.inherits(views.onboarding.OnboardingNavbar, views.NavigationBar),
  (views.onboarding.OnboardingNavbar.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-navigation-bar-view'),
        e.classList.add('OnboardingNavbar'),
        (this.__title = document.createElement('h1')),
        this.__title.classList.add('title'),
        e.appendChild(this.__title),
        (this.__onboardingSteps = document.createElement('div')),
        this.__onboardingSteps.classList.add('stepsContainer'),
        (this._steps = new views.StepChain()),
        this.__onboardingSteps.appendChild(this._steps.getRootElement()),
        e.appendChild(this.__onboardingSteps),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.onboarding.OnboardingNavbar.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      (this.__onboardingSteps = null),
      this._steps.destroy();
  }),
  (views.onboarding.OnboardingNavbar.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.onboarding.OnboardingNavbar.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.onboarding.OnboardingNavbar.prototype.init = function init() {
    this.superclass();
  }),
  (views.onboarding.OnboardingNavbar.prototype.layoutSubviews = function layoutSubviews() {
    this._primaryButton &&
      DOMKit.insertBefore(
        this._primaryButton.getRootElement(),
        this.getRootElement().firstChild
      ),
      this._secondaryButton &&
        DOMKit.insertBefore(
          this._secondaryButton.getRootElement(),
          this.__onboardingSteps
        ),
      this._subviews.forEach(function(e) {
        e.view !== this._primaryButton &&
          e.view !== this._secondaryButton &&
          e.container.appendChild(e.view.getRootElement());
      }, this);
  }),
  (views.onboarding.OnboardingNavbar.prototype.setHeader = function setHeader(
    e
  ) {
    this.superclass(e), this.toggleClass('empty-title', utils.JS.isEmpty(e));
  }),
  (views.onboarding.OnboardingNavbar.prototype.setCurrentStep = function setCurrentStep(
    e
  ) {
    this._steps.setCurrentStep(e);
  }),
  (views.onboarding.OnboardingNavbar.prototype.createSteps = function createSteps(
    e
  ) {
    this._steps.setNumSteps(e);
  }),
  (views.onboarding.OnboardingNavbar.prototype.showStepChain = function showStepChain(
    e
  ) {
    this.toggleClass('no-step-chain', !e);
  }),
  (views.onboarding.OnboardingToolbar = function OnboardingToolbar() {
    views.Toolbar.call(this), this._generate();
  }),
  utils.JS.inherits(views.onboarding.OnboardingToolbar, views.Toolbar),
  (views.onboarding.OnboardingToolbar.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('nav');
      e.classList.add('FUIToolbar'),
        e.classList.add('OnboardingToolbar'),
        (this._settingsBtn = new UTToolbarButtonControl()),
        this._settingsBtn.getRootElement().classList.add('settings-btn'),
        e.appendChild(this._settingsBtn.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.onboarding.OnboardingToolbar.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._settingsBtn.destroy();
  }),
  (views.onboarding.OnboardingToolbar.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.onboarding.OnboardingToolbar.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.onboarding.OnboardingToolbar.prototype.init = function init() {
    this.superclass(),
      this._settingsBtn.init(),
      this._settingsBtn.setText(
        services.Localization.localize('button.settings')
      );
  }),
  (views.onboarding.OnboardingToolbar.prototype.getSettingsButton = function getSettingsButton() {
    return this._settingsBtn;
  }),
  NamespaceManager.Register('controllers.navigation'),
  (controllers.navigation.Onboarding = function OnboardingNavigationController() {
    UTNavigationController.call(
      this,
      new views.onboarding.OnboardingNavbar(),
      new views.onboarding.OnboardingToolbar()
    ),
      (this._viewmodel = null),
      (this._squad = null),
      (this._settingsButton = new UTNavigationButtonControl()),
      (this._switchBackWithSettings = !1);
  }),
  utils.JS.inherits(controllers.navigation.Onboarding, UTNavigationController),
  (controllers.navigation.Onboarding.prototype.init = function init() {
    if (!this.initialized) {
      var e = this.getRootController();
      this._viewmodel || (this._viewmodel = new viewmodels.OnboardingState()),
        this._squad && e.conforms(controllers.onboarding.StarterSquadOverview)
          ? e.initWithSquad(this._squad)
          : this._squad &&
            e.conforms(controllers.onboarding.StarterSquadLandscape)
          ? e.initWithSquad(this._squad)
          : e.conforms(controllers.onboarding.OnboardingSummary) &&
            e.initWithViewmodel(this._viewmodel),
        this.superclass(),
        this._toolbar
          .getSettingsButton()
          .addTarget(this, this._eSettingsSelected, enums.Event.TAP),
        this._settingsButton.init(),
        this._settingsButton.addClass('settings-btn'),
        this._settingsButton.addTarget(
          this,
          this._eSettingsSelected,
          enums.Event.TAP
        ),
        this.showSettings(!0),
        this._navigationBar.createSteps(4);
      var t =
        e.conforms(controllers.onboarding.WelcomeBack) ||
        e.conforms(controllers.onboarding.OnboardingSummary);
      this.showStepChain(!t);
    }
  }),
  (controllers.navigation.Onboarding.prototype.initWithViewmodel = function initWithViewmodel(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof viewmodels.OnboardingState,
        'Expected a viewmodels.OnboardingState instance'
      ),
      (this._viewmodel = e),
      this.init());
  }),
  (controllers.navigation.Onboarding.prototype.dealloc = function dealloc() {
    this._settingsButton.dealloc(),
      (this._viewmodel = null),
      (this._squad = null),
      this.superclass();
  }),
  (controllers.navigation.Onboarding.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return this._viewmodel
      ? this._viewmodel.hasLoaner()
        ? this._viewmodel.hasHomeKit() && this._viewmodel.hasAwayKit()
          ? this._viewmodel.hasBadge()
            ? new controllers.onboarding.OnboardingSummary()
            : new controllers.onboarding.BadgeSelect()
          : new controllers.onboarding.KitSelect()
        : isPhone()
        ? new controllers.onboarding.StarterSquadOverview()
        : new controllers.onboarding.StarterSquadLandscape()
      : new controllers.onboarding.WelcomeBack();
  }),
  (controllers.navigation.Onboarding.prototype.getRootPrimaryNavigationItem = function getRootPrimaryNavigationItem() {
    return this._settingsButton;
  }),
  (controllers.navigation.Onboarding.prototype.viewDidAppear = function viewDidAppear() {
    this.setNavigationVisibility(!0),
      this.setToolbarVisibility(!isPhone()),
      this.superclass();
  }),
  (controllers.navigation.Onboarding.prototype.setSquad = function setSquad(e) {
    this._squad = e;
  }),
  (controllers.navigation.Onboarding.prototype.setCurrentStep = function setCurrentStep(
    e
  ) {
    this._navigationBar.setCurrentStep(e);
  }),
  (controllers.navigation.Onboarding.prototype.showStepChain = function showStepChain(
    e
  ) {
    this._navigationBar.showStepChain(e);
    var t = this._navigationBar.getRootElement().clientHeight + 'px';
    this.getView().getContentContainer().style.top = t;
  }),
  (controllers.navigation.Onboarding.prototype.showSettings = function showSettings(
    e
  ) {
    (this._switchBackWithSettings = !!e),
      this.getPrimaryNavigationItem().toggleClass(
        'settings-btn',
        this._switchBackWithSettings
      );
  }),
  (controllers.navigation.Onboarding.prototype.getOnboardingState = function getOnboardingState() {
    return this._viewmodel;
  }),
  (controllers.navigation.Onboarding.prototype._gotoSettingsView = function _gotoSettingsView() {
    var e = new UTAppSettingsViewController();
    e.init(),
      this.showSettings(!1),
      this.setNavigationStyle(
        isPhone()
          ? enums.UINavigationBarStyle.DEFAULT
          : enums.UINavigationBarStyle.LANDSCAPE
      ),
      this.setToolbarVisibility(!1),
      this.pushViewController(e);
  }),
  (controllers.navigation.Onboarding.prototype._eSettingsSelected = function _eSettingsSelected(
    e,
    t
  ) {
    this._gotoSettingsView();
  }),
  (controllers.navigation.Onboarding.prototype._eBackButtonTapped = function _eBackButtonTapped(
    e,
    t,
    i
  ) {
    if (this._switchBackWithSettings) this._gotoSettingsView();
    else {
      var s = this._currentController instanceof UTAppSettingsViewController;
      this.superclass(), s && this.showSettings(!0);
    }
  }),
  utils.JS.inherits(UTBootFlowNavigationController, UTNavigationController),
  (UTBootFlowNavigationController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      this._settingsNavButton.init(),
      this._settingsNavButton.addClass('settings-btn'),
      this._settingsNavButton.setInteractionState(!0),
      this._settingsNavButton.addTarget(
        this,
        this._eSettingsButtonSelected,
        enums.Event.TAP
      ),
      this._settingsToolbarButton.init(),
      this._settingsToolbarButton.setText(
        services.Localization.localize('button.settings')
      ),
      this._settingsToolbarButton.addClass('settings-btn'),
      this._settingsToolbarButton.setInteractionState(!0),
      this._settingsToolbarButton.addTarget(
        this,
        this._eSettingsButtonSelected,
        enums.Event.TAP
      ),
      this._toolbar.addClass('ut-bootflow-toolbar'));
  }),
  (UTBootFlowNavigationController.prototype.dealloc = function dealloc() {
    this._settingsNavButton.dealloc(),
      this._settingsToolbarButton.dealloc(),
      this.superclass();
  }),
  (UTBootFlowNavigationController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this.setNavigationVisibility(isPhone()),
      this.setToolbarVisibility(!isPhone()),
      this.setNavigationStyle(
        isPhone()
          ? enums.UINavigationBarStyle.DEFAULT
          : enums.UINavigationBarStyle.LANDSCAPE
      );
  }),
  (UTBootFlowNavigationController.prototype.getRootPrimaryNavigationItem = function getRootPrimaryNavigationItem() {
    return this._settingsNavButton;
  }),
  (UTBootFlowNavigationController.prototype.getToolbarItems = function getToolbarItems() {
    return [this._settingsToolbarButton];
  }),
  (UTBootFlowNavigationController.prototype.didPush = function didPush(e) {
    this.superclass(),
      this.getRootController() === e &&
        this.setToolbarVisibility(!isPhone(), !0);
  }),
  (UTBootFlowNavigationController.prototype._eSettingsButtonSelected = function _eSettingsButtonSelected(
    e,
    t,
    i
  ) {
    var s = new UTAppSettingsViewController();
    s.init(), this.pushViewController(s), this.setToolbarVisibility(!1, !0);
  }),
  utils.JS.inherits(UTShowOffSquadOverviewView, UTSquadOverviewView),
  utils.JS.inherits(
    UTShowOffSquadOverviewViewController,
    UTSquadOverviewViewController
  ),
  (UTShowOffSquadOverviewViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTShowOffSquadOverviewView();
  }),
  (UTShowOffSquadOverviewViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Show Off Squad';
  }),
  (UTShowOffSquadOverviewViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getNavigationController();
    if (
      e &&
      (e.setNavigationVisibility(!0, !0),
      e.conforms(UTGameFlowNavigationController))
    ) {
      var t = services.User.getUser(),
        i = t ? t.getSelectedPersona() : null,
        s = !!i && i.hasFullAccess;
      e.toggleFUTLogo(!isPhone() && !s);
    }
    getDefaultDispatcher().addObserver(
      enums.Notification.APP_RESUME,
      this,
      this._nAppResumed
    );
  }),
  (UTShowOffSquadOverviewViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      getDefaultDispatcher().removeObserver(
        enums.Notification.APP_RESUME,
        this
      );
  }),
  (UTShowOffSquadOverviewViewController.prototype._pushSquadToView = function _pushSquadToView(
    e
  ) {
    var t = this.getView();
    t.setType(
      e.isDream()
        ? enums.SquadPitchTypes.CONCEPT
        : enums.SquadPitchTypes.REGULAR
    ),
      t.setSquad(e);
  }),
  (UTShowOffSquadOverviewViewController.prototype._eItemTap = function _eItemTap(
    e,
    t,
    i
  ) {
    this._squad.getSlot(i.slotIndex).isValid() && this.superclass(e, t, i);
  }),
  (UTShowOffSquadOverviewViewController.prototype._eDetailsButtonSelected = function _eDetailsButtonSelected(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController();
    if (s) {
      var n = new UTSquadShowOffActionsViewController();
      n.initWithSquad(this._squad), s.pushViewController(n, !0);
    }
  }),
  (UTShowOffSquadOverviewViewController.prototype._nAppResumed = function _nAppResumed(
    e,
    t,
    i
  ) {
    services.Squad.hasExternalShowOffSquad() &&
      services.Squad.loadShowOffSquad().observe(this, function(e, t) {
        if ((e.unobserve(this), t.success)) {
          var i = this.getNavigationController();
          i &&
            i instanceof UTGameFlowNavigationController &&
            i.setClubInfo(t.data.showOff.clubName, t.data.showOff.estDate),
            this.setSquad(t.data.showOff.squad);
        } else services.Notification.queue([services.Localization.localize('squads.showoff.error.load'), enums.UINotificationType.NEGATIVE]), NetworkErrorManager.handleStatus(t.status);
      });
  }),
  (UTShowOffSquadOverviewViewController.prototype._nInfoStateChanged = function _nInfoStateChanged(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.SQUADS,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Item Info Switch Button - Show Off Squad'
    );
  }),
  utils.JS.inherits(UTSquadShowOffActionsView, UTView),
  (UTSquadShowOffActionsView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('article');
      e.classList.add('SquadShowOffDetails');
      var t = document.createElement('section');
      t.classList.add('detail-carousel'),
        (this._formationImg = new UTImageView()),
        t.appendChild(this._formationImg.getRootElement()),
        (this.__formationTxt = document.createElement('p')),
        this.__formationTxt.classList.add('formation-name'),
        t.appendChild(this.__formationTxt),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('desc'),
        (this.__showOffDesc = document.createElement('p')),
        i.appendChild(this.__showOffDesc),
        e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('button-container'),
        (this._btnStarted = new UTStandardButtonControl()),
        this._btnStarted.getRootElement().classList.add('call-to-action'),
        s.appendChild(this._btnStarted.getRootElement()),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadShowOffActionsView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._formationImg.destroy(),
      (this.__formationTxt = null),
      (this.__showOffDesc = null),
      this._btnStarted.destroy();
  }),
  (UTSquadShowOffActionsView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadShowOffActionsView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadShowOffActionsView.prototype.init = function init() {
    this.superclass(),
      this._btnStarted.init(),
      this._btnStarted.setText(
        services.Localization.localize('infopanel.showOff.getStarted')
      ),
      (this.__showOffDesc.textContent = services.Localization.localize(
        'infopanel.showOff.description'
      ));
  }),
  (UTSquadShowOffActionsView.prototype.renderFormation = function renderFormation(
    e
  ) {
    var t = utils.AssetLocator.IMAGE_TYPE_FORMATION;
    (this.__formationTxt.textContent = e.getDisplayName()),
      this._formationImg.setResource(
        utils.AssetLocator.getImage(t, enums.Year.ASSET, e.getId())
      );
  }),
  (UTSquadShowOffActionsView.prototype.getStartedButton = function getStartedButton() {
    return this._btnStarted;
  }),
  NamespaceManager.Register('controllers.squads'),
  utils.JS.inherits(UTSquadShowOffActionsViewController, UTViewController),
  (UTSquadShowOffActionsViewController.prototype.init = function init() {
    this.superclass(),
      this.getView()
        .getStartedButton()
        .addTarget(this, this._eGetStartedButtonPressed, enums.Event.TAP);
  }),
  (UTSquadShowOffActionsViewController.prototype.initWithSquad = function initWithSquad(
    e
  ) {
    this.getView().renderFormation(e.getFormation()), this.init();
  }),
  (UTSquadShowOffActionsViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSquadShowOffActionsView();
  }),
  (UTSquadShowOffActionsViewController.prototype._eGetStartedButtonPressed = function _eGetStartedButtonPressed() {
    getAppMain()
      .getLoginController()
      .logout();
  }),
  NamespaceManager.Register('views.items'),
  (views.items.SlotActionPanel = function SlotActionPanelView() {
    UTTargetActionView.call(this), this._generate();
  }),
  utils.JS.inherits(views.items.SlotActionPanel, UTTargetActionView),
  (views.items.SlotActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('DetailPanel');
      var t = document.createElement('div');
      t.classList.add('ut-item-details--metadata'),
        (this.__positionContainer = document.createElement('div')),
        this.__positionContainer.classList.add('position-container'),
        (this.__positionLabel = document.createElement('span')),
        this.__positionContainer.appendChild(this.__positionLabel),
        (this.__position = document.createElement('strong')),
        this.__positionContainer.appendChild(this.__position),
        t.appendChild(this.__positionContainer),
        (this.__auctionInfo = document.createElement('div')),
        this.__auctionInfo.classList.add('auctionInfo');
      var i = document.createElement('div');
      i.classList.add('column'),
        (this.__textInfo = document.createElement('span')),
        this.__textInfo.classList.add('subHeading'),
        i.appendChild(this.__textInfo),
        (this.__valueInfo = document.createElement('span')),
        this.__valueInfo.classList.add('currency-coins'),
        this.__valueInfo.classList.add('subContent'),
        i.appendChild(this.__valueInfo),
        this.__auctionInfo.appendChild(i),
        t.appendChild(this.__auctionInfo),
        e.appendChild(t),
        (this.__itemActions = document.createElement('div')),
        this.__itemActions.classList.add('ut-button-group'),
        (this._btnPlayerBio = new UTGroupButtonControl()),
        this._btnPlayerBio.getRootElement().classList.add('more'),
        this.__itemActions.appendChild(this._btnPlayerBio.getRootElement()),
        (this._btnApplyConsumable = new UTGroupButtonControl()),
        this.__itemActions.appendChild(
          this._btnApplyConsumable.getRootElement()
        ),
        (this._btnAddSwap = new UTGroupButtonControl()),
        this.__itemActions.appendChild(this._btnAddSwap.getRootElement()),
        (this._btnTransfer = new UTGroupButtonControl()),
        this.__itemActions.appendChild(this._btnTransfer.getRootElement()),
        (this._btnSearchSlot = new UTGroupButtonControl()),
        this.__itemActions.appendChild(this._btnSearchSlot.getRootElement()),
        (this._btnSearchMarket = new UTGroupButtonControl()),
        this.__itemActions.appendChild(this._btnSearchMarket.getRootElement()),
        (this._btnRemove = new UTGroupButtonControl()),
        this.__itemActions.appendChild(this._btnRemove.getRootElement()),
        (this._btnDiscard = new UTGroupButtonControl()),
        this.__itemActions.appendChild(this._btnDiscard.getRootElement()),
        e.appendChild(this.__itemActions),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.SlotActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__positionContainer = null),
      (this.__positionLabel = null),
      (this.__position = null),
      (this.__auctionInfo = null),
      (this.__textInfo = null),
      (this.__valueInfo = null),
      (this.__itemActions = null),
      this._btnPlayerBio.destroy(),
      this._btnApplyConsumable.destroy(),
      this._btnAddSwap.destroy(),
      this._btnTransfer.destroy(),
      this._btnSearchSlot.destroy(),
      this._btnSearchMarket.destroy(),
      this._btnRemove.destroy(),
      this._btnDiscard.destroy();
  }),
  (views.items.SlotActionPanel.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.SlotActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.SlotActionPanel.prototype.init = function init() {
    this.superclass(),
      this._btnPlayerBio.init(),
      this._btnApplyConsumable.init(),
      this._btnAddSwap.init(),
      this._btnTransfer.init(),
      this._btnSearchMarket.init(),
      this._btnSearchSlot.init(),
      this._btnRemove.init(),
      this._btnDiscard.init(),
      this._btnPlayerBio.setText(
        services.Localization.localize('extendedPlayerInfo.general.playerBio')
      ),
      this._btnApplyConsumable.setText(
        services.Localization.localize('panel.applyitem.button')
      ),
      this._btnTransfer.setText(
        services.Localization.localize('infopanel.label.sendTradePile')
      ),
      this._btnSearchMarket.setText(
        services.Localization.localize('infopanel.label.findallitems')
      ),
      this._btnSearchSlot.setText(
        services.Localization.localize('infopanel.button.searchslot')
      ),
      this._btnRemove.setText(
        services.Localization.localize('infopanel.button.removefromsquad')
      ),
      this._btnDiscard.setText(
        services.Localization.localize('infopanel.label.quickSell')
      ),
      this._btnPlayerBio.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._btnApplyConsumable.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._btnAddSwap.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._btnTransfer.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._btnSearchMarket.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._btnSearchSlot.addTarget(
        this,
        this._eButtonSelected,
        enums.Event.TAP
      ),
      this._btnRemove.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._btnDiscard.addTarget(this, this._eButtonSelected, enums.Event.TAP),
      this._btnDiscard.displayCurrencyIcon(!0),
      (this.__positionLabel.textContent =
        services.Localization.localize(
          'card.desc.training.gkattribabbr.Position'
        ) + ' '),
      this.setInteractionState(!0);
  }),
  (views.items.SlotActionPanel.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    this.superclass(e),
      this._btnPlayerBio.setInteractionState(e),
      this._btnApplyConsumable.setInteractionState(e),
      this._btnAddSwap.setInteractionState(e),
      this._btnTransfer.setInteractionState(e),
      this._btnSearchMarket.setInteractionState(e),
      this._btnSearchSlot.setInteractionState(e),
      this._btnRemove.setInteractionState(e),
      this._btnDiscard.setInteractionState(e);
  }),
  (views.items.SlotActionPanel.prototype.setItem = function setItem(i, e) {
    this._btnAddSwap.setText(
      (function _generateAddSwapText() {
        var e = i.isValid() ? 'swap' : 'add',
          t = i.isManager() ? 'manager' : 'player';
        return services.Localization.localize('infopanel.label.' + e + t);
      })()
    ),
      this._btnDiscard.setSubtext(
        services.Localization.localizeNumber(i.discardValue)
      );
    var t = i.isValid(),
      s = i.concept,
      n = 0 < i.lastSalePrice,
      o =
        !gConfigurationModel.getConfigBoolean(
          models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET
        ) &&
        services.User.getUser().hasTradeAccess() &&
        services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.TRADING_ENABLED
        );
    this._btnApplyConsumable.setDisplay(t && !s),
      this._btnDiscard.setDisplay(t && !s),
      this._btnRemove.setDisplay(t),
      this._btnPlayerBio.setDisplay(t && i.isPlayer()),
      this._btnTransfer.setDisplay(t),
      this._btnSearchMarket.setDisplay(t && o),
      this._btnSearchSlot.setDisplay(o),
      this._btnTransfer.setText(
        services.Localization.localize('infopanel.label.sendTradePile')
      ),
      this._btnRemove.setText(
        services.Localization.localize(
          s ? 'infopanel.button.removefromsquad' : 'infopanel.label.storeInClub'
        )
      ),
      i.untradeable || i.isLoaned()
        ? (this._btnTransfer.setText(
            services.Localization.localize('infopanel.label.untradeable')
          ),
          this._btnTransfer.setInteractionState(!1))
        : e &&
          (this._btnTransfer.setText(
            services.Localization.localize(
              'popup.error.tradetoken.SellItemTradePileFullTitle'
            )
          ),
          this._btnTransfer.setInteractionState(!1)),
      (this.__textInfo.textContent = n
        ? services.Localization.localize('infopanel.label.prevBoughtPrice')
        : ''),
      (this.__valueInfo.textContent = n
        ? services.Localization.localizeNumber(i.lastSalePrice)
        : ''),
      DOMKit.toggleDisplayStyle(this.__auctionInfo, n);
  }),
  (views.items.SlotActionPanel.prototype.setShowOffItem = function setShowOffItem(
    e
  ) {
    this._setPreviewableOnlyItem(e, !1);
  }),
  (views.items.SlotActionPanel.prototype.setTOTWItem = function setTOTWItem(e) {
    this._setPreviewableOnlyItem(e, !0);
  }),
  (views.items.SlotActionPanel.prototype._setPreviewableOnlyItem = function _setPreviewableOnlyItem(
    e,
    t
  ) {
    this._btnPlayerBio.setDisplay(e.isValid() && e.isPlayer()),
      this._btnAddSwap.setDisplay(!1),
      this._btnApplyConsumable.setDisplay(!1),
      this._btnDiscard.setDisplay(!1),
      this._btnSearchMarket.setDisplay(e.isValid() && t),
      this._btnSearchSlot.setDisplay(!1),
      this._btnRemove.setDisplay(!1),
      this._btnTransfer.setDisplay(!1),
      DOMKit.toggleDisplayStyle(this.__auctionInfo, !1);
  }),
  (views.items.SlotActionPanel.prototype.setSlotName = function setSlotName(e) {
    var t = !utils.JS.isEmpty(e);
    DOMKit.toggleDisplayStyle(this.__positionContainer, t),
      (this.__position.textContent = t ? e : '');
  }),
  (views.items.SlotActionPanel.prototype.appendQuickList = function appendQuickList(
    e
  ) {
    DOMKit.insertBefore(e.getRootElement(), this.__itemActions);
  }),
  (views.items.SlotActionPanel.prototype._eButtonSelected = function _eButtonSelected(
    e,
    t,
    i
  ) {
    var s = enums.UIItemActionEvent.BIO;
    e === this._btnPlayerBio
      ? (s = enums.UIItemActionEvent.BIO)
      : e === this._btnApplyConsumable
      ? (s = enums.UIItemActionEvent.APPLY_CONSUMABLE)
      : e === this._btnAddSwap
      ? (s = enums.UIItemActionEvent.ADD_SWAP)
      : e === this._btnTransfer
      ? (s = enums.UIItemActionEvent.SEND_TO_TRANSFERS)
      : e === this._btnSearchMarket
      ? (s = enums.UIItemActionEvent.SEARCH_ON_MARKET)
      : e === this._btnSearchSlot
      ? (s = enums.UIItemActionEvent.SEARCH_SLOT_ON_MARKET)
      : e === this._btnRemove
      ? (s = enums.UIItemActionEvent.REMOVE_FROM_SQUAD)
      : e === this._btnDiscard && (s = enums.UIItemActionEvent.DISCARD),
      this._triggerActions(s);
  }),
  utils.JS.inherits(UTSlotActionPanelViewController, UTViewController),
  (UTSlotActionPanelViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        this._quickListPanel.init(),
        this._quickListPanel.onList.observe(this, this._onRemove);
      var e = this.getView();
      e.addTarget(this, this._onDiscard, enums.UIItemActionEvent.DISCARD),
        e.addTarget(
          this,
          this._onMove,
          enums.UIItemActionEvent.SEND_TO_TRANSFERS
        ),
        e.addTarget(
          this,
          this._onApply,
          enums.UIItemActionEvent.APPLY_CONSUMABLE
        ),
        e.addTarget(this, this._onAddSwap, enums.UIItemActionEvent.ADD_SWAP),
        e.addTarget(
          this,
          this._ePrefillSearch,
          enums.UIItemActionEvent.SEARCH_SLOT_ON_MARKET
        ),
        e.addTarget(
          this,
          this._eSearchMarket,
          enums.UIItemActionEvent.SEARCH_ON_MARKET
        ),
        e.addTarget(
          this,
          this._onRemove,
          enums.UIItemActionEvent.REMOVE_FROM_SQUAD
        ),
        e.addTarget(this, this._eBioSelected, enums.UIItemActionEvent.BIO);
    }
  }),
  (UTSlotActionPanelViewController.prototype.initWithItem = function initWithItem(
    e
  ) {
    this.initialized || (this.setItem(e), this.init());
  }),
  (UTSlotActionPanelViewController.prototype.initWithSquad = function initWithSquad(
    e,
    t
  ) {
    if (!this.initialized) {
      utils.Debug.Assert(
        e instanceof entities.Squad,
        'Initialization expected a squad entity'
      ),
        utils.Debug.Assert(
          utils.JS.isNumber(t),
          'Initialization expected a number'
        );
      var i = (this._squad = e).getSlot(t);
      0 <= i.getIndex()
        ? ((this._slot = t), this.initWithItem(i.getItem()))
        : this.init();
    }
  }),
  (UTSlotActionPanelViewController.prototype.initWithSBCChallenge = function initWithSBCChallenge(
    e,
    t
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.SBCChallenge,
        'Initialization expected a challenge entity'
      ),
      (this._challenge = e),
      this.initWithSquad(this._challenge.squad, t));
  }),
  (UTSlotActionPanelViewController.prototype.dealloc = function dealloc() {
    this.onDiscard.dealloc(),
      this.onMove.dealloc(),
      this.onRemove.dealloc(),
      this.onPlayerBio.dealloc(),
      this.onItemChange.dealloc(),
      (this.onDiscard = null),
      (this.onMove = null),
      (this.onRemove = null),
      (this.onPlayerBio = null),
      (this.onItemChange = null),
      this.superclass(),
      this._quickListPanel.dealloc(),
      (this._item = null),
      (this._squad = null),
      (this._challenge = null),
      (this._slot = 0);
  }),
  (UTSlotActionPanelViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.SlotActionPanel();
  }),
  (UTSlotActionPanelViewController.prototype.setSlotIndex = function setSlotIndex(
    e
  ) {
    this._slot !== e &&
      ((this._slot = e),
      this._squad && this.setItem(this._squad.getSlot(e).getItem()));
  }),
  (UTSlotActionPanelViewController.prototype.setItem = function setItem(e) {
    if (this._item !== e) {
      this._item = e;
      var t = this.getView(),
        i = this._squad && this._squad.isShowOff(),
        s = repositories.Item.isPileFull(enums.FUTItemPile.TRANSFER);
      this._squad && this._squad.isTOTW()
        ? t.setTOTWItem(this._item)
        : i
        ? t.setShowOffItem(this._item)
        : t.setItem(this._item, s);
      var n = services.User.getUser(),
        o =
          services.Configuration.checkFeatureEnabled(
            enums.ServerFeature.TRADING_ENABLED
          ) &&
          !gConfigurationModel.getConfigBoolean(
            models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET
          ) &&
          n &&
          n.hasTradeAccess() &&
          !s &&
          this._item.isValid() &&
          !this._item.untradeable &&
          !i;
      this._quickListPanel.setItem(this._item);
      var a = this._quickListPanel.getView();
      o &&
        (t.appendQuickList(a),
        a.setTitle(
          services.Localization.localize('infopanel.label.quickList')
        )),
        this._quickListPanel.getView().toggleDisplay(o);
    }
  }),
  (UTSlotActionPanelViewController.prototype.setIterator = function setIterator(
    e
  ) {
    this._iterator = e;
  }),
  (UTSlotActionPanelViewController.prototype._removeItemFromSquad = function _removeItemFromSquad() {
    var e = this._challenge ? this._challenge.squad : this._squad;
    e.removeItemFromSlot(this._squad.getSlot(this._item).getIndex()),
      this._challenge
        ? services.SBC.saveChallenge(this._challenge).observe(
            this,
            this._onSBCSaveComplete
          )
        : e.save();
  }),
  (UTSlotActionPanelViewController.prototype._onSBCSaveComplete = function _onSBCSaveComplete(
    e,
    t
  ) {
    if ((e.unobserve(this), !t.success)) {
      var i = 'notification.sbcChallenges.failedToSave';
      this._challenge.hasExpired(!0)
        ? (i = 'notification.sbcChallenges.expired')
        : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
          (i = 'sbc.notification.disabled'),
        services.Notification.queue([
          services.Localization.localize(i),
          enums.UINotificationType.NEGATIVE
        ]);
    }
  }),
  (UTSlotActionPanelViewController.prototype._onDiscard = function _onDiscard(
    e,
    t,
    i
  ) {
    var s = this.getView();
    s.setInteractionState(!1),
      utils.PopupManager.ShowConfirmation(
        utils.PopupManager.Confirmations.CONFIRM_DISCARD,
        [services.Localization.localizeNumber(this._item.discardValue)],
        function _onDiscardConfirm() {
          services.Item.discard(this._item).observe(this, function(e, t) {
            e.unobserve(this),
              t.success
                ? (this._removeItemFromSquad(),
                  this.onDiscard.notify(this._item))
                : services.Notification.queue([
                    services.Localization.localize(
                      'notification.error.item.discard'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]),
              s.setInteractionState(!0);
          });
        }.bind(this),
        s.setInteractionState.bind(s, !0)
      );
  }),
  (UTSlotActionPanelViewController.prototype._onMove = function _onMove(
    e,
    t,
    i
  ) {
    var s =
      t === enums.UIItemActionEvent.SEND_TO_TRANSFERS
        ? enums.FUTItemPile.TRANSFER
        : enums.FUTItemPile.CLUB;
    services.Item.move(this._item, s).observe(this, function _onMoveComplete(
      e,
      t
    ) {
      if ((e.unobserve(this), t.success)) {
        var i = '';
        (i =
          s === enums.FUTItemPile.TRANSFER
            ? this._item.isManager()
              ? services.Localization.localize(
                  'notification.manager.toTradePile'
                )
              : this._item.isPlayer()
              ? services.Localization.localize(
                  'notification.player.toTradePile'
                )
              : services.Localization.localize(
                  'notification.item.oneToTradePile'
                )
            : services.Localization.localize('notification.item.oneToClub')),
          services.Notification.queue([i, enums.UINotificationType.NEUTRAL]),
          this._removeItemFromSquad(),
          this.onMove.notify(this._item);
      } else
        services.Notification.queue([
          services.Localization.localize('notification.item.moveFailed'),
          enums.UINotificationType.NEGATIVE
        ]),
          NetworkErrorManager.handleStatus(t.status);
    });
  }),
  (UTSlotActionPanelViewController.prototype._onRemove = function _onRemove(
    e,
    t,
    i
  ) {
    this._removeItemFromSquad(), this.onRemove.notify(this._item);
  }),
  (UTSlotActionPanelViewController.prototype._onApply = function _onApply(
    e,
    t,
    i
  ) {
    var s = new controllers.items.ConsumableCategories();
    this._challenge
      ? s.initWithSBCChallenge(this._challenge, this._slot)
      : this._squad
      ? s.initWithSquad(this._squad, this._slot)
      : this._item
      ? s.initWithItem(this._item)
      : s.init(),
      this.getNavigationController().pushViewController(s);
  }),
  (UTSlotActionPanelViewController.prototype._onAddSwap = function _onAddSwap(
    e,
    t,
    i
  ) {
    var s = new controllers.club.ClubSearchFilters(),
      n = this.getNavigationController();
    if (n) {
      if (
        (this._challenge
          ? s.initWithSBCChallenge(this._challenge, this._iterator)
          : this._squad
          ? s.initWithSquad(this._squad, this._iterator)
          : this._item
          ? s.initWithItem(this._item)
          : s.init(),
        this._squad)
      ) {
        var o = services.User.getUser().squadSearchCriteria,
          a = this._squad.getSlot(this._slot);
        if (o && 0 <= a.getIndex()) {
          var r = a.getItem().isManager();
          (o.type = r ? enums.SearchType.STAFF : enums.SearchType.PLAYER),
            (o.position = a.getGeneralPositionName() || enums.SearchType.ANY),
            s.setSearchCriteria(o);
        }
      }
      s.onItemChange.observe(this, this._eOnItemChange),
        n.pushViewController(s);
    }
  }),
  (UTSlotActionPanelViewController.prototype._eSearchMarket = function _eSearchMarket(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController();
    if (s) {
      var n = new UTMarketSearchResultsViewController(),
        o = new transferobjects.SearchCriteria();
      services.Item.clearTransferMarketCache(),
        this._item
          ? ((o.defId = [this._item.getDefId()]),
            (o.type = this._item.getSearchType()),
            n.initWithSearchCriteria(o),
            n.setPinnedItem(this._item))
          : n.initWithSearchCriteria(o),
        s.pushViewController(n);
    }
  }),
  (UTSlotActionPanelViewController.prototype._ePrefillSearch = function _ePrefillSearch(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController();
    if (s) {
      TelemetryManager.trackEvent(
        TelemetryManager.Sections.AUCTIONS,
        TelemetryManager.Categories.BUTTON_PRESS,
        'Squad Slot Detail View - Search On Transfer Market'
      );
      var n = new UTMarketSearchFiltersViewController(),
        o = new UTSquadMarketSearchViewModel();
      o.setSquad(this._squad),
        o.setCurrentSlotIndex(this._slot),
        n.initWithSquadContext(o),
        s.pushViewController(n);
    }
  }),
  (UTSlotActionPanelViewController.prototype._eBioSelected = function _eBioSelected(
    e,
    t,
    i
  ) {
    this.onPlayerBio.notify();
  }),
  (UTSlotActionPanelViewController.prototype._eOnItemChange = function _eOnItemChange(
    e,
    t
  ) {
    this.onItemChange.notify(t);
  }),
  NamespaceManager.Register('views.items'),
  (views.items.SBCBrickActionPanel = function SlotActionPanelView() {
    UTView.call(this), this._generate();
  }),
  utils.JS.inherits(views.items.SBCBrickActionPanel, UTView),
  (views.items.SBCBrickActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('SBCBrickActionPanel'),
        (this.__list = document.createElement('ul')),
        this.__list.classList.add('pseudo-table'),
        e.appendChild(this.__list),
        (this.__help = document.createElement('p')),
        e.appendChild(this.__help),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.items.SBCBrickActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__list = null),
      (this.__help = null);
  }),
  (views.items.SBCBrickActionPanel.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.items.SBCBrickActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.items.SBCBrickActionPanel.prototype.render = function render(e) {
    this.__help.textContent = services.Localization.localize(
      'sbc.custombrick.help'
    );
    var t = e.getItem();
    this._generateRow(
      enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID,
      t.leagueId,
      this.__list
    ),
      this._generateRow(
        enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID,
        t.teamId,
        this.__list
      ),
      this._generateRow(
        enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID,
        t.nationId,
        this.__list
      );
  }),
  (views.items.SBCBrickActionPanel.prototype._generateRow = function _generateRow(
    e,
    t,
    i
  ) {
    var s, n;
    switch (e) {
      case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
        (s = 'controlbar.cardview.Nationality'),
          (n =
            0 === t
              ? services.Localization.localize('roles.defaultRole')
              : utils.FUTLocalization.getNationNameById(t));
        break;
      case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
        (s = 'controlbar.cardview.League'),
          (n =
            0 === t
              ? services.Localization.localize('roles.defaultRole')
              : utils.FUTLocalization.getLeagueNameByID(t, enums.Year.ASSET));
        break;
      case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
        (s = 'controlbar.cardview.Club'),
          (n =
            0 === t
              ? services.Localization.localize('roles.defaultRole')
              : utils.FUTLocalization.getTeamAbb15ByID(t, enums.Year.ASSET));
        break;
      default:
        utils.Debug.Assert(!1, 'Reached default case: ' + e);
    }
    var o = document.createElement('li'),
      a = document.createElement('h1'),
      r = document.createElement('h2');
    (a.textContent = services.Localization.localize(s)),
      (r.textContent = n),
      o.appendChild(a),
      o.appendChild(r),
      i.appendChild(o);
  }),
  utils.JS.inherits(UTSlotDetailsViewController, UTViewController),
  (UTSlotDetailsViewController.prototype.init = function init() {
    this.initialized || this.superclass();
  }),
  (UTSlotDetailsViewController.prototype.initWithItemIterator = function initWithItemIterator(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof UTIterator,
        'Initialization expected an instance of UTIterator'
      ),
      (this._viewmodel = e),
      this.init(),
      this.getView().addTarget(
        this,
        this._eIndexChange,
        views.items.ItemDetails.Event.INDEX_CHANGE
      ));
  }),
  (UTSlotDetailsViewController.prototype.initWithSquad = function initWithSquad(
    e,
    t
  ) {
    if (!this.initialized) {
      utils.Debug.Assert(
        e instanceof entities.Squad,
        'Initialization expected a squad entity'
      ),
        (this._squad = e);
      var i = this._createIterator(t);
      this.initWithItemIterator(i);
    }
  }),
  (UTSlotDetailsViewController.prototype.initWithSBCChallenge = function initWithSBCChallenge(
    e,
    t
  ) {
    if (!this.initialized) {
      utils.Debug.Assert(
        e instanceof entities.SBCChallenge,
        'Initialization expected a challenge entity'
      ),
        utils.Debug.Assert(
          utils.JS.isNumber(t),
          'Initialization expected a numeric slot index'
        ),
        (this._challenge = e),
        (this._squad = this._challenge.squad);
      var i = this._createIterator(t);
      this.initWithItemIterator(i),
        this.getView().addClass(enums.SquadPitchModes.SBC);
    }
  }),
  (UTSlotDetailsViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('extendedPlayerInfo.header');
  }),
  (UTSlotDetailsViewController.prototype._createIterator = function _createIterator(
    t
  ) {
    var e = this._getSlots(),
      i = new UTIterator(e);
    return (
      utils.JS.isNumber(t) &&
        i.setIndex(
          i.indexOf(function(e) {
            return e.getIndex() === t;
          })
        ),
      i
    );
  }),
  (UTSlotDetailsViewController.prototype._getSlots = function _getSlots() {
    function _generateSlotArray(t, e, i, s) {
      var n = t
        .getFieldPlayers()
        .reverse()
        .concat(t.getSubPlayers(), t.getReservePlayers());
      return (
        e && n.unshift(t.getManager()),
        i &&
          (n = n.filter(function(e) {
            return e.isValid();
          })),
        s &&
          (n = n.filter(function(e) {
            return -1 === t.simpleBrickIndices.indexOf(e.getIndex());
          })),
        n
      );
    }
    return this._squad.isTOTW()
      ? _generateSlotArray(this._squad, !1, !0, !1)
      : this._squad.isShowOff()
      ? _generateSlotArray(this._squad, !0, !0, !1)
      : this._squad.isSBC()
      ? _generateSlotArray(this._squad, !1, !1, !0)
      : _generateSlotArray(this._squad, !0, !1, !1);
  }),
  (UTSlotDetailsViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._panel
        ? (this._panel.dealloc(),
          (this._panel = null),
          (this._panelView = null))
        : this._panelView &&
          (this._panelView.dealloc(), (this._panelView = null)),
      this.onSlotChange.dealloc(),
      (this.onSlotChange = null),
      (this._viewmodel = null),
      (this._squad = null),
      (this._challenge = null);
  }),
  (UTSlotDetailsViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._renderView(),
      this.getNavigationController().setNavigationVisibility(!isPhone());
  }),
  (UTSlotDetailsViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass();
    var e = this.getView();
    e.toggleCarouselDisplay(!1), e.resetItems();
  }),
  (UTSlotDetailsViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.ItemDetails();
  }),
  (UTSlotDetailsViewController.prototype._renderView = function _renderView(e) {
    if (this.isViewDisplayed()) {
      var t = this.getView(),
        i = this._viewmodel.values(),
        s = this._viewmodel.current(),
        n = this._viewmodel.getIndex();
      this._renderPanel(),
        e
          ? (t.updateSlide(n, s.getItem()),
            t.setSlotChemistry(i.slice(n, n + 1)))
          : (t.render(
              i.map(function(e) {
                return e.getItem();
              }, this),
              n
            ),
            t.setSlotChemistry(i)),
        this._panelView instanceof views.items.SlotActionPanel &&
          this._panelView.setSlotName(this._getSlotName(s));
    }
  }),
  (UTSlotDetailsViewController.prototype._renderPanel = function _renderPanel() {
    this._panel
      ? (this.removeChildViewController(this._panel),
        this._panel.dealloc(),
        (this._panel = null),
        (this._panelView = null))
      : this._panelView &&
        (this._panelView.dealloc(), (this._panelView = null));
    var e = this._viewmodel.current();
    if (utils.JS.isValid(e) && e.isCustomBrick())
      (this._panelView = new views.items.SBCBrickActionPanel()),
        this._panelView.render(this._viewmodel.current());
    else {
      var t = utils.JS.isValid(e) ? e.getIndex() : 0;
      (this._panel = new UTSlotActionPanelViewController()),
        (this._panelView = this._panel.getView()),
        this.addChildViewController(this._panel),
        this._challenge
          ? this._panel.initWithSBCChallenge(this._challenge, t)
          : this._squad
          ? this._panel.initWithSquad(this._squad, t)
          : this._panel.init(),
        this._panel.setIterator(this._viewmodel),
        this._panel.onDiscard.observe(this, this._eItemRemoved),
        this._panel.onMove.observe(this, this._eItemRemoved),
        this._panel.onRemove.observe(this, this._eItemRemoved),
        this._panel.onPlayerBio.observe(this, this._onPlayerBio),
        this._panel.onItemChange.observe(this, this._eSlotChange);
    }
    this.getView().appendPanel(this._panelView);
  }),
  (UTSlotDetailsViewController.prototype.setSquad = function setSquad(e) {
    this._challenge ||
      ((this._squad = e), (this._viewmodel = this._createIterator(0)));
  }),
  (UTSlotDetailsViewController.prototype.setSlot = function setSlot(t) {
    var e = this.isViewDisplayed();
    this._viewmodel &&
      (this._viewmodel.current().getIndex() !== t &&
        (this._viewmodel.setIndex(
          this._viewmodel.indexOf(function(e) {
            return e.getIndex() === t;
          })
        ),
        e && this._renderPanel()),
      this._renderView());
  }),
  (UTSlotDetailsViewController.prototype._getSlotName = function _getSlotName(
    e
  ) {
    var t = e.getIndex();
    if (t < entities.Squad.FIELD_PLAYERS)
      return utils.FUTLocalization.getLocalizedPositionStringById(
        e.getGeneralPosition()
      );
    if (this._challenge)
      return t >= entities.Squad.FIELD_PLAYERS
        ? services.Localization.localize('dock.label.workArea')
        : '';
    if (this._squad) {
      if (t === entities.Squad.MANAGER_SLOT_INDEX)
        return services.Localization.localize('cards.cardfront.manager');
      if (t >= entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS)
        return services.Localization.localize('dock.label.reserves');
      if (t >= entities.Squad.FIELD_PLAYERS)
        return services.Localization.localize('dock.label.substitutes');
    }
    return '';
  }),
  (UTSlotDetailsViewController.prototype._eItemRemoved = function _eItemRemoved(
    e
  ) {
    var t = this._viewmodel.getIndex();
    this._squad
      ? (this._viewmodel.resetCollection(this._getSlots()),
        this._viewmodel.setIndex(t),
        this._renderView(!0))
      : (this._viewmodel.remove(t),
        0 < this._viewmodel.length
          ? this._renderView(!0)
          : this.getNavigationController().popViewController(!0));
  }),
  (UTSlotDetailsViewController.prototype._eSlotChange = function _eSlotChange(
    e,
    t
  ) {
    this._viewmodel.setIndex(
      this._viewmodel.indexOf(function(e) {
        return e.getIndex() === t.getIndex();
      })
    ),
      this.onSlotChange.notify({
        slot: this._viewmodel.current()
      });
  }),
  (UTSlotDetailsViewController.prototype._eIndexChange = function _eIndexChange(
    e,
    t,
    i
  ) {
    if (i.index !== this._viewmodel.getIndex()) {
      this._viewmodel.setIndex(i.index);
      var s = this._viewmodel.current();
      this._renderPanel(),
        this.onSlotChange.notify({
          slot: s
        }),
        this._panelView instanceof views.items.SlotActionPanel &&
          this._panelView.setSlotName(this._getSlotName(s));
    }
  }),
  (UTSlotDetailsViewController.prototype._onPlayerBio = function _onPlayerBio(
    e
  ) {
    var t = this._viewmodel.current().getItem();
    if (t.isValid() && t.isPlayer() && utils.JS.isValid(t.getMetaData())) {
      var i = new UTPlayerBioViewController();
      i.initWithItem(t), this.getNavigationController().pushViewController(i);
    } else
      services.Notification.queue([
        services.Localization.localize('playerbio.unavailable'),
        enums.UINotificationType.NEGATIVE
      ]);
  }),
  NamespaceManager.Register('controllers.navigation'),
  (controllers.navigation.SquadItemDetails = function SquadItemDetailNavigationController(
    e,
    t
  ) {
    UTNavigationController.call(this, e, t),
      (this._squad = null),
      Object.defineProperty(this, '_squad', {
        writable: !0,
        enumerable: !1
      }),
      (this._challenge = null),
      Object.defineProperty(this, '_challenge', {
        writable: !0,
        enumerable: !1
      }),
      (this._dismissButton = null),
      Object.defineProperty(this, '_dismissButton', {
        writable: !0,
        enumerable: !1
      }),
      (this.onSlotChange = new UTObservable()),
      Object.defineProperty(this, 'onSlotChange', {
        writable: !1,
        enumerable: !0
      }),
      (this.onSearchStarted = new UTObservable()),
      Object.defineProperty(this, 'onSearchStarted', {
        writable: !1,
        enumerable: !0
      }),
      (this.onSearchEnded = new UTObservable()),
      Object.defineProperty(this, 'onSearchEnded', {
        writable: !1,
        enumerable: !0
      });
  }),
  utils.JS.inherits(
    controllers.navigation.SquadItemDetails,
    UTNavigationController
  ),
  (controllers.navigation.SquadItemDetails.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      (this._dismissButton = new UTNavigationButtonControl()),
      this._dismissButton.init());
  }),
  (controllers.navigation.SquadItemDetails.prototype.initWithSquad = function initWithSquad(
    e,
    t
  ) {
    if (!this.initialized) {
      utils.Debug.Assert(
        e instanceof entities.Squad,
        'Initialization expected a squad entity.'
      ),
        (this._squad = e);
      var i = this._getRootControllerInstance();
      i.initWithSquad(this._squad, t),
        i.onSlotChange.observe(this, function(e, t) {
          this.onSlotChange.notify(t);
        }),
        this.initWithRootController(i);
    }
  }),
  (controllers.navigation.SquadItemDetails.prototype.initWithSBCChallenge = function initWithSBCChallenge(
    e,
    t
  ) {
    if (!this.initialized) {
      utils.Debug.Assert(
        e instanceof entities.SBCChallenge,
        'Initialization expected a challenge entity.'
      ),
        utils.Debug.Assert(
          utils.JS.isNumber(t),
          'Initialization expected a number for current squad slot.'
        ),
        (this._challenge = e),
        (this._squad = this._challenge.squad);
      var i = this._getRootControllerInstance();
      i.initWithSBCChallenge(this._challenge, t),
        i.onSlotChange.observe(this, function(e, t) {
          this.onSlotChange.notify(t);
        }),
        this.initWithRootController(i);
    }
  }),
  (controllers.navigation.SquadItemDetails.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._dismissButton &&
        (this._dismissButton.dealloc(), (this._dismissButton = null)),
      this.onSlotChange.dealloc(),
      this.onSearchStarted.dealloc(),
      this.onSearchEnded.dealloc(),
      (this._squad = null),
      (this._challenge = null),
      (this.onSlotChange = null),
      (this.onSearchStarted = null),
      (this.onSearchEnded = null);
  }),
  (controllers.navigation.SquadItemDetails.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new UTSlotDetailsViewController();
  }),
  (controllers.navigation.SquadItemDetails.prototype.getRootPrimaryNavigationItem = function getRootPrimaryNavigationItem() {
    return this._dismissButton;
  }),
  (controllers.navigation.SquadItemDetails.prototype.setSquad = function setSquad(
    e
  ) {
    this._challenge ||
      ((this._squad = e), this.getRootController().setSquad(this._squad));
  }),
  (controllers.navigation.SquadItemDetails.prototype.setSlot = function setSlot(
    e
  ) {
    this.popToRootViewController(), this.getRootController().setSlot(e);
  }),
  (controllers.navigation.SquadItemDetails.prototype._showController = function _showController(
    e,
    t
  ) {
    this.superclass(e, t),
      e instanceof controllers.club.ClubSearchFilters
        ? this.onSearchStarted.notify()
        : e instanceof UTSlotDetailsViewController &&
          this.onSearchEnded.notify();
  }),
  utils.JS.inherits(
    UTShowOffSquadSplitViewController,
    UTBaseSquadSplitViewController
  ),
  (UTShowOffSquadSplitViewController.prototype.init = function init() {
    this.superclass(),
      this._squad
        ? this._panelController.initWithSquad(this._squad)
        : this._panelController.init(),
      this.addChildViewController(this._panelController);
  }),
  (UTShowOffSquadSplitViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._panelController && this._panelController.dealloc(),
      (this._panelController = null);
  }),
  (UTShowOffSquadSplitViewController.prototype.getDefaultPanel = function getDefaultPanel() {
    return this._panelController;
  }),
  (UTShowOffSquadSplitViewController.prototype._setupSquadOverview = function _setupSquadOverview() {
    this._squad &&
      this._overviewController
        .getView()
        .getPitch()
        .addTarget(this, this._ePitchTapped, enums.Event.TAP);
  }),
  (UTShowOffSquadSplitViewController.prototype._generateSquadOverview = function _generateSquadOverview() {
    var e = new UTShowOffSquadOverviewViewController();
    return this._squad ? e.initWithSquad(this._squad) : e.init(), e;
  }),
  (UTShowOffSquadSplitViewController.prototype.selectSlotIndexForSquad = function selectSlotIndexForSquad(
    e,
    t,
    i
  ) {
    this._squad.getSlot(i).isValid() &&
      (this._overviewController.selectSlot(i),
      e === this._overviewController && this._showSlotDetails(i));
  }),
  utils.JS.inherits(UTCurrencyNavigationBarView, views.NavigationBar),
  (UTCurrencyNavigationBarView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-navigation-bar-view'),
        (this.__title = document.createElement('h1')),
        this.__title.classList.add('title'),
        e.appendChild(this.__title),
        (this.__currencies = document.createElement('div')),
        this.__currencies.classList.add('view-navbar-currency'),
        (this.__currencyCoins = document.createElement('div')),
        this.__currencyCoins.classList.add('view-navbar-currency-coins'),
        this.__currencies.appendChild(this.__currencyCoins),
        (this.__currencyPoints = document.createElement('div')),
        this.__currencyPoints.classList.add('view-navbar-currency-points'),
        this.__currencies.appendChild(this.__currencyPoints),
        e.appendChild(this.__currencies),
        (this.__clubInfo = document.createElement('div')),
        this.__clubInfo.classList.add('view-navbar-clubinfo');
      var t = document.createElement('div');
      t.classList.add('view-navbar-clubinfo-data'),
        (this.__clubInfoEst = document.createElement('span')),
        this.__clubInfoEst.classList.add('view-navbar-clubinfo-est'),
        t.appendChild(this.__clubInfoEst),
        (this.__clubInfoName = document.createElement('span')),
        this.__clubInfoName.classList.add('view-navbar-clubinfo-name'),
        t.appendChild(this.__clubInfoName),
        this.__clubInfo.appendChild(t),
        (this._clubInfoBadge = new UTImageView()),
        this._clubInfoBadge
          .getRootElement()
          .classList.add('view-navbar-clubinfo-badge'),
        this.__clubInfo.appendChild(this._clubInfoBadge.getRootElement()),
        e.appendChild(this.__clubInfo),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTCurrencyNavigationBarView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      (this.__currencies = null),
      (this.__currencyCoins = null),
      (this.__currencyPoints = null),
      (this.__clubInfo = null),
      (this.__clubInfoEst = null),
      (this.__clubInfoName = null),
      this._clubInfoBadge.destroy();
  }),
  (UTCurrencyNavigationBarView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTCurrencyNavigationBarView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTCurrencyNavigationBarView.prototype.setCurrency = function setCurrency(e) {
    switch (e.type) {
      case enums.Currency.COINS:
        this.__currencyCoins.textContent = services.Localization.localizeNumber(
          e.amount
        );
        break;
      case enums.Currency.POINTS:
        this.__currencyPoints.textContent = services.Localization.localizeNumber(
          e.amount
        );
    }
  }),
  (UTCurrencyNavigationBarView.prototype.setCurrencies = function setCurrencies(
    e
  ) {
    utils.JS.valToArray(e).forEach(this.setCurrency, this);
  }),
  (UTCurrencyNavigationBarView.prototype.displayCurrencies = function displayCurrencies(
    e
  ) {
    DOMKit.toggleDisplayStyle(this.__currencies, e);
  }),
  (UTCurrencyNavigationBarView.prototype.displayClubInfo = function displayClubInfo(
    e
  ) {
    DOMKit.toggleDisplayStyle(this.__clubInfo, e);
  }),
  (UTCurrencyNavigationBarView.prototype.setClubInfo = function setClubInfo(
    e,
    t
  ) {
    (this.__clubInfoName.textContent = e),
      (this.__clubInfoEst.textContent = services.Localization.localizeEstablishedDate(
        new Date(t * MS_PER_SECOND)
      ));
  }),
  (UTCurrencyNavigationBarView.prototype.setClubBadge = function setClubBadge(
    e
  ) {
    var t = utils.AssetLocator.getImage(
      utils.AssetLocator.IMAGE_TYPE_BADGE_DARK,
      enums.Year.ASSET,
      e
    );
    this._clubInfoBadge.setResource(t, !0).observe(this, function(e, t) {
      if ((e.unobserve(this), !t)) {
        var i = utils.AssetLocator.getImage(
          utils.AssetLocator.IMAGE_TYPE_BADGE_DARK,
          enums.Year.ASSET,
          utils.AssetLocator.ASSET_ID_DEFAULT
        );
        this._clubInfoBadge.setResource(i);
      }
    });
  }),
  (UTCurrencyNavigationBarView.prototype._tapDetected = function _tapDetected(
    e
  ) {
    this.superclass(),
      this.__currencyPoints.contains(e.target) &&
        this._triggerActions(enums.Event.TAP);
  }),
  utils.JS.inherits(UTGameFlowNavigationController, UTNavigationController),
  (UTGameFlowNavigationController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      this._itemInfoSwitchButton.init(),
      this._itemInfoSwitchButton.setInteractionState(!0),
      this._itemInfoSwitchButton.addTarget(
        this,
        this._eItemInfoSwitchButtonSelected,
        enums.Event.TAP
      ),
      this._settingsNavButton.init(),
      this._settingsNavButton.addClass('settings-btn'),
      this._settingsNavButton.setInteractionState(!0),
      this._settingsNavButton.addTarget(
        this,
        this._eSettingsButtonSelected,
        enums.Event.TAP
      ),
      this._navigationBar.isSubClass(UTCurrencyNavigationBarView) &&
        (this._navigationBar.displayCurrencies(!1),
        this._navigationBar.displayClubInfo(!1)));
  }),
  (UTGameFlowNavigationController.prototype.dealloc = function dealloc() {
    this._settingsNavButton.dealloc(), this.superclass();
  }),
  (UTGameFlowNavigationController.prototype.getRootPrimaryNavigationItem = function getRootPrimaryNavigationItem() {
    return this._settingsNavButton;
  }),
  (UTGameFlowNavigationController.prototype.getSecondaryNavigationItem = function getSecondaryNavigationItem() {
    if (this._currentController) {
      var e = this._currentController.getNavigationItem();
      if (utils.JS.isValid(e)) return e;
    }
    return this._itemInfoSwitchButton;
  }),
  (UTGameFlowNavigationController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this.setNavigationStyle(
        isPhone()
          ? enums.UINavigationBarStyle.DEFAULT
          : enums.UINavigationBarStyle.LANDSCAPE
      ),
      this._itemInfoSwitchButton.setCurrentState(
        this._itemInfoStateViewModel.getState()
      );
    var e = getDefaultDispatcher(),
      t = services.User.getUser();
    if (
      (e.addObserver(enums.Notification.APP_RESUME, this, this._nAppResumed),
      e.addObserver(
        enums.Notification.UI_ITEM_STATE_CHANGE,
        this,
        this._nItemStateChanged
      ),
      t && this._navigationBar.isSubClass(UTCurrencyNavigationBarView))
    ) {
      var i = t.getSelectedPersona().getCurrentClub();
      this._navigationBar.setCurrencies(t.getCurrencies()),
        this._navigationBar.displayCurrencies(!0),
        i && this.setClubInfo(i.name, i.established, i.assetId);
      var s = this._hasOriginStoreAccess();
      this._navigationBar.toggleClass('currency-purchase', s),
        s &&
          (utils.OriginStore.onCheckout.observe(this, this._eOriginCheckout),
          this._navigationBar.addTarget(
            this,
            this._eNavigationBarTapped,
            enums.Event.TAP
          )),
        e.addObserver(
          enums.Notification.ITEM_ACTIVATE,
          this,
          this._nItemActivated
        ),
        e.addObserver(
          enums.Notification.USER_CURRENCY_UPDATE,
          this,
          this._nCurrencyUpdated
        );
    }
  }),
  (UTGameFlowNavigationController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      utils.OriginStore.onCheckout.unobserve(this),
      this._navigationBar.removeTarget(
        this,
        this._eNavigationBarTapped,
        enums.Event.TAP
      );
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.APP_RESUME, this),
      e.removeObserver(enums.Notification.ITEM_ACTIVATE, this),
      e.removeObserver(enums.Notification.UI_ITEM_STATE_CHANGE, this),
      e.removeObserver(enums.Notification.USER_CURRENCY_UPDATE, this);
  }),
  (UTGameFlowNavigationController.prototype.toggleFUTLogo = function toggleFUTLogo(
    e
  ) {
    this._navigationBar.toggleClass('has-fut-logo', e);
  }),
  (UTGameFlowNavigationController.prototype.setClubInfo = function setClubInfo(
    e,
    t,
    i
  ) {
    this._navigationBar instanceof UTCurrencyNavigationBarView &&
      (this._navigationBar.setClubInfo(e, parseInt(t, 10)),
      this._navigationBar.setClubBadge(i || 0),
      this._navigationBar.displayClubInfo(!0));
  }),
  (UTGameFlowNavigationController.prototype._hasOriginStoreAccess = function _hasOriginStoreAccess() {
    var e = services.User.getUser(),
      t = gConfigurationModel.getConfigArray(
        models.ConfigurationModel.KEY_BANNED_COUNTRIES
      );
    return (
      utils.OriginStore.storeLoaded &&
      services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.MTX_ENABLED
      ) &&
      e.getSelectedPersona().isPC &&
      0 < t.length &&
      -1 === t.indexOf(e.country)
    );
  }),
  (UTGameFlowNavigationController.prototype._eSettingsButtonSelected = function _eSettingsButtonSelected(
    e,
    t,
    i
  ) {
    var s = new UTAppSettingsViewController();
    s.init(), this.pushViewController(s);
  }),
  (UTGameFlowNavigationController.prototype._eItemInfoSwitchButtonSelected = function _eItemInfoSwitchButtonSelected(
    e,
    t,
    i
  ) {
    this._itemInfoSwitchButton.setCurrentState(
      this._itemInfoStateViewModel.nextState()
    );
  }),
  (UTGameFlowNavigationController.prototype._eNavigationBarTapped = function _eNavigationBarTapped(
    e,
    t,
    i
  ) {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Configuration.requestSettingsData().observe(
        this,
        function _onRequestSettingsComplete(e, t) {
          e.unobserve(this);
          var i = this._hasOriginStoreAccess();
          this._navigationBar.toggleClass('currency-purchase', i),
            i && utils.OriginStore.openStore(),
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      );
  }),
  (UTGameFlowNavigationController.prototype._eOriginCheckout = function _eOriginCheckout(
    e,
    t
  ) {
    var s = services.User.getUser();
    services.User.getUser().getSelectedPersona().isPC
      ? services.MTX.checkForOutstandingTransactions().observe(
          this,
          function _onMTXCheck(e, t) {
            e.unobserve(this);
            var i = t.success;
            (s.hasUnrecoveredFIFAPointsTransaction = !i),
              i
                ? services.User.requestCurrencies()
                : services.Notification.queue([
                    services.Localization.localize(
                      'popup.error.mobile.invalidTransactionState'
                    ),
                    enums.UINotificationType.NEGATIVE
                  ]);
          }
        )
      : services.User.requestCurrencies();
  }),
  (UTGameFlowNavigationController.prototype._nItemActivated = function _nItemActivated(
    e,
    t,
    i
  ) {
    var s = services.User.getUser();
    if (s && this._navigationBar.isSubClass(UTCurrencyNavigationBarView)) {
      var n = s.getSelectedPersona().getCurrentClub();
      n && this._navigationBar.setClubBadge(n.assetId);
    }
  }),
  (UTGameFlowNavigationController.prototype._nCurrencyUpdated = function _nCurrencyUpdated(
    e,
    t,
    i
  ) {
    this._navigationBar.setCurrency(i.currency),
      this._navigationBar.displayCurrencies(!0);
  }),
  (UTGameFlowNavigationController.prototype._nAppResumed = function _nAppResumed(
    e,
    t,
    i
  ) {
    !this.getCurrentController().isSubClass(
      UTShowOffSquadOverviewViewController
    ) &&
      services.Squad.hasExternalShowOffSquad() &&
      (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Squad.loadShowOffSquad().observe(this, function(e, t) {
        if ((e.unobserve(this), t.success)) {
          var i = isPhone()
            ? new UTShowOffSquadOverviewViewController()
            : new UTShowOffSquadSplitViewController();
          i.initWithSquad(t.data.showOff.squad), this.pushViewController(i);
        } else services.Notification.queue([services.Localization.localize('squads.showoff.error.load'), enums.UINotificationType.NEGATIVE]), NetworkErrorManager.handleStatus(t.status);
        gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
      }));
  }),
  (UTGameFlowNavigationController.prototype._nItemStateChanged = function _nItemStateChanged(
    e,
    t,
    i
  ) {
    t !== this._itemInfoStateViewModel &&
      this._itemInfoSwitchButton.setCurrentState(i.state);
  }),
  utils.JS.inherits(UTSBCChallengeTileView, UTTileView),
  (UTSBCChallengeTileView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('col-1-2'),
        e.classList.add('sbc-challenge'),
        e.classList.add('sbc-tile');
      var t = document.createElement('div');
      t.classList.add('loadingSpinner'), e.appendChild(t);
      var i = document.createElement('header');
      (this.__tileTitle = document.createElement('h1')),
        this.__tileTitle.classList.add('tileTitle'),
        i.appendChild(this.__tileTitle),
        (this.__subTitle = document.createElement('h2')),
        this.__subTitle.classList.add('subTitle'),
        i.appendChild(this.__subTitle),
        e.appendChild(i),
        (this.__tileContent = document.createElement('div')),
        this.__tileContent.classList.add('tileContent'),
        (this._challengeImage = new UTImageView()),
        this._challengeImage.getRootElement().classList.add('challengeImage'),
        this.__tileContent.appendChild(this._challengeImage.getRootElement()),
        e.appendChild(this.__tileContent),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCChallengeTileView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__tileTitle = null),
      (this.__subTitle = null),
      (this.__tileContent = null),
      this._challengeImage.destroy();
  }),
  (UTSBCChallengeTileView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCChallengeTileView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCChallengeTileView.prototype.dealloc = function dealloc() {
    this.superclass(), (this._data = null);
  }),
  (UTSBCChallengeTileView.prototype.setData = function setData(e) {
    (this._data = e), this.setInteractionState(!e.isCompleted());
  }),
  (UTSBCChallengeTileView.prototype.getData = function getData() {
    return this._data;
  }),
  (UTSBCChallengeTileView.prototype.render = function render() {
    if (utils.JS.isValid(this._data)) {
      var e = this._data.isInProgress(),
        t = this._data.isCompleted();
      this.toggleClass('complete', t),
        this.toggleClass('in-progress', e),
        this._challengeImage
          .setResource(
            utils.AssetLocator.getSBCImageURI(
              utils.AssetLocator.IMAGE_TYPE_SBC_CHALLENGES,
              enums.Year.ASSET,
              this._data.assetId
            ),
            !0
          )
          .observe(this, function onResourceLoaded(e, t, i, s) {
            e.unobserve(this),
              t ||
                this._challengeImage.setLocalResource(
                  'images/sbc/sbcDefaultChallengeTile.png'
                );
          }),
        this._data.hasNotStarted()
          ? (this.__subTitle.textContent = services.Localization.localize(
              'sbc.challenge.status.notStarted'
            ))
          : e
          ? (this.__subTitle.textContent = services.Localization.localize(
              'sbc.challenge.status.inProgress'
            ))
          : t &&
            (this.__subTitle.textContent = services.Localization.localize(
              'sbc.challenge.status.complete'
            ));
    }
  }),
  utils.JS.inherits(UTSBCFavoriteButtonControl, UTToggleButtonControl),
  (UTSBCFavoriteButtonControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      e.classList.add('btn-favorite'),
        (this.__text = document.createElement('span')),
        this.__text.classList.add('btn-text'),
        e.appendChild(this.__text),
        (this.__subtext = document.createElement('span')),
        this.__subtext.classList.add('btn-subtext'),
        e.appendChild(this.__subtext),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCFavoriteButtonControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__text = null),
      (this.__subtext = null);
  }),
  (UTSBCFavoriteButtonControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCFavoriteButtonControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCFavoriteButtonControl.prototype.setData = function setData(e) {
    (this._data = e), this.setChecked(this._data.isFavourite);
  }),
  (UTSBCFavoriteButtonControl.prototype._tapDetected = function _tapDetected(
    e
  ) {
    this.superclass(e),
      e.stopPropagation(),
      this._data.isComplete() ||
        this._isToggling ||
        ((this._isToggling = !0),
        this.setChecked(!this._data.isFavourite),
        this._watchSBCSet(),
        setTimeout(
          function() {
            utils.JS.isValid(this._isToggling) && (this._isToggling = !1);
          }.bind(this),
          500
        ));
  }),
  (UTSBCFavoriteButtonControl.prototype._watchSBCSet = function _watchSBCSet() {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.SBC.toggleFavouriteTag(this._data).observe(
        this,
        function _onSBCSetWatched(e, t) {
          e.unobserve(this);
          var i,
            s = this._data.isFavourite ? '2' : '0';
          t.success
            ? services.Notification.queue([
                services.Localization.localize(
                  'notification.sbcSets.successfulTag' + s
                ),
                enums.UINotificationType.NEUTRAL
              ])
            : ((i =
                t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED
                  ? 'sbc.notification.disabled'
                  : 'notification.sbcSets.failedToTag' + s),
              services.Notification.queue([
                services.Localization.localize(i),
                enums.UINotificationType.NEGATIVE
              ])),
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      );
  }),
  utils.JS.inherits(UTRewardsFooterView, UTView),
  (UTRewardsFooterView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('ul');
      e.classList.add('rewards-footer'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTRewardsFooterView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTRewardsFooterView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTRewardsFooterView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTRewardsFooterView.prototype.dealloc = function dealloc() {
    for (; 0 < this._rewards.length; ) this._rewards.pop().dealloc();
    this.superclass();
  }),
  (UTRewardsFooterView.prototype.setData = function setData(e) {
    for (this._data = e; 0 < this._rewards.length; )
      this._rewards.pop().destroy();
    utils.JS.isValid(this._data) &&
      (this._rewards = this._data.map(function(e) {
        return new UTRewardView(e);
      }, this));
  }),
  (UTRewardsFooterView.prototype.getData = function getData() {
    return this._data;
  }),
  (UTRewardsFooterView.prototype.render = function render(i) {
    utils.JS.isValid(this._data) &&
      (this.getRoot().empty(),
      this._rewards.forEach(function(e, t) {
        e.init(),
          e.render(i),
          this.getRootElement().appendChild(e.getRootElement());
      }, this));
  }),
  utils.JS.inherits(UTSBCSetInfoView, UTView),
  (UTSBCSetInfoView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('sbc-set-info'),
        e.classList.add('sbc-tile'),
        (this.__status = document.createElement('h1')),
        this.__status.classList.add('status-header'),
        e.appendChild(this.__status),
        (this._progressBar = new UTProgressBarView()),
        this._progressBar.getRootElement().classList.add('rounded'),
        this._progressBar.getRootElement().classList.add('large'),
        e.appendChild(this._progressBar.getRootElement()),
        (this.__rewardsHeader = document.createElement('h1')),
        this.__rewardsHeader.classList.add('rewards-header'),
        e.appendChild(this.__rewardsHeader),
        (this._rewards = new UTRewardsFooterView()),
        e.appendChild(this._rewards.getRootElement());
      var t = document.createElement('div');
      t.classList.add('sbc-status-container'),
        (this.__repeatableStatus = document.createElement('div')),
        this.__repeatableStatus.classList.add('repeat'),
        this.__repeatableStatus.classList.add('status'),
        (this.__repeatableLabel = document.createElement('span')),
        this.__repeatableLabel.classList.add('label'),
        this.__repeatableStatus.appendChild(this.__repeatableLabel),
        t.appendChild(this.__repeatableStatus),
        (this.__expireStatus = document.createElement('div')),
        this.__expireStatus.classList.add('expires'),
        this.__expireStatus.classList.add('status'),
        (this._expiresLabel = new UTSBCTimerLabelView()),
        this.__expireStatus.appendChild(this._expiresLabel.getRootElement()),
        t.appendChild(this.__expireStatus),
        (this._watchBtn = new UTSBCFavoriteButtonControl()),
        t.appendChild(this._watchBtn.getRootElement()),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCSetInfoView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__status = null),
      this._progressBar.destroy(),
      (this.__rewardsHeader = null),
      this._rewards.destroy(),
      (this.__repeatableStatus = null),
      (this.__repeatableLabel = null),
      (this.__expireStatus = null),
      this._expiresLabel.destroy(),
      this._watchBtn.destroy();
  }),
  (UTSBCSetInfoView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCSetInfoView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCSetInfoView.prototype.init = function init() {
    this.superclass(),
      this.setInteractionState(!0),
      this._watchBtn.init(),
      (this.__status.textContent = services.Localization.localize(
        'sbc.status.title'
      )),
      (this.__rewardsHeader.textContent = services.Localization.localize(
        'sbc.rewards.title'
      ));
  }),
  (UTSBCSetInfoView.prototype.setProgress = function setProgress(e, t) {
    var i = services.Localization.localize('sbc.sets.challengesComplete', [
      e,
      t
    ]);
    this._progressBar.setProgress((e / t) * 100),
      this._progressBar.setProgressLabel(i);
  }),
  (UTSBCSetInfoView.prototype.setRewards = function setRewards(e) {
    this._rewards.setData(e), this._rewards.render();
  }),
  (UTSBCSetInfoView.prototype.setRepeatableState = function setRepeatableState(
    e
  ) {
    (this.__repeatableLabel.textContent = services.Localization.localize(
      e ? 'tile.sbcSets.repeatable' : 'tile.sbcSets.nonrepeatable'
    )),
      DOMKit.toggleClass(this.__repeatableStatus, 'no-repeat', !e);
  }),
  (UTSBCSetInfoView.prototype.setExpiryState = function setExpiryState(e) {
    DOMKit.toggleClass(this.__expireStatus, 'no-expire', !e),
      this._expiresLabel.setExpiryState(e),
      this._expiresLabel.start();
  }),
  (UTSBCSetInfoView.prototype.setEndTime = function setEndTime(e) {
    this._expiresLabel.setEndTime(e);
  }),
  (UTSBCSetInfoView.prototype.setFavoriteState = function setFavoriteState(e) {
    this._watchBtn.setData(e);
  }),
  utils.JS.inherits(UTSBCChallengesView, UTTargetActionView),
  (UTSBCChallengesView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('SBCChallenges'),
        (this._setInfo = new UTSBCSetInfoView()),
        this._setInfo.getRootElement().classList.add('setInfoTile'),
        e.appendChild(this._setInfo.getRootElement()),
        (this.__challenges = document.createElement('div')),
        this.__challenges.classList.add('grid'),
        this.__challenges.classList.add('challenges'),
        e.appendChild(this.__challenges),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCChallengesView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._setInfo.destroy(),
      (this.__challenges = null);
  }),
  (UTSBCChallengesView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCChallengesView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCChallengesView.Event = {
    CHALLENGE_SELECTED: 'UTSBCChallengesView.Event.CHALLENGE_SELECTED'
  }),
  (UTSBCChallengesView.prototype.init = function init() {
    this.superclass(), this._setInfo.init();
  }),
  (UTSBCChallengesView.prototype.dealloc = function dealloc() {
    this.clearChallenges(), this.superclass();
  }),
  (UTSBCChallengesView.prototype.clearChallenges = function clearChallenges() {
    this._challengeTiles.forEach(function(e) {
      e.dealloc();
    }),
      (this._challengeTiles = []);
  }),
  (UTSBCChallengesView.prototype.setSBCSet = function setSBCSet(e) {
    this._setInfo.setProgress(e.challengesCompletedCount, e.challengesCount),
      this._setInfo.setRewards(e.awards),
      this._setInfo.setRepeatableState(e.repeatable),
      this._setInfo.setEndTime(e.endTime || 0),
      this._setInfo.setExpiryState(!e.notExpirable),
      this._setInfo.setFavoriteState(e),
      this.clearChallenges(),
      e.challenges.forEach(this._generateChallengeTile, this),
      this.layoutSubviews();
  }),
  (UTSBCChallengesView.prototype._generateChallengeTile = function _generateChallengeTile(
    e
  ) {
    var t = new UTSBCChallengeTileView();
    t.init(),
      t.setData(e),
      t.setTitle(e.name),
      t.render(),
      t.addTarget(this, this._eChallengeTileSelected, enums.Event.TAP),
      this.addSubview(t, this.__challenges),
      this._challengeTiles.push(t);
  }),
  (UTSBCChallengesView.prototype._eChallengeTileSelected = function _eChallengeTileSelected(
    e,
    t,
    i
  ) {
    this._triggerActions(UTSBCChallengesView.Event.CHALLENGE_SELECTED, {
      challengeId: e.getData().id
    });
  }),
  utils.JS.inherits(UTSBCChallengesViewController, UTViewController),
  (UTSBCChallengesViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      this.getView().addTarget(
        this,
        this._eChallengeSelected,
        UTSBCChallengesView.Event.CHALLENGE_SELECTED
      ));
  }),
  (UTSBCChallengesViewController.prototype.initWithSBCSet = function initWithSBCSet(
    e
  ) {
    this.initialized || ((this._set = e), this.init());
  }),
  (UTSBCChallengesViewController.prototype.dealloc = function dealloc() {
    (this._set = null),
      this._requirementsOverlay &&
        (this._requirementsOverlay.dealloc(),
        (this._requirementsOverlay = null)),
      this.superclass();
  }),
  (UTSBCChallengesViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSBCChallengesView();
  }),
  (UTSBCChallengesViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'SBC - Challenges';
  }),
  (UTSBCChallengesViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._set && this.getView().setSBCSet(this._set),
      this.getNavigationController().setNavigationTitle(this._set.name);
  }),
  (UTSBCChallengesViewController.prototype._eChallengeSelected = function _eChallengeSelected(
    e,
    t,
    i
  ) {
    var o;

    function _onChallengeLoaded(e, t) {
      if ((e.unobserve(this), t.success)) {
        var i = this.getNavigationController();
        if (i) {
          var s = isPhone()
            ? new UTSBCSquadOverviewViewController()
            : new UTSBCSquadSplitViewController();
          s.initWithSBCSet(this._set, o.id), i.pushViewController(s);
        }
      } else {
        var n;
        (n =
          o.hasExpired(!0) || (o.hasNotStarted() && o.hasExpired())
            ? 'notification.sbcChallenges.expired'
            : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED
            ? 'sbc.notification.disabled'
            : 'notification.sbcChallenges.failedToStart'),
          services.Notification.queue([
            services.Localization.localize(n),
            enums.UINotificationType.NEGATIVE
          ]);
      }
      gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
    }
    i.challengeId &&
      ((o = this._set.challenges.get(i.challengeId)).hasNotStarted()
        ? ((this._requirementsOverlay = new controllers.views.popups.SBCChallenge(
            this._set,
            i.challengeId,
            !1
          )),
          this._requirementsOverlay.onExit.observe(
            this,
            function _onOverlayDismissed(e) {
              e.unobserve(this), (this._requirementsOverlay = null);
            }
          ),
          this._requirementsOverlay.onConfirm.observe(
            this,
            function _onStartChallenge(e) {
              e.unobserve(this),
                this._requirementsOverlay.closePopup(),
                (this._requirementsOverlay = null),
                gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
                services.SBC.loadChallenge(o).observe(this, _onChallengeLoaded),
                TelemetryManager.trackEvent(
                  TelemetryManager.Sections.SBC,
                  TelemetryManager.Categories.BUTTON_PRESS,
                  'SBC - Start Challenge'
                );
            }
          ),
          gPopupClickShield.setActivePopup(this._requirementsOverlay))
        : (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
          services.SBC.loadChallenge(o).observe(this, _onChallengeLoaded)));
  }),
  utils.JS.inherits(UTSBCChallengeRequirementsView, UTView),
  (UTSBCChallengeRequirementsView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('rewards-container'),
        (this.__requirementsTitle = document.createElement('h3')),
        this.__requirementsTitle.classList.add('title'),
        e.appendChild(this.__requirementsTitle),
        (this.__requirements = document.createElement('ul')),
        this.__requirements.classList.add('sbc-requirements-checklist'),
        e.appendChild(this.__requirements),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCChallengeRequirementsView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__requirementsTitle = null),
      (this.__requirements = null);
  }),
  (UTSBCChallengeRequirementsView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCChallengeRequirementsView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCChallengeRequirementsView.prototype._generateRequirementListRow = function _generateRequirementListRow(
    e,
    t,
    i
  ) {
    var s = document.createElement('li');
    return (
      (s.textContent = e),
      t && s.classList.add('complete'),
      utils.JS.isNumber(i) &&
        -1 < i &&
        s.setAttribute('data-after', '(' + i + ')'),
      s
    );
  }),
  (UTSBCChallengeRequirementsView.prototype.renderChallengeRequirements = function renderChallengeRequirements(
    s,
    n
  ) {
    requestAnimationFrame(
      function _renderChallengeRequirements() {
        (this.__requirementsTitle.textContent = services.Localization.localize(
          'sbc.requirements.challenge'
        )),
          DOMKit.empty(this.__requirements);
        var e = s.squad,
          t = s.eligibilityRequirements.map(function(e) {
            return this._generateRequirementListRow(
              e.buildString(),
              s.isRequirementMet(e),
              s.getRequirementCounter(e)
            );
          }, this);
        if (e && n) {
          var i =
            services.Localization.localize('sbc.requirements.numplayers') +
            ' ' +
            e.getNumOfRequiredPlayers();
          t.push(this._generateRequirementListRow(i, e.isSquadFull()));
        }
        t.forEach(function(e) {
          this.__requirements.appendChild(e);
        }, this);
      }.bind(this)
    );
  }),
  utils.JS.inherits(UTSBCChallengeDetailsView, UTView),
  (UTSBCChallengeDetailsView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('challenge-details'),
        (this.__description = document.createElement('div')),
        this.__description.classList.add('description'),
        e.appendChild(this.__description),
        (this._requirements = new UTSBCChallengeRequirementsView()),
        e.appendChild(this._requirements.getRootElement());
      var t = document.createElement('div');
      t.classList.add('ut-sbc-rewards-carousel'),
        t.classList.add('rewards-container'),
        (this.__rewardsTitle = document.createElement('span')),
        this.__rewardsTitle.classList.add('title'),
        t.appendChild(this.__rewardsTitle),
        (this._rewardsCarousel = new UTRewardsCarouselView()),
        t.appendChild(this._rewardsCarousel.getRootElement()),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCChallengeDetailsView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__description = null),
      this._requirements.destroy(),
      (this.__rewardsTitle = null),
      this._rewardsCarousel.destroy();
  }),
  (UTSBCChallengeDetailsView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCChallengeDetailsView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCChallengeDetailsView.prototype.render = function render(e, t, i) {
    this.__description.textContent = e.description;
    var s = 0 < t.length ? t : e.awards,
      n = 0 < t.length ? 'sbc.rewards.title' : 'sbc.rewards.challenge';
    (this.__rewardsTitle.textContent = services.Localization.localize(n)),
      this.setAwards(s),
      this._requirements.renderChallengeRequirements(e, i);
  }),
  (UTSBCChallengeDetailsView.prototype.setAwards = function setAwards(e) {
    this._rewardsCarousel.isOn() || this._rewardsCarousel.setupRewards(e);
  }),
  (UTSBCChallengeDetailsView.prototype.setChallengeRequirements = function setChallengeRequirements(
    e,
    t
  ) {
    this._requirements.renderChallengeRequirements(e, t);
  }),
  utils.JS.inherits(UTSBCRequirementsPopupView, UTView),
  (UTSBCRequirementsPopupView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-sbc-requirements-popup');
      var t = document.createElement('header');
      (this.__title = document.createElement('h1')),
        t.appendChild(this.__title),
        (this._exitBtn = new UTImageButtonControl()),
        this._exitBtn.getRootElement().classList.add('exit-btn'),
        t.appendChild(this._exitBtn.getRootElement()),
        e.appendChild(t),
        (this._challengeDetails = new UTSBCChallengeDetailsView()),
        e.appendChild(this._challengeDetails.getRootElement());
      var i = document.createElement('footer');
      (this._btnConfirm = new UTStandardButtonControl()),
        this._btnConfirm.getRootElement().classList.add('call-to-action'),
        i.appendChild(this._btnConfirm.getRootElement()),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCRequirementsPopupView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      this._exitBtn.destroy(),
      this._challengeDetails.destroy(),
      this._btnConfirm.destroy();
  }),
  (UTSBCRequirementsPopupView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCRequirementsPopupView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCRequirementsPopupView.prototype.init = function init() {
    this.superclass(),
      this._btnConfirm.init(),
      this._btnConfirm.addTarget(
        this.onConfirm,
        this.onConfirm.notify,
        enums.Event.TAP
      ),
      this._exitBtn.init(),
      this._exitBtn.addTarget(
        this.onCancel,
        this.onCancel.notify,
        enums.Event.TAP
      );
  }),
  (UTSBCRequirementsPopupView.prototype.dealloc = function dealloc() {
    this.onCancel.dealloc(), this.onConfirm.dealloc(), this.superclass();
  }),
  (UTSBCRequirementsPopupView.prototype.render = function render(e, t, i) {
    (this.__title.textContent = e.name), this._challengeDetails.render(e, t, i);
    var s = 'sbc.overlay.btn.startChallenge';
    e.isInProgress() &&
      ((s = 'sbc.overlay.btn.submitChallenge'),
      e.hasExpired(!0)
        ? ((s = 'sbc.sets.expired'), this._btnConfirm.setInteractionState(!1))
        : e.meetsRequirements() || this._btnConfirm.setInteractionState(!1)),
      this._btnConfirm.setText(services.Localization.localize(s));
  }),
  (controllers.views.popups.SBCChallenge = function UTSBCRequirementsPopupViewController(
    e,
    t,
    i
  ) {
    controllers.views.popups.BasePopup.call(this),
      (this._challenge = e.challenges.get(t)),
      Object.defineProperty(this, '_challenge', {
        writable: !1
      }),
      (this._setAwards = e.hidden ? e.awards : []),
      Object.defineProperty(this, '_setAwards', {
        writable: !1
      }),
      (this._showCustomReq = i),
      Object.defineProperty(this, '_showCustomReq', {
        writable: !1
      }),
      (this.onConfirm = new UTObservable()),
      Object.defineProperty(this, 'onConfirm', {
        writable: !1
      });
  }),
  utils.JS.inherits(
    controllers.views.popups.SBCChallenge,
    controllers.views.popups.BasePopup
  ),
  (controllers.views.popups.SBCChallenge.prototype.init = function init() {
    var e = this.getView();
    e.onCancel.observe(this, this.closePopup.bind(this)),
      e.onConfirm.observe(this, this.onConfirmChallenge.bind(this)),
      this.superclass();
  }),
  (controllers.views.popups.SBCChallenge.prototype.dealloc = function dealloc() {
    this.onConfirm.dealloc(), (this.onConfirm = null), this.superclass();
  }),
  (controllers.views.popups.SBCChallenge.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this.getView().render(
        this._challenge,
        this._setAwards,
        this._showCustomReq
      );
  }),
  (controllers.views.popups.SBCChallenge.prototype.onConfirmChallenge = function onConfirmChallenge() {
    this.onConfirm.notify(this._challenge), this.onExit.notify();
  }),
  (controllers.views.popups.SBCChallenge.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSBCRequirementsPopupView();
  }),
  (controllers.views.popups.SBCRewards = function SBCRewardsPopupController(
    e,
    t
  ) {
    controllers.views.popups.InGameRewards.call(this),
      (this._challenge = e),
      (this._set = t);
  }),
  utils.JS.inherits(
    controllers.views.popups.SBCRewards,
    controllers.views.popups.InGameRewards
  ),
  (controllers.views.popups.SBCRewards.prototype.init = function init() {
    this.setButtonText(services.Localization.localize('sbc.rewards.claim')),
      0 < this._challenge.awards.length
        ? (this.setTitle(this._challenge.name),
          this.setDescription(this._challenge.description))
        : utils.JS.isValid(this._set) &&
          (this.setTitle(this._set.name),
          this.setDescription(this._set.description)),
      services.PIN.sendData(enums.PIN.EVENT.PAGE_VIEW, {
        type: PIN_PAGEVIEW_EVT_TYPE,
        pgid: 'SBC - Rewards Overlay'
      }),
      this.superclass();
  }),
  (controllers.views.popups.SBCRewards.prototype.dealloc = function dealloc() {
    (this._challenge = null), (this._set = null), this.superclass();
  }),
  (controllers.views.popups.SBCRewards.prototype.viewDidAppear = function viewDidAppear() {
    var e;
    0 < this._challenge.awards.length
      ? (e = this._challenge.awards)
      : utils.JS.isValid(this._set)
      ? (e = this._set.awards)
      : utils.Debug.Assert(
          !1,
          "controllers.views.popups.SBCRewards::viewDidAppear. We don't have rewards to display."
        ),
      this.getView().setupRewardsCarousel(e),
      this._checkRewards(e),
      (this._rewardsCarouselSetup = !0),
      this.superclass();
  }),
  (controllers.views.popups.SBCRewards.prototype._eBtnTapped = function _eBtnTapped(
    e,
    t,
    i
  ) {
    if (
      (TelemetryManager.trackEvent(
        TelemetryManager.Sections.SBC,
        TelemetryManager.Categories.BUTTON_PRESS,
        'SBC - Claim Rewards'
      ),
      utils.JS.isValid(this._set) && !this._set.hidden)
    ) {
      this._checkRewards(this._set.awards);
      var s = this.getView(),
        n = this._set.awards;
      s.hide(),
        s.resetRewardsCarousel(),
        this.setTitle(this._set.name),
        this.setDescription(this._set.description),
        (this._set = null),
        setTimeout(
          function() {
            s.show(), s.setupRewardsCarousel(n);
          }.bind(this),
          400
        );
    } else this.superclass();
  }),
  utils.JS.inherits(UTSBCConfirmSubmissionPopupView, UTView),
  (UTSBCConfirmSubmissionPopupView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-popup'), e.classList.add('ut-sbc-submit');
      var t = document.createElement('header');
      (this.__titleText = document.createElement('h1')),
        t.appendChild(this.__titleText),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('bodySection'),
        (this.__warningText = document.createElement('p')),
        i.appendChild(this.__warningText),
        (this.__playerList = document.createElement('ul')),
        i.appendChild(this.__playerList),
        e.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('ut-button-group'),
        (this._btnSubmit = new UTGroupButtonControl()),
        s.appendChild(this._btnSubmit.getRootElement()),
        (this._btnSubmitIgnore = new UTGroupButtonControl()),
        s.appendChild(this._btnSubmitIgnore.getRootElement()),
        (this._btnCancel = new UTGroupButtonControl()),
        s.appendChild(this._btnCancel.getRootElement()),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCConfirmSubmissionPopupView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__titleText = null),
      (this.__warningText = null),
      (this.__playerList = null),
      this._btnSubmit.destroy(),
      this._btnSubmitIgnore.destroy(),
      this._btnCancel.destroy();
  }),
  (UTSBCConfirmSubmissionPopupView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCConfirmSubmissionPopupView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCConfirmSubmissionPopupView.prototype.init = function init() {
    this.superclass(),
      this._btnSubmit.init(),
      this._btnSubmitIgnore.init(),
      this._btnCancel.init(),
      this.render();
  }),
  (UTSBCConfirmSubmissionPopupView.prototype.setPlayers = function setPlayers(
    e
  ) {
    this._players = e;
  }),
  (UTSBCConfirmSubmissionPopupView.prototype.dealloc = function dealloc() {
    this.superclass(), (this._players = []);
  }),
  (UTSBCConfirmSubmissionPopupView.prototype.render = function render() {
    (this.__titleText.textContent = services.Localization.localize(
      'sbc.popup.submitchallenge.title'
    )),
      (this.__warningText.textContent = services.Localization.localize(
        'sbc.popup.submitChallenge.message'
      )),
      this._btnSubmit.setText(
        services.Localization.localize('sbc.popup.submitchallenge.submit')
      ),
      this._btnSubmitIgnore.setText(
        services.Localization.localize('sbc.popup.submitchallenge.submitignore')
      ),
      this._btnCancel.setText(
        services.Localization.localize('common.dialog.cancel')
      ),
      this._players.forEach(function(e) {
        this._addPlayer(e);
      }, this);
  }),
  (UTSBCConfirmSubmissionPopupView.prototype.getSubmitBtn = function getSubmitBtn() {
    return this._btnSubmit;
  }),
  (UTSBCConfirmSubmissionPopupView.prototype.getSubmitIgnoreBtn = function getSubmitIgnoreBtn() {
    return this._btnSubmitIgnore;
  }),
  (UTSBCConfirmSubmissionPopupView.prototype.getCancelBtn = function getCancelBtn() {
    return this._btnCancel;
  }),
  (UTSBCConfirmSubmissionPopupView.prototype._addPlayer = function _addPlayer(
    e
  ) {
    var t = document.createElement('li');
    (t.textContent = e), this.__playerList.appendChild(t);
  }),
  utils.JS.inherits(
    UTSBCConfirmSubmissionPopupViewController,
    controllers.views.popups.BasePopup
  ),
  (UTSBCConfirmSubmissionPopupViewController.SUBMIT_EVENTS = {
    SUBMIT: 'submit',
    SUBMIT_IGNORE: 'submit-ignore'
  }),
  (UTSBCConfirmSubmissionPopupViewController.prototype.init = function init() {
    this.superclass();
    var e = this.getView();
    e.getSubmitBtn().addTarget(this, this._eSubmitBtnTapped, enums.Event.TAP),
      e
        .getSubmitIgnoreBtn()
        .addTarget(this, this._eSubmitIgnoreBtnTapped, enums.Event.TAP),
      e.getCancelBtn().addTarget(this, this._eCancelBtnTapped, enums.Event.TAP);
  }),
  (UTSBCConfirmSubmissionPopupViewController.prototype.reset = function reset() {
    this.playerNames = [];
  }),
  (UTSBCConfirmSubmissionPopupViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSBCConfirmSubmissionPopupView(this.playerNames);
  }),
  (UTSBCConfirmSubmissionPopupViewController.prototype._eSubmitBtnTapped = function _eSubmitBtnTapped(
    e,
    t,
    i
  ) {
    this.onExit.notify(
      UTSBCConfirmSubmissionPopupViewController.SUBMIT_EVENTS.SUBMIT
    );
  }),
  (UTSBCConfirmSubmissionPopupViewController.prototype._eSubmitIgnoreBtnTapped = function _eSubmitIgnoreBtnTapped(
    e,
    t,
    i
  ) {
    this.onExit.notify(
      UTSBCConfirmSubmissionPopupViewController.SUBMIT_EVENTS.SUBMIT_IGNORE
    );
  }),
  (UTSBCConfirmSubmissionPopupViewController.prototype._eCancelBtnTapped = function _eCancelBtnTapped(
    e,
    t,
    i
  ) {
    this.closePopup();
  }),
  utils.JS.inherits(UTSBCSummaryProgressView, UTToggleButtonControl),
  (UTSBCSummaryProgressView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('interactive'),
        e.classList.add('ut-squad-summary-info'),
        (this.__requirementsLabel = document.createElement('span')),
        this.__requirementsLabel.classList.add('ut-squad-summary-label'),
        e.appendChild(this.__requirementsLabel);
      var t = document.createElement('div');
      t.classList.add('progress-bar-container'),
        (this._progressBar = new UTProgressBarView()),
        this._progressBar.getRootElement().classList.add('rounded'),
        t.appendChild(this._progressBar.getRootElement()),
        (this.__progressCount = document.createElement('span')),
        this.__progressCount.classList.add('ut-squad-summary-value--action'),
        this.__progressCount.classList.add('ut-squad-summary-value'),
        t.appendChild(this.__progressCount),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCSummaryProgressView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__requirementsLabel = null),
      this._progressBar.destroy(),
      (this.__progressCount = null);
  }),
  (UTSBCSummaryProgressView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCSummaryProgressView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCSummaryProgressView.prototype.init = function init() {
    this.superclass(),
      this.setAllText(
        services.Localization.localize('sbc.requirements.challenge.condensed')
      ),
      (this.__progressCount.textContent = '0/0'),
      this.setInteractionState(!0);
  }),
  (UTSBCSummaryProgressView.prototype.setProgress = function setProgress(e, t) {
    (this.__progressCount.textContent = e + '/' + t),
      this._progressBar.setProgress((e / t) * 100);
  }),
  (UTSBCSummaryProgressView.prototype.setText = function setText(e) {
    this.__requirementsLabel.textContent = e;
  }),
  utils.JS.inherits(UTSBCSquadSummaryBannerView, UTSquadSummaryBannerView),
  (UTSBCSquadSummaryBannerView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squad-summary'),
        (this._reqProgress = new UTSBCSummaryProgressView()),
        e.appendChild(this._reqProgress.getRootElement()),
        (this._squadStats = new components.SquadStats()),
        e.appendChild(this._squadStats.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCSquadSummaryBannerView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._reqProgress.destroy(),
      this._squadStats.destroy();
  }),
  (UTSBCSquadSummaryBannerView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCSquadSummaryBannerView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCSquadSummaryBannerView.prototype.init = function init() {
    this.superclass(),
      this._reqProgress.init(),
      this._reqProgress.addTarget(
        this,
        function() {
          this.onRequirementsSelect.notify();
        },
        enums.Event.TAP
      );
  }),
  (UTSBCSquadSummaryBannerView.prototype.dealloc = function dealloc() {
    this.onRequirementsSelect.dealloc(), this.superclass();
  }),
  (UTSBCSquadSummaryBannerView.prototype.setChallengeProgress = function setChallengeProgress(
    e,
    t
  ) {
    this._reqProgress.setProgress(e, t);
  }),
  (UTSBCSquadSummaryBannerView.prototype.getRequirementsButton = function getRequirementsButton() {
    return this._reqProgress;
  }),
  utils.JS.inherits(UTSBCSquadOverviewView, UTSquadOverviewView),
  (UTSBCSquadOverviewView.prototype.init = function init() {
    this.superclass(), (this.renderManager = !1);
  }),
  (UTSBCSquadOverviewView.prototype.getSummaryPanel = function getSummaryPanel() {
    return (
      this._summaryPanel ||
        ((this._summaryPanel = new UTSBCSquadSummaryBannerView()),
        this._summaryPanel.onRequirementsSelect.observe(
          this,
          this._eRequirementsSelected
        )),
      this._summaryPanel
    );
  }),
  (UTSBCSquadOverviewView.prototype.setSquad = function setSquad(e) {
    this._summaryPanel &&
      this._summaryPanel.setChemistryAndRating(e.getChemistry(), e.getRating());
    var t = this.getSelectedSlot(),
      i = t ? t.getIndex() : -1,
      s = this.renderManager
        ? e.getFieldPlayers().concat(e.getManager())
        : e.getFieldPlayers();
    this._pitch.setSlots(s, this.renderConcepts, this.renderChemistry),
      this._pitch.setLockedSlots(e.getAllBrickIndices()),
      this._leftDock &&
        this._leftDock.setSlots(
          e.getSubPlayers().concat(e.getReservePlayers()),
          this.renderConcepts
        ),
      (this._slotViews = this._getDropSlotViews()),
      this._slotViews.forEach(function(e) {
        e.addTarget(this, this._eSlotTapped, enums.Event.TAP),
          e.addTarget(this, this._eSlotMouseEnter, enums.Event.MOUSEENTER),
          e.addTarget(this, this._eSlotMouseLeave, enums.Event.MOUSELEAVE);
      }, this),
      0 <= i && this.selectSlot(i),
      this.setFormation(e.getFormation(), e.getChemistryLinks());
  }),
  (UTSBCSquadOverviewView.prototype._setDockLocalization = function _setDockLocalization() {
    this._leftDock &&
      this._leftDock.setInstructions(
        services.Localization.localize('dock.label.workAreaInstructions')
      );
  }),
  (UTSBCSquadOverviewView.prototype._initTabViews = function _initTabViews() {
    (this._rightTab = new UTSquadTabButtonControl()),
      (this._leftDock = new UTSquadSlotDockView()),
      (this._leftTab = new UTSquadTabButtonControl()),
      this._leftTab.init(),
      this._rightTab.init(),
      this._leftDock.init(),
      this._leftTab.addTarget(
        this,
        this._onDockBtnPressed.bind(
          this,
          this._leftDock,
          this._leftTab,
          this._dropAreas.LEFT_DOCK,
          this._rightDock
        ),
        enums.Event.TAP
      ),
      this._leftTab.setText(
        services.Localization.localize('dock.label.workArea')
      ),
      this._leftTab.assignLeft(),
      this._rightTab.setText(
        services.Localization.localize('sbc.squad.button.submit')
      ),
      this._rightTab.setType(enums.UISquadTabTypes.ACTION_TAB),
      this._rightTab.assignRight(),
      DOMKit.addClass(
        this._rightTab.getRootElement(),
        enums.UIButtonState.CALL_TO_ACTION
      ),
      this._leftTab.setType(enums.UISquadTabTypes.WORK_AREA),
      this._leftDock.setIsSBC(!0),
      this._setDockLocalization(),
      this.addSubview(this._leftTab, this.__draggableArea),
      this.addSubview(this._rightTab, this.__draggableArea),
      this.addSubview(this._leftDock, this.__draggableArea),
      this.layoutSubviews();
  }),
  (UTSBCSquadOverviewView.prototype.updateChallenge = function updateChallenge(
    e
  ) {
    this.getSummaryPanel().setChallengeProgress(
      e.getNumberOfRequirementsMet(),
      e.eligibilityRequirements.length + 1
    ),
      this._rightTab &&
        (this._rightTab.setText(
          services.Localization.localize(
            e.hasExpired(!0) ? 'sbc.sets.expired' : 'sbc.squad.button.submit'
          )
        ),
        this._rightTab.setInteractionState(e.canSubmit()));
  }),
  (UTSBCSquadOverviewView.prototype._eRequirementsSelected = function _eRequirementsSelected(
    e
  ) {
    this._triggerActions('sbcRequirementSelect');
  }),
  (UTSBCSquadOverviewView.prototype.getRequirementsButton = function getRequirementsButton() {
    return this._summaryPanel.getRequirementsButton();
  }),
  utils.JS.inherits(UTSBCItemWarningViewModel, UTObject),
  (UTSBCItemWarningViewModel.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this._squads = []),
      this._players.clear(),
      this.cancelRequests();
  }),
  (UTSBCItemWarningViewModel.prototype.cancelRequests = function cancelRequests() {
    0 < this._requests.length &&
      (this._requests.forEach(function(e) {
        e.clearObservers();
      }, this),
      (this._requests = []));
  }),
  (UTSBCItemWarningViewModel.prototype._completeRequest = function _completeRequest(
    e,
    t
  ) {
    e.unobserve(this);
    var i = this._requests.indexOf(e);
    0 <= i && this._requests.splice(i, 1);
  }),
  (UTSBCItemWarningViewModel.prototype.getPlayerSquadStrings = function getPlayerSquadStrings(
    e
  ) {
    var i = new UTObservable();
    return (
      this._setSquadObjects(e),
      this._setPlayers().observe(this, function onGetPlayerStringsComplete(
        e,
        t
      ) {
        e.unobserve(this);
        var s = new transferobjects.ServiceResponse();
        (s.status = t.status),
          (s.success = t.success),
          (s.data = {
            names: []
          }),
          this._squads.forEach(function(i) {
            i.itemIds.forEach(function(e) {
              var t = this.getPlayer(e);
              t &&
                s.data.names.push(
                  t.getStaticData().name + ' - [' + i.name + ']'
                );
            }, this);
          }, this),
          i.notify(s);
      }),
      i
    );
  }),
  (UTSBCItemWarningViewModel.prototype._setSquadObjects = function _setSquadObjects(
    e
  ) {
    this._squads = e;
  }),
  (UTSBCItemWarningViewModel.prototype._setPlayers = function _setPlayers() {
    var i = new UTObservable();
    if (this._squads) {
      var t = [];
      return (
        this._squads.forEach(function(e) {
          t = t.concat(e.itemIds);
        }),
        this._requestPlayers(t).observe(this, function onGetPlayersComplete(
          e,
          t
        ) {
          e.unobserve(this),
            t.success &&
              t.data.items.forEach(function(e) {
                this._players.set(e.id, e);
              }, this),
            i.notify(t);
        }),
        i
      );
    }
  }),
  (UTSBCItemWarningViewModel.prototype.getPlayer = function getPlayer(e) {
    return this._players.get(e);
  }),
  (UTSBCItemWarningViewModel.prototype._requestPlayers = function _requestPlayers(
    e
  ) {
    var t = services.Item.requestItemsById(e);
    return this._requests.push(t.observe(this, this._completeRequest)), t;
  }),
  NamespaceManager.Register('controllers.squads'),
  utils.JS.inherits(
    UTSBCSquadOverviewViewController,
    UTSquadOverviewViewController
  ),
  (UTSBCSquadOverviewViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      isPhone() &&
        e.addTarget(this, this._eRequirementsSelected, 'sbcRequirementSelect'),
        e.getRightTab().addTarget(this, this._eSubmitSelected, enums.Event.TAP);
    }
  }),
  (UTSBCSquadOverviewViewController.prototype.initWithSBCSet = function initWithSBCSet(
    e,
    t
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.SBCSet,
        'Initialization expected an SBC Set entity.'
      ),
      utils.Debug.Assert(
        utils.JS.isNumber(t) && 0 <= t,
        'Initialization expected a valid SBC Challenge ID.'
      ),
      (this._set = e),
      (this._challenge = e.getChallenge(t)),
      utils.Debug.Assert(
        this._challenge instanceof entities.SBCChallenge,
        'Initialization expected a valid SBC Challenge.'
      ),
      this.initWithSquad(this._challenge.squad));
  }),
  (UTSBCSquadOverviewViewController.prototype.dealloc = function dealloc() {
    this._challenge.onSave.unobserve(this),
      this._viewmodel.dealloc(),
      this.superclass(),
      (this._set = null),
      (this._challenge = null),
      (this._viewmodel = null);
  }),
  (UTSBCSquadOverviewViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSBCSquadOverviewView();
  }),
  (UTSBCSquadOverviewViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'SBC - Squad';
  }),
  (UTSBCSquadOverviewViewController.prototype._trackPageView = function _trackPageView() {
    TelemetryManager.trackPage(
      TelemetryManager.Sections.SBC,
      this._getTelemetryId()
    );
  }),
  (UTSBCSquadOverviewViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._challenge ? this._challenge.name : '';
  }),
  (UTSBCSquadOverviewViewController.prototype._pushSquadToView = function _pushSquadToView(
    e
  ) {
    this.superclass(e);
    var t = this.getView();
    t.setMode(enums.SquadPitchModes.SBC);
    var i = this._set ? this._set.getChallenge(this._challenge.id) : null;
    i && t.updateChallenge(i);
  }),
  (UTSBCSquadOverviewViewController.prototype._submitChallenge = function _submitChallenge(
    e
  ) {
    if (this._challenge.canSubmit())
      if (
        !services.Configuration.getFeatureSetting(
          enums.ServerFeature.SBC_ALLOW_UNTRADEABLE
        ) &&
        this._challenge.hasUntradeableItems()
      )
        utils.PopupManager.ShowAlert(
          utils.PopupManager.Alerts.SBC_UNTRADEABLE_NOT_ALLOWED
        );
      else if (utils.JS.isValid(this._set)) {
        TelemetryManager.trackEvent(
          TelemetryManager.Sections.SBC,
          TelemetryManager.Categories.BUTTON_PRESS,
          'SBC - Submit Challenge'
        );
        var t = utils.JS.isBoolean(e)
          ? e
          : gUserSettingsModel.getSBCValidationSkip();
        services.SBC.submitChallenge(this._challenge, this._set, t).observe(
          this,
          this._onChallengeSubmitted
        );
      } else
        services.Notification.queue([
          services.Localization.localize(
            'notification.sbcChallenges.failedToSubmit'
          ),
          enums.UINotificationType.NEGATIVE
        ]);
    else
      utils.PopupManager.ShowAlert(
        utils.PopupManager.Alerts.SBC_INELIGIBLE_SQUAD
      );
  }),
  (UTSBCSquadOverviewViewController.prototype._onPopupClosed = function _onPopupClosed(
    e,
    t
  ) {
    e.unobserve(this),
      t &&
        t !== enums.UIDialogOptions.CANCEL &&
        (t ===
          UTSBCConfirmSubmissionPopupViewController.SUBMIT_EVENTS
            .SUBMIT_IGNORE && gUserSettingsModel.setSBCValidationSkip(!0),
        this._submitChallenge(!0));
  }),
  (UTSBCSquadOverviewViewController.prototype._onChallengeSubmitted = function _onChallengeSubmitted(
    e,
    t
  ) {
    e.unobserve(this),
      t.success
        ? (gPopupClickShield.setActivePopup(
            new controllers.views.popups.SBCRewards(
              this._challenge,
              t.data.setCompleted ? this._set : null
            )
          ),
          this.getNavigationController().popViewController())
        : 0 < t.data.itemViolations.length
        ? this._viewmodel
            .getPlayerSquadStrings(t.data.itemViolations)
            .observe(this, function(e, t) {
              e.unobserve(this);
              var i = new UTSBCConfirmSubmissionPopupViewController(
                t.data.names
              );
              i.onExit.observe(this, this._onPopupClosed),
                gPopupClickShield.setActivePopup(i);
            })
        : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED
        ? (services.Notification.queue([
            services.Localization.localize('sbc.notification.disabled'),
            enums.UINotificationType.NEGATIVE
          ]),
          getAppMain()
            .getRootViewController()
            .showGameView())
        : this._challenge.hasExpired(!0)
        ? (services.Notification.queue([
            services.Localization.localize(
              'notification.sbcChallenges.expired'
            ),
            enums.UINotificationType.NEGATIVE
          ]),
          this.getNavigationController().popToRootViewController())
        : services.Notification.queue([
            services.Localization.localize(
              'notification.sbcChallenges.failedToSubmit'
            ),
            enums.UINotificationType.NEGATIVE
          ]);
  }),
  (UTSBCSquadOverviewViewController.prototype._gotoDetailsView = function _gotoDetailsView(
    e
  ) {
    var t = this.getNavigationController();
    if (t) {
      var i = new controllers.navigation.SquadItemDetails();
      this._challenge ? i.initWithSBCChallenge(this._challenge, e) : i.init(),
        i.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY),
        t.pushViewController(i);
    }
  }),
  (UTSBCSquadOverviewViewController.prototype._eItemSwap = function _eItemSwap(
    e,
    t,
    i
  ) {
    var s = utils.JS.isNumber(i.swapFrom) ? i.swapFrom : -1,
      n = utils.JS.isNumber(i.swapTo) ? i.swapTo : -1;
    this._squad.swapPlayersByIndex(s, n),
      this._set &&
        services.SBC.saveChallenge(this._challenge).observe(
          this,
          this._onSBCSaveComplete
        ),
      this.onItemSwap.notify(s, n),
      this.getView().updatePitchChemistry(
        this._squad.getFieldPlayers(),
        this._squad.getChemistryLinks()
      );
  }),
  (UTSBCSquadOverviewViewController.prototype._onSBCSaveComplete = function _onSBCSaveComplete(
    e,
    t
  ) {
    if ((e.unobserve(this), t.success))
      this.getView().updateChallenge(this._challenge);
    else {
      var i = 'notification.sbcChallenges.failedToSave';
      this._challenge.hasExpired(!0)
        ? (i = 'notification.sbcChallenges.expired')
        : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
          (i = 'sbc.notification.disabled'),
        services.Notification.queue([
          services.Localization.localize(i),
          enums.UINotificationType.NEGATIVE
        ]);
    }
  }),
  (UTSBCSquadOverviewViewController.prototype._eRequirementsSelected = function _eRequirementsSelected(
    e,
    t,
    i
  ) {
    var s = new controllers.views.popups.SBCChallenge(
      this._set,
      this._challenge.id,
      !0
    );
    s.onExit.observe(this, this._ePopupClosed),
      s.onConfirm.observe(this, this._ePopupSubmitSelected),
      gPopupClickShield.setActivePopup(s);
  }),
  (UTSBCSquadOverviewViewController.prototype._ePopupSubmitSelected = function _ePopupSubmitSelected(
    e
  ) {
    this._submitChallenge();
  }),
  (UTSBCSquadOverviewViewController.prototype._ePopupClosed = function _ePopupClosed(
    e
  ) {
    this.getView()
      .getRequirementsButton()
      .setChecked(!1);
  }),
  (UTSBCSquadOverviewViewController.prototype._eSubmitSelected = function _eSubmitSelected(
    e,
    t,
    i
  ) {
    this._submitChallenge();
  }),
  (UTSBCSquadOverviewViewController.prototype._eSquadDataChange = function _eSquadDataChange(
    e,
    t
  ) {
    this._squad && this._pushSquadToView(this._squad);
  }),
  (UTSBCSquadOverviewViewController.prototype._eDetailsButtonSelected = function _eDetailsButtonSelected(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController();
    if (s) {
      var n = new UTSBCSquadDetailPanelViewController();
      n.initWithSBCSet(this._set, this._challenge.id),
        s.pushViewController(n, !0);
    }
  }),
  (UTSBCSquadOverviewViewController.prototype._nInfoStateChanged = function _nInfoStateChanged(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.SBC,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Item Info Switch Button - SBC Squad'
    );
  }),
  utils.JS.inherits(UTSBCSquadDetailPanelView, UTView),
  (UTSBCSquadDetailPanelView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('SquadPanel'),
        e.classList.add('SBCSquadPanel'),
        (this.__content = document.createElement('div')),
        this.__content.classList.add('challenge-content'),
        (this._challengeDetails = new UTSBCChallengeDetailsView()),
        this.__content.appendChild(this._challengeDetails.getRootElement()),
        (this._btnExchange = new UTStandardButtonControl()),
        this._btnExchange.getRootElement().classList.add('call-to-action'),
        this.__content.appendChild(this._btnExchange.getRootElement()),
        (this._btnSquadBuilder = new UTStandardButtonControl()),
        this.__content.appendChild(this._btnSquadBuilder.getRootElement()),
        (this._btnClearSquad = new UTStandardButtonControl()),
        this.__content.appendChild(this._btnClearSquad.getRootElement()),
        e.appendChild(this.__content),
        (this.__statusContainer = document.createElement('footer')),
        this.__statusContainer.classList.add('sbc-status-container'),
        (this.__repeatableStatus = document.createElement('div')),
        this.__repeatableStatus.classList.add('repeat'),
        this.__repeatableStatus.classList.add('status'),
        (this.__repeatableLabel = document.createElement('span')),
        this.__repeatableLabel.classList.add('label'),
        this.__repeatableLabel.appendChild(
          document.createTextNode('Repeatable')
        ),
        this.__repeatableStatus.appendChild(this.__repeatableLabel),
        this.__statusContainer.appendChild(this.__repeatableStatus),
        (this.__expireStatus = document.createElement('div')),
        this.__expireStatus.classList.add('expires'),
        this.__expireStatus.classList.add('status'),
        (this._expiresLabel = new UTSBCTimerLabelView()),
        this.__expireStatus.appendChild(this._expiresLabel.getRootElement()),
        this.__statusContainer.appendChild(this.__expireStatus),
        e.appendChild(this.__statusContainer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCSquadDetailPanelView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__content = null),
      this._challengeDetails.destroy(),
      this._btnExchange.destroy(),
      this._btnSquadBuilder.destroy(),
      this._btnClearSquad.destroy(),
      (this.__statusContainer = null),
      (this.__repeatableStatus = null),
      (this.__repeatableLabel = null),
      (this.__expireStatus = null),
      this._expiresLabel.destroy();
  }),
  (UTSBCSquadDetailPanelView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCSquadDetailPanelView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCSquadDetailPanelView.prototype.init = function init() {
    this.superclass(),
      this._btnSquadBuilder.init(),
      this._btnClearSquad.init(),
      this._btnExchange.init(),
      this._btnSquadBuilder.setText(
        services.Localization.localize('infopanel.button.squadbuilder')
      ),
      this._btnClearSquad.setText(
        services.Localization.localize('infopanel.button.clear')
      ),
      this._btnExchange.setText(
        services.Localization.localize('sbc.overlay.btn.submitChallenge')
      ),
      isPhone() && this._btnExchange.hide();
  }),
  (UTSBCSquadDetailPanelView.prototype.setAwards = function setAwards(e) {
    this._challengeDetails.setAwards(e);
  }),
  (UTSBCSquadDetailPanelView.prototype.setChallengeRequirements = function setRequirements(
    e,
    t
  ) {
    this._challengeDetails.setChallengeRequirements(e, t);
  }),
  (UTSBCSquadDetailPanelView.prototype.render = function render(e, t, i) {
    this._challengeDetails.render(e, t, i),
      this._expiresLabel.setEndTime(e.endTime || 0),
      this._expiresLabel.setExpiryState(!e.notExpirable),
      this._expiresLabel.start(),
      e.repeatable
        ? (this.__repeatableLabel.textContent = services.Localization.localize(
            'tile.sbcSets.repeatable'
          ))
        : (DOMKit.addClass(this.__repeatableStatus, 'no-repeat'),
          (this.__repeatableLabel.textContent = services.Localization.localize(
            'sbc.status.notrepeatable'
          ))),
      DOMKit.toggleClass(this.__expireStatus, 'no-expire', e.notExpirable);
  }),
  (UTSBCSquadDetailPanelView.prototype.toggleExchangeState = function toggleExchangeState(
    e
  ) {
    this._btnExchange.setInteractionState(e);
  }),
  (UTSBCSquadDetailPanelView.prototype.toggleClearState = function toggleClearState(
    e
  ) {
    this._btnClearSquad.setInteractionState(e);
  }),
  (UTSBCSquadDetailPanelView.prototype.getSquadBuilderButton = function getSquadBuilderButton() {
    return this._btnSquadBuilder;
  }),
  (UTSBCSquadDetailPanelView.prototype.getClearSquadButton = function getClearSquadButton() {
    return this._btnClearSquad;
  }),
  (UTSBCSquadDetailPanelView.prototype.getExchangeButton = function getExchangeButton() {
    return this._btnExchange;
  }),
  NamespaceManager.Register('interfaces'),
  (interfaces.SquadBuildingChallengeActionDelegate = function() {}),
  (interfaces.SquadBuildingChallengeActionDelegate.prototype.conforms = function conforms(
    e
  ) {}),
  (interfaces.SquadBuildingChallengeActionDelegate.prototype.submitChallenge = function submitChallenge(
    e,
    t,
    i
  ) {}),
  NamespaceManager.Register('controllers.squads'),
  utils.JS.inherits(UTSBCSquadDetailPanelViewController, UTViewController),
  (UTSBCSquadDetailPanelViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = this.getView();
      e
        .getSquadBuilderButton()
        .addTarget(this, this._eSquadBuilderSelected, enums.Event.TAP),
        e
          .getClearSquadButton()
          .addTarget(this, this._eSquadClearSelected, enums.Event.TAP),
        e
          .getExchangeButton()
          .addTarget(this, this._eSquadExchange, enums.Event.TAP);
    }
  }),
  (UTSBCSquadDetailPanelViewController.prototype.initWithSBCSet = function initWithChallenge(
    e,
    t
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.SBCSet,
        'Initialization expected an SBC set entity.'
      ),
      utils.Debug.Assert(
        utils.JS.isNumber(t),
        'Initialization expected Challenge ID to be a number.'
      ),
      (this._set = e),
      (this._challenge = e.challenges.get(t)),
      utils.Debug.Assert(
        this._challenge instanceof entities.SBCChallenge,
        'Initialization expected a valid SBC challenge.'
      ),
      this._challenge.onDataChange.observe(this, this._eChallengeUpdated),
      this._challenge.onSave.observe(this, this._eChallengeUpdated),
      this.getView().toggleExchangeState(this._challenge.canSubmit()),
      this.getView().toggleClearState(!this._challenge.squad.isSquadEmpty()),
      this.init());
  }),
  (UTSBCSquadDetailPanelViewController.prototype.dealloc = function dealloc() {
    this._challenge.onDataChange.unobserve(this),
      this._challenge.onSave.unobserve(this),
      this._viewmodel.dealloc(),
      this.superclass(),
      (this._set = null),
      (this._challenge = null),
      (this._viewmodel = null);
  }),
  (UTSBCSquadDetailPanelViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSBCSquadDetailPanelView();
  }),
  (UTSBCSquadDetailPanelViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'SBC Squad Details';
  }),
  (UTSBCSquadDetailPanelViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._challenge ? this._challenge.name : '';
  }),
  (UTSBCSquadDetailPanelViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this.getView().render(
        this._challenge,
        this._set.hidden ? this._set.awards : [],
        !0
      );
  }),
  (UTSBCSquadDetailPanelViewController.prototype.setSquadBuildingChallengeActionDelegate = function setSquadBuildingChallengeActionDelegate(
    e
  ) {
    e.conforms(interfaces.SquadBuildingChallengeActionDelegate) &&
      (this._challengeActionDelegate = e);
  }),
  (UTSBCSquadDetailPanelViewController.prototype._eChallengeUpdated = function _eChallengeUpdated(
    e,
    t
  ) {
    var i = this.getView();
    i.setChallengeRequirements(this._challenge, !0),
      i.toggleExchangeState(this._challenge.canSubmit()),
      i.toggleClearState(
        this._challenge.squad && !this._challenge.squad.isSquadEmpty()
      );
  }),
  (UTSBCSquadDetailPanelViewController.prototype._eSquadBuilderSelected = function _eSquadBuilderSelected(
    e,
    t,
    i
  ) {
    var s = new UTSquadBuilderViewController();
    this._challenge ? s.initWithChallenge(this._challenge) : s.init(),
      this.getNavigationController().pushViewController(s, !0);
  }),
  (UTSBCSquadDetailPanelViewController.prototype._eSquadClearSelected = function _eSquadClearSelected(
    e,
    t,
    i
  ) {
    utils.PopupManager.ShowConfirmation(
      utils.PopupManager.Confirmations.CLEAR_SQUAD,
      null,
      function _onClearConfirm() {
        this._challenge.squad.removeAllItems() &&
          services.SBC.saveChallenge(this._challenge).observe(
            this,
            this._onSBCSaveComplete
          );
      }.bind(this)
    );
  }),
  (UTSBCSquadDetailPanelViewController.prototype._onSBCSaveComplete = function _onSBCSaveComplete(
    e,
    t
  ) {
    if ((e.unobserve(this), t.success))
      services.Notification.queue([
        services.Localization.localize('notification.squad.cleared'),
        enums.UINotificationType.NEUTRAL
      ]);
    else {
      var i = 'notification.sbcChallenges.failedToSave';
      this._challenge.hasExpired(!0)
        ? (i = 'notification.sbcChallenges.expired')
        : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
          (i = 'sbc.notification.disabled'),
        services.Notification.queue([
          services.Localization.localize(i),
          enums.UINotificationType.NEGATIVE
        ]);
    }
  }),
  (UTSBCSquadDetailPanelViewController.prototype._onPopupClosed = function _onPopupClosed(
    e,
    t
  ) {
    e.unobserve(this),
      t &&
        t !== enums.UIDialogOptions.CANCEL &&
        (t ===
          UTSBCConfirmSubmissionPopupViewController.SUBMIT_EVENTS
            .SUBMIT_IGNORE && gUserSettingsModel.setSBCValidationSkip(!0),
        this._submitChallenge(!0));
  }),
  (UTSBCSquadDetailPanelViewController.prototype._submitChallenge = function _submitChallenge(
    e
  ) {
    if (this._challenge.canSubmit())
      if (
        !services.Configuration.getFeatureSetting(
          enums.ServerFeature.SBC_ALLOW_UNTRADEABLE
        ) &&
        this._challenge.hasUntradeableItems()
      )
        utils.PopupManager.ShowAlert(
          utils.PopupManager.Alerts.SBC_UNTRADEABLE_NOT_ALLOWED
        );
      else if (utils.JS.isValid(this._set)) {
        TelemetryManager.trackEvent(
          TelemetryManager.Sections.SBC,
          TelemetryManager.Categories.BUTTON_PRESS,
          'SBC - Submit Challenge'
        );
        var t = utils.JS.isBoolean(e)
          ? e
          : gUserSettingsModel.getSBCValidationSkip();
        services.SBC.submitChallenge(this._challenge, this._set, t).observe(
          this,
          this._onChallengeSubmitted
        );
      } else
        services.Notification.queue([
          services.Localization.localize(
            'notification.sbcChallenges.failedToSubmit'
          ),
          enums.UINotificationType.NEGATIVE
        ]);
    else
      utils.PopupManager.ShowAlert(
        utils.PopupManager.Alerts.SBC_INELIGIBLE_SQUAD
      );
  }),
  (UTSBCSquadDetailPanelViewController.prototype._onChallengeSubmitted = function _onChallengeSubmitted(
    e,
    t
  ) {
    e.unobserve(this),
      t.success
        ? (gPopupClickShield.setActivePopup(
            new controllers.views.popups.SBCRewards(
              this._challenge,
              t.data.setCompleted ? this._set : null
            )
          ),
          this.getNavigationController().popViewController())
        : 0 < t.data.itemViolations.length
        ? this._viewmodel
            .getPlayerSquadStrings(t.data.itemViolations)
            .observe(this, function(e, t) {
              e.unobserve(this);
              var i = new UTSBCConfirmSubmissionPopupViewController(
                t.data.names
              );
              i.onExit.observe(this, this._onPopupClosed),
                gPopupClickShield.setActivePopup(i);
            })
        : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED
        ? (services.Notification.queue([
            services.Localization.localize('sbc.notification.disabled'),
            enums.UINotificationType.NEGATIVE
          ]),
          getAppMain()
            .getRootViewController()
            .showGameView())
        : this._challenge.hasExpired(!0)
        ? (services.Notification.queue([
            services.Localization.localize(
              'notification.sbcChallenges.expired'
            ),
            enums.UINotificationType.NEGATIVE
          ]),
          this.getNavigationController().popToRootViewController())
        : services.Notification.queue([
            services.Localization.localize(
              'notification.sbcChallenges.failedToSubmit'
            ),
            enums.UINotificationType.NEGATIVE
          ]);
  }),
  (UTSBCSquadDetailPanelViewController.prototype._eSquadExchange = function _eSquadExchange(
    e,
    t,
    i
  ) {
    this._challengeActionDelegate
      ? this._challengeActionDelegate.submitChallenge(
          this,
          this._challenge,
          this._set
        )
      : this._submitChallenge();
  }),
  NamespaceManager.Register('controllers.navigation'),
  (controllers.navigation.SBCSquadDetails = function SBCSquadDetailNavigationController(
    e,
    t
  ) {
    UTNavigationController.call(this, e, t),
      (this.onSearchStarted = new UTObservable()),
      Object.defineProperty(this, 'onSearchStarted', {
        writable: !1
      }),
      (this.onSearchEnded = new UTObservable()),
      Object.defineProperty(this, 'onSearchEnded', {
        writable: !1
      });
  }),
  utils.JS.inherits(
    controllers.navigation.SBCSquadDetails,
    UTNavigationController
  ),
  (controllers.navigation.SBCSquadDetails.prototype.initWithSBCSet = function initWithSBCSet(
    e,
    t
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.SBCSet,
        'Initialization expected an SBC set entity.'
      ),
      utils.Debug.Assert(
        utils.JS.isNumber(t),
        'Initialization expected Challenge ID to be a number.'
      ),
      this.getRootController().initWithSBCSet(e, t),
      this.init());
  }),
  (controllers.navigation.SBCSquadDetails.prototype.dealloc = function dealloc() {
    this.onSearchStarted.dealloc(),
      this.onSearchEnded.dealloc(),
      this.superclass(),
      (this.onSearchStarted = null),
      (this.onSearchEnded = null);
  }),
  (controllers.navigation.SBCSquadDetails.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new UTSBCSquadDetailPanelViewController();
  }),
  (controllers.navigation.SBCSquadDetails.prototype.didPush = function didPush(
    e
  ) {
    e === this.getRootController() && this.setNavigationVisibility(!1, !0);
  }),
  (controllers.navigation.SBCSquadDetails.prototype.setSquadBuildingChallengeActionDelegate = function setSquadBuildingChallengeActionDelegate(
    e
  ) {
    this.getRootController().setSquadBuildingChallengeActionDelegate(e);
  }),
  (controllers.navigation.SBCSquadDetails.prototype._showController = function _showController(
    e,
    t
  ) {
    this.superclass(e, t),
      e instanceof UTSquadBuilderViewController
        ? this.onSearchStarted.notify()
        : e instanceof UTSBCSquadDetailPanelViewController &&
          this.onSearchEnded.notify();
  }),
  utils.JS.inherits(UTSBCRequirementsNotificationView, UTTargetActionView),
  (UTSBCRequirementsNotificationView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-popover--left'),
        e.classList.add('ut-popover--top'),
        e.classList.add('ut-popover'),
        (this._requirements = new UTSBCChallengeRequirementsView()),
        e.appendChild(this._requirements.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCRequirementsNotificationView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._requirements.destroy();
  }),
  (UTSBCRequirementsNotificationView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCRequirementsNotificationView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCRequirementsNotificationView.prototype.renderChallengeRequirements = function renderChallengeRequirements(
    e,
    t
  ) {
    this._requirements.renderChallengeRequirements(e, t);
  }),
  (UTSBCRequirementsNotificationView.prototype.setNotificationDisplay = function setNotificationDisplay(
    e
  ) {
    this.setInteractionState(e), this.toggleClass('show', e);
  }),
  (UTSBCRequirementsNotificationView.prototype._tapDetected = function _tapDetected(
    e
  ) {
    this.superclass(), this._triggerActions(enums.Event.TAP);
  }),
  NamespaceManager.Register('controllers.squads'),
  utils.JS.inherits(
    UTSBCRequirementsNotificationViewController,
    UTViewController
  ),
  (UTSBCRequirementsNotificationViewController.prototype.initWithSBCChallenge = function initWithSBCChallenge(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof entities.SBCChallenge,
        'Initialization expected an Challenge entity.'
      ),
      (this._challenge = e),
      this.init());
  }),
  (UTSBCRequirementsNotificationViewController.prototype.dealloc = function dealloc() {
    this.superclass(), (this._challenge = null);
  }),
  (UTSBCRequirementsNotificationViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSBCRequirementsNotificationView();
  }),
  (UTSBCRequirementsNotificationViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this.getView().renderChallengeRequirements(this._challenge, !0),
      this._challenge.onDataChange.observe(this, this._eChallengeUpdated),
      this._challenge.onSave.observe(this, this._eChallengeUpdated);
  }),
  (UTSBCRequirementsNotificationViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      this._challenge.onDataChange.unobserve(this),
      this._challenge.onSave.unobserve(this);
  }),
  (UTSBCRequirementsNotificationViewController.prototype._eChallengeUpdated = function _eChallengeUpdated(
    e,
    t
  ) {
    this.isViewDisplayed() &&
      this.getView().renderChallengeRequirements(this._challenge, !0);
  }),
  utils.JS.inherits(
    UTSBCSquadSplitViewController,
    UTBaseSquadSplitViewController
  ),
  (UTSBCSquadSplitViewController.REQUIREMENTS_AUTO_OPEN = !0),
  (UTSBCSquadSplitViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      (this._challengeDetailsController = new controllers.navigation.SBCSquadDetails()),
      this._challengeDetailsController.setNavigationStyle(
        enums.UINavigationBarStyle.SECONDARY
      ),
      this._challengeDetailsController.setSquadBuildingChallengeActionDelegate(
        this
      ),
      this._set
        ? this._challengeDetailsController.initWithSBCSet(
            this._set,
            this._challengeId
          )
        : this._challengeDetailsController.init(),
      this.addChildViewController(this._challengeDetailsController),
      this._challengeDetailsController.onSearchStarted.observe(
        this,
        this._eSearchStarted
      ),
      this._challengeDetailsController.onSearchEnded.observe(
        this,
        this._eSearchEnded
      ));
  }),
  (UTSBCSquadSplitViewController.prototype.initWithSBCSet = function initWithSBCSet(
    e,
    t
  ) {
    if (!this.initialized) {
      utils.Debug.Assert(
        e instanceof entities.SBCSet,
        'Initialization expected an SBC Set entity.'
      ),
        utils.Debug.Assert(
          utils.JS.isNumber(t) && 0 <= t,
          'Initialization expected a valid SBC Challenge ID.'
        ),
        (this._set = e),
        (this._challengeId = t);
      var i = this._set.challenges.get(this._challengeId);
      this._requirementsNotification.initWithSBCChallenge(i),
        this._requirementsNotification
          .getView()
          .addTarget(this, this._eRequirementsNotificationTap, enums.Event.TAP),
        this.initWithSquad(i.squad);
    }
  }),
  (UTSBCSquadSplitViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._challengeDetailsController.dealloc(),
      this._requirementsNotification.dealloc(),
      this._viewmodel.dealloc(),
      (this._challengeDetailsController = null),
      (this._requirementsNotification = null),
      (this._set = null),
      (this._challengeId = 0),
      (this._viewmodel = null);
  }),
  (UTSBCSquadSplitViewController.prototype._generateSquadOverview = function _generateSquadOverview() {
    var e = null;
    if (this._set) {
      (e = new UTSBCSquadOverviewViewController()).initWithSBCSet(
        this._set,
        this._challengeId
      );
      var t = e.getView();
      t
        .getRequirementsButton()
        .addTarget(this, this._eRequirementsTap, enums.Event.TAP),
        t.addSubview(this._requirementsNotification.getView()),
        t.layoutSubviews(),
        this._requirementsNotification.viewDidAppear();
    } else e = this.superclass();
    return e;
  }),
  (UTSBCSquadSplitViewController.prototype._generateItemDetails = function _generateItemDetails(
    e
  ) {
    var t = this._set.challenges.get(this._challengeId),
      i = new controllers.navigation.SquadItemDetails();
    return (
      i.onSearchStarted.observe(this, this._eSearchStarted),
      i.onSearchEnded.observe(this, this._eSearchEnded),
      t ? i.initWithSBCChallenge(t, e) : i.init(),
      i
    );
  }),
  (UTSBCSquadSplitViewController.prototype.getDefaultPanel = function getDefaultPanel() {
    return this._challengeDetailsController;
  }),
  (UTSBCSquadSplitViewController.prototype._onPopupClosed = function _onPopupClosed(
    e,
    t
  ) {
    e.unobserve(this),
      t &&
        t !== enums.UIDialogOptions.CANCEL &&
        (t ===
          UTSBCConfirmSubmissionPopupViewController.SUBMIT_EVENTS
            .SUBMIT_IGNORE && gUserSettingsModel.setSBCValidationSkip(!0),
        this._submitChallenge(!0));
  }),
  (UTSBCSquadSplitViewController.prototype._submitChallenge = function _submitChallenge(
    e
  ) {
    var t = this._set.challenges.get(this._challengeId);
    if (t.canSubmit())
      if (
        !services.Configuration.getFeatureSetting(
          enums.ServerFeature.SBC_ALLOW_UNTRADEABLE
        ) &&
        t.hasUntradeableItems()
      )
        utils.PopupManager.ShowAlert(
          utils.PopupManager.Alerts.SBC_UNTRADEABLE_NOT_ALLOWED
        );
      else if (utils.JS.isValid(this._set)) {
        TelemetryManager.trackEvent(
          TelemetryManager.Sections.SBC,
          TelemetryManager.Categories.BUTTON_PRESS,
          'SBC - Submit Challenge'
        );
        var i = utils.JS.isBoolean(e)
          ? e
          : gUserSettingsModel.getSBCValidationSkip();
        services.SBC.submitChallenge(t, this._set, i).observe(
          this,
          this._onChallengeSubmitted
        );
      } else
        services.Notification.queue([
          services.Localization.localize(
            'notification.sbcChallenges.failedToSubmit'
          ),
          enums.UINotificationType.NEGATIVE
        ]);
    else
      utils.PopupManager.ShowAlert(
        utils.PopupManager.Alerts.SBC_INELIGIBLE_SQUAD
      );
  }),
  (UTSBCSquadSplitViewController.prototype._onChallengeSubmitted = function _onChallengeSubmitted(
    e,
    t
  ) {
    e.unobserve(this);
    var i = this._set.getChallenge(this._challengeId);
    t.success
      ? (gPopupClickShield.setActivePopup(
          new controllers.views.popups.SBCRewards(
            i,
            t.data.setCompleted ? this._set : null
          )
        ),
        this.getNavigationController().popViewController())
      : 0 < t.data.itemViolations.length
      ? this._viewmodel
          .getPlayerSquadStrings(t.data.itemViolations)
          .observe(this, function(e, t) {
            e.unobserve(this);
            var i = new UTSBCConfirmSubmissionPopupViewController(t.data.names);
            i.onExit.observe(this, this._onPopupClosed),
              gPopupClickShield.setActivePopup(i);
          })
      : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED
      ? (services.Notification.queue([
          services.Localization.localize('sbc.notification.disabled'),
          enums.UINotificationType.NEGATIVE
        ]),
        getAppMain()
          .getRootViewController()
          .showGameView())
      : i.hasExpired(!0)
      ? (services.Notification.queue([
          services.Localization.localize('notification.sbcChallenges.expired'),
          enums.UINotificationType.NEGATIVE
        ]),
        this.getNavigationController().popToRootViewController())
      : services.Notification.queue([
          services.Localization.localize(
            'notification.sbcChallenges.failedToSubmit'
          ),
          enums.UINotificationType.NEGATIVE
        ]);
  }),
  (UTSBCSquadSplitViewController.prototype.submitChallenge = function submitChallenge(
    e,
    t,
    i
  ) {
    this._submitChallenge();
  }),
  (UTSBCSquadSplitViewController.prototype._eSearchStarted = function _eSearchStarted(
    e
  ) {
    (this._searchFlowActive = !0),
      UTSBCSquadSplitViewController.REQUIREMENTS_AUTO_OPEN &&
        (this._requirementsNotification.getView().setNotificationDisplay(!0),
        this._overviewController
          .getView()
          .getRequirementsButton()
          .setChecked(!0));
  }),
  (UTSBCSquadSplitViewController.prototype._eSearchEnded = function _eSearchEnded(
    e
  ) {
    (this._searchFlowActive = !1),
      this._requirementsNotification.getView().setNotificationDisplay(!1),
      this._overviewController
        .getView()
        .getRequirementsButton()
        .setChecked(!1);
  }),
  (UTSBCSquadSplitViewController.prototype._eRequirementsNotificationTap = function _eRequirementsNotificationTap(
    e,
    t,
    i
  ) {
    e.setNotificationDisplay(!1),
      this._searchFlowActive &&
        (UTSBCSquadSplitViewController.REQUIREMENTS_AUTO_OPEN = !1),
      this._overviewController
        .getView()
        .getRequirementsButton()
        .setChecked(!1);
  }),
  (UTSBCSquadSplitViewController.prototype._eRequirementsTap = function _eRequirementsTap(
    e,
    t,
    i
  ) {
    var s = e.getChecked();
    this._searchFlowActive &&
      (UTSBCSquadSplitViewController.REQUIREMENTS_AUTO_OPEN = s),
      this._requirementsNotification.getView().setNotificationDisplay(s);
  }),
  utils.JS.inherits(UTSBCTimerLabelView, UTView),
  (UTSBCTimerLabelView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('span');
      e.classList.add('label'), (this.__root = e), (this._generated = !0);
    }
  }),
  (UTSBCTimerLabelView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTSBCTimerLabelView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCTimerLabelView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCTimerLabelView.prototype.setEndTime = function setEndTime(e) {
    this._endTime = e;
  }),
  (UTSBCTimerLabelView.prototype.setExpiryState = function setExpiryState(e) {
    this._canExpire = e;
  }),
  (UTSBCTimerLabelView.prototype.start = function start(t) {
    var i = this.getRootElement();

    function onUpdate() {
      var e = this._endTime - Math.floor(Date.now() / 1e3);
      this.toggleClass('no-expire', e <= 0),
        (i.textContent =
          0 < e
            ? (e < 120 &&
                1e3 < t &&
                setTimeout(
                  function() {
                    this.start(1e3);
                  }.bind(this),
                  0
                ),
              services.Localization.localize('sbc.sets.expiresIn') +
                ': ' +
                services.Localization.localizeAuctionTimeRemaining(e))
            : services.Localization.localize('sbc.sets.expired'));
    }
    this.stop(),
      this.toggleClass('no-expire', !this._canExpire),
      this._canExpire
        ? this._endTime +
            60 *
              services.Configuration.getFeatureSetting(
                enums.ServerFeature.SBC_GRACE_PERIOD_MINUTES
              ) >
          Math.round(Date.now() / 1e3)
          ? (onUpdate.call(this),
            (this._updateInterval = setInterval(
              onUpdate.bind(this),
              utils.JS.isNumber(t) ? t : this._updateTime
            )))
          : (i.textContent = services.Localization.localize('sbc.sets.expired'))
        : (i.textContent = services.Localization.localize(
            'sbc.status.noexpire'
          ));
  }),
  (UTSBCTimerLabelView.prototype.stop = function stop() {
    clearInterval(this._updateInterval);
  }),
  utils.JS.inherits(UTSBCSetTileView, UTTileView),
  (UTSBCSetTileView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('col-1-2-lg'),
        e.classList.add('sbc-set'),
        e.classList.add('sbc-tile');
      var t = document.createElement('div');
      t.classList.add('content-container'),
        (this._setImage = new UTImageView()),
        this._setImage.getRootElement().classList.add('set-image'),
        t.appendChild(this._setImage.getRootElement());
      var i = document.createElement('div');
      i.classList.add('text-content'),
        (this.__tileTitle = document.createElement('h1')),
        this.__tileTitle.classList.add('tileHeader'),
        i.appendChild(this.__tileTitle);
      var s = document.createElement('div');
      s.classList.add('sbc-status-container'),
        (this.__repeatableStatus = document.createElement('div')),
        this.__repeatableStatus.classList.add('repeat'),
        this.__repeatableStatus.classList.add('status'),
        (this.__repeatableLabel = document.createElement('span')),
        this.__repeatableLabel.classList.add('label'),
        this.__repeatableLabel.appendChild(
          document.createTextNode('Repeatable')
        ),
        this.__repeatableStatus.appendChild(this.__repeatableLabel),
        s.appendChild(this.__repeatableStatus),
        (this.__expireStatus = document.createElement('div')),
        this.__expireStatus.classList.add('expires'),
        this.__expireStatus.classList.add('status'),
        (this._expiresLabel = new UTSBCTimerLabelView()),
        this.__expireStatus.appendChild(this._expiresLabel.getRootElement()),
        s.appendChild(this.__expireStatus),
        i.appendChild(s),
        (this.__tileContent = document.createElement('div')),
        this.__tileContent.classList.add('tileContent'),
        i.appendChild(this.__tileContent),
        (this._progressBar = new UTProgressBarView()),
        this._progressBar.getRootElement().classList.add('rounded'),
        this._progressBar.getRootElement().classList.add('sbc-set-progress'),
        this._progressBar.getRootElement().classList.add('large'),
        i.appendChild(this._progressBar.getRootElement()),
        t.appendChild(i);
      var n = document.createElement('div');
      n.classList.add('sbc-set--buttons'),
        (this._watchBtn = new UTSBCFavoriteButtonControl()),
        n.appendChild(this._watchBtn.getRootElement()),
        (this._infoBtn = new UTImageButtonControl()),
        this._infoBtn.getRootElement().classList.add('info-btn'),
        n.appendChild(this._infoBtn.getRootElement()),
        t.appendChild(n),
        e.appendChild(t);
      var o = document.createElement('div');
      o.classList.add('group-rewards'),
        (this.__rewardsHeader = document.createElement('span')),
        this.__rewardsHeader.classList.add('rewards-header'),
        o.appendChild(this.__rewardsHeader),
        (this._rewards = new UTRewardsFooterView()),
        o.appendChild(this._rewards.getRootElement()),
        e.appendChild(o),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCSetTileView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._setImage.destroy(),
      (this.__tileTitle = null),
      (this.__repeatableStatus = null),
      (this.__repeatableLabel = null),
      (this.__expireStatus = null),
      this._expiresLabel.destroy(),
      (this.__tileContent = null),
      this._progressBar.destroy(),
      this._watchBtn.destroy(),
      this._infoBtn.destroy(),
      (this.__rewardsHeader = null),
      this._rewards.destroy();
  }),
  (UTSBCSetTileView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCSetTileView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCSetTileView.Event = {
    PREVIEW_SELECTED: 'UTSBCSetTileView.Event.PREVIEW_SELECTED'
  }),
  (UTSBCSetTileView.prototype.init = function init() {
    this.superclass(), this._watchBtn.init(), this._infoBtn.init();
  }),
  (UTSBCSetTileView.prototype.dealloc = function dealloc() {
    this.superclass(), (this._data = null);
  }),
  (UTSBCSetTileView.prototype.setData = function setData(e) {
    this._rewards.setData(e.awards),
      (this._data = e),
      this.setInteractionState(!this._data.isComplete());
    var t = services.Localization.localize('sbc.sets.challengesComplete', [
      e.challengesCompletedCount,
      e.challengesCount
    ]);
    this._progressBar.setProgress(
      (e.challengesCompletedCount / e.challengesCount) * 100
    ),
      this._progressBar.setProgressLabel(t),
      this._watchBtn.setData(e),
      utils.JS.isEmpty(e.getPreviewImageId()) || this._data.isComplete()
        ? this._infoBtn.setDisplay(!1)
        : this._infoBtn.addTarget(this, this._eCheckMoreInfo, enums.Event.TAP),
      this.toggleClass('production-tagged', this._data.isFeatured);
  }),
  (UTSBCSetTileView.prototype.getData = function getData() {
    return this._data;
  }),
  (UTSBCSetTileView.prototype.render = function render() {
    this._rewards.render(),
      utils.JS.isValid(this._data) &&
        ((this.__tileContent.textContent = this._data.description),
        (this.__rewardsHeader.textContent = services.Localization.localize(
          'sbc.rewards.title'
        )),
        this._data.repeatable
          ? (this.__repeatableLabel.textContent = services.Localization.localize(
              'tile.sbcSets.repeatable'
            ))
          : (DOMKit.addClass(this.__repeatableStatus, 'no-repeat'),
            (this.__repeatableLabel.textContent = services.Localization.localize(
              'sbc.status.notrepeatable'
            ))),
        DOMKit.toggleClass(
          this.__expireStatus,
          'no-expire',
          this._data.notExpirable
        ),
        this._setImage
          .setResource(
            utils.AssetLocator.getSBCImageURI(
              utils.AssetLocator.IMAGE_TYPE_SBC_SETS,
              enums.Year.ASSET,
              this._data.assetId
            ),
            !0
          )
          .observe(this, function onResourceLoaded(e, t, i, s) {
            e.unobserve(this),
              t ||
                this._setImage.setLocalResource(
                  'images/sbc/logo_SBC_home_tile.png'
                );
          }),
        this._data.isComplete()
          ? this.addClass('complete')
          : (this._expiresLabel.setEndTime(this._data.endTime || 0),
            this._expiresLabel.setExpiryState(!this._data.notExpirable),
            this._expiresLabel.start()));
  }),
  (UTSBCSetTileView.prototype._eCheckMoreInfo = function _eCheckMoreInfo(
    e,
    t,
    i
  ) {
    this._triggerActions(UTSBCSetTileView.Event.PREVIEW_SELECTED, {
      previewImageId: this._data.getPreviewImageId()
    });
  }),
  utils.JS.inherits(UTSBCHubView, UTTargetActionView),
  (UTSBCHubView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('SBCHub'),
        (this._SBCCategoriesTM = new components.TabMenu()),
        e.appendChild(this._SBCCategoriesTM.getRootElement());
      var t = document.createElement('div');
      t.classList.add('container'),
        (this.__favoritesTile = document.createElement('div')),
        this.__favoritesTile.classList.add('no-favorites-tile'),
        (this.__favoritesHeader = document.createElement('h1')),
        this.__favoritesTile.appendChild(this.__favoritesHeader),
        (this.__favoritesInfo = document.createElement('p')),
        this.__favoritesTile.appendChild(this.__favoritesInfo),
        t.appendChild(this.__favoritesTile),
        (this.__sbcSetTiles = document.createElement('div')),
        this.__sbcSetTiles.classList.add('layout-hub'),
        this.__sbcSetTiles.classList.add('grid'),
        t.appendChild(this.__sbcSetTiles),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCHubView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._SBCCategoriesTM.destroy(),
      (this.__favoritesTile = null),
      (this.__favoritesHeader = null),
      (this.__favoritesInfo = null),
      (this.__sbcSetTiles = null);
  }),
  (UTSBCHubView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCHubView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCHubView.Event = {
    CATEGORY_SELECTED: 'UTSBCHubView.Event.CATEGORY_SELECTED',
    TILE_SELECTED: 'UTSBCHubView.Event.TILE_SELECTED',
    PREVIEW_SELECTED: 'UTSBCHubView.Event.PREVIEW_SELECTED'
  }),
  (UTSBCHubView.prototype.init = function init() {
    this.superclass(),
      this._SBCCategoriesTM.setDisplay(!1),
      this._SBCCategoriesTM.addTarget(
        this,
        this._eTabSelected,
        enums.Event.TAP
      ),
      DOMKit.toggleDisplayStyle(this.__favoritesTile, !1),
      (this.__favoritesHeader.textContent = services.Localization.localize(
        'sbc.favorites.title'
      )),
      (this.__favoritesInfo.textContent = services.Localization.localize(
        'sbc.favorites.info'
      )),
      this.setInteractionState(!0);
  }),
  (UTSBCHubView.prototype.dealloc = function dealloc() {
    this.clearTiles(), this.superclass();
  }),
  (UTSBCHubView.prototype.clearTiles = function clearTiles() {
    this._sbcSetTiles.forEach(function(e) {
      e.dealloc();
    }),
      (this._sbcSetTiles = []);
  }),
  (UTSBCHubView.prototype.populateNavigation = function populateNavigation(
    e,
    t
  ) {
    0 < e.length &&
      (this._SBCCategoriesTM.clearTabs(),
      this._SBCCategoriesTM.setDisplay(!0),
      e.forEach(function(e, t) {
        e.displayable && this._SBCCategoriesTM.addTab(t, e.name);
      }, this),
      this._SBCCategoriesTM.setActiveTab(t),
      this._SBCCategoriesTM.layoutSubviews());
  }),
  (UTSBCHubView.prototype.populateTiles = function populateTiles(e, t) {
    DOMKit.empty(this.__sbcSetTiles),
      this.clearTiles(),
      (e = e.filter(function(e) {
        return e.isDisplayable();
      })),
      utils.JS.isValid(t) &&
        DOMKit.toggleDisplayStyle(
          this.__favoritesTile,
          0 === e.length && t.type === enums.SBC.CATEGORY_TYPE.CUSTOM_FAVOURITE
        ),
      e.forEach(function _generateTile(e) {
        var t = new UTSBCSetTileView();
        t.init(),
          t.setTitle(e.name),
          t.setData(e),
          t.addTarget(this, this._eTileSelected, enums.Event.TAP),
          t.addTarget(
            this,
            this._eTilePreviewSelected,
            UTSBCSetTileView.Event.PREVIEW_SELECTED
          ),
          this._sbcSetTiles.push(t),
          this.__sbcSetTiles.appendChild(t.getRootElement()),
          t.render();
      }, this),
      DOMKit.toggleClass(this.getRootElement(), 'single-set', e.length <= 1);
  }),
  (UTSBCHubView.prototype._eTabSelected = function _eTabSelected(e, t, i) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTSBCHubView.Event.CATEGORY_SELECTED, {
        index: i.index || 0
      });
  }),
  (UTSBCHubView.prototype._eTileSelected = function _eTileSelected(e, t, i) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTSBCHubView.Event.TILE_SELECTED, {
        set: e.getData()
      });
  }),
  (UTSBCHubView.prototype._eTilePreviewSelected = function _eTilePreviewSelected(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTSBCHubView.Event.PREVIEW_SELECTED, i);
  }),
  NamespaceManager.Register('viewmodels'),
  (viewmodels.SBCSets = function UTSBCSetsViewModel(e, t) {
    UTObject.call(this),
      (this._requests = []),
      Object.defineProperty(this, '_requests', {
        writable: !0,
        enumerable: !1
      }),
      (this._sets = new UTHashTable()),
      e.forEach(function(e) {
        this._sets.set(e.id, e);
      }, this),
      (this._categories = t),
      (this._categoriesIterator = new UTIterator([])),
      this._areTutorialSetsComplete &&
        (this._categoriesIterator.resetCollection(this._categories),
        (this._categories = []));
  }),
  utils.JS.inherits(viewmodels.SBCSets, UTObject),
  (viewmodels.SBCSets.prototype.dealloc = function dealloc() {
    this.cancelRequests(), this.resetCollections([], []), this.superclass();
  }),
  (viewmodels.SBCSets.prototype.cancelRequests = function cancelRequests() {
    0 < this._requests.length &&
      (this._requests.forEach(function(e) {
        e.clearObservers(),
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
      }, this),
      (this._requests = []));
  }),
  (viewmodels.SBCSets.prototype._completeRequest = function _completeRequest(
    e,
    t
  ) {
    e.unobserve(this),
      gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
    var i = this._requests.indexOf(e);
    0 <= i && this._requests.splice(i, 1);
  }),
  (viewmodels.SBCSets.prototype._getTutorialSets = function _getTutorialSets() {
    return this._sets.filter(function(e) {
      return e.tutorial;
    });
  }),
  (viewmodels.SBCSets.prototype._areTutorialSetsComplete = function _areTutorialSetsComplete() {
    var e = this._getTutorialSets();
    if (0 === e.length) return !0;
    var t = utils.JS.find(e, function(e) {
      return !e.isComplete();
    });
    return !utils.JS.isValid(t);
  }),
  (viewmodels.SBCSets.prototype.resetCollections = function resetCollections(
    e,
    t
  ) {
    this._sets.clear(),
      e.forEach(function(e) {
        this._sets.set(e.id, e);
      }, this),
      (this._categories = t),
      this._areTutorialSetsComplete
        ? (this._categoriesIterator.resetCollection(this._categories),
          (this._categories = []))
        : this._categoriesIterator.resetCollection([]);
  }),
  (viewmodels.SBCSets.prototype.setCurrentCategoryIndex = function setCurrentCategoryIndex(
    e
  ) {
    utils.JS.isValid(this._categoriesIterator.get(e)) &&
      this._categoriesIterator.setIndex(e);
  }),
  (viewmodels.SBCSets.prototype.getCurrentCategoryIndex = function getCurrentCategoryIndex() {
    return this._categoriesIterator.getIndex();
  }),
  (viewmodels.SBCSets.prototype.getCurrentCategory = function getCurrentCategory() {
    return this._categoriesIterator.current();
  }),
  (viewmodels.SBCSets.prototype.getSetsByCurrentCategory = function getSetsByCurrentCategory() {
    var i = [];

    function sortSets(e, t) {
      if (e.isComplete() !== t.isComplete()) {
        if (!e.isComplete() && t.isComplete()) return -1;
        if (!t.isComplete() && e.isComplete()) return 1;
      }
      if (e.isFeatured !== t.isFeatured) {
        if (e.isFeatured && !t.isFeatured) return -1;
        if (t.isFeatured && !e.isFeatured) return 1;
      }
      if (e.priority !== t.priority) {
        if (e.priority < t.priority) return -1;
        if (t.priority < e.priority) return 1;
      }
      if (e.notExpirable !== t.notExpirable) {
        if (!e.notExpirable && t.notExpirable) return -1;
        if (!t.notExpirable && e.notExpirable) return 1;
      }
      if (e.endTime !== t.endTime) {
        if (e.endTime < t.endTime) return -1;
        if (t.endTime < e.endTime) return 1;
      }
      return 0;
    }
    var e = this._getTutorialSets();
    return (
      0 < e.length &&
      utils.JS.find(e, function(e) {
        return !e.isComplete();
      })
        ? (i = e.sort(sortSets))
        : (0 < this._categories.length &&
            (this._categoriesIterator.resetCollection(this._categories),
            (this._categories = [])),
          this._categoriesIterator.current().setIds.forEach(function(e) {
            var t = this._sets.get(e);
            utils.JS.isValid(t) && i.push(t);
          }, this),
          i.sort(sortSets)),
      i
    );
  }),
  (viewmodels.SBCSets.prototype.getCategoryByIndex = function getCategoryByIndex(
    e
  ) {
    return this._categoriesIterator.get(e);
  }),
  (viewmodels.SBCSets.prototype.setCategoryById = function setCategoryById(e) {
    var t,
      i = this.getCategories();
    for (t = 0; t < i.length; t++)
      if (i[t].id === e) {
        this.setCurrentCategoryIndex(t);
        break;
      }
  }),
  (viewmodels.SBCSets.prototype.getCategories = function getCategories() {
    return this._categoriesIterator.values();
  }),
  (viewmodels.SBCSets.prototype.requestSets = function requestSets() {
    var e = services.SBC.requestSets();
    return (
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      this._requests.push(
        e.observe(this, function _onRequestSetsComplete(e, t) {
          this._completeRequest(e, t),
            t.success && this.resetCollections(t.data.sets, t.data.categories);
        })
      ),
      e
    );
  }),
  utils.JS.inherits(UTSBCRewardPreviewView, UTView),
  (UTSBCRewardPreviewView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-sbc-reward-preview-modal');
      var t = document.createElement('header');
      (this.__title = document.createElement('h1')),
        t.appendChild(this.__title),
        (this._exitBtn = new UTImageButtonControl()),
        this._exitBtn.getRootElement().classList.add('exit-btn'),
        t.appendChild(this._exitBtn.getRootElement()),
        e.appendChild(t),
        (this.__description = document.createElement('div')),
        this.__description.classList.add('description'),
        e.appendChild(this.__description);
      var i = document.createElement('div');
      i.classList.add('content-container'),
        (this._previewImage = new UTImageView()),
        this._previewImage.getRootElement().classList.add('preview-image'),
        i.appendChild(this._previewImage.getRootElement()),
        (this.__errorMessage = document.createElement('div')),
        this.__errorMessage.classList.add('error-message'),
        i.appendChild(this.__errorMessage),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSBCRewardPreviewView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      this._exitBtn.destroy(),
      (this.__description = null),
      this._previewImage.destroy(),
      (this.__errorMessage = null);
  }),
  (UTSBCRewardPreviewView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSBCRewardPreviewView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSBCRewardPreviewView.prototype.init = function init() {
    this.superclass(), this._exitBtn.init();
  }),
  (UTSBCRewardPreviewView.prototype.getExitBtn = function getExitBtn() {
    return this._exitBtn;
  }),
  (UTSBCRewardPreviewView.prototype.setTitle = function setTitle(e) {
    this.__title.textContent = e;
  });
(UTSBCRewardPreviewView.prototype.setDescription = function setDescription(e) {
  this.__description.textContent = e;
}),
  (UTSBCRewardPreviewView.prototype.setErrorMessage = function setErrorMessage(
    e
  ) {
    this.__errorMessage.textContent = e;
  }),
  (UTSBCRewardPreviewView.prototype.setImage = function setImage(e) {
    this._previewImage
      .setResource(
        utils.AssetLocator.getSBCRewardPreviewImageURI(enums.Year.ASSET, e),
        !0
      )
      .observe(this, function onResourceLoaded(e, t) {
        e.unobserve(this),
          DOMKit.toggleDisplayStyle(this.__errorMessage, !t),
          DOMKit.toggleDisplayStyle(this._previewImage.getRootElement(), t);
      });
  }),
  NamespaceManager.Register('interfaces'),
  (interfaces.BackButtonEventDelegate = function IBackButtonEventDelegate() {}),
  (interfaces.BackButtonEventDelegate.prototype.handleBackButtonEvent = function handleBackButtonEvent(
    e
  ) {}),
  utils.JS.inherits(UTSBCRewardPreviewViewController, UTViewController),
  (UTSBCRewardPreviewViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        utils.Debug.Assert(
          0 < this._previewImageId.length,
          'UTSBCRewardPreviewViewController expects an image URL.'
        ),
        this.getView()
          .getExitBtn()
          .addTarget(this, this._eOnExitBtn, enums.Event.TAP);
      var e = getBackButtonEventController();
      e && e.registerDelegate(this, UTBackButtonEventController.PRIORITY.POPUP);
    }
  }),
  (UTSBCRewardPreviewViewController.prototype.initWithImage = function initWithImage(
    e
  ) {
    this.initialized || ((this._previewImageId = e), this.init());
  }),
  (UTSBCRewardPreviewViewController.prototype.dealloc = function dealloc() {
    this._previewImageId = '';
    var e = getBackButtonEventController();
    e && e.unregisterDelegate(this, UTBackButtonEventController.PRIORITY.POPUP),
      this.superclass();
  }),
  (UTSBCRewardPreviewViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSBCRewardPreviewView();
  }),
  (UTSBCRewardPreviewViewController.prototype.viewDidAppear = function viewDidAppear() {
    var e = this.getView();
    e.setTitle(services.Localization.localize('sbc.sets.preview.title')),
      e.setDescription(
        services.Localization.localize('sbc.sets.preview.description')
      ),
      e.setErrorMessage(
        services.Localization.localize('sbc.sets.preview.errormessage')
      ),
      e.setImage(this._previewImageId),
      this.superclass();
  }),
  (UTSBCRewardPreviewViewController.prototype._eOnExitBtn = function _eOnExitBtn(
    e,
    t,
    i
  ) {
    this.getParentViewController().dismissViewController();
  }),
  (UTSBCRewardPreviewViewController.prototype.handleBackButtonEvent = function handleBackButtonEvent(
    e
  ) {
    this.getParentViewController().dismissViewController();
  }),
  utils.JS.inherits(UTSBCHubViewController, UTViewController),
  (UTSBCHubViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        TelemetryManager.trackPage(TelemetryManager.Sections.SBC, 'SBC Hub'),
        this._viewmodel || (this._viewmodel = new viewmodels.SBCSets([], []));
      var e = this.getView();
      e.addTarget(
        this,
        this._eCategorySelected,
        UTSBCHubView.Event.CATEGORY_SELECTED
      ),
        e.addTarget(
          this,
          this._eTileSelected,
          UTSBCHubView.Event.TILE_SELECTED
        ),
        e.addTarget(
          this,
          this._eCheckMoreInfo,
          UTSBCHubView.Event.PREVIEW_SELECTED
        );
    }
  }),
  (UTSBCHubViewController.prototype.initWithSBCSetCategories = function initWithSBCSetCategories(
    e,
    t
  ) {
    this.initialized ||
      ((this._viewmodel = new viewmodels.SBCSets(e, t)), this.init());
  }),
  (UTSBCHubViewController.prototype.dealloc = function dealloc() {
    this._viewmodel && (this._viewmodel.dealloc(), (this._viewmodel = null)),
      this.superclass();
  }),
  (UTSBCHubViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSBCHubView();
  }),
  (UTSBCHubViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Hub - SBC';
  }),
  (UTSBCHubViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.sbcHub');
  }),
  (UTSBCHubViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this.getNavigationController().setNavigationVisibility(!0, !0),
      this._requestSBCData();
  }),
  (UTSBCHubViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(), this._viewmodel.cancelRequests();
  }),
  (UTSBCHubViewController.prototype.willDismiss = function willDismiss(e) {
    e && e instanceof UTSBCRewardPreviewViewController && e.dealloc();
  }),
  (UTSBCHubViewController.prototype._requestSBCData = function _requestSBCData() {
    this._viewmodel
      .requestSets()
      .observe(this, function _onRetrieveSBCSetsComplete(e, t) {
        if ((e.unobserve(this), t.success)) {
          var i = this.getView();
          utils.JS.isValid(this._previouslySelectedCategoryId) &&
            this._viewmodel.setCategoryById(this._previouslySelectedCategoryId),
            i.populateNavigation(
              this._viewmodel.getCategories(),
              this._viewmodel.getCurrentCategoryIndex()
            ),
            i.populateTiles(
              this._viewmodel.getSetsByCurrentCategory(),
              this._viewmodel.getCurrentCategory()
            );
        } else if (NetworkErrorManager.checkCriticalStatus(t.status))
          NetworkErrorManager.handleStatus(t.status);
        else {
          var s =
            t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED
              ? 'sbc.notification.disabled'
              : 'notification.sbcSets.failedToLoad';
          services.Notification.queue([
            services.Localization.localize(s),
            enums.UINotificationType.NEGATIVE
          ]),
            this.getNavigationController().popViewController();
        }
      });
  }),
  (UTSBCHubViewController.prototype._eCategorySelected = function _eCategorySelected(
    e,
    t,
    i
  ) {
    var s = i.index || 0;
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.SBC,
      TelemetryManager.Categories.BUTTON_PRESS,
      'SBC - Select Filter'
    ),
      s !== this._viewmodel.getCurrentCategoryIndex() &&
        ((this._previouslySelectedCategoryId = this._viewmodel.getCategoryByIndex(
          s
        ).id),
        this._viewmodel.setCurrentCategoryIndex(s),
        this.getView().populateTiles(
          this._viewmodel.getSetsByCurrentCategory(),
          this._viewmodel.getCurrentCategory()
        ),
        TelemetryManager.trackPage(
          TelemetryManager.Sections.SBC,
          'SBC Set List - ' + this._viewmodel.getCategoryByIndex(s).name
        ));
  }),
  (UTSBCHubViewController.prototype._eTileSelected = function _eTileSelected(
    e,
    t,
    i
  ) {
    var o,
      a = this.getView(),
      r = i.set;

    function _onChallengeLoaded(e, t) {
      if ((e.unobserve(this), t.success)) {
        var i = this.getNavigationController();
        if (i) {
          var s = isPhone()
            ? new UTSBCSquadOverviewViewController()
            : new UTSBCSquadSplitViewController();
          s.initWithSBCSet(r, o.id), i.pushViewController(s);
        }
      } else {
        var n =
          t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED
            ? 'sbc.notification.disabled'
            : 'notification.sbcChallenges.failedToLoad';
        services.Notification.queue([
          services.Localization.localize(n),
          enums.UINotificationType.NEGATIVE
        ]);
      }
      a.setInteractionState(!0);
    }
    a.setInteractionState(!1),
      services.SBC.requestChallengesForSet(r).observe(
        this,
        function _onRequestChallengesComplete(e, t) {
          if ((e.unobserve(this), t.success && 0 < t.data.challenges.length))
            if (r.hidden)
              (o = t.data.challenges[0]),
                services.SBC.loadChallenge(o).observe(this, _onChallengeLoaded);
            else {
              var i = this.getNavigationController();
              if (i) {
                var s = new UTSBCChallengesViewController();
                s.initWithSBCSet(r), i.pushViewController(s, !0);
              }
              a.setInteractionState(!0);
            }
          else if (NetworkErrorManager.checkCriticalStatus(t.status))
            NetworkErrorManager.handleStatus(t.status);
          else {
            var n =
              t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED
                ? 'sbc.notification.disabled'
                : 'notification.sbcChallenges.failedToLoad';
            a.setInteractionState(!0),
              services.Notification.queue([
                services.Localization.localize(n),
                enums.UINotificationType.NEGATIVE
              ]);
          }
        }
      );
  }),
  (UTSBCHubViewController.prototype._eCheckMoreInfo = function _eCheckMoreInfo(
    e,
    t,
    i
  ) {
    var s = i.previewImageId;
    if (!utils.JS.isEmpty(s)) {
      var n = new UTSBCRewardPreviewViewController();
      n.initWithImage(s),
        (n.modalDisplayStyle = enums.UIModalDisplayStyles.FORM),
        this.presentViewController(n, !0);
    }
  }),
  services.URL.registerDeepLinkID(enums.DeepLinkSections.SBC, function(o) {
    var e = getAppMain().getRootViewController();
    if (
      services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.SBC_ENABLED
      )
    ) {
      e.setGameViewTab(
        isPhone()
          ? UTGameTabBarController.TabTag.HOME
          : UTGameTabBarController.TabTag.SBC
      );
      var s = e.getPresentedViewController().getCurrentViewController(),
        n = null,
        a = null;
      0 === o.length
        ? _goToSBCHub()
        : (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
          services.SBC.requestSets().observe(
            this,
            function _goToSet(e, t) {
              if ((e.unobserve(this), t.success)) {
                var i = t.data.sets.filter(function(e) {
                    return e.tutorial;
                  }),
                  s = utils.JS.find(i, function(e) {
                    return !e.isComplete();
                  });
                if (!utils.JS.isValid(s)) {
                  var n = parseInt(o[0], 10);
                  if (
                    ((a = utils.JS.find(t.data.sets, function(e) {
                      return e.id === n;
                    })),
                    utils.JS.isValid(a) && !a.isComplete())
                  )
                    return void services.SBC.requestChallengesForSet(a).observe(
                      this,
                      _onRetrieveChallengesComplete
                    );
                }
              } else
                NetworkErrorManager.checkCriticalStatus(t.status)
                  ? NetworkErrorManager.handleStatus(t.status)
                  : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
                    services.Configuration.setFeatureEnabled(
                      enums.ServerFeature.SBC_ENABLED,
                      !1
                    );
              _goToSBCHub(),
                gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
            }.bind(this)
          ));
    } else e.setGameViewTab(UTGameTabBarController.TabTag.HOME);

    function _goToSBCHub() {
      if (isPhone()) {
        var e = new UTSBCHubViewController();
        e.init(), s.pushViewController(e);
      }
    }

    function _goToChallenge(e, t) {
      if ((e.unobserve(this), t.success)) {
        var i = isPhone()
          ? new UTSBCSquadOverviewViewControllerw()
          : new UTSBCSquadSplitViewController();
        i.initWithSBCSet(a, n.id), s.pushViewController(i);
      } else _goToSBCHub();
      gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
    }

    function _onRetrieveChallengesComplete(e, t) {
      if ((e.unobserve(this), t.success && 0 < t.data.challenges.length))
        if (a.hidden)
          (n = t.data.challenges[0]),
            services.SBC.loadChallenge(n).observe(this, _goToChallenge);
        else {
          var i = new UTSBCChallengesViewController();
          i.initWithSBCSet(a),
            s.pushViewController(i),
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      else
        NetworkErrorManager.checkCriticalStatus(t.status)
          ? NetworkErrorManager.handleStatus(t.status)
          : (_goToSBCHub(),
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING),
            t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED &&
              services.Configuration.setFeatureEnabled(
                enums.ServerFeature.SBC_ENABLED,
                !1
              ));
    }
  }),
  utils.JS.inherits(UTSquadsHubView, UTView),
  (UTSquadsHubView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squads-hub-view');
      var t = document.createElement('div');
      t.classList.add('grid'),
        t.classList.add('layout-hub'),
        (this._activeSquadTile = new UTSquadTileView()),
        t.appendChild(this._activeSquadTile.getRootElement()),
        (this._squadSelectorTile = new UTTileView()),
        this._squadSelectorTile
          .getRootElement()
          .classList.add('squad-management-tile'),
        t.appendChild(this._squadSelectorTile.getRootElement()),
        (this._totwTile = new UTTileView()),
        this._totwTile.getRootElement().classList.add('totw-tile'),
        t.appendChild(this._totwTile.getRootElement()),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadsHubView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._activeSquadTile.destroy(),
      this._squadSelectorTile.destroy(),
      this._totwTile.destroy();
  }),
  (UTSquadsHubView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadsHubView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadsHubView.prototype.init = function init() {
    this.superclass(),
      this._activeSquadTile.init(),
      this._squadSelectorTile.init(),
      this._totwTile.init(),
      this._activeSquadTile.setTitle(
        services.Localization.localize('navbar.label.activesquad')
      ),
      this._squadSelectorTile.setTitle(
        services.Localization.localize('navbar.label.squadlist')
      ),
      this._totwTile.setTitle(
        services.Localization.localize('navbar.label.TOTW')
      ),
      this._totwTile.setDimOverlayText(
        services.Localization.localize('tile.disabled.totw').toUpperCase()
      ),
      this._totwTile.setDimOverlayType(UTTileDimOverlayView.OverlayType.LOCKED),
      this._activeSquadTile.addClass('col-1-1'),
      this._squadSelectorTile.addClass('col-1-2'),
      this._totwTile.addClass('col-1-2');
  }),
  (UTSquadsHubView.prototype.setActiveSquad = function setActiveSquad(e) {
    e && this._activeSquadTile.setSquad(e),
      this._activeSquadTile.setInteractionState(utils.JS.isValid(e));
  }),
  (UTSquadsHubView.prototype.setTOTWEnabled = function setTOTWEnabled(e) {
    this._totwTile.setInteractionState(e), this._totwTile.setDimmed(!e);
  }),
  (UTSquadsHubView.prototype.getActiveSquadTile = function getActiveSquadTile() {
    return this._activeSquadTile;
  }),
  (UTSquadsHubView.prototype.getSquadManagementTile = function getSquadManagementTile() {
    return this._squadSelectorTile;
  }),
  (UTSquadsHubView.prototype.getTOTWTile = function getTOTWTile() {
    return this._totwTile;
  }),
  NamespaceManager.Register('interfaces'),
  (interfaces.SquadListViewDelegate = function ISquadListViewDelegate() {}),
  (interfaces.SquadListViewDelegate.prototype.conforms = function conforms(
    e
  ) {}),
  (interfaces.SquadListViewDelegate.prototype.selectListRow = function selectListRow(
    e,
    t,
    i
  ) {}),
  utils.JS.inherits(UTSquadListViewModel, UTIterator),
  (UTSquadListViewModel.prototype.getSquads = function getSquads(t) {
    return t
      ? this._collection.filter(function(e) {
          return e.getType() === t;
        })
      : this._collection.slice();
  }),
  (UTSquadListViewModel.prototype.getSquadNames = function getSquadNames() {
    return this._collection.map(function(e) {
      return e.getName();
    });
  }),
  (UTSquadListViewModel.prototype.setIndexBySquadId = function setIndexBySquadId(
    t
  ) {
    this.setIndex(
      this.indexOf(function(e) {
        return e.getId() === t;
      })
    );
  }),
  NamespaceManager.Register('components'),
  (components.ListDataSquadStats = function() {
    this._generate();
  }),
  (components.ListDataSquadStats.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squad-summary-info');
      var t = document.createElement('div');
      t.classList.add('rating'),
        (this.__labelRating = document.createElement('span')),
        this.__labelRating.classList.add('ut-squad-summary-label'),
        t.appendChild(this.__labelRating),
        (this._ratingStars = new UTSquadStarRatingView()),
        t.appendChild(this._ratingStars.getRootElement()),
        e.appendChild(t),
        (this.__chemistryContainer = document.createElement('div')),
        this.__chemistryContainer.classList.add('chemistry'),
        (this.__labelChemistry = document.createElement('span')),
        this.__labelChemistry.classList.add('ut-squad-summary-label'),
        this.__chemistryContainer.appendChild(this.__labelChemistry),
        (this._chemistryBar = new UTSquadChemistryBarView()),
        this.__chemistryContainer.appendChild(
          this._chemistryBar.getRootElement()
        ),
        e.appendChild(this.__chemistryContainer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ListDataSquadStats.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__labelRating = null),
      this._ratingStars.destroy(),
      (this.__chemistryContainer = null),
      (this.__labelChemistry = null),
      this._chemistryBar.destroy();
  }),
  (components.ListDataSquadStats.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ListDataSquadStats.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ListDataSquadStats.prototype.init = function() {
    (this.__labelChemistry.textContent = services.Localization.localize(
      'squads.chemistry'
    )),
      (this.__labelRating.textContent = services.Localization.localize(
        'squads.rating'
      )),
      this._ratingStars.init(),
      this._chemistryBar.init();
  }),
  (components.ListDataSquadStats.prototype.destroy = function() {
    this.destroyGeneratedElements();
  }),
  (components.ListDataSquadStats.prototype.render = function(e) {
    this._chemistryBar.setChemistry(e.getChemistry()),
      this._ratingStars.setRating(e.getRating()),
      DOMKit.toggleDisplayStyle(this.__chemistryContainer, !e.isTOTW());
  }),
  (components.ListDataSquadStats.prototype.update = function(e) {
    this.render(e);
  }),
  utils.JS.inherits(UTSquadTableCellView, UTTargetActionView),
  (UTSquadTableCellView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-squad-table-cell-view');
      var t = document.createElement('div');
      t.classList.add('ut-squad-table-cell-view--tag');
      var i = document.createElement('div');
      i.classList.add('label-container');
      var s = document.createElement('span');
      s.classList.add('icon_squad'),
        s.classList.add('fut_icon'),
        i.appendChild(s),
        (this.__activeLabel = document.createElement('span')),
        this.__activeLabel.classList.add('label'),
        i.appendChild(this.__activeLabel),
        t.appendChild(i),
        e.appendChild(t),
        (this.__name = document.createElement('h1')),
        this.__name.classList.add('ut-squad-table-cell-view--name'),
        e.appendChild(this.__name),
        (this.__dataContainer = document.createElement('div')),
        this.__dataContainer.classList.add('ut-squad-table-cell-view--summary');
      var n = document.createElement('div');
      n.classList.add('summary-formation'),
        (this.__formationLabel = document.createElement('span')),
        this.__formationLabel.classList.add('ut-squad-summary-label'),
        n.appendChild(this.__formationLabel),
        (this.__formation = document.createElement('span')),
        this.__formation.classList.add('ut-squad-summary-value'),
        n.appendChild(this.__formation),
        this.__dataContainer.appendChild(n),
        e.appendChild(this.__dataContainer),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadTableCellView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__activeLabel = null),
      (this.__name = null),
      (this.__dataContainer = null),
      (this.__formationLabel = null),
      (this.__formation = null);
  }),
  (UTSquadTableCellView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadTableCellView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadTableCellView.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTSquadTableCellView.prototype.dealloc = function dealloc() {
    this._squad &&
      (this._squad.onDataUpdated.unobserve(this), (this._squad = null)),
      this._dataComponent &&
        (this._dataComponent.destroy(), (this._dataComponent = null)),
      this.superclass();
  }),
  (UTSquadTableCellView.prototype.setInteractionState = function setInteractionState(
    e
  ) {
    var t = this._interactionState;
    this.superclass(e),
      this._interactionState !== t &&
        this.toggleClass(enums.UIState.DISABLED, !this._interactionState);
  }),
  (UTSquadTableCellView.prototype.setSquad = function setSquad(e) {
    this._squad && this._squad.onDataUpdated.unobserve(this),
      (this._squad = e),
      this._squad.onDataUpdated.observe(this, this._squadDataUpdateHandler);
  }),
  (UTSquadTableCellView.prototype.getSquad = function getSquad() {
    return this._squad;
  }),
  (UTSquadTableCellView.prototype.setSelected = function setSelected(e) {
    this.toggleClass(enums.UIListRowState.SELECTED, e);
  }),
  (UTSquadTableCellView.prototype.render = function render() {
    (this.__name.textContent = this._squad.getName()),
      (this.__formation.textContent = this._squad
        .getFormation()
        .getDisplayName()),
      (this.__activeLabel.textContent = services.Localization.localize(
        'navbar.label.activesquad'
      )),
      (this.__formationLabel.textContent = services.Localization.localize(
        'squads.formation'
      )),
      utils.JS.isValid(this._dataComponent) ||
        ((this._dataComponent = new components.ListDataSquadStats()),
        this._dataComponent.init(),
        this.__dataContainer.appendChild(this._dataComponent.getRootElement())),
      this.toggleClass(
        'show-tag',
        !this._squad.isTOTW() && this._squad.isActive()
      ),
      this._dataComponent.render(this._squad);
  }),
  (UTSquadTableCellView.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIState.HOVER);
  }),
  (UTSquadTableCellView.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass(enums.UIState.HOVER);
  }),
  (UTSquadTableCellView.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(e), this.addClass(enums.UIState.ACTIVE);
  }),
  (UTSquadTableCellView.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(e), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTSquadTableCellView.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(e), this.removeClass(enums.UIState.ACTIVE);
  }),
  (UTSquadTableCellView.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(e),
      this._triggerActions(enums.Event.TAP, {
        squad: this._squad
      });
  }),
  (UTSquadTableCellView.prototype._squadDataUpdateHandler = function _squadDataUpdateHandler(
    e,
    t
  ) {
    this.render();
  }),
  utils.JS.inherits(UTSectionedSquadTableView, UTTargetActionView),
  (UTSectionedSquadTableView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('sectioned-item-list'),
        (this._header = new components.SectionHeader()),
        e.appendChild(this._header.getRootElement()),
        (this.__table = document.createElement('div')),
        e.appendChild(this.__table),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSectionedSquadTableView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._header.destroy(),
      (this.__table = null);
  }),
  (UTSectionedSquadTableView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSectionedSquadTableView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSectionedSquadTableView.Event = {
    CELL_SELECTED: 'UTSectionedSquadTableView.Event.CELL_SELECTED'
  }),
  (UTSectionedSquadTableView.prototype.init = function init() {
    this.superclass(), this._header.hideButton();
  }),
  (UTSectionedSquadTableView.prototype.dealloc = function dealloc() {
    this._removeEmptyMessage(), this.clearTable(), this.superclass();
  }),
  (UTSectionedSquadTableView.prototype.setInteractionState = function setInteractionState(
    t
  ) {
    this.superclass(t),
      this._cellViews.forEach(function(e) {
        e.setInteractionState(t);
      });
  }),
  (UTSectionedSquadTableView.prototype.clearTable = function clearTable() {
    this._cellViews.forEach(function(e) {
      e.dealloc();
    }),
      (this._cellViews = []);
  }),
  (UTSectionedSquadTableView.prototype.setHeaderTitle = function setHeaderTitle(
    e
  ) {
    this._header.setText(e);
  }),
  (UTSectionedSquadTableView.prototype.setHeaderButtonLabel = function setHeaderButtonLabel(
    e
  ) {
    this._header.setButtonText(e);
  }),
  (UTSectionedSquadTableView.prototype.setHeaderButtonCallback = function setHeaderButtonCallback(
    e
  ) {
    utils.JS.isFunction(e) &&
      this._header.onAction.unobserve(this).observe(this, e);
  }),
  (UTSectionedSquadTableView.prototype.toggleHeaderButtonEnabled = function toggleHeaderButtonEnabled(
    e
  ) {
    this._header.toggleButtonEnabled(e);
  }),
  (UTSectionedSquadTableView.prototype.toggleHeaderButton = function toggleHeaderButton(
    e
  ) {
    this._header.toggleButton(e);
  }),
  (UTSectionedSquadTableView.prototype._removeEmptyMessage = function _removeEmptyMessage() {
    this._emptyMessage &&
      (this._emptyMessage.destroy(), (this._emptyMessage = null));
  }),
  (UTSectionedSquadTableView.prototype.displayEmptyMessage = function displayEmptyMessage(
    e,
    t
  ) {
    this.clearTable(),
      this._emptyMessage ||
        ((this._emptyMessage = new UTEmptySectionMessageView()),
        this.getRootElement().appendChild(this._emptyMessage.getRootElement())),
      this._emptyMessage.render(e, t);
  }),
  (UTSectionedSquadTableView.prototype._generateCellView = function _generateCellView(
    e
  ) {
    var t = new UTSquadTableCellView();
    return (
      t.init(),
      t.setSquad(e),
      t.render(),
      t.addClass('show-arrow scalable'),
      t.addTarget(this, this._eCellEventHandler, enums.Event.TAP),
      this.addSubview(t, this.__table),
      t
    );
  }),
  (UTSectionedSquadTableView.prototype.setSquads = function setSquads(e) {
    return (
      this._removeEmptyMessage(),
      this.clearTable(),
      (this._cellViews = e.map(this._generateCellView, this)),
      this.layoutSubviews(),
      this._cellViews
    );
  }),
  (UTSectionedSquadTableView.prototype.selectCellByIndex = function selectCellByIndex(
    t
  ) {
    0 <= t &&
      t < this._cellViews.length &&
      this._cellViews.forEach(function(e) {
        e.setSelected(e === this._cellViews[t]);
      }, this);
  }),
  (UTSectionedSquadTableView.prototype.selectCellBySquadId = function selectCellBySquadId(
    t
  ) {
    this._cellViews.forEach(function(e) {
      e.setSelected(e.getSquad().getId() === t);
    }, this);
  }),
  (UTSectionedSquadTableView.prototype._eCellEventHandler = function _eCellEventHandler(
    e,
    t,
    i
  ) {
    if (t === enums.Event.TAP) {
      var s = this._cellViews.indexOf(e);
      this._triggerActions(UTSectionedSquadTableView.Event.CELL_SELECTED, {
        squad: i.squad,
        cell: e,
        index: s
      });
    }
  }),
  utils.JS.inherits(UTSquadListView, UTTargetActionView),
  (UTSquadListView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('section');
      e.classList.add('squad-list'),
        (this.__totalLabel = document.createElement('p')),
        this.__totalLabel.classList.add('total-label'),
        e.appendChild(this.__totalLabel),
        (this._regularSquadSection = new UTSectionedSquadTableView()),
        e.appendChild(this._regularSquadSection.getRootElement()),
        (this._conceptSquadSection = new UTSectionedSquadTableView()),
        e.appendChild(this._conceptSquadSection.getRootElement()),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTSquadListView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__totalLabel = null),
      this._regularSquadSection.destroy(),
      this._conceptSquadSection.destroy();
  }),
  (UTSquadListView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTSquadListView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTSquadListView.Event = {
    CREATE_SQUAD: 'UTSquadListView.Event.CREATE_SQUAD',
    SQUAD_SELECTED: 'UTSquadListView.Event.SQUAD_SELECTED'
  }),
  (UTSquadListView.prototype.init = function init() {
    this.superclass(),
      this._regularSquadSection.init(),
      this._regularSquadSection.addTarget(
        this,
        this._eCellSelected,
        UTSectionedSquadTableView.Event.CELL_SELECTED
      ),
      this._conceptSquadSection.init(),
      this._conceptSquadSection.addTarget(
        this,
        this._eCellSelected,
        UTSectionedSquadTableView.Event.CELL_SELECTED
      );
  }),
  (UTSquadListView.prototype.render = function render(e, t, i) {
    var s = e.length + t.length,
      n = i <= s;
    (this.__totalLabel.textContent = services.Localization.localize(
      'lineupList.squadSelector.total',
      [s, i]
    )),
      this._regularSquadSection.setHeaderTitle(
        services.Localization.localize('squads.button.regularsquads', [
          e.length
        ])
      ),
      this._regularSquadSection.setHeaderButtonLabel(
        services.Localization.localize('infopanel.button.createnewsquad')
      ),
      this._regularSquadSection.setHeaderButtonCallback(
        this._eHeaderButtonSelected.bind(this)
      ),
      this._regularSquadSection.toggleHeaderButton(!0),
      this._regularSquadSection.toggleHeaderButtonEnabled(!n),
      this._conceptSquadSection.setHeaderTitle(
        services.Localization.localize('squads.button.conceptsquads', [
          t.length
        ])
      ),
      0 < e.length
        ? this._regularSquadSection.setSquads(e)
        : this._regularSquadSection.displayEmptyMessage(
            services.Localization.localize(
              'squads.setEmptyMessage.regularHeader'
            ),
            services.Localization.localize(
              'squads.setEmptyMessage.regularMessage'
            )
          ),
      0 < t.length
        ? this._conceptSquadSection.setSquads(t)
        : this._conceptSquadSection.displayEmptyMessage(
            services.Localization.localize(
              'squads.setEmptyMessage.conceptHeader'
            ),
            services.Localization.localize(
              'squads.setEmptyMessage.conceptMessage'
            )
          );
  }),
  (UTSquadListView.prototype.selectListRow = function selectListRow(e) {
    this._regularSquadSection.selectCellBySquadId(e),
      this._conceptSquadSection.selectCellBySquadId(e);
  }),
  (UTSquadListView.prototype.getRegularSquadSection = function getRegularSquadSection() {
    return this._regularSquadSection;
  }),
  (UTSquadListView.prototype._eHeaderButtonSelected = function _eHeaderButtonSelected(
    e
  ) {
    this._triggerActions(UTSquadListView.Event.CREATE_SQUAD);
  }),
  (UTSquadListView.prototype._eCellSelected = function _eCellSelected(e, t, i) {
    this._triggerActions(UTSquadListView.Event.SQUAD_SELECTED, {
      section: e,
      cell: i.cell,
      index: i.index,
      squad: i.squad
    });
  }),
  utils.JS.inherits(UTSquadListViewController, UTViewController),
  (UTSquadListViewController.prototype.initWithSquads = function initWithSquads(
    e
  ) {
    this.initialized || (this._updateViewModel(e), this.init());
  }),
  (UTSquadListViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._squadListViewDelegate && (this._squadListViewDelegate = null),
      (this._viewmodel = null);
  }),
  (UTSquadListViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSquadListView();
  }),
  (UTSquadListViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Squad List';
  }),
  (UTSquadListViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.squadlist');
  }),
  (UTSquadListViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView();
    e.addTarget(this, this._eCreateSquad, UTSquadListView.Event.CREATE_SQUAD),
      e.addTarget(
        this,
        this._eSquadSelected,
        UTSquadListView.Event.SQUAD_SELECTED
      ),
      this._generateSquadsList();
  }),
  (UTSquadListViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass();
    var e = this.getView();
    e.removeTarget(
      this,
      this._eCreateSquad,
      UTSquadListView.Event.CREATE_SQUAD
    ),
      e.removeTarget(
        this,
        this._eSquadSelected,
        UTSquadListView.Event.SQUAD_SELECTED
      );
  }),
  (UTSquadListViewController.prototype.setSquadListViewDelegate = function setSquadListViewDelegate(
    e
  ) {
    e.conforms(interfaces.SquadListViewDelegate) &&
      (this._squadListViewDelegate = e);
  }),
  (UTSquadListViewController.prototype.getViewModel = function getViewModel() {
    return this._viewmodel;
  }),
  (UTSquadListViewController.prototype._updateViewModel = function _updateViewModel(
    e
  ) {
    this._viewmodel
      ? this._viewmodel.resetCollection(e)
      : (this._viewmodel = new UTSquadListViewModel(e));
  }),
  (UTSquadListViewController.prototype.refreshData = function refreshData(e) {
    e
      ? (this._updateViewModel([]), this._generateSquadsList())
      : this._generateSquadsList(this._viewmodel.getIndex());
  }),
  (UTSquadListViewController.prototype._generateSquadsList = function _generateSquadsList(
    s
  ) {
    var n = this.getView();
    n.setInteractionState(!1),
      services.Squad.requestSquadList().observe(
        this,
        function _onGenerateSquadsList(e, t) {
          e.unobserve(this), this._updateViewModel(t.data.squads);
          var i =
            0 <= s && s < this._viewmodel.length
              ? s
              : services.Squad.getActiveSquadId();
          this._viewmodel.setIndex(i),
            this.isViewDisplayed() &&
              (n.render(
                this._viewmodel.getSquads(enums.SquadType.REGULAR),
                this._viewmodel.getSquads(enums.SquadType.DREAM),
                services.Squad.getMaxSquads()
              ),
              utils.JS.isValid(this._squadListViewDelegate)
                ? this._squadListViewDelegate.selectListRow(
                    this,
                    i,
                    this._viewmodel.current()
                  )
                : n.selectListRow(i)),
            n.setInteractionState(!0);
        }
      );
  }),
  (UTSquadListViewController.prototype._eSquadSelected = function _eSquadSelected(
    e,
    t,
    i
  ) {
    var s = i.squad,
      n = this._viewmodel.indexOf(function(e) {
        return e.getId() === i.squad.getId();
      }),
      o = n !== this._viewmodel.getIndex();
    if (
      (o && this._viewmodel.setIndex(n),
      utils.JS.isValid(this._squadListViewDelegate))
    )
      o && this._squadListViewDelegate.selectListRow(this, n, s);
    else {
      var a = this.getNavigationController();
      if (a) {
        var r = new UTSquadActionsViewController();
        r.initWithSquad(s), a.pushViewController(r, !0);
      }
    }
  }),
  (UTSquadListViewController.prototype._eCreateSquad = function _eCreateSquad(
    e,
    t,
    i
  ) {
    var s = new controllers.views.popups.NameSquad('');
    s.onConfirm.observe(
      this,
      function _onNewSquadConfirm(e, t) {
        e.unobserve(this),
          services.Squad.create(t, DEFAULT_FORMATION).observe(
            this,
            this._eSquadCreated
          );
      }.bind(this)
    ),
      gPopupClickShield.setActivePopup(s);
  }),
  (UTSquadListViewController.prototype._eSquadCreated = function _eSquadCreated(
    e,
    t
  ) {
    if ((e.unobserve(this), t.success)) {
      var i = t.data.squad;
      if (i) {
        var s = i.getId();
        this._viewmodel.add(i), this._viewmodel.setIndexBySquadId(s);
        var n = this.getNavigationController();
        if (n) {
          var o = isPhone()
            ? new UTSquadOverviewViewController()
            : new UTSquadSplitViewController();
          o.initWithSquad(i), n.pushViewController(o);
        }
      }
      services.Notification.queue([
        services.Localization.localize('notification.squad.created'),
        enums.UINotificationType.NEUTRAL
      ]);
    } else if (NetworkErrorManager.checkCriticalStatus(t.status))
      NetworkErrorManager.handle(
        NetworkErrorManager.generateDefaultStatusMessage(t.status),
        !1
      );
    else {
      var a;
      switch (t.status) {
        case enums.HTTPStatusCode.NAME_EXISTS:
          a = 'popup.error.duplicateSquadName';
          break;
        case enums.HTTPStatusCode.PERMISSION_DENIED:
          a = 'popup.error.squadsFull';
          break;
        case enums.HTTPStatusCode.PROFANITY:
          a = 'popup.error.profanity';
          break;
        default:
          a = 'popup.body.genericError';
      }
      services.Notification.queue([
        services.Localization.localize(a),
        enums.UINotificationType.NEGATIVE
      ]);
    }
  }),
  utils.JS.inherits(UTSquadListSplitViewController, UTSplitViewController),
  (UTSquadListSplitViewController.prototype.init = function init() {
    this.superclass(),
      this._listViewController.init(),
      this.addChildViewController(this._listViewController);
  }),
  (UTSquadListSplitViewController.prototype.initWithSquads = function initWithSquads(
    e
  ) {
    if (!this.initialized) {
      if (
        (this._listViewController.initWithSquads(e),
        this._listViewController.setSquadListViewDelegate(this),
        0 < e.length)
      ) {
        var t = services.Squad.getActiveSquadId(),
          i = utils.JS.find(e, function(e) {
            return e.getId() === t;
          });
        (this._squadDetailsController = new UTSquadActionsViewController()),
          this._squadDetailsController.initWithSquad(i),
          this.addChildViewController(this._squadDetailsController);
      }
      this.init();
    }
  }),
  (UTSquadListSplitViewController.prototype.dealloc = function dealloc() {
    this._listViewController.dealloc(),
      this._squadDetailsController &&
        (this._squadDetailsController.dealloc(),
        (this._squadDetailsController = null)),
      this.superclass();
  }),
  (UTSquadListSplitViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._listViewController.getNavigationTitle();
  }),
  (UTSquadListSplitViewController.prototype.viewDidAppear = function viewDidAppear() {
    var e = getDefaultDispatcher();
    e.addObserver(enums.Notification.SQUAD_CREATE, this, this._nSquadCreated),
      e.addObserver(enums.Notification.SQUAD_DELETE, this, this._nSquadDeleted),
      e.addObserver(enums.Notification.SQUAD_SAVE, this, this._nSquadSaved),
      this.superclass(),
      this._setLeftController(this._listViewController),
      utils.JS.isValid(this._squadDetailsController) &&
        this._setRightController(this._squadDetailsController);
  }),
  (UTSquadListSplitViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.SQUAD_CREATE, this),
      e.removeObserver(enums.Notification.SQUAD_DELETE, this),
      e.removeObserver(enums.Notification.SQUAD_SAVE, this),
      this.superclass();
  }),
  (UTSquadListSplitViewController.prototype.selectListRow = function selectListRow(
    e,
    t,
    i
  ) {
    e === this._listViewController &&
      (this._listViewController.getView().selectListRow(i.getId()),
      this._squadDetailsController.setSquad(i));
  }),
  (UTSquadListSplitViewController.prototype._nSquadCreated = function _nSquadCreated(
    e,
    t,
    i
  ) {
    this._listViewController.refreshData(!1);
  }),
  (UTSquadListSplitViewController.prototype._nSquadDeleted = function _nSquadDeleted(
    e,
    t,
    i
  ) {
    this._listViewController.refreshData(!0);
  }),
  (UTSquadListSplitViewController.prototype._nSquadSaved = function _nSquadSaved(
    e,
    t,
    i
  ) {
    this._listViewController.refreshData(!1);
  }),
  utils.JS.inherits(UTTOTWSquadListView, UTTargetActionView),
  (UTTOTWSquadListView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-totw-squad-list-view'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTOTWSquadListView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTTOTWSquadListView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTOTWSquadListView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTOTWSquadListView.Event = {
    CELL_SELECTED: 'UTTOTWSquadListView.Event.CELL_SELECTED'
  }),
  (UTTOTWSquadListView.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
  }),
  (UTTOTWSquadListView.prototype.dealloc = function dealloc() {
    this.clearTable(),
      this._noResultsView &&
        (this._noResultsView.destroy(), (this._noResultsView = null)),
      this.superclass();
  }),
  (UTTOTWSquadListView.prototype.setInteractionState = function setInteractionState(
    t
  ) {
    this.superclass(t),
      this._cellViews.forEach(function(e) {
        e.setInteractionState(t);
      });
  }),
  (UTTOTWSquadListView.prototype.clearTable = function clearTable() {
    0 < this._cellViews.length &&
      (this._cellViews.forEach(function(e) {
        e.dealloc();
      }),
      (this._cellViews = []));
  }),
  (UTTOTWSquadListView.prototype._generateCellView = function _generateCellView(
    e
  ) {
    utils.Debug.Assert(e instanceof entities.Squad, 'Expected a squad entity');
    var t = new UTSquadTableCellView();
    return (
      t.init(),
      t.setSquad(e),
      t.render(),
      t.addTarget(this, this._eCellEventHandler, enums.Event.TAP),
      this.addSubview(t),
      t
    );
  }),
  (UTTOTWSquadListView.prototype.setSquads = function setSquads(e) {
    return (
      this.clearTable(),
      (this._cellViews = e.map(this._generateCellView, this)),
      this.layoutSubviews(),
      this._cellViews
    );
  }),
  (UTTOTWSquadListView.prototype.appendEmptyListMessage = function appendEmptyListMessage(
    e
  ) {
    this.clearTable(),
      this._noResultsView ||
        ((this._noResultsView = new UTListNoResultsView()),
        this._noResultsView.init(),
        this.getRootElement().appendChild(
          this._noResultsView.getRootElement()
        )),
      this._noResultsView.setText(e);
  }),
  (UTTOTWSquadListView.prototype.selectCellBySquad = function selectCellBySquad(
    t
  ) {
    this._cellViews.forEach(function(e) {
      e.setSelected(e.getSquad() === t);
    }, this);
  }),
  (UTTOTWSquadListView.prototype._eCellEventHandler = function _eCellEventHandler(
    e,
    t,
    i
  ) {
    if (t === enums.Event.TAP) {
      var s = this._cellViews.indexOf(e);
      this.selectCellBySquad(i.squad),
        this._triggerActions(UTTOTWSquadListView.Event.CELL_SELECTED, {
          squad: i.squad,
          cell: e,
          index: s
        });
    }
  }),
  utils.JS.inherits(UTTOTWHistoryViewModel, UTViewModel),
  (UTTOTWHistoryViewModel.prototype.init = function init() {
    this.superclass(), (this._squadCollection = new UTIterator());
  }),
  (UTTOTWHistoryViewModel.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this._squadCollection = null),
      (this._squadServiceObject = null);
  }),
  (UTTOTWHistoryViewModel.prototype.requestHistory = function requestHistory() {
    var e = this._squadServiceObject.requestTOTWHistory();
    return (
      this._trackRequest(
        e,
        !0,
        function _onRequestHistoryComplete(e) {
          e.success &&
            (0 === this._squadCollection.length ||
              e.status !== enums.HTTPStatusCode.NOT_MODIFIED) &&
            0 < e.data.squads.length &&
            this._squadCollection.resetCollection(e.data.squads);
        }.bind(this)
      ),
      e
    );
  }),
  (UTTOTWHistoryViewModel.prototype.setCurrentSquad = function setCurrentSquad(
    t
  ) {
    var e = this._squadCollection.indexOf(function(e) {
      return e === t;
    });
    this._squadCollection.setIndex(e);
  }),
  (UTTOTWHistoryViewModel.prototype.getSquads = function getSquads() {
    return this._squadCollection.values();
  }),
  (UTTOTWHistoryViewModel.prototype.getSquadByIndex = function getSquadByIndex(
    e
  ) {
    return this._squadCollection.setIndex(e), this._squadCollection.current();
  }),
  (UTTOTWHistoryViewModel.prototype.getCurrentSquad = function getCurrentSquad() {
    return this._squadCollection.current();
  }),
  (UTTOTWHistoryViewModel.prototype.getIndex = function getIndex() {
    return this._squadCollection.getIndex();
  }),
  utils.JS.inherits(UTTOTWSquadListViewController, UTViewController),
  (UTTOTWSquadListViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      TelemetryManager.trackPage(TelemetryManager.Sections.TOTW, 'TOTW List'),
      this.getView().addTarget(
        this,
        this._eRowSelected,
        UTTOTWSquadListView.Event.CELL_SELECTED
      ));
  }),
  (UTTOTWSquadListViewController.prototype.initWithHistoryViewModel = function initWithHistoryViewModel(
    e
  ) {
    this.initialized ||
      (utils.Debug.Assert(
        e instanceof UTTOTWHistoryViewModel,
        'Expected an object of type UTTOTWHistoryViewModel.'
      ),
      e instanceof UTTOTWHistoryViewModel && (this._totwHistoryViewModel = e),
      this.init());
  }),
  (UTTOTWSquadListViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._totwHistoryViewModel && (this._totwHistoryViewModel = null);
  }),
  (UTTOTWSquadListViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTOTWSquadListView();
  }),
  (UTTOTWSquadListViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'TOTW List';
  }),
  (UTTOTWSquadListViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.TOTWHistory');
  }),
  (UTTOTWSquadListViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._totwHistoryViewModel
        ? this._totwHistoryViewModel
            .requestHistory()
            .observe(this, function _onRequestHistoryComplete(e, t) {
              e.unobserve(this), t.success && this._showSquads();
            })
        : this._showSquads();
  }),
  (UTTOTWSquadListViewController.prototype.setSquadSelectDelegate = function setSquadSelectDelegate(
    e
  ) {
    e.conforms(UTTOTWSquadSplitViewController) &&
      (this._squadSelectDelegate = e);
  }),
  (UTTOTWSquadListViewController.prototype._showSquads = function _showSquads() {
    var e = this.getView(),
      t = this._totwHistoryViewModel
        ? this._totwHistoryViewModel.getSquads()
        : 0;
    if (0 === t.length) {
      var i = services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.TOTW_HISTORY_ENABLED
      )
        ? 'totw.squadlist.empty'
        : 'totw.squadlist.unavailable';
      e.appendEmptyListMessage(services.Localization.localize(i));
    } else
      e.setSquads(t),
        e.selectCellBySquad(this._totwHistoryViewModel.getCurrentSquad());
  }),
  (UTTOTWSquadListViewController.prototype._eRowSelected = function _eRowSelected(
    e,
    t,
    i
  ) {
    if (this._totwHistoryViewModel) {
      var s = this._totwHistoryViewModel.getCurrentSquad();
      if (i.squad !== s)
        if (
          (this._totwHistoryViewModel.setCurrentSquad(i.squad),
          this._squadSelectDelegate)
        ) {
          this._squadSelectDelegate.setSquad(i.squad);
          var n = this.getView();
          n.setInteractionState(!1),
            setTimeout(
              function() {
                n && n.setInteractionState(!0);
              }.bind(this),
              600
            );
        } else this.getNavigationController().popViewController();
    }
  }),
  utils.JS.inherits(UTTOTWSummaryBannerView, UTSquadSummaryBannerView),
  (UTTOTWSummaryBannerView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('totw'), e.classList.add('ut-squad-summary');
      var t = document.createElement('div');
      t.classList.add('ut-squad-summary-info'),
        (this.__formationTitle = document.createElement('span')),
        this.__formationTitle.classList.add('ut-squad-summary-label'),
        t.appendChild(this.__formationTitle),
        (this.__formationValue = document.createElement('span')),
        this.__formationValue.classList.add('ut-squad-summary-value'),
        t.appendChild(this.__formationValue),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('ut-squad-summary-info');
      var s = document.createElement('div');
      s.classList.add('rating'),
        (this.__labelRating = document.createElement('span')),
        this.__labelRating.classList.add('ut-squad-summary-label'),
        s.appendChild(this.__labelRating),
        (this._squadStats = new UTSquadStarRatingView()),
        s.appendChild(this._squadStats.getRootElement()),
        i.appendChild(s),
        e.appendChild(i);
      var n = document.createElement('div');
      n.classList.add('totw-squad-buttons'),
        n.classList.add('ut-squad-summary-info'),
        (this._copySquadIcon = new UTFlatButtonControl()),
        this._copySquadIcon.getRootElement().classList.add('fut_icon'),
        this._copySquadIcon.getRootElement().classList.add('icon_copy'),
        this._copySquadIcon.getRootElement().classList.add('copy-squad-icon'),
        n.appendChild(this._copySquadIcon.getRootElement()),
        (this._historyBtn = new UTFlatButtonControl()),
        this._historyBtn.getRootElement().classList.add('fut_icon'),
        this._historyBtn.getRootElement().classList.add('icon_list'),
        this._historyBtn.getRootElement().classList.add('totw-history-icon'),
        n.appendChild(this._historyBtn.getRootElement()),
        e.appendChild(n),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTOTWSummaryBannerView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__formationTitle = null),
      (this.__formationValue = null),
      (this.__labelRating = null),
      this._squadStats.destroy(),
      this._copySquadIcon.destroy(),
      this._historyBtn.destroy();
  }),
  (UTTOTWSummaryBannerView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTOTWSummaryBannerView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTOTWSummaryBannerView.prototype.init = function init() {
    this.superclass(),
      (this.__labelRating.textContent = services.Localization.localize(
        'squads.rating'
      )),
      this._historyBtn.init(),
      this._copySquadIcon.init();
  }),
  (UTTOTWSummaryBannerView.prototype.setChemistry = function setChemistry(
    e,
    t
  ) {}),
  (UTTOTWSummaryBannerView.prototype.setCanCopySquad = function setCanCopySquad(
    e
  ) {
    this._copySquadIcon.setInteractionState(e);
  }),
  (UTTOTWSummaryBannerView.prototype.getHistoryButton = function getHistoryButton() {
    return this._historyBtn;
  }),
  (UTTOTWSummaryBannerView.prototype.getCopyButton = function getCopyButton() {
    return this._copySquadIcon;
  }),
  utils.JS.inherits(UTTOTWSquadOverviewView, UTSquadOverviewView),
  (UTTOTWSquadOverviewView.prototype.init = function init() {
    this.superclass(),
      (this.renderManager = !1),
      (this.renderChemistry = !1),
      (this.renderConcepts = !1);
  }),
  (UTTOTWSquadOverviewView.prototype.getSummaryPanel = function getSummaryPanel() {
    return (
      this._summaryPanel ||
        (this._summaryPanel = new UTTOTWSummaryBannerView()),
      this._summaryPanel
    );
  }),
  utils.JS.inherits(
    UTTOTWSquadOverviewViewController,
    UTSquadOverviewViewController
  ),
  (UTTOTWSquadOverviewViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        (this._totwHistoryViewModel = new UTTOTWHistoryViewModel(
          services.Squad
        )),
        this._totwHistoryViewModel.init();
      var e = this.getView().getSummaryPanel();
      e
        .getHistoryButton()
        .addTarget(this, this._eHistorySelected, enums.Event.TAP),
        e
          .getCopyButton()
          .addTarget(this, this._eCopySquadSelected, enums.Event.TAP),
        e.setCanCopySquad(!1),
        this._checkSquadListFull();
    }
  }),
  (UTTOTWSquadOverviewViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._totwHistoryViewModel &&
        (this._totwHistoryViewModel.dealloc(),
        (this._totwHistoryViewModel = null));
  }),
  (UTTOTWSquadOverviewViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTOTWSquadOverviewView();
  }),
  (UTTOTWSquadOverviewViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'TOTW';
  }),
  (UTTOTWSquadOverviewViewController.prototype._trackPageView = function _trackPageView() {
    TelemetryManager.trackPage(
      TelemetryManager.Sections.TOTW,
      this._getTelemetryId()
    );
  }),
  (UTTOTWSquadOverviewViewController.prototype.viewDidAppear = function viewDidAppear() {
    var e = utils.JS.isValid(this._totwHistoryViewModel)
      ? this._totwHistoryViewModel.getCurrentSquad()
      : null;
    e && this._setSquad(e), this.superclass();
  }),
  (UTTOTWSquadOverviewViewController.prototype._pushSquadToView = function _pushSquadToView(
    e
  ) {
    var t = this.getView();
    t.setType(
      e.isDream()
        ? enums.SquadPitchTypes.CONCEPT
        : enums.SquadPitchTypes.REGULAR
    ),
      t.setSquad(e),
      this.getNavigationController().setNavigationTitle(e.getName());
  }),
  (UTTOTWSquadOverviewViewController.prototype._checkSquadListFull = function _checkSquadListFull() {
    services.Squad.requestSquadList().observe(this, function(e, t) {
      e.unobserve(this),
        t.success &&
          this.getView()
            .getSummaryPanel()
            .setCanCopySquad(!t.listFull);
    });
  }),
  (UTTOTWSquadOverviewViewController.prototype.getTOTWHistoryViewModel = function getTOTWHistoryViewModel() {
    return this._totwHistoryViewModel;
  }),
  (UTTOTWSquadOverviewViewController.prototype._eHistorySelected = function _eHistorySelected(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController(),
      n = this.getParentViewController();
    if (
      (this.getView().clearSlotInteractionState(
        enums.UISlotInteractionState.SELECTED
      ),
      n && n.conforms(UTTOTWSquadSplitViewController))
    )
      n.showHistory();
    else if (s) {
      var o = new UTTOTWSquadListViewController();
      o.initWithHistoryViewModel(this._totwHistoryViewModel),
        this.getNavigationController().pushViewController(o, !0);
    }
  }),
  (UTTOTWSquadOverviewViewController.prototype._eCopySquadSelected = function _eCopySquadSelected(
    e,
    t,
    i
  ) {
    function _duplicateSquadComplete(e, t) {
      e.unobserve(this),
        t.success
          ? services.Notification.queue([
              services.Localization.localize('notification.squad.created'),
              enums.UINotificationType.POSITIVE
            ])
          : services.Notification.queue([
              services.Localization.localize('notification.squad.copyFailed'),
              enums.UINotificationType.NEGATIVE
            ]),
        this._checkSquadListFull();
    }
    utils.Debug.Assert(
      this._squad instanceof entities.Squad,
      'No squad present for copying.'
    ),
      TelemetryManager.trackEvent(
        TelemetryManager.Sections.SQUADS,
        TelemetryManager.Categories.BUTTON_PRESS,
        'TOTW - Copy Squad'
      ),
      utils.PopupManager.ShowConfirmation(
        utils.PopupManager.Confirmations.CONFIRM_COPY_SQUAD,
        null,
        function _duplicateSquad() {
          this._squad
            ? services.Squad.duplicate(this._squad).observe(
                this,
                _duplicateSquadComplete
              )
            : services.Notification.queue([
                services.Localization.localize('notification.squad.copyFailed'),
                enums.UINotificationType.NEGATIVE
              ]);
        }.bind(this),
        null
      );
  }),
  (UTTOTWSquadOverviewViewController.prototype._eItemTap = function _eItemTap(
    e,
    t,
    i
  ) {
    var s = utils.JS.isNumber(i.slotIndex) ? i.slotIndex : -1;
    this._squad.getSlot(s).isValid() && this.superclass(e, t, i);
  }),
  (UTTOTWSquadOverviewViewController.prototype._nInfoStateChanged = function _nInfoStateChanged(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.SQUADS,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Item Info Switch Button - TOTW'
    );
  }),
  services.URL.registerDeepLinkID(enums.DeepLinkSections.TOTW, function(e) {
    var n = getAppMain().getRootViewController();
    n.setGameViewTab(UTGameTabBarController.TabTag.SQUADS),
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Squad.requestTOTWHistory().observe(
        this,
        function _onRequestHistoryComplete(e, t) {
          if ((e.unobserve(this), t.success && 0 < t.data.squads.length)) {
            var i = n.getPresentedViewController().getCurrentViewController(),
              s = isPhone()
                ? new UTTOTWSquadOverviewViewController()
                : new UTTOTWSquadSplitViewController();
            s.initWithSquad(t.data.squads[0]), i.pushViewController(s);
          } else
            services.Notification.queue([
              services.Localization.localize('notification.TOTW.loadfail'),
              enums.UINotificationType.NEGATIVE
            ]);
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      );
  }),
  utils.JS.inherits(
    UTTOTWSquadSplitViewController,
    UTBaseSquadSplitViewController
  ),
  (UTTOTWSquadSplitViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      (this._historyController = new UTTOTWSquadListViewController()),
      this._historyController.initWithHistoryViewModel(
        this._overviewController.getTOTWHistoryViewModel()
      ),
      this._historyController.setSquadSelectDelegate(this),
      this.addChildViewController(this._historyController));
  }),
  (UTTOTWSquadSplitViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._historyController.dealloc(),
      (this._historyController = null);
  }),
  (UTTOTWSquadSplitViewController.prototype._generateSquadOverview = function _generateSquadOverview() {
    var e = new UTTOTWSquadOverviewViewController();
    return this._squad ? e.initWithSquad(this._squad) : e.init(), e;
  }),
  (UTTOTWSquadSplitViewController.prototype.getDefaultPanel = function getDefaultPanel() {
    return this._historyController;
  }),
  (UTTOTWSquadSplitViewController.prototype.showHistory = function showHistory() {
    this._showDefaultPanel();
  }),
  (UTTOTWSquadSplitViewController.prototype.setSquad = function setSquad(e) {
    (this._squad = e),
      this._squad &&
        this._overviewController &&
        this._overviewController.setSquad(e),
      this._squad &&
        this._itemDetailController &&
        this._itemDetailController.setSquad(this._squad);
  }),
  (UTTOTWSquadSplitViewController.prototype.selectSlotIndexForSquad = function selectSlotIndexForSquad(
    e,
    t,
    i
  ) {
    this._squad.getSlot(i).isValid() &&
      (this._overviewController.selectSlot(i),
      e === this._overviewController && this._showSlotDetails(i));
  }),
  utils.JS.inherits(UTSquadsHubViewController, UTViewController),
  (UTSquadsHubViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        (this._totwHistoryViewModel = new UTTOTWHistoryViewModel(
          services.Squad
        )),
        this._totwHistoryViewModel.init();
      var e = this.getView();
      e
        .getActiveSquadTile()
        .addTarget(this, this._eActiveSquadTileSelected, enums.Event.TAP),
        e
          .getSquadManagementTile()
          .addTarget(this, this._eSquadManagementTileSelected, enums.Event.TAP),
        e
          .getTOTWTile()
          .addTarget(this, this._eTOTWTileSelected, enums.Event.TAP);
    }
  }),
  (UTSquadsHubViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      this._totwHistoryViewModel &&
        (this._totwHistoryViewModel.dealloc(),
        (this._totwHistoryViewModel = null));
  }),
  (UTSquadsHubViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTSquadsHubView();
  }),
  (UTSquadsHubViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Hub - Squads';
  }),
  (UTSquadsHubViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('infopanel.label.squads');
  }),
  (UTSquadsHubViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this.getNavigationController().setNavigationVisibility(!0, !0),
      this._loadActiveSquadData(),
      this._totwHistoryViewModel
        .requestHistory()
        .observe(this, function _onRequestHistoryComplete(e, t) {
          e.unobserve(this),
            t.success
              ? this.getView().setTOTWEnabled(
                  0 < this._totwHistoryViewModel.getSquads().length
                )
              : NetworkErrorManager.checkCriticalStatus(t.status) &&
                NetworkErrorManager.handleStatus(t.status);
        }),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.SQUADS,
        'Squads Hub'
      );
  }),
  (UTSquadsHubViewController.prototype._loadActiveSquadData = function _loadActiveSquadData() {
    services.Squad.requestSquadByType(enums.UserSquadId.ACTIVE).observe(
      this,
      function _onGetActiveSquadComplete(e, t) {
        e.unobserve(this),
          t.success
            ? this.getView().setActiveSquad(t.data.squad)
            : NetworkErrorManager.checkCriticalStatus(t.status) &&
              NetworkErrorManager.handleStatus(t.status);
      }
    );
  }),
  (UTSquadsHubViewController.prototype._gotoActiveSquadOverview = function _gotoActiveSquadOverview() {
    var s = this.getNavigationController();
    s &&
      (gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Squad.requestSquadByType(enums.UserSquadId.ACTIVE).observe(
        this,
        function _onSquadLoadComplete(e, t) {
          if ((e.unobserve(this), t.success)) {
            var i = isPhone()
              ? new UTSquadOverviewViewController()
              : new UTSquadSplitViewController();
            i.initWithSquad(t.data.squad), s.pushViewController(i);
          } else
            NetworkErrorManager.checkCriticalStatus(t.status)
              ? NetworkErrorManager.handleStatus(t.status)
              : services.Notification.queue([
                  services.Localization.localize(
                    'notification.squad.failedToLoad'
                  ),
                  enums.UINotificationType.NEGATIVE
                ]);
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      ));
  }),
  (UTSquadsHubViewController.prototype._gotoSquadManagement = function _gotoSquadManagement() {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Squad.requestSquadList().observe(
        this,
        function _onRequestSquadsComplete(e, t) {
          e.unobserve(this);
          var i = this.getNavigationController();
          if (i) {
            var s = isPhone()
              ? new UTSquadListViewController()
              : new UTSquadListSplitViewController();
            0 < t.data.squads.length
              ? s.initWithSquads(t.data.squads)
              : s.init(),
              i.pushViewController(s);
          }
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      );
  }),
  (UTSquadsHubViewController.prototype._gotoTOTWSquadOverview = function _gotoTOTWSquadOverview() {
    var e = this.getNavigationController();
    if (e) {
      var t = isPhone()
        ? new UTTOTWSquadOverviewViewController()
        : new UTTOTWSquadSplitViewController();
      t.initWithSquad(this._totwHistoryViewModel.getCurrentSquad()),
        e.pushViewController(t);
    }
  }),
  (UTSquadsHubViewController.prototype._eActiveSquadTileSelected = function _eActiveSquadTileSelected(
    e,
    t,
    i
  ) {
    this._gotoActiveSquadOverview();
  }),
  (UTSquadsHubViewController.prototype._eSquadManagementTileSelected = function _eSquadManagementTileSelected(
    e,
    t,
    i
  ) {
    this._gotoSquadManagement();
  }),
  (UTSquadsHubViewController.prototype._eTOTWTileSelected = function _eTOTWTileSelected(
    e,
    t,
    i
  ) {
    this._gotoTOTWSquadOverview();
  }),
  (UTCoordinateVO.prototype.value = function value() {
    return [this.x, this.y];
  }),
  (UTCoordinateVO.prototype.equals = function equals(e) {
    return this.x === e.x && this.y === e.y;
  }),
  utils.JS.inherits(UTParticle, UTObject),
  (UTParticle.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this.lifetime = 0),
      (this.alpha = 0),
      (this.coordinateHistory = []);
  }),
  (UTParticle.prototype.isDead = function isDead() {
    return this.alpha <= 0 || this.lifetime <= Date.now() - this._timestamp;
  }),
  (UTParticle.prototype.update = function update() {
    this.coordinateHistory.push(new UTCoordinateVO(this.x, this.y)),
      (this.speed += this.speed * this.acceleration),
      (this.x += Math.cos(this.angle) * this.speed),
      (this.y += Math.sin(this.angle) * this.speed + this.gravity),
      (this.rotation += this.rotationSpeed),
      0 < this.alpha && (this.alpha = Math.max(this.alpha - this.decay, 0));
  }),
  (UTParticle.prototype.draw = function draw(e) {
    e.save(),
      (e.fillStyle = this.color),
      (e.globalAlpha = this.alpha),
      e.beginPath(),
      e.arc(this.x, this.y, this.size, 0, 2 * Math.PI, !1),
      e.closePath(),
      e.fill(),
      e.restore();
  }),
  (UTParticle.prototype.random = function random(e, t) {
    return Math.random() * (t - e) + e;
  }),
  utils.JS.inherits(UTParticleSystem, UTObject),
  (UTParticleSystem.prototype.dealloc = function dealloc() {
    (this._running = !1),
      utils.JS.isNumber(this._frameRequestId) &&
        (cancelAnimationFrame(this._frameRequestId),
        (this._frameRequestId = null)),
      this.removeFromParentParticleSystem(),
      this._childParticleSystems.forEach(this.removeChildParticleSystem, this),
      this._particles.forEach(function(e) {
        e.dealloc();
      }),
      (this._particles = []),
      this.superclass();
  }),
  (UTParticleSystem.prototype.run = function run() {
    this._running ||
      ((this._running = !0), (this._runStart = Date.now()), this._draw());
  }),
  (UTParticleSystem.prototype._draw = function _draw() {
    if (this._running) {
      var e = Date.now();
      if (
        (this._parentParticleSystem ||
          this._ctx.clearRect(
            0,
            0,
            this._ctx.canvas.width,
            this._ctx.canvas.height
          ),
        this._runStart + this.duration < e)
      ) {
        if (!this.loop) return;
        this._runStart = e;
      }
      this._drawChildren(),
        this._runStart + this.spawnDelay < e &&
          this._lastSpawnTime + this.spawnInterval < e &&
          ((this._lastSpawnTime = e), this._spawnParticles(this.spawnRate)),
        this._drawParticles(),
        this._parentParticleSystem ||
          (this._frameRequestId = requestAnimationFrame(this._draw.bind(this)));
    }
  }),
  (UTParticleSystem.prototype._drawChildren = function _drawChildren() {
    this._childParticleSystems.forEach(function(e) {
      e._running ? e._draw() : e.run();
    });
  }),
  (UTParticleSystem.prototype._drawParticles = function _drawParticles() {
    var e;
    for (e = 0; e < this._particles.length; e++) {
      var t = this._particles[e];
      this._updateParticle(t),
        t.isDead() && (this._particles.splice(e, 1), e--);
    }
  }),
  (UTParticleSystem.prototype._spawnParticles = function _spawnParticles(e) {
    for (var t = this._particles.length; 0 < e-- && t < this.maxParticles; )
      this._particles.push(this._generateParticle()), t++;
  }),
  (UTParticleSystem.prototype._generateParticle = function _generateParticle() {
    var e = new UTParticle();
    return (
      (e.x = this.x + Math.random() * this._ctx.canvas.width),
      (e.y = this.y + Math.random() * this._ctx.canvas.height),
      (e.acceleration = this.acceleration),
      (e.angle = this.angle),
      (e.gravity = this.gravity),
      (e.rotation = this.rotation),
      (e.rotationSpeed = this.rotationSpeed),
      (e.speed = this.speed),
      e
    );
  }),
  (UTParticleSystem.prototype._updateParticle = function _updateParticle(e) {
    e.draw(this._ctx), e.update();
  }),
  (UTParticleSystem.prototype.addChildParticleSystem = function addChildParticleSystem(
    e
  ) {
    this._childParticleSystems.indexOf(e) < 0 &&
      (e._parentParticleSystem = this)._childParticleSystems.push(e);
  }),
  (UTParticleSystem.prototype.removeChildParticleSystem = function removeChildParticleSystem(
    e
  ) {
    var t = this._childParticleSystems.indexOf(e);
    0 <= t &&
      ((e._parentParticleSystem = null),
      this._childParticleSystems.splice(t, 1));
  }),
  (UTParticleSystem.prototype.removeFromParentParticleSystem = function removeFromParentParticleSystem() {
    this._parentParticleSystem &&
      this._parentParticleSystem.removeChildParticleSystem(this);
  }),
  utils.JS.inherits(UTConfettiParticle, UTParticle),
  (UTConfettiParticle.prototype.update = function update() {
    this.superclass(), (this.tilt = Math.sin(this.rotation) * (this.size / 3));
  }),
  (UTConfettiParticle.prototype.draw = function draw(e) {
    e.save(),
      e.beginPath(),
      (e.lineWidth = this.size / 2),
      (e.strokeStyle = this.color),
      (e.globalAlpha = this.alpha),
      e.moveTo(this.x + this.tilt + this.size / 3, this.y),
      e.lineTo(this.x + this.tilt, this.y + this.tilt + this.size / 3),
      e.stroke(),
      e.restore();
  }),
  (UTConfettiColourVO.prototype.value = function value() {
    return [this.primaryColour, this.secondaryColour];
  }),
  (UTConfettiColourVO.prototype.equals = function equals(e) {
    return (
      this.primaryColour === e.primaryColour &&
      this.secondaryColour === e.secondaryColour
    );
  }),
  (UTConfettiColourVO.prototype.getRandom = function getRandom() {
    var e = 0.5 <= Math.random() ? this.primaryColour : this.secondaryColour;
    return e ? 'rgba(' + e.r + ', ' + e.g + ', ' + e.b + ', 1)' : null;
  }),
  utils.JS.inherits(UTConfettiRainParticleSystem, UTParticleSystem),
  (UTConfettiRainParticleSystem.prototype._generateParticle = function _generateParticle() {
    var e = new UTConfettiParticle();
    return (
      (e.size = e.random(30, 50)),
      (e.color = this._confettiColor.getRandom()),
      (e.x = this.x + Math.random() * this._ctx.canvas.width),
      (e.y = -e.size),
      (e.rotation = e.random(1, 2 * Math.PI)),
      (e.rotationSpeed = e.random(-0.25, 0.25)),
      (e.speed = 0),
      (e.acceleration = 0),
      (e.gravity = this.gravity),
      (e.tilt = Math.floor(Math.random() * e.size)),
      e
    );
  }),
  (UTConfettiRainParticleSystem.prototype.setConfettiColor = function setConfettiColor(
    e
  ) {
    this._confettiColor = e;
  }),
  (UTConfettiRainParticleSystem.prototype._updateParticle = function _updateParticle(
    e
  ) {
    this.superclass(e), e.y > this._ctx.canvas.height && (e.lifetime = 0);
  }),
  utils.JS.inherits(UTConfettiCannonParticleSystem, UTParticleSystem),
  (UTConfettiCannonParticleSystem.prototype._generateParticle = function _generateParticle() {
    var e = new UTConfettiParticle();
    return (
      (e.size = e.random(30, 50)),
      (e.color = this._confettiColor.getRandom()),
      (e.x = this.x),
      (e.y = this.y),
      (e.angle = this.angle + 0.1 * (Math.random() - Math.random())),
      (e.speed = Math.random() * this.speed),
      (e.acceleration = -0.03),
      (e.rotation = e.random(1, 2 * Math.PI)),
      (e.rotationSpeed = e.random(-0.25, 0.25)),
      (e.gravity = this.gravity),
      e
    );
  }),
  (UTConfettiCannonParticleSystem.prototype.setConfettiColor = function setConfettiColor(
    e
  ) {
    this._confettiColor = e;
  }),
  (UTParticleTrail.prototype.draw = function draw(i, e) {
    var t = e.coordinateHistory.length;
    if (0 < t) {
      var s = 60 * this.time,
        n = e.coordinateHistory.slice(Math.max(t - s, 0)),
        o = n.shift();
      i.save(),
        (i.strokeStyle = this.color),
        (i.lineWidth = this.width),
        (i.lineCap = this.lineCap),
        i.beginPath(),
        i.moveTo(o.x, o.y),
        n.forEach(function(e, t) {
          (i.globalAlpha = (s - t) / s), i.lineTo(e.x, e.y);
        }),
        i.stroke(),
        i.restore();
    }
  }),
  utils.JS.inherits(UTFireworksParticleSystem, UTParticleSystem),
  (UTFireworksParticleSystem.prototype._generateParticle = function _generateParticle() {
    var e = new UTParticle();
    return (
      (e.x = this.x),
      (e.y = this.y),
      (e.color = 'rgba(255, 255, 255, 0.4)'),
      (e.speed = e.random(10, 20)),
      (e.angle = e.random(0, 2 * Math.PI)),
      (e.decay = 0.015),
      (e.acceleration = -0.05),
      e
    );
  }),
  (UTFireworksParticleSystem.prototype._updateParticle = function _updateParticle(
    e
  ) {
    e.update(),
      e.draw(this._ctx),
      (this._particleTrail.color = e.color),
      this._particleTrail.draw(this._ctx, e);
  }),
  utils.JS.inherits(UTSnowflakeParticle, UTParticle),
  (UTSnowflakeParticle.prototype.draw = function draw(e) {
    e.save(),
      (e.globalAlpha = this.alpha),
      e.beginPath(),
      e.arc(this.x, this.y, this.size, 0, 2 * Math.PI, !1),
      (e.fillStyle = this.color),
      e.fill(),
      e.restore();
  }),
  utils.JS.inherits(UTSnowfallParticleSystem, UTParticleSystem),
  (UTSnowfallParticleSystem.prototype._generateParticle = function _generateParticle() {
    var e = new UTSnowflakeParticle(),
      t = this._ctx.canvas.width,
      i = Math.abs(Math.cos(this.angle) * (t / 2)),
      s = 0 < Math.cos(this.angle) ? this.x - i : this.x;
    return (
      (e.color = 'rgb(255, 255, 255)'),
      (e.size = e.random(2, 7)),
      (e.x = s + Math.random() * (t + i)),
      (e.y = -e.size),
      (e.speed = Math.random() * this.speed),
      (e.acceleration = 0),
      (e.gravity = Math.ceil(Math.random() * this.gravity)),
      (e.angle = this.angle),
      (e.decay = e.random(0.001, 0.01)),
      e
    );
  }),
  (UTSnowfallParticleSystem.prototype._updateParticle = function _updateParticle(
    e
  ) {
    this.superclass(e), e.y > this._ctx.canvas.height && (e.lifetime = 0);
  }),
  utils.JS.inherits(UTPackAnimationView, UTView),
  (UTPackAnimationView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-pack-animation-view');
      var t = document.createElement('div');
      t.classList.add('pack-animation-vignette'),
        e.appendChild(t),
        (this.__canvas = document.createElement('canvas')),
        this.__canvas.classList.add('particle-animation'),
        e.appendChild(this.__canvas),
        (this.__itemShell = document.createElement('div')),
        this.__itemShell.classList.add('animated-item-shell'),
        e.appendChild(this.__itemShell);
      var i = document.createElement('div');
      i.classList.add('animated-pack-shell'),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTPackAnimationView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__canvas = null),
      (this.__itemShell = null);
  }),
  (UTPackAnimationView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPackAnimationView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPackAnimationView.prototype.init = function init() {
    this.superclass(),
      (this._particleSystem = new UTParticleSystem(this.__canvas)),
      (this._confettiGenerator = new UTConfettiRainParticleSystem(
        this.__canvas
      )),
      (this._confettiCannon1 = new UTConfettiCannonParticleSystem(
        this.__canvas
      )),
      (this._confettiCannon2 = new UTConfettiCannonParticleSystem(
        this.__canvas
      )),
      (this._fireworkGenerator = new UTFireworksParticleSystem(this.__canvas)),
      (this._snowParticleSystem = new UTSnowfallParticleSystem(this.__canvas)),
      (this._particleSystem.spawnRate = 0),
      (this._particleSystem.spawnInterval = 5e3),
      (this._particleSystem.loop = !0),
      (this._fireworkGenerator.gravity = 0.15),
      (this._fireworkGenerator.spawnInterval = 1e3),
      (this._fireworkGenerator.spawnRate = 50),
      (this._fireworkGenerator.spawnDelay = 1e3),
      (this._fireworkGenerator.duration = 4e3),
      this._particleSystem.addChildParticleSystem(this._fireworkGenerator),
      gConfigurationModel.getConfigBoolean(
        models.ConfigurationModel.KEY_WINTER_THEME
      )
        ? ((this._snowParticleSystem.gravity = 5),
          (this._snowParticleSystem.spawnInterval = 300),
          (this._snowParticleSystem.spawnRate = 20),
          (this._snowParticleSystem.loop = !0),
          (this._snowParticleSystem.angle = Math.PI),
          (this._snowParticleSystem.speed = 4),
          this._particleSystem.addChildParticleSystem(this._snowParticleSystem))
        : ((this._confettiGenerator.gravity = 5),
          (this._confettiGenerator.spawnInterval = 300),
          (this._confettiGenerator.spawnRate = 5),
          (this._confettiGenerator.loop = !0),
          this._particleSystem.addChildParticleSystem(this._confettiGenerator)),
      (this._confettiCannon1.speed = 55),
      (this._confettiCannon1.gravity = 5),
      (this._confettiCannon1.spawnInterval = 5e3),
      (this._confettiCannon1.spawnRate = 25),
      (this._confettiCannon2.speed = 55),
      (this._confettiCannon2.gravity = 5),
      (this._confettiCannon2.spawnInterval = 5e3),
      (this._confettiCannon2.spawnRate = 25),
      this._particleSystem.addChildParticleSystem(this._confettiCannon1),
      this._particleSystem.addChildParticleSystem(this._confettiCannon2);
  }),
  (UTPackAnimationView.prototype.dealloc = function dealloc() {
    window.removeEventListener(
      enums.Event.RESIZE,
      this._windowResizeCallback,
      !1
    ),
      utils.JS.isValid(this._cardComponent) &&
        (this._cardComponent.destroy(), (this._cardComponent = null)),
      this._particleSystem &&
        (this._particleSystem.dealloc(), (this._particleSystem = null)),
      this._confettiGenerator &&
        (this._confettiGenerator.dealloc(), (this._confettiGenerator = null)),
      this._confettiCannon1 &&
        (this._confettiCannon1.dealloc(), (this._confettiCannon1 = null)),
      this._confettiCannon2 &&
        (this._confettiCannon2.dealloc(), (this._confettiCannon2 = null)),
      this._fireworkGenerator &&
        (this._fireworkGenerator.dealloc(), (this._fireworkGenerator = null)),
      this._snowParticleSystem &&
        (this._snowParticleSystem.dealloc(), (this._snowParticleSystem = null)),
      this.superclass();
  }),
  (UTPackAnimationView.prototype.runAnimation = function runAnimation(e, t) {
    if ((this._positionScene(), t)) {
      var i = t.getExpColorMap(e.getTier()),
        s = new UTConfettiColourVO(i.background, i.dividers);
      this._confettiGenerator.setConfettiColor(s),
        this._confettiCannon1.setConfettiColor(s),
        this._confettiCannon2.setConfettiColor(s);
    }
    setTimeout(
      function() {
        (this._fireworkGenerator.x += 300), (this._fireworkGenerator.y += 100);
      }.bind(this),
      1100
    ),
      setTimeout(
        function() {
          (this._fireworkGenerator.x -= 400),
            (this._fireworkGenerator.y += 300);
        }.bind(this),
        2100
      ),
      window.addEventListener(
        enums.Event.RESIZE,
        this._windowResizeCallback,
        !1
      ),
      this._particleSystem.run();
  }),
  (UTPackAnimationView.prototype.setPackTier = function setPackTier(e) {
    var t = '';
    switch (e) {
      case enums.Purchase.PackTier.BRONZE:
        t = 'bronze';
        break;
      case enums.Purchase.PackTier.SILVER:
        t = 'silver';
        break;
      case enums.Purchase.PackTier.GOLD:
        t = 'gold';
        break;
      case enums.Purchase.PackTier.SPECIAL:
        t = 'special';
        break;
      case enums.Purchase.PackTier.LOAN:
        t = 'loan';
        break;
      case enums.Purchase.PackTier.STARTER:
        t = 'starter';
        break;
      case enums.Purchase.PackTier.LEGENDS:
        t = 'legend';
        break;
      case enums.Purchase.PackTier.STORY:
        t = 'story';
        break;
      case enums.Purchase.PackTier.SBC:
        t = 'sbc';
        break;
      case enums.Purchase.PackTier.CHAMPION:
        t = 'champion';
        break;
      default:
        t = 'gold';
    }
    this.addClass(t);
  }),
  (UTPackAnimationView.prototype.generateItem = function generateItem(e) {
    utils.JS.isValid(this._cardComponent) ||
      ((this._cardComponent = factories.ItemView.createLargeItem(e)),
      this._cardComponent.init(),
      this._cardComponent.showSecondaryViews(!1),
      this._cardComponent.render(e),
      this.__itemShell.appendChild(this._cardComponent.getRootElement()));
  }),
  (UTPackAnimationView.prototype._positionScene = function _positionScene() {
    var e = this.getRootElement();
    (this.__canvas.width = e.offsetWidth),
      (this.__canvas.height = e.offsetHeight);
    var t = this.__canvas.width,
      i = this.__canvas.height;
    this._positionConfettiCannons(t, i), this._positionFireworks(t);
  }),
  (UTPackAnimationView.prototype._positionConfettiCannons = function _positionConfettiCannons(
    e,
    t
  ) {
    var i = e / 2,
      s = t / 2;
    (this._confettiCannon2.x =
      e < 600
        ? ((this._confettiCannon1.x = 0), e)
        : ((this._confettiCannon1.x = i - 300), i + 300)),
      (this._confettiCannon1.y = t),
      (this._confettiCannon2.y = t),
      (this._confettiCannon1.angle = Math.atan2(
        s - this._confettiCannon1.y,
        i - this._confettiCannon1.x
      )),
      (this._confettiCannon2.angle = Math.atan2(
        s - this._confettiCannon2.y,
        i - this._confettiCannon2.x
      ));
  }),
  (UTPackAnimationView.prototype._positionFireworks = function _positionFireworks(
    e
  ) {
    (this._fireworkGenerator.x = e / 2 - 100),
      (this._fireworkGenerator.y = 200);
  }),
  (UTPackAnimationView.prototype._eWindowResize = function _eWindowResize(e) {
    this._positionScene();
  }),
  utils.JS.inherits(UTPackAnimationViewController, UTViewController),
  (UTPackAnimationViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass();
      var e = getDefaultDispatcher();
      e.addObserver(enums.Notification.APP_PAUSE, this, this._nAppPaused),
        e.addObserver(enums.Notification.APP_RESUME, this, this._nAppResumed);
    }
  }),
  (UTPackAnimationViewController.prototype.initWithPackData = function initWithPackData(
    e,
    t
  ) {
    this.initialized ||
      ((this._presentedItem = e), (this._packTier = t), this.init());
  }),
  (UTPackAnimationViewController.prototype.dealloc = function dealloc() {
    clearTimeout(this._animationTimeout), (this._callback = null);
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.APP_PAUSE, this),
      e.removeObserver(enums.Notification.APP_RESUME, this),
      this.superclass();
  }),
  (UTPackAnimationViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTPackAnimationView();
  }),
  (UTPackAnimationViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._runAnimation();
  }),
  (UTPackAnimationViewController.prototype.setAnimationCallback = function setAnimationCallback(
    e
  ) {
    utils.JS.isFunction(e) && (this._callback = e);
  }),
  (UTPackAnimationViewController.prototype._runAnimation = function _runAnimation() {
    if (!this._running) {
      this._running = !0;
      var e = this.getView(),
        t = services.Configuration.getItemRarity(this._presentedItem);
      e.setPackTier(this._packTier),
        e.generateItem(this._presentedItem),
        e.runAnimation(this._presentedItem, t),
        (this._animationTimeout = setTimeout(
          this._runCallback.bind(this),
          4500
        ));
    }
  }),
  (UTPackAnimationViewController.prototype._runCallback = function _runCallback() {
    var e = this.getNavigationController();
    utils.JS.isFunction(this._callback)
      ? this._callback()
      : e && e.popViewController();
  }),
  (UTPackAnimationViewController.prototype._nAppPaused = function _nAppPaused(
    e,
    t,
    i
  ) {
    clearTimeout(this._animationTimeout);
  }),
  (UTPackAnimationViewController.prototype._nAppResumed = function _nAppResumed(
    e,
    t,
    i
  ) {
    this._runCallback();
  }),
  utils.JS.inherits(UTPackOddsView, UTView),
  (UTPackOddsView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-pack-odds-modal');
      var t = document.createElement('header');
      (this.__title = document.createElement('h1')),
        t.appendChild(this.__title),
        (this._exitBtn = new UTImageButtonControl()),
        this._exitBtn.getRootElement().classList.add('exit-btn'),
        t.appendChild(this._exitBtn.getRootElement()),
        e.appendChild(t),
        (this.__description = document.createElement('div')),
        this.__description.classList.add('description'),
        e.appendChild(this.__description),
        (this._table = new UTPseudoTableView()),
        e.appendChild(this._table.getRootElement());
      var i = document.createElement('footer');
      (this.__timestamp = document.createElement('div')),
        this.__timestamp.classList.add('footer-info'),
        i.appendChild(this.__timestamp),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTPackOddsView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      this._exitBtn.destroy(),
      (this.__description = null),
      this._table.destroy(),
      (this.__timestamp = null);
  }),
  (UTPackOddsView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPackOddsView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPackOddsView.prototype.init = function init() {
    this.superclass(),
      (this.__description.textContent = services.Localization.localize(
        'packodds.modal.description'
      )),
      this._table.init(),
      this._table.addClass(UTPseudoTableView.Style.ALTERNATING),
      this._exitBtn.init();
  }),
  (UTPackOddsView.prototype.getExitBtn = function getExitBtn() {
    return this._exitBtn;
  }),
  (UTPackOddsView.prototype.getFooter = function getFooter() {
    return this.__timestamp;
  }),
  (UTPackOddsView.prototype.setTitle = function setTitle(e) {
    this.__title.textContent = e;
  }),
  (UTPackOddsView.prototype.setOdds = function setOdds(e) {
    e.forEach(function(e) {
      var t = document.createElement('div');
      switch ((DOMKit.addClass(t, 'pack-odds-icon'), e.qualityId)) {
        case enums.Purchase.PackTier.BRONZE:
          DOMKit.addClass(t, 'bronze');
          break;
        case enums.Purchase.PackTier.SILVER:
          DOMKit.addClass(t, 'silver');
          break;
        case enums.Purchase.PackTier.GOLD:
          DOMKit.addClass(t, 'gold');
          break;
        case enums.Purchase.PackTier.SPECIAL:
          DOMKit.addClass(t, 'special');
          break;
        default:
          utils.Debug.Assert(
            !1,
            'UTPackOddsView :: Passed an unsupported PackTier.'
          );
      }
      this._table.addRowData([t, e.description, e.odds]);
    }, this);
    var t = services.Localization.localizeDateTime(
        new Date(e[0].startTime),
        !0
      ),
      i = services.Localization.localize('packodds.modal.timestamp', [t]);
    this.__timestamp.innerHTML = new DOMParser().parseFromString(
      i,
      'text/html'
    ).body.innerHTML;
  }),
  utils.JS.inherits(UTPackOddsViewController, UTViewController),
  (UTPackOddsViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        utils.Debug.Assert(
          0 < this._odds.length,
          'UTPackOddsViewController expects at least one UTPackOddsDTO.'
        ),
        this.getView()
          .getExitBtn()
          .addTarget(this, this._eOnExitBtn, enums.Event.TAP);
      var e = getBackButtonEventController();
      e && e.registerDelegate(this, UTBackButtonEventController.PRIORITY.POPUP);
    }
  }),
  (UTPackOddsViewController.prototype.initWithPack = function initWithPack(e) {
    this.initialized ||
      ((this._odds = e.odds), this.getView().setTitle(e.packName), this.init());
  }),
  (UTPackOddsViewController.prototype.dealloc = function dealloc() {
    this._odds = [];
    var e = getBackButtonEventController();
    e && e.unregisterDelegate(this, UTBackButtonEventController.PRIORITY.POPUP),
      this.superclass();
  }),
  (UTPackOddsViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTPackOddsView();
  }),
  (UTPackOddsViewController.prototype.viewDidAppear = function viewDidAppear() {
    var e = this.getView();
    e.setOdds(this._odds), this.decorateLinks(e.getFooter()), this.superclass();
  }),
  (UTPackOddsViewController.prototype._eOnExitBtn = function _eOnExitBtn(
    e,
    t,
    i
  ) {
    this.getParentViewController().dismissViewController();
  }),
  (UTPackOddsViewController.prototype.handleBackButtonEvent = function handleBackButtonEvent(
    e
  ) {
    this.getParentViewController().dismissViewController();
  }),
  NamespaceManager.Register('utils'),
  (utils.NumberDrawBox = function UTNumberDrawBoxUtility(e) {
    (this._originalNumberList = []),
      (this._currentNumberList = []),
      (this._lastDrawnIndex = -1),
      utils.JS.isValid(e) &&
        ((e =
          'number' == typeof e ? this.createSequentialArrayFromNumber(e) : e),
        this.setNumberList(e));
  }),
  (utils.NumberDrawBox.prototype.setNumberList = function setNumberList(e) {
    Array.isArray(e) &&
      (utils.Debug.Assert(
        0 < e.length,
        'utils.NumberDrawBox expecting at least one number to draw.'
      ),
      (this._originalNumberList = e),
      this.reset());
  }),
  (utils.NumberDrawBox.prototype.draw = function draw() {
    var e = 0;
    return (
      0 < this._originalNumberList.length &&
        (0 === this._currentNumberList.length && this.reset(),
        (e = this._currentNumberList.splice(
          Math.floor(Math.random() * this._currentNumberList.length),
          1
        )[0]),
        -1 !== this._lastDrawnIndex &&
          (this._currentNumberList.push(
            this._originalNumberList[this._lastDrawnIndex]
          ),
          (this._lastDrawnIndex = -1)),
        0 === this._currentNumberList.length &&
          (this._lastDrawnIndex = this._originalNumberList.indexOf(e))),
      e
    );
  }),
  (utils.NumberDrawBox.prototype.reset = function reset() {
    this._currentNumberList = [];
    var e = this._originalNumberList.length;
    1 < e
      ? (this._currentNumberList = this._originalNumberList.reduce(
          function(e, t, i) {
            return this._lastDrawnIndex !== i && e.push(t), e;
          }.bind(this),
          []
        ))
      : 1 === e && (this._currentNumberList = this._originalNumberList.slice());
  }),
  (utils.NumberDrawBox.prototype.createSequentialArrayFromNumber = function createSequentialArrayFromNumber(
    e
  ) {
    var t,
      i = [];
    for (t = 0; t < e; ++t) i.push(t);
    return i;
  }),
  NamespaceManager.Register('utils'),
  (utils.PackUtils = {}),
  (utils.PackUtils._fgAssetRandomizers = {}),
  (utils.PackUtils._fgAssetRandomizers[
    enums.Purchase.PackTier.BRONZE
  ] = new utils.NumberDrawBox(4)),
  (utils.PackUtils._fgAssetRandomizers[
    enums.Purchase.PackTier.SILVER
  ] = new utils.NumberDrawBox(4)),
  (utils.PackUtils._fgAssetRandomizers[
    enums.Purchase.PackTier.GOLD
  ] = new utils.NumberDrawBox(4)),
  (utils.PackUtils._fgAssetRandomizers[
    enums.Purchase.PackTier.SPECIAL
  ] = new utils.NumberDrawBox(1)),
  (utils.PackUtils._fgAssetRandomizers[
    enums.Purchase.PackTier.STORY
  ] = new utils.NumberDrawBox(1)),
  (utils.PackUtils._fgAssetRandomizers[
    enums.Purchase.PackTier.LOAN
  ] = new utils.NumberDrawBox(1)),
  Object.freeze(utils.PackUtils._fgAssetRandomizers),
  (utils.PackUtils.getForegroundId = function getForegroundId(e) {
    return e === enums.Purchase.PackTier.LOAN
      ? 0
      : utils.PackUtils.hasForeground(e)
      ? utils.PackUtils._fgAssetRandomizers[e].draw()
      : -1;
  }),
  (utils.PackUtils.hasForeground = function hasForeground(e) {
    return !!utils.JS.isValid(utils.PackUtils._fgAssetRandomizers[e]);
  }),
  (utils.PackUtils.hasLogo = function hasLogo(e) {
    switch (e) {
      case enums.Purchase.PackTier.LEGENDS:
      case enums.Purchase.PackTier.SBC:
      case enums.Purchase.PackTier.CHAMPION:
        return !1;
      default:
        return !0;
    }
  }),
  (utils.PackUtils.onLogoLoad = function onLogoLoad(e, t, i) {
    e.unobserve(this), t || i.replaceAndShowResource('images/transparent.png');
  }),
  utils.JS.inherits(UTCurrencyButtonControl, UTButtonControl),
  (UTCurrencyButtonControl.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('button');
      e.classList.add('currency'),
        (this.__currencyAmount = document.createElement('span')),
        this.__currencyAmount.classList.add('text'),
        e.appendChild(this.__currencyAmount),
        (this.__currencyLabel = document.createElement('span')),
        this.__currencyLabel.classList.add('subtext'),
        e.appendChild(this.__currencyLabel),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTCurrencyButtonControl.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__currencyAmount = null),
      (this.__currencyLabel = null);
  }),
  (UTCurrencyButtonControl.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTCurrencyButtonControl.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTCurrencyButtonControl.prototype.setText = function setText(e) {
    this.__currencyAmount.textContent = e;
  }),
  (UTCurrencyButtonControl.prototype.setAmount = function setAmount(e) {
    this.setText(e);
  }),
  (UTCurrencyButtonControl.prototype.setCurrencyLabel = function setCurrencyLabel(
    e
  ) {
    this.__currencyLabel.textContent = e;
  }),
  (UTCurrencyButtonControl.prototype.setCurrencyType = function setCurrencyType(
    e
  ) {
    if (e !== this._currencyType) {
      var t = '';
      (this._currencyType = e) &&
        (t =
          e === enums.Currency.POINTS
            ? services.Localization.localize('currency.points')
            : services.Localization.localize('currency.coins')),
        this.setCurrencyLabel(t),
        this.toggleClass('coins', e === enums.Currency.COINS),
        this.toggleClass('points', e === enums.Currency.POINTS);
    }
  }),
  utils.JS.inherits(UTStorePackDetailsView, UTTargetActionView),
  (UTStorePackDetailsView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-store-pack-details-view'),
        (this._pack = new UTPackGraphicView()),
        e.appendChild(this._pack.getRootElement());
      var t = document.createElement('div');
      t.classList.add('content');
      var i = document.createElement('h1');
      i.classList.add('title'),
        (this.__packTitle = document.createElement('span')),
        i.appendChild(this.__packTitle),
        (this._btnOdds = new UTImageButtonControl()),
        this._btnOdds.getRootElement().classList.add('info-btn'),
        i.appendChild(this._btnOdds.getRootElement()),
        t.appendChild(i);
      var s = document.createElement('div');
      s.classList.add('ut-store-pack-details-view--pack-counts'),
        (this.__itemQuantity = document.createElement('div')),
        this.__itemQuantity.classList.add('total'),
        this.__itemQuantity.classList.add('pack-count'),
        (this.__itemQuantityValue = document.createElement('span')),
        this.__itemQuantityValue.classList.add('value'),
        this.__itemQuantity.appendChild(this.__itemQuantityValue),
        (this.__itemQuantityLabel = document.createElement('span')),
        this.__itemQuantityLabel.classList.add('label'),
        this.__itemQuantity.appendChild(this.__itemQuantityLabel),
        s.appendChild(this.__itemQuantity),
        (this.__tierQuantity = document.createElement('div')),
        this.__tierQuantity.classList.add('pack-count'),
        (this.__tierQuantityValue = document.createElement('span')),
        this.__tierQuantityValue.classList.add('value'),
        this.__tierQuantity.appendChild(this.__tierQuantityValue),
        (this.__tierQuantityLabel = document.createElement('span')),
        this.__tierQuantityLabel.classList.add('label'),
        this.__tierQuantity.appendChild(this.__tierQuantityLabel),
        s.appendChild(this.__tierQuantity),
        (this.__rareQuantity = document.createElement('div')),
        this.__rareQuantity.classList.add('rare'),
        this.__rareQuantity.classList.add('pack-count'),
        (this.__rareQuantityValue = document.createElement('span')),
        this.__rareQuantityValue.classList.add('value'),
        this.__rareQuantity.appendChild(this.__rareQuantityValue),
        (this.__rareQuantityLabel = document.createElement('span')),
        this.__rareQuantityLabel.classList.add('label'),
        this.__rareQuantity.appendChild(this.__rareQuantityLabel),
        s.appendChild(this.__rareQuantity),
        t.appendChild(s),
        (this.__packDesc = document.createElement('p')),
        this.__packDesc.classList.add('description'),
        t.appendChild(this.__packDesc),
        (this.__quantity = document.createElement('p')),
        this.__quantity.classList.add('quantity'),
        (this.__quantityLabel = document.createElement('span')),
        this.__quantityLabel.classList.add('label'),
        this.__quantity.appendChild(this.__quantityLabel),
        (this.__quantityValue = document.createElement('span')),
        this.__quantityValue.classList.add('value'),
        this.__quantity.appendChild(this.__quantityValue),
        t.appendChild(this.__quantity),
        (this.__time = document.createElement('p')),
        this.__time.classList.add('expiry'),
        (this.__timeLabel = document.createElement('span')),
        this.__timeLabel.classList.add('label'),
        this.__time.appendChild(this.__timeLabel),
        (this.__timeValue = document.createElement('span')),
        this.__timeValue.classList.add('value'),
        this.__time.appendChild(this.__timeValue),
        t.appendChild(this.__time),
        e.appendChild(t);
      var n = document.createElement('div');
      n.classList.add('purchasing'),
        (this._btnOpen = new UTCurrencyButtonControl()),
        this._btnOpen.getRootElement().classList.add('call-to-action'),
        n.appendChild(this._btnOpen.getRootElement()),
        (this._btnBuyCoins = new UTCurrencyButtonControl()),
        this._btnBuyCoins.getRootElement().classList.add('call-to-action'),
        n.appendChild(this._btnBuyCoins.getRootElement()),
        (this._btnBuyPoints = new UTCurrencyButtonControl()),
        this._btnBuyPoints.getRootElement().classList.add('call-to-action'),
        n.appendChild(this._btnBuyPoints.getRootElement()),
        e.appendChild(n),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTStorePackDetailsView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._pack.destroy(),
      (this.__packTitle = null),
      this._btnOdds.destroy(),
      (this.__itemQuantity = null),
      (this.__itemQuantityValue = null),
      (this.__itemQuantityLabel = null),
      (this.__tierQuantity = null),
      (this.__tierQuantityValue = null),
      (this.__tierQuantityLabel = null),
      (this.__rareQuantity = null),
      (this.__rareQuantityValue = null),
      (this.__rareQuantityLabel = null),
      (this.__packDesc = null),
      (this.__quantity = null),
      (this.__quantityLabel = null),
      (this.__quantityValue = null),
      (this.__time = null),
      (this.__timeLabel = null),
      (this.__timeValue = null),
      this._btnOpen.destroy(),
      this._btnBuyCoins.destroy(),
      this._btnBuyPoints.destroy();
  }),
  (UTStorePackDetailsView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTStorePackDetailsView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTStorePackDetailsView.prototype.init = function init() {
    this.superclass(),
      (this.__rareQuantityLabel.textContent = services.Localization.localize(
        'store.group.rarelabel'
      )),
      (this.__timeLabel.textContent = services.Localization.localize(
        'store.sale.endingTime'
      )),
      (this.__quantityLabel.textContent = services.Localization.localize(
        'store.saletype.quantity'
      )),
      this._btnOdds.init(),
      this._btnOpen.init(),
      this._btnBuyCoins.init(),
      this._btnBuyPoints.init(),
      this._btnBuyCoins.setCurrencyType(enums.Currency.COINS),
      this._btnBuyPoints.setCurrencyType(enums.Currency.POINTS),
      this._btnOpen.setText(
        services.Localization.localize('store.mypack.open')
      ),
      this._btnOpen.setCurrencyLabel(
        services.Localization.localize('store.mypack.claimPack')
      ),
      this._btnOdds.addTarget(this, this._eCheckPackOdds, enums.Event.TAP),
      this._btnOpen.addTarget(this, this._eOpenPack, enums.Event.TAP),
      this._btnBuyCoins.addTarget(this, this._eBuyWithCoins, enums.Event.TAP),
      this._btnBuyPoints.addTarget(this, this._eBuyWithPoints, enums.Event.TAP);
  }),
  (UTStorePackDetailsView.prototype.dealloc = function dealloc() {
    clearTimeout(this._timeInterval), this.superclass();
  }),
  (UTStorePackDetailsView.prototype.setPackId = function setPackId(e) {
    this._packId = e;
  }),
  (UTStorePackDetailsView.prototype.setPackBackground = function setPackBackground(
    e,
    t
  ) {
    this._pack.setPackBackground(e, t);
  }),
  (UTStorePackDetailsView.prototype.setPackForeground = function setPackForeground(
    e
  ) {
    this._pack.setPackForeground(e);
  }),
  (UTStorePackDetailsView.prototype.setPromo = function setPromo(e, t) {
    this._pack.setPromo(e, t);
  }),
  (UTStorePackDetailsView.prototype.setName = function setName(e) {
    this.__packTitle.textContent = e;
  }),
  (UTStorePackDetailsView.prototype.setDescription = function setDescription(
    e
  ) {
    this.__packDesc.innerHTML = utils.TextUtils.nltobr(e);
  }),
  (UTStorePackDetailsView.prototype.setItemCounts = function setItemCounts(
    e,
    t,
    i,
    s,
    n
  ) {
    function _toggleCountDisplay(e, t) {
      e.style.display = t ? '' : 'none';
    }
    _toggleCountDisplay(this.__itemQuantity, 0 < e),
      _toggleCountDisplay(this.__rareQuantity, 0 < n),
      _toggleCountDisplay(this.__tierQuantity, 0 < t || 0 < i || 0 < s);
    var o = '',
      a = '',
      r = '';
    (r =
      0 < s
        ? ((o = 'store.group.goldlabel'), (a = s.toString()), 'gold')
        : 0 < i
        ? ((o = 'store.group.silverlabel'), (a = i.toString()), 'silver')
        : ((o = 'store.group.bronzelabel'), (a = t.toString()), 'bronze')),
      (this.__itemQuantityLabel.textContent = services.Localization.localize(
        1 < e ? 'dock.label.items' : 'dock.label.item'
      )),
      (this.__tierQuantityLabel.textContent = services.Localization.localize(
        o
      )),
      (this.__itemQuantityValue.textContent = e.toString()),
      (this.__tierQuantityValue.textContent = a),
      (this.__rareQuantityValue.textContent = n.toString()),
      this.__tierQuantity.classList.remove('gold'),
      this.__tierQuantity.classList.remove('silver'),
      this.__tierQuantity.classList.remove('bronze'),
      this.__tierQuantity.classList.add(r);
  }),
  (UTStorePackDetailsView.prototype.setTimeRemaining = function setTimeRemaining(
    e
  ) {
    clearTimeout(this._timeInterval);
    var t = Math.round(e - Date.now() / 1e3);
    (this.__timeValue.textContent =
      0 < t ? services.Localization.localizePromoTimeRemaining(t) : ''),
      (this.__time.style.display = 0 < t ? '' : 'none'),
      0 < t
        ? (this._timeInterval = setTimeout(
            this.setTimeRemaining.bind(this, e),
            1e3
          ))
        : (this.enableCoinPurchase(!1), this.enablePointsPurchase(!1));
  }),
  (UTStorePackDetailsView.prototype.setPackQuantity = function setPackQuantity(
    e
  ) {
    (this.__quantity.style.display = 0 < e ? '' : 'none'),
      (this.__quantityValue.textContent = 0 < e ? e.toString() : '0');
  }),
  (UTStorePackDetailsView.prototype.setCoinsAmount = function setCoinsAmount(
    e
  ) {
    this._btnBuyCoins.setText(services.Localization.localizeNumber(e));
  }),
  (UTStorePackDetailsView.prototype.setPointsAmount = function setPointsAmount(
    e
  ) {
    this._btnBuyPoints.setText(services.Localization.localizeNumber(e));
  }),
  (UTStorePackDetailsView.prototype.toggleCoins = function toggleCoins(e) {
    this._btnBuyCoins.setDisplay(e);
  }),
  (UTStorePackDetailsView.prototype.togglePoints = function togglePoints(e) {
    this._btnBuyPoints.setDisplay(e);
  }),
  (UTStorePackDetailsView.prototype.toggleOdds = function toggleOdds(e) {
    this._btnOdds.setDisplay(e);
  }),
  (UTStorePackDetailsView.prototype.enableCoinPurchase = function enableCoinPurchase(
    e
  ) {
    this._btnBuyCoins.setInteractionState(e);
  }),
  (UTStorePackDetailsView.prototype.enablePointsPurchase = function enablePointsPurchase(
    e
  ) {
    this._btnBuyPoints.setInteractionState(e);
  }),
  (UTStorePackDetailsView.prototype.setMyPack = function setMyPack(e) {
    this._btnOpen.setDisplay(e), this.toggleCoins(!e), this.togglePoints(!e);
  }),
  (UTStorePackDetailsView.prototype._eOpenPack = function _eOpenPack(e, t, i) {
    this._triggerActions(enums.UIPackEvent.OPEN, {
      packId: this._packId
    });
  }),
  (UTStorePackDetailsView.prototype._eBuyWithCoins = function _eBuyWithCoins(
    e,
    t,
    i
  ) {
    this._triggerActions(enums.UIPackEvent.BUY_COINS, {
      packId: this._packId
    });
  }),
  (UTStorePackDetailsView.prototype._eBuyWithPoints = function _eBuyWithPoints(
    e,
    t,
    i
  ) {
    this._triggerActions(enums.UIPackEvent.BUY_POINTS, {
      packId: this._packId
    });
  }),
  (UTStorePackDetailsView.prototype._eCheckPackOdds = function _eCheckPackOdds(
    e,
    t,
    i
  ) {
    this._triggerActions(enums.UIPackEvent.CHECK_ODDS, {
      packId: this._packId
    });
  }),
  utils.JS.inherits(UTNimbleMTXDetailsView, UTTargetActionView),
  (UTNimbleMTXDetailsView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('col-1-1'),
        e.classList.add('ut-nimble-mtx-details'),
        (this.__mtxImage = document.createElement('div')),
        this.__mtxImage.classList.add('image'),
        (this._imageLoaderFP = new UTImageView()),
        this.__mtxImage.appendChild(this._imageLoaderFP.getRootElement()),
        (this._imageLoaderOA = new UTImageView()),
        this.__mtxImage.appendChild(this._imageLoaderOA.getRootElement()),
        e.appendChild(this.__mtxImage);
      var t = document.createElement('div');
      t.classList.add('content'),
        (this.__title = document.createElement('h1')),
        this.__title.classList.add('title'),
        t.appendChild(this.__title),
        (this.__description = document.createElement('div')),
        this.__description.classList.add('description'),
        t.appendChild(this.__description),
        e.appendChild(t);
      var i = document.createElement('div');
      i.classList.add('purchasing'),
        (this._actionBtn = new UTStandardButtonControl()),
        this._actionBtn.getRootElement().classList.add('call-to-action'),
        i.appendChild(this._actionBtn.getRootElement()),
        e.appendChild(i),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTNimbleMTXDetailsView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__mtxImage = null),
      this._imageLoaderFP.destroy(),
      this._imageLoaderOA.destroy(),
      (this.__title = null),
      (this.__description = null),
      this._actionBtn.destroy();
  }),
  (UTNimbleMTXDetailsView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTNimbleMTXDetailsView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTNimbleMTXDetailsView.START_TRANSACTION = 'startTransaction'),
  (UTNimbleMTXDetailsView.prototype.init = function init() {
    this.superclass(),
      this._actionBtn.addTarget(
        this,
        this._eStartNimbleTransaction,
        enums.Event.TAP
      ),
      this._actionBtn.init(),
      this.toggleOriginAccessLogo(!1);
  }),
  (UTNimbleMTXDetailsView.prototype.setHeader = function setHeader(e) {
    this.__title.textContent = e;
  }),
  (UTNimbleMTXDetailsView.prototype.setDescription = function setDescription(
    e
  ) {
    this.__description.textContent = e;
  }),
  (UTNimbleMTXDetailsView.prototype.setButtonText = function setButtonText(e) {
    this._actionBtn.setText(e);
  }),
  (UTNimbleMTXDetailsView.prototype.setLocalImageFPUrl = function setLocalImageFPUrl(
    e
  ) {
    this._imageLoaderFP.setLocalResource(
      'images/store/IconFIFAPoint_pack' + e + '.png'
    );
  }),
  (UTNimbleMTXDetailsView.prototype.setMTXsku = function setMTXsku(e) {
    this._nimbleMTXsku = e;
  }),
  (UTNimbleMTXDetailsView.prototype.addOriginAccessLogo = function addOriginAccessLogo() {
    this._imageLoaderOA.setLocalResource('images/logo/oa_logo.png'),
      this.toggleOriginAccessLogo(!0);
  }),
  (UTNimbleMTXDetailsView.prototype.toggleOriginAccessLogo = function toggleOriginAccessLogo(
    e
  ) {
    DOMKit.toggleDisplayStyle(this._imageLoaderOA.getRootElement(), e);
  }),
  (UTNimbleMTXDetailsView.prototype._eStartNimbleTransaction = function _eStartNimbleTransaction(
    e,
    t,
    i
  ) {
    this._triggerActions(UTNimbleMTXDetailsView.START_TRANSACTION, {
      nimbleMTXsku: this._nimbleMTXsku
    });
  }),
  utils.JS.inherits(UTStoreView, UTTargetActionView),
  (UTStoreView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-store-hub-view'),
        (this._navigation = new components.TabMenu()),
        e.appendChild(this._navigation.getRootElement()),
        (this.__itemList = document.createElement('div')),
        this.__itemList.classList.add('ut-store-hub-view--content'),
        (this._unassignedTile = new UTUnassignedTileView()),
        this.__itemList.appendChild(this._unassignedTile.getRootElement()),
        e.appendChild(this.__itemList),
        (this.__disabledTile = document.createElement('div')),
        this.__disabledTile.classList.add('ut-store-disabled-view'),
        (this.__disabledText = document.createElement('p')),
        this.__disabledText.classList.add('label'),
        this.__disabledTile.appendChild(this.__disabledText),
        e.appendChild(this.__disabledTile),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTStoreView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._navigation.destroy(),
      (this.__itemList = null),
      this._unassignedTile.destroy(),
      (this.__disabledTile = null),
      (this.__disabledText = null);
  }),
  (UTStoreView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTStoreView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTStoreView.Event = {
    TAB_SELECTED: 'UTStoreView.Event.TAB_SELECTED',
    UNASSIGNED_SELECTED: 'UTStoreView.Event.UNASSIGNED_SELECTED'
  }),
  (UTStoreView.prototype.init = function init() {
    this.superclass(),
      this._unassignedTile.init(),
      this._unassignedTile.addTarget(
        this,
        this._eUnassignedTileSelected,
        enums.Event.TAP
      ),
      this._unassignedTile.setDisplay(!1),
      DOMKit.toggleDisplayStyle(this.__disabledTile, !1),
      (this.__disabledText.textContent = services.Localization.localize(
        'store.disabled'
      )),
      this._navigation.addTarget(this, this._handleTabSelect, enums.Event.TAP),
      this.setInteractionState(!0);
  }),
  (UTStoreView.prototype.dealloc = function dealloc() {
    this.clearPacks(),
      this.clearNimbleMTXItems(),
      this._navigation.removeTarget(
        this,
        this._handleTabSelect,
        enums.Event.TAP
      ),
      this.superclass();
  }),
  (UTStoreView.prototype.setInteractionState = function setInteractionState(t) {
    this._setInteractionStateFlag(t),
      this._navigation.setInteractionState(t),
      this._storePacks.forEach(function(e) {
        e.setInteractionState(t);
      });
  }),
  (UTStoreView.prototype.clearPacks = function clearPacks() {
    this._storePacks.forEach(function(e) {
      e.dealloc();
    }),
      (this._storePacks = []);
  }),
  (UTStoreView.prototype.clearNimbleMTXItems = function clearNimbleMTXItems() {
    this._nimbleMTXItems.forEach(function(e) {
      e.dealloc();
    }),
      (this._nimbleMTXItems = []);
  }),
  (UTStoreView.prototype.setCategoryTabs = function setCategoryTabs(
    e,
    t,
    i,
    s
  ) {
    this._navigation.clearTabs(),
      t &&
        this._navigation.addTab(
          enums.Purchase.DisplayGroup.MYPACKS,
          services.Localization.localize('store.group.mypacks')
        ),
      e &&
        this._navigation.addTab(
          enums.Purchase.DisplayGroup.SPECIAL,
          services.Localization.localize('store.sale.promo')
        ),
      i &&
        this._navigation.addTab(
          enums.Purchase.DisplayGroup.KITS,
          services.Localization.localize('store.group.kits')
        ),
      this._navigation.addTab(
        enums.Purchase.DisplayGroup.GOLD,
        services.Localization.localize('store.group.goldlabel')
      ),
      this._navigation.addTab(
        enums.Purchase.DisplayGroup.SILVER,
        services.Localization.localize('store.group.silverlabel')
      ),
      this._navigation.addTab(
        enums.Purchase.DisplayGroup.BRONZE,
        services.Localization.localize('store.group.bronzelabel')
      ),
      s &&
        this._navigation.addTab(
          enums.Purchase.DisplayGroup.FIFAPOINTS,
          services.Localization.localize('store.group.fifapoints')
        ),
      this._navigation.layoutSubviews();
  }),
  (UTStoreView.prototype.setStoreCategory = function setStoreCategory(e) {
    this._navigation.setActiveTab(e);
  }),
  (UTStoreView.prototype.getStoreCategory = function getStoreCategory() {
    return this._navigation.getActiveTab();
  }),
  (UTStoreView.prototype.setNumUnassignedItems = function setNumUnassignedItems(
    e
  ) {
    this._unassignedTile.setNumberOfItems(e),
      this._unassignedTile.setDisplay(0 < e);
  }),
  (UTStoreView.prototype.setNimbleMTXItems = function setNimbleMTXItems(e, t) {
    this.clearPacks(),
      this.clearNimbleMTXItems(),
      e.forEach(function(e) {
        this._generateNimbleMTXView(e, t);
      }, this),
      this.layoutSubviews();
  }),
  (UTStoreView.prototype._generateNimbleMTXView = function _generateNimbleMTXView(
    e,
    t
  ) {
    var i = new UTNimbleMTXDetailsView();
    i.init(),
      i.setHeader(e.title),
      i.setDescription(
        services.Localization.localize('store.mtxitem.descriptionText', [
          services.Localization.localizeNumber(e.points)
        ])
      ),
      i.setButtonText(
        services.Localization.localize('store.mtxitem.buttonText', [
          e.priceFormatted
        ])
      ),
      i.setLocalImageFPUrl(e.getLocalImageAssetId()),
      i.setMTXsku(e.sku),
      t && i.addOriginAccessLogo(),
      i.addTarget(
        this,
        this._eNimbleMTXItemEventHandler,
        UTNimbleMTXDetailsView.START_TRANSACTION
      ),
      this.addSubview(i, this.__itemList),
      this._nimbleMTXItems.push(i);
  }),
  (UTStoreView.prototype.setPacks = function setPacks(e, t, i, s) {
    this.clearPacks(),
      this.clearNimbleMTXItems(),
      e.forEach(function(e) {
        this._generatePack(e, t, i, !e.isMyPack && s);
      }, this),
      this.layoutSubviews();
  }),
  (UTStoreView.prototype._generatePack = function _generatePack(e, t, i, s) {
    var n = new UTStorePackDetailsView(),
      o = e.prices.has(enums.Currency.COINS)
        ? e.prices.get(enums.Currency.COINS).amount
        : 0,
      a = e.prices.has(enums.Currency.POINTS)
        ? e.prices.get(enums.Currency.POINTS).amount
        : 0;
    n.init(),
      n.setPackId(e.id),
      n.setPackBackground(e.assetId, e.guidAssetId),
      n.setPackForeground(e.assetId),
      n.setPromo(e.dealType, e.isLimited),
      n.setName(e.packName),
      n.setDescription(e.packDesc),
      n.setPackQuantity(e.quantity),
      n.setItemCounts(
        e.itemQuantity,
        e.bronzeQuantity,
        e.silverQuantity,
        e.goldQuantity,
        e.rareQuantity
      ),
      n.setTimeRemaining(e.end),
      n.setCoinsAmount(o),
      n.setPointsAmount(a),
      n.toggleOdds(s),
      n.setMyPack(e.isMyPack),
      e.isMyPack ||
        (n.toggleCoins(i.coins && 0 < o),
        n.togglePoints(i.points && 0 < a),
        t.forEach(function(e) {
          e.type === enums.Currency.COINS
            ? n.enableCoinPurchase(0 < o && e.amount >= o)
            : e.type === enums.Currency.POINTS &&
              n.enablePointsPurchase(0 < a && e.amount >= a);
        })),
      n.addTarget(this, this._ePackEventHandler, enums.UIPackEvent.OPEN),
      n.addTarget(this, this._ePackEventHandler, enums.UIPackEvent.BUY_COINS),
      n.addTarget(this, this._ePackEventHandler, enums.UIPackEvent.BUY_POINTS),
      n.addTarget(this, this._ePackEventHandler, enums.UIPackEvent.CHECK_ODDS),
      this.addSubview(n, this.__itemList),
      this._storePacks.push(n);
  }),
  (UTStoreView.prototype.enableStore = function enableStore() {
    this._navigation.show(),
      DOMKit.toggleDisplayStyle(this.__itemList, !0),
      DOMKit.toggleDisplayStyle(this.__disabledTile, !1);
  }),
  (UTStoreView.prototype.disableStore = function disableStore() {
    this._navigation.clearTabs(),
      this._navigation.hide(),
      this.clearPacks(),
      DOMKit.toggleDisplayStyle(this.__itemList, !1),
      DOMKit.toggleDisplayStyle(this.__disabledTile, !0);
  }),
  (UTStoreView.prototype.setFIFAPointsTabInteractionState = function setFIFAPointsTabInteractionState(
    e
  ) {
    this._navigation.setTabInteractionState(
      enums.Purchase.DisplayGroup.FIFAPOINTS,
      e
    );
  }),
  (UTStoreView.prototype._handleTabSelect = function _handleTabSelect(e, t, i) {
    this.isInteractionEnabled() &&
      ((this.__itemList.scrollTop = 0),
      this._triggerActions(UTStoreView.Event.TAB_SELECTED, i));
  }),
  (UTStoreView.prototype._ePackEventHandler = function _ePackEventHandler(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() && this._triggerActions(t, i);
  }),
  (UTStoreView.prototype._eNimbleMTXItemEventHandler = function _eNimbleMTXItemEventHandler(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() && this._triggerActions(t, i);
  }),
  (UTStoreView.prototype._eUnassignedTileSelected = function _eUnassignedTileSelected(
    e,
    t,
    i
  ) {
    this.isInteractionEnabled() &&
      this._triggerActions(UTStoreView.Event.UNASSIGNED_SELECTED);
  }),
  NamespaceManager.Register('viewmodels'),
  (viewmodels.Store = function(e, i) {
    var s = [],
      n = {},
      o = {},
      a = Array.isArray(i) && 0 < i.length,
      r = !1,
      l = !1,
      c = !1,
      u = !1;
    e.forEach(function(t) {
      if (t.isMyPack) (r = !0), s.push(t);
      else {
        if (
          (!l && t.isKitPack && (l = !0),
          !c && t.isSpecialPack && (c = !0),
          a && t.isFifaPointsPack)
        ) {
          var e = utils.JS.find(i, function(e) {
            return t.productId === e.sku && ((e.points = t.points), !0);
          });
          utils.JS.isValid(e) && (u || (u = !0), (o[e.sku] = e));
        }
        n[t.id] = t;
      }
    }),
      (this._myPacks = new UTIterator(s)),
      Object.defineProperty(this, '_myPacks', {
        writable: !1
      }),
      (this._packs = new UTHashTable(n)),
      Object.defineProperty(this, '_packs', {
        writable: !1
      }),
      (this._validNimbleMtxItems = new UTHashTable(o)),
      Object.defineProperty(this, '_validNimbleMtxItems', {
        writable: !1
      }),
      (this.hasMyPacks = r),
      Object.defineProperty(this, 'hasMyPacks', {
        writable: !1
      }),
      (this.hasKitPacks = l),
      Object.defineProperty(this, 'hasKitPacks', {
        writable: !1
      }),
      (this.hasSpecialPacks = c),
      Object.defineProperty(this, 'hasSpecialPacks', {
        writable: !1
      }),
      (this.hasMtxItems = u),
      Object.defineProperty(this, 'hasMtxItems', {
        writable: !1
      });
  }),
  (viewmodels.Store.prototype.getNimbleMTXItems = function getNimbleMTXItems() {
    return this._validNimbleMtxItems.values().sort(function pointsSort(e, t) {
      return e.points < t.points ? -1 : e.points > t.points ? 1 : 0;
    });
  }),
  (viewmodels.Store.prototype.getPackById = function(t, e) {
    if (e || !utils.JS.isBoolean(e)) {
      var i = this._myPacks.get(
        this._myPacks.indexOf(function comparePackId(e) {
          return t === e.id;
        })
      );
      if (e || utils.JS.isValid(i)) return i;
    }
    return this._packs.get(t);
  }),
  (viewmodels.Store.prototype.getPacks = function(t) {
    return t === enums.Purchase.DisplayGroup.MYPACKS
      ? this._myPacks.values()
      : this._packs
          .filter(function(e) {
            return e.displayGroup === t;
          })
          .sort(function sortByPrice(e, t) {
            var i = e.prices.get(enums.Currency.COINS),
              s = t.prices.get(enums.Currency.COINS);
            if (i && s) {
              if (i.amount > s.amount) return 1;
              if (i.amount < s.amount) return -1;
            }
            return 0;
          });
  }),
  utils.JS.inherits(UTStoreViewController, UTViewController),
  (UTStoreViewController.prototype.initWithStartingCategory = function initWithStartingCategory(
    e
  ) {
    this.initialized || ((this._startingCategory = e), this.init());
  }),
  (UTStoreViewController.prototype.dealloc = function dealloc() {
    this.superclass(),
      (this._viewmodel = null),
      this._packLoadObservable &&
        (this._packLoadObservable.unobserve(this),
        (this._packLoadObservable = null));
  }),
  (UTStoreViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTStoreView();
  }),
  (UTStoreViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Hub - Store';
  }),
  (UTStoreViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.store');
  }),
  (UTStoreViewController.prototype.viewDidAppear = function viewDidAppear() {
    if (
      (this.superclass(),
      this.getNavigationController().setNavigationVisibility(!0, !0),
      services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.STORE_ENABLED
      ) && services.Localization.storeLocLoaded)
    ) {
      this._getStorePacks();
      var e = services.User.getUser().getSelectedPersona();
      !isWeb() &&
        e.isPC &&
        (services.MTX.isNimbleMTXEnabled() &&
        services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.COMPANION_COMMERCE_ENABLED
        )
          ? e.hasOriginAccess &&
            !isAndroid() &&
            (this._createCustomErrorPopup(
              'popup.error.storeOriginAccessWarningTitle',
              'popup.error.storeOriginAccessWarning'
            ),
            this.disableFIFAPointsTab())
          : this.disableFIFAPointsTab());
    } else this.getView().disableStore();
    getDefaultDispatcher().addObserver(
      enums.Notification.APP_RESUME,
      this,
      this._nAppResumed
    ),
      getDefaultDispatcher().addObserver(
        enums.Notification.MTX_PURCHASE_NOTIF,
        this,
        this._nMTXNotif
      );
    var t = this.getView();
    t.addTarget(this, this._eTabSelected, UTStoreView.Event.TAB_SELECTED),
      t.addTarget(this, this._eOpenPack, enums.UIPackEvent.OPEN),
      t.addTarget(this, this._eOpenPack, enums.UIPackEvent.BUY_COINS),
      t.addTarget(this, this._eOpenPack, enums.UIPackEvent.BUY_POINTS),
      t.addTarget(this, this._eCheckPackOdds, enums.UIPackEvent.CHECK_ODDS),
      t.addTarget(
        this,
        this._eUnassignedSelected,
        UTStoreView.Event.UNASSIGNED_SELECTED
      ),
      t.addTarget(
        this,
        this._eStartNimbleTransaction,
        UTNimbleMTXDetailsView.START_TRANSACTION
      ),
      TelemetryManager.trackPage(TelemetryManager.Sections.STORE, 'Store Hub');
  }),
  (UTStoreViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      getDefaultDispatcher().removeObserver(
        enums.Notification.APP_RESUME,
        this
      ),
      getDefaultDispatcher().removeObserver(
        enums.Notification.MTX_CATALOG_REFRESH,
        this
      ),
      getDefaultDispatcher().removeObserver(
        enums.Notification.MTX_PURCHASE_NOTIF,
        this
      );
    var e = this.getView();
    e.removeTarget(this, this._eTabSelected, UTStoreView.Event.TAB_SELECTED),
      e.removeTarget(this, this._eOpenPack, enums.UIPackEvent.OPEN),
      e.removeTarget(this, this._eOpenPack, enums.UIPackEvent.BUY_COINS),
      e.removeTarget(this, this._eOpenPack, enums.UIPackEvent.BUY_POINTS),
      e.removeTarget(this, this._eCheckPackOdds, enums.UIPackEvent.CHECK_ODDS),
      e.removeTarget(
        this,
        this._eUnassignedSelected,
        UTStoreView.Event.UNASSIGNED_SELECTED
      ),
      e.removeTarget(
        this,
        this._eStartNimbleTransaction,
        UTNimbleMTXDetailsView.START_TRANSACTION
      );
  }),
  (UTStoreViewController.prototype.willDismiss = function willDismiss(e) {
    e && e instanceof UTPackOddsViewController && e.dealloc();
  }),
  (UTStoreViewController.prototype._canPurchaseWithPoints = function _canPurchaseWithPoints() {
    var e = services.User.getUser(),
      t =
        e &&
        (!e.getSelectedPersona().isPC ||
          services.Configuration.checkFeatureEnabled(
            enums.ServerFeature.MTX_ENABLED
          ));
    return (
      !e.hasUnrecoveredFIFAPointsTransaction &&
      services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.CURRENCY_POINTS_ENABLED
      ) &&
      t
    );
  }),
  (UTStoreViewController.prototype.setCategory = function setCategory(e) {
    if (this._packLoadObservable) this._startingCategory = e;
    else {
      var t = this.getView(),
        i = services.User.getUser();
      t.setStoreCategory(e),
        e === enums.Purchase.DisplayGroup.FIFAPOINTS
          ? t.setNimbleMTXItems(
              this._viewmodel.getNimbleMTXItems(),
              i.getSelectedPersona().hasOriginAccess
            )
          : t.setPacks(
              this._viewmodel.getPacks(e),
              i.getCurrencies(),
              {
                coins: services.Configuration.checkFeatureEnabled(
                  enums.ServerFeature.CURRENCY_COINS_ENABLED
                ),
                points: this._canPurchaseWithPoints()
              },
              services.Configuration.checkFeatureEnabled(
                enums.ServerFeature.PACK_ODDS_ENABLED
              )
            );
    }
  }),
  (UTStoreViewController.prototype.disableFIFAPointsTab = function disableFIFAPointsTab() {
    services.MTX.disableNimbleMTX(),
      this._startingCategory === enums.Purchase.DisplayGroup.FIFAPOINTS &&
        (this._startingCategory = enums.Purchase.DisplayGroup.GOLD),
      this.setCategory(this._startingCategory),
      this.getView().setFIFAPointsTabInteractionState(!1);
  }),
  (UTStoreViewController.prototype._createCustomErrorPopup = function _createCustomErrorPopup(
    e,
    t
  ) {
    var i = new controllers.views.popups.Dialog(
      t,
      e,
      enums.UIDialogTypes.STANDARD,
      [],
      [enums.UIDialogOptions.OK]
    );
    i.init(), i.viewWillAppear(), gPopupClickShield.setActivePopup(i);
  }),
  (UTStoreViewController.prototype._getStorePacks = function _getStorePacks() {
    var e = services.User.getUser().getSelectedPersona(),
      o =
        !isWeb() &&
        e.isPC &&
        (!e.hasOriginAccess || isAndroid()) &&
        services.MTX.isNimbleMTXEnabled() &&
        services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.COMPANION_COMMERCE_ENABLED
        );
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      (this._packLoadObservable = services.Store.getPacks(
        o ? enums.Purchase.PackType.ALL : enums.Purchase.PackType.CARDPACK,
        !0
      )),
      this._packLoadObservable.observe(this, function _onPackLoadComplete(
        e,
        t
      ) {
        e.unobserve(this), (this._packLoadObservable = null);
        var i = t.data.packs;
        if (0 === i.length)
          return (
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING),
            void this.getView().disableStore()
          );
        this._viewmodel = new viewmodels.Store(
          i,
          o ? services.MTX.getNimbleMTXItems() : []
        );
        var s = services.Configuration.checkFeatureEnabled(
            enums.ServerFeature.CURRENCY_COINS_ENABLED
          ),
          n = this._canPurchaseWithPoints();
        s || n
          ? s
            ? n ||
              services.Notification.queue([
                services.Localization.localize(
                  'notification.store.fifapointsDisabled'
                ),
                enums.UINotificationType.NEGATIVE
              ])
            : services.Notification.queue([
                services.Localization.localize(
                  'notification.store.coinsDisabled'
                ),
                enums.UINotificationType.NEGATIVE
              ])
          : services.Notification.queue([
              services.Localization.localize(
                'notification.store.allCurrenciesDisabled'
              ),
              enums.UINotificationType.NEGATIVE
            ]),
          this._startingCategory !== enums.Purchase.DisplayGroup.MYPACKS ||
            this._viewmodel.hasMyPacks ||
            (this._startingCategory = enums.Purchase.DisplayGroup.SPECIAL),
          this._startingCategory !== enums.Purchase.DisplayGroup.SPECIAL ||
            this._viewmodel.hasSpecialPacks ||
            (this._startingCategory = enums.Purchase.DisplayGroup.GOLD),
          this._startingCategory !== enums.Purchase.DisplayGroup.KITS ||
            this._viewmodel.hasKitPacks ||
            (this._startingCategory = enums.Purchase.DisplayGroup.GOLD),
          this._getUnassignedItems(),
          this.getView().setCategoryTabs(
            this._viewmodel.hasSpecialPacks,
            this._viewmodel.hasMyPacks,
            this._viewmodel.hasKitPacks,
            this._viewmodel.hasMtxItems
          ),
          this.setCategory(this._startingCategory),
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
      });
  }),
  (UTStoreViewController.prototype._getUnassignedItems = function _getUnassignedItems() {
    services.Item.requestUnassignedItems().observe(
      this,
      function _onRequestUnassignedComplete(e, t) {
        e.unobserve(this),
          this.getView().setNumUnassignedItems(t.data.items.length);
      }
    );
  }),
  (UTStoreViewController.prototype._gotoUnassigned = function _gotoUnassigned() {
    var n = this.getView();
    n.setInteractionState(!1),
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Item.requestUnassignedItems().observe(
        this,
        function _onRequestUnassignedComplete(e, t) {
          e.unobserve(this);
          var i = this.getNavigationController();
          if (i) {
            var s = isPhone()
              ? new UTUnassignedItemsViewController()
              : new UTUnassignedItemsSplitViewController();
            t.success
              ? s.initWithItems(t.data.items)
              : NetworkErrorManager.checkCriticalStatus(t.status)
              ? NetworkErrorManager.handleStatus(t.status)
              : s.init(),
              i.pushViewController(s);
          }
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING),
            n.setInteractionState(!0);
        }
      );
  }),
  (UTStoreViewController.prototype._eTabSelected = function _eTabSelected(
    e,
    t,
    i
  ) {
    if (!this._isLoadingPacks) {
      var s = this.getView(),
        n = services.User.getUser(),
        o = !1,
        a = services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.CURRENCY_COINS_ENABLED
        ),
        r = this._canPurchaseWithPoints(),
        l = services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.PACK_ODDS_ENABLED
        );
      (this._isLoadingPacks = !0),
        s.setInteractionState(!1),
        i.id === enums.Purchase.DisplayGroup.FIFAPOINTS
          ? services.MTX.isNimbleMTXEnabled() &&
            services.Configuration.checkFeatureEnabled(
              enums.ServerFeature.COMPANION_COMMERCE_ENABLED
            )
            ? s.setNimbleMTXItems(
                this._viewmodel.getNimbleMTXItems(),
                n.getSelectedPersona().hasOriginAccess
              )
            : ((o = !0),
              services.Notification.queue([
                services.Localization.localize('mtx.error.disabled'),
                enums.UINotificationType.NEGATIVE
              ]))
          : s.setPacks(
              this._viewmodel.getPacks(i.id),
              n.getCurrencies(),
              {
                coins: a,
                points: r
              },
              l
            ),
        TelemetryManager.trackEvent(
          TelemetryManager.Sections.STORE,
          TelemetryManager.Categories.FILTER,
          'Store - ' + i.id.toString().toUpperCase()
        ),
        setTimeout(
          function() {
            this._viewmodel &&
              ((this._isLoadingPacks = !1),
              s.setInteractionState(!0),
              o && this.disableFIFAPointsTab());
          }.bind(this),
          0
        );
    }
  }),
  (UTStoreViewController.prototype._eStartNimbleTransaction = function _eStartNimbleTransaction(
    e,
    t,
    i
  ) {
    if (!this._isOpeningPack && !this._isLoadingPacks) {
      if (
        !services.MTX.isNimbleMTXEnabled() ||
        !services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.COMPANION_COMMERCE_ENABLED
        )
      )
        return (
          services.Notification.queue([
            services.Localization.localize('mtx.error.disabled'),
            enums.UINotificationType.NEGATIVE
          ]),
          void this.disableFIFAPointsTab()
        );
      (this._isOpeningPack = !0),
        services.MTX.hasUnverifiedTransactions()
          ? services.MTX.verifyStoredTransactions().observe(
              this,
              function _onUnverifiedTransactionVerified(e, t) {
                e.unobserve(this),
                  t.success
                    ? services.MTX.hasUnverifiedTransactions()
                      ? services.MTX.verifyStoredTransactions().observe(
                          this,
                          _onUnverifiedTransactionVerified
                        )
                      : services.MTX.beginTransaction(i.nimbleMTXsku).observe(
                          this,
                          _onTransactionBegun
                        )
                    : ((this._isOpeningPack = !1),
                      services.Notification.queue([
                        services.Localization.localize('mtx.error.nocharge'),
                        enums.UINotificationType.NEGATIVE
                      ]),
                      this.disableFIFAPointsTab());
              }
            )
          : services.MTX.beginTransaction(i.nimbleMTXsku).observe(
              this,
              _onTransactionBegun
            );
    }

    function _onTransactionBegun(e, t) {
      e.unobserve(this),
        t.success ||
          ((this._isOpeningPack = !1),
          services.Notification.queue([
            services.Localization.localize('mtx.error.nocharge'),
            enums.UINotificationType.NEGATIVE
          ]));
    }
  }),
  (UTStoreViewController.prototype._eOpenPack = function _eOpenPack(e, t, i) {
    if (!this._isOpeningPack) {
      var o = this.getView(),
        r = this._viewmodel.getPackById(i.packId, t === enums.UIPackEvent.OPEN),
        l =
          t === enums.UIPackEvent.BUY_POINTS
            ? enums.Currency.POINTS
            : enums.Currency.COINS;
      if (
        ((this._isOpeningPack = !0),
        o.setInteractionState(!1),
        0 < repositories.Item.numItemsInCache(enums.FUTItemPile.PURCHASED))
      )
        _showGoToUnassignedConfirmation.call(this), (this._isOpeningPack = !1);
      else if (t === enums.UIPackEvent.OPEN)
        services.Store.openPack(r).observe(this, onPackOpenComplete);
      else {
        var s =
          l === enums.Currency.POINTS
            ? utils.PopupManager.Confirmations.BUY_PACK_FIFAPOINTS
            : utils.PopupManager.Confirmations.BUY_PACK;
        utils.PopupManager.ShowConfirmation(
          s,
          [
            r.packName,
            services.Localization.localizeNumber(r.prices.get(l).amount)
          ],
          function() {
            services.Store.purchasePack(r, l).observe(this, onPackOpenComplete);
          }.bind(this),
          function() {
            (this._isOpeningPack = !1), o.setInteractionState(!0);
          }.bind(this)
        );
      }
    }

    function _showGoToUnassignedConfirmation() {
      utils.PopupManager.ShowConfirmation(
        utils.PopupManager.Confirmations.UNASSIGNED_ENTITLEMENT,
        null,
        this._gotoUnassigned.bind(this),
        function() {
          o.setInteractionState(!0);
        }
      );
    }

    function onPackOpenComplete(e, t) {
      if ((e.unobserve(this), (this._isOpeningPack = !1), t.success)) {
        repositories.Item.setDirty(enums.FUTItemPile.PURCHASED),
          services.User.requestCurrencies(),
          r.isMyPack && services.User.getUser().decrementNumUnopenedPacks();
        var a = null,
          i = t.data.items.filter(function(e) {
            return e.isPlayer();
          });
        0 < i.length
          ? i.forEach(function(e) {
              if (utils.JS.isValid(a)) {
                var t = e.rareflag > a.rareflag,
                  i = e.rareflag === a.rareflag,
                  s = e.getTier() > a.getTier(),
                  n = e.getTier() === a.getTier(),
                  o = e.rating > a.rating;
                ((e.isSpecial() && (t || (i && o))) ||
                  (!a.isSpecial() && (s || (n && t) || (n && i && o)))) &&
                  (a = e);
              } else a = e;
            })
          : t.data.items.forEach(function(e) {
              (!utils.JS.isValid(a) || a.discardValue < e.discardValue) &&
                (a = e);
            });
        var s = new UTPackAnimationViewController();
        s.initWithPackData(a, r.assetId),
          s.setAnimationCallback(
            function() {
              this.dismissViewController(!1, function() {
                s.dealloc();
              }),
                this._gotoUnassigned();
            }.bind(this)
          ),
          (s.modalDisplayStyle = enums.UIModalDisplayStyles.FULLSCREEN),
          this.presentViewController(s, !0);
      } else {
        o.setInteractionState(!0);
        var n = t.status;
        if (n === enums.HTTPStatusCode.ITEM_EXISTS)
          repositories.Item.setDirty(enums.FUTItemPile.PURCHASED),
            _showGoToUnassignedConfirmation.call(this);
        else if (n === enums.HTTPStatusCode.SERVICE_IS_DISABLED)
          switch (l) {
            case enums.Currency.COINS:
              services.Configuration.setFeatureEnabled(
                enums.ServerFeature.CURRENCY_COINS_ENABLED,
                !1
              );
              break;
            case enums.Currency.POINTS:
              services.User.getUser().getSelectedPersona().isPC
                ? services.Configuration.setFeatureEnabled(
                    enums.ServerFeature.MTX_ENABLED,
                    !1
                  )
                : services.Configuration.setFeatureEnabled(
                    enums.ServerFeature.FIFA_POINTS_ENABLED,
                    !1
                  );
              break;
            default:
              services.Configuration.setFeatureEnabled(
                enums.ServerFeature.STORE_ENABLED,
                !1
              );
          }
        else
          NetworkErrorManager.checkCriticalStatus(t.status) &&
            NetworkErrorManager.handleStatus(t.status);
      }
    }
  }),
  (UTStoreViewController.prototype._eCheckPackOdds = function _eCheckPackOdds(
    e,
    t,
    i
  ) {
    if (!this._isOpeningPack) {
      var s = this._viewmodel.getPackById(i.packId);
      if (s.hasOdds()) {
        var n = new UTPackOddsViewController();
        n.initWithPack(s),
          (n.modalDisplayStyle = enums.UIModalDisplayStyles.FORM),
          this.presentViewController(n, !0);
        var o = s.odds.map(function(e) {
          var t = {};
          return (t[e.description] = e.odds), t;
        }, this);
        services.PIN.sendData(enums.PIN.EVENT.UI_INTERACTION, {
          action: 'selection',
          object_id: s.id.toString(),
          object_type: 'store_pack',
          custom: o
        });
      } else
        services.Notification.queue([
          services.Localization.localize('packodds.error.noOdds'),
          enums.UINotificationType.NEGATIVE
        ]);
    }
  }),
  (UTStoreViewController.prototype._eUnassignedSelected = function _eUnassignedSelected(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.STORE,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Store - Unassigned Tile'
    ),
      this._gotoUnassigned();
  }),
  (UTStoreViewController.prototype._nMTXNotif = function _nMTXNotif(e, t, i) {
    if (((this._isOpeningPack = !1), i.success))
      services.Notification.queue([
        services.Localization.localize('mtx.notification.purchaseSuccess'),
        enums.UINotificationType.POSITIVE
      ]);
    else {
      var s = i.error.code,
        n = i.error.message,
        o = '',
        a = 'mtx.error.generic',
        r = utils.JS.isEmpty(n)
          ? 'UTAS Error: ' + s
          : 'MTX Error: ' + s + ', ' + n;
      switch (
        (TelemetryManager.trackEvent(
          TelemetryManager.Sections.STORE,
          TelemetryManager.Categories.MTX_ERROR,
          r
        ),
        s)
      ) {
        case enums.MTXError.UNKNOWN:
        case enums.MTXError.NIMBLE_VERIFICATION_ERROR:
          o = 'mtx.error.basic';
          break;
        case enums.MTXError.NIMBLE_BILLING_NOT_AVAILABLE:
        case enums.MTXError.NIMBLE_INVALID_SKU:
        case enums.MTXError.NIMBLE_EMPTY_SYNERGY_CATALOG:
        case enums.MTXError.NIMBLE_EMPTY_BILLING_CATALOG:
          (o = 'mtx.error.disabled'), this.disableFIFAPointsTab();
          break;
        case enums.MTXError.NIMBLE_ITEM_ALREADY_OWNED:
          a = 'mtx.error.firstParty';
          break;
        case enums.MTXError.NIMBLE_PLATFORM_ERROR:
          o = 'mtx.error.transactionCancelled';
          break;
        case enums.MTXError.NIMBLE_ITEM_UNAVAILABLE:
          o = 'mtx.error.itemUnavailable';
          break;
        case enums.MTXError.NIMBLE_TRANSACTION_OUTSTANDING:
          o = 'mtx.error.pendingTransaction';
          break;
        case enums.MTXError.NIMBLE_USER_CANCELED:
          return;
      }
      utils.JS.isEmpty(o)
        ? this._createCustomErrorPopup('popup.error.genericMtxErrorTitle', a)
        : services.Notification.queue([
            services.Localization.localize(o),
            enums.UINotificationType.NEGATIVE
          ]);
    }
  }),
  (UTStoreViewController.prototype._nMTXCatalogRefresh = function _nMTXCatalogRefresh(
    e,
    t
  ) {
    getDefaultDispatcher().removeObserver(
      enums.Notification.MTX_CATALOG_REFRESH,
      this
    ),
      this._getStorePacks();
  }),
  (UTStoreViewController.prototype._nAppResumed = function _nAppResumed(
    e,
    t,
    i
  ) {
    services.Configuration.checkFeatureEnabled(
      enums.ServerFeature.STORE_ENABLED
    ) &&
      services.Localization.storeLocLoaded &&
      !isWeb() &&
      services.User.getUser().getSelectedPersona().isPC &&
      services.MTX.isNimbleMTXEnabled() &&
      services.Configuration.checkFeatureEnabled(
        enums.ServerFeature.COMPANION_COMMERCE_ENABLED
      ) &&
      (getDefaultDispatcher().addObserver(
        enums.Notification.MTX_CATALOG_REFRESH,
        this,
        this._nMTXCatalogRefresh
      ),
      window.plugins.utilities.setupMTX(
        function _onMTXSetupSuccess() {
          this._startingCategory = this.getView().getStoreCategory();
        }.bind(this),
        function _onMTXSetupFail() {
          this.disableFIFAPointsTab();
        }.bind(this)
      ));
  }),
  services.URL.registerDeepLinkID(enums.DeepLinkSections.STORE, function(e) {
    var t = getAppMain().getRootViewController();
    if (services.Localization.storeLocLoaded) {
      if (
        (t.setGameViewTab(UTGameTabBarController.TabTag.STORE), 0 < e.length)
      ) {
        var i,
          s = e[0];
        for (i in enums.Purchase.DisplayGroup) {
          if (
            enums.Purchase.DisplayGroup.hasOwnProperty(i) &&
            enums.Purchase.DisplayGroup[i] === s
          )
            t.getPresentedViewController()
              .getCurrentViewController()
              .getRootController()
              .setCategory(s);
        }
      }
    } else t.setGameViewTab(UTGameTabBarController.TabTag.HOME);
  }),
  NamespaceManager.Register('views.items'),
  utils.JS.inherits(UTWatchListView, UTView),
  (UTWatchListView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-watch-list-view'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTWatchListView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTWatchListView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTWatchListView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTWatchListView.prototype.dealloc = function dealloc() {
    utils.JS.isValid(this._emptyListView) &&
      (this._emptyListView.destroy(), (this._emptyListView = null)),
      this.clearSections(),
      this.superclass();
  }),
  (UTWatchListView.prototype.clearSections = function clearSections() {
    this._sections.forEach(function(e) {
      e.destroy();
    }),
      (this._sections = []);
  }),
  (UTWatchListView.prototype.renderSection = function renderSection(e, t, i) {
    var s = this._sections[t];
    return (
      s
        ? s.clearList()
        : ((s = new views.lists.SectionedItemList()).init(),
          (this._sections[t] = s)),
      s.addItems(e, i),
      s.render(),
      this.getRoot()
        .empty()
        .append(
          this._sections.map(function(e) {
            return e.getRoot();
          })
        ),
      s
    );
  }),
  (UTWatchListView.prototype.getSection = function getSection(e) {
    return this._sections[e] || null;
  }),
  (UTWatchListView.prototype.renderEmptyView = function renderEmptyView(
    e,
    t,
    i
  ) {
    this.clearSections(),
      (this._emptyListView = new UTListNoResultsView()),
      this._emptyListView.init(),
      this._emptyListView.setText(e),
      utils.JS.isFunction(i) && this._emptyListView.setupButton(t, i),
      this.getRoot().append(this._emptyListView.getRoot());
  }),
  (UTWatchListView.prototype.onTimedUpdate = function onTimedUpdate() {
    this._sections.forEach(function(e) {
      e.onTimedUpdate();
    });
  }),
  (UTWatchListView.prototype.selectListRow = function selectListRow(t) {
    this._sections.forEach(function(e) {
      e.selectRowByItemId(t);
    });
  }),
  (UTWatchListView.prototype.removeItemsById = function removeItemsById(t) {
    this._sections.forEach(function(e) {
      e.removeItemsById(t);
    });
  }),
  (viewmodels.WatchSectionList = function(e) {
    viewmodels.ItemSectionList.call(this, e),
      this.setSection(
        viewmodels.WatchSectionList.SECTION.ACTIVE,
        function(e) {
          var t = e.getAuctionData();
          return t.isActiveTrade() && t.isBid();
        },
        viewmodels.WatchSectionList.SECTION.ACTIVE
      ),
      this.setSection(
        viewmodels.WatchSectionList.SECTION.WATCHED,
        function(e) {
          var t = e.getAuctionData();
          return t.isActiveTrade() && !t.isBid() && t.watched;
        },
        viewmodels.WatchSectionList.SECTION.WATCHED
      ),
      this.setSection(
        viewmodels.WatchSectionList.SECTION.WON,
        function(e) {
          var t = e.getAuctionData();
          return e.getAuctionData().isWon() || !t.isValid();
        },
        viewmodels.WatchSectionList.SECTION.WON
      ),
      this.setSection(
        viewmodels.WatchSectionList.SECTION.EXPIRED,
        function(e) {
          var t = e.getAuctionData();
          return t.isExpired() || (t.isClosedTrade() && !t.isWon());
        },
        viewmodels.WatchSectionList.SECTION.EXPIRED
      ),
      this._organizeItems();
  }),
  utils.JS.inherits(viewmodels.WatchSectionList, viewmodels.ItemSectionList),
  (viewmodels.WatchSectionList.SECTION = {
    ACTIVE: 0,
    WATCHED: 1,
    WON: 2,
    EXPIRED: 3
  }),
  (viewmodels.WatchSectionList.prototype.hasMovableWonItems = function hasMovableWonItems() {
    return -1 < this.indexOf(this._findMovableWon);
  }),
  (viewmodels.WatchSectionList.prototype.getMovableWonItems = function getMovableWonItems() {
    return this.values().filter(this._findMovableWon);
  }),
  (viewmodels.WatchSectionList.prototype.hasExpiredAuctions = function hasExpiredAuctions() {
    return -1 < this.indexOf(this._findExpired);
  }),
  (viewmodels.WatchSectionList.prototype.getExpiredAuctions = function getExpiredAuctions() {
    return this.values().filter(this._findExpired);
  }),
  (viewmodels.WatchSectionList.prototype._findMovableWon = function _findMovableWon(
    e
  ) {
    return e.isMovable() && e.getAuctionData().isWon();
  }),
  (viewmodels.WatchSectionList.prototype._findExpired = function _findExpired(
    e
  ) {
    var t = e.getAuctionData();
    return t.isExpired() || (t.isClosedTrade() && !t.isWon());
  }),
  utils.JS.inherits(UTWatchListViewController, UTViewController),
  (UTWatchListViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      (this._viewmodel = new viewmodels.WatchSectionList([])),
      this._viewmodel.dataUpdated.observe(this, this._eViewmodelDataUpdated),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.AUCTIONS,
        'Transfer Targets'
      ));
  }),
  (UTWatchListViewController.prototype.dealloc = function dealloc() {
    this._viewmodel.stopAuctionUpdates(),
      this._viewmodel.dataUpdated.unobserve(this),
      this.onDataChange.dealloc(),
      this.onItemSelected.dealloc(),
      this.superclass(),
      (this._viewmodel = null);
  }),
  (UTWatchListViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTWatchListView();
  }),
  (UTWatchListViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Transfer Targets - List View';
  }),
  (UTWatchListViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('navbar.label.watchlist');
  }),
  (UTWatchListViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = getDefaultDispatcher();
    e.addObserver(enums.Notification.ITEM_UNWATCH, this, this._nItemUnwatched),
      e.addObserver(
        enums.Notification.AUCTION_CLOSE,
        this,
        this._nAuctionClosed
      ),
      e.addObserver(
        enums.Notification.UI_ITEM_STATE_CHANGE,
        this,
        this._nInfoStateChanged
      ),
      this._requestItems();
  }),
  (UTWatchListViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass();
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.ITEM_UNWATCH, this),
      e.removeObserver(enums.Notification.AUCTION_CLOSE, this),
      e.removeObserver(enums.Notification.UI_ITEM_STATE_CHANGE, this),
      this._viewmodel && this._viewmodel.stopAuctionUpdates();
  }),
  (UTWatchListViewController.prototype.getIterator = function getIterator() {
    return this._viewmodel;
  }),
  (UTWatchListViewController.prototype._requestItems = function _requestItems() {
    this._viewmodel.stopAuctionUpdates(),
      this.getView().setInteractionState(!1),
      services.Item.requestWatchedItems().observe(
        this,
        function _onRequestItemsComplete(e, t) {
          if ((e.unobserve(this), !t.success))
            return (
              services.Notification.queue([
                services.Localization.localize('watchlist.loaderror'),
                enums.UINotificationType.NEGATIVE
              ]),
              void (NetworkErrorManager.checkCriticalStatus(t.status)
                ? NetworkErrorManager.handleStatus(t.status)
                : this.getNavigationController().popViewController())
            );
          var i = this._viewmodel.getIndex();
          this._viewmodel.resetCollection([]),
            this._viewmodel.addArray(t.data.items),
            this._viewmodel.setIndex(
              Math.min(i, this._viewmodel.getLastIndex())
            ),
            this.onDataChange.notify({
              items: this._viewmodel.values()
            }),
            this._renderView(),
            0 < this._viewmodel.values().length &&
              !isPhone() &&
              this.getView().selectListRow(this._viewmodel.current().id),
            this.getView().setInteractionState(!0),
            this._viewmodel.hasExpiredAuctions() &&
              services.User.requestCurrencies(),
            this._viewmodel.startAuctionUpdates();
        }
      );
  }),
  (UTWatchListViewController.prototype.removeItemsById = function removeItemsById(
    e
  ) {
    if (0 < this._viewmodel.length) {
      var t = this.getView();
      t.removeItemsById(e),
        t.selectListRow(this._viewmodel.current().id),
        this._updateSectionHeaders();
    } else this._renderView();
  }),
  (UTWatchListViewController.prototype._updateSectionHeaders = function _updateSectionHeaders() {
    var e = this.getView(),
      t = e.getSection(viewmodels.WatchSectionList.SECTION.WON),
      i = e.getSection(viewmodels.WatchSectionList.SECTION.EXPIRED);
    t &&
      t.setHeader(
        services.Localization.localize('watchlist.dock.categories.won'),
        services.Localization.localize('infopanel.label.alltoclub'),
        0 < this._viewmodel.getMovableWonItems().length
          ? this._onSendToClub.bind(this)
          : null
      ),
      i &&
        i.setHeader(
          services.Localization.localize('watchlist.dock.categories.expired'),
          services.Localization.localize('button.label.clearexpired'),
          0 <
            this._viewmodel.getSectionItems(
              viewmodels.WatchSectionList.SECTION.EXPIRED
            ).length
            ? this._onUnwatchExpired.bind(this)
            : null
        );
  }),
  (UTWatchListViewController.prototype._renderView = function _renderView() {
    var o = this.getView();

    function _rowTapCallback(t) {
      var e = this._viewmodel.indexOf(function(e) {
        return e.id === t.id;
      });
      if ((this._viewmodel.setIndex(e), isPhone())) {
        var i = t.getAuctionData();
        if (
          !services.Configuration.checkFeatureEnabled(
            enums.ServerFeature.TRADING_ENABLED
          ) &&
          (i.isActiveTrade() || i.isClosedTrade())
        )
          return void utils.PopupManager.ShowAlert(
            utils.PopupManager.Alerts.TRADING_DISABLED
          );
        var s = this.getNavigationController();
        if (s) {
          var n = new controllers.navigation.ItemDetails();
          n.initWithIterator(this._viewmodel), s.pushViewController(n, !0);
        }
      } else o.selectListRow(t.id), this.onItemSelected.notify(e);
    }
    o.clearSections();
    var e = this._viewmodel.getSectionItems(
        viewmodels.WatchSectionList.SECTION.ACTIVE
      ),
      t = o.renderSection(
        e,
        viewmodels.WatchSectionList.SECTION.ACTIVE,
        _rowTapCallback.bind(this)
      );
    t.setHeader(
      services.Localization.localize('watchlist.dock.categories.active'),
      '',
      null
    ),
      t.setEmptyMessage(
        services.Localization.localize(
          'watchlist.availabletransfers.empty.header'
        ),
        services.Localization.localize(
          'watchlist.availabletransfers.empty.body'
        )
      );
    var i = this._viewmodel.getSectionItems(
        viewmodels.WatchSectionList.SECTION.WATCHED
      ),
      s = o.renderSection(
        i,
        viewmodels.WatchSectionList.SECTION.WATCHED,
        _rowTapCallback.bind(this)
      );
    s.setHeader(
      services.Localization.localize('watchlist.dock.categories.watched'),
      '',
      null
    ),
      s.setEmptyMessage(
        services.Localization.localize('watchlist.watched.empty.header'),
        services.Localization.localize('watchlist.watched.empty.body')
      );
    var n = this._viewmodel.getSectionItems(
      viewmodels.WatchSectionList.SECTION.WON
    );
    o.renderSection(
      n,
      viewmodels.WatchSectionList.SECTION.WON,
      _rowTapCallback.bind(this)
    ).setEmptyMessage(
      services.Localization.localize('watchlist.won.empty.header'),
      services.Localization.localize('watchlist.won.empty.body')
    );
    var a = this._viewmodel.getSectionItems(
      viewmodels.WatchSectionList.SECTION.EXPIRED
    );
    o
      .renderSection(
        a,
        viewmodels.WatchSectionList.SECTION.EXPIRED,
        _rowTapCallback.bind(this)
      )
      .setEmptyMessage(
        services.Localization.localize('watchlist.expired.empty.header'),
        services.Localization.localize('watchlist.expired.empty.body')
      ),
      this._updateSectionHeaders();
  }),
  (UTWatchListViewController.prototype._onSendToClub = function _onSendToClub(
    e
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.AUCTIONS,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Transfer Targets - Send All To Club'
    );
    var t = this._viewmodel.getMovableWonItems();
    0 < t.length &&
      (this.getView().setInteractionState(!1),
      services.Item.move(t, enums.FUTItemPile.CLUB).observe(
        this,
        this._onMoveToClubComplete
      ));
  }),
  (UTWatchListViewController.prototype._onUnwatchExpired = function _onUnwatchExpired(
    e
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.AUCTIONS,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Transfer Targets - Clear Expired'
    );
    var t = this._viewmodel.getExpiredAuctions();
    0 < t.length &&
      (this.getView().setInteractionState(!1),
      services.Item.untarget(t).observe(this, this._onUnwatchExpiredComplete));
  }),
  (UTWatchListViewController.prototype._onUnwatchExpiredComplete = function _onUnwatchExpiredComplete(
    e,
    t
  ) {
    e.unobserve(this),
      t.success || this.getNavigationController().popViewController();
  }),
  (UTWatchListViewController.prototype._onMoveToClubComplete = function _onMoveToClubComplete(
    e,
    t
  ) {
    if ((e.unobserve(this), t.success)) {
      var i = t.data.itemIds.length,
        s =
          1 < i
            ? services.Localization.localize('notification.item.allToClub', [i])
            : services.Localization.localize('notification.item.oneToClub');
      this._requestItems(),
        services.Notification.queue([s, enums.UINotificationType.NEUTRAL]);
    } else
      services.Notification.queue([
        services.Localization.localize('notification.item.moveFailed'),
        enums.UINotificationType.NEGATIVE
      ]),
        NetworkErrorManager.handleStatus(t.status),
        this.getNavigationController().popViewController();
  }),
  (UTWatchListViewController.prototype._nAuctionClosed = function _nAuctionClosed(
    e,
    t,
    i
  ) {
    this._requestItems();
  }),
  (UTWatchListViewController.prototype._nItemUnwatched = function _nItemUnwatched(
    e,
    t,
    i
  ) {
    this._requestItems();
  }),
  (UTWatchListViewController.prototype._eViewmodelDataUpdated = function _eViewmodelDataUpdated(
    e
  ) {
    this.getView().onTimedUpdate();
  }),
  (UTWatchListViewController.prototype._nInfoStateChanged = function _nInfoStateChanged(
    e,
    t,
    i
  ) {
    TelemetryManager.trackEvent(
      TelemetryManager.Sections.AUCTIONS,
      TelemetryManager.Categories.BUTTON_PRESS,
      'Item Info Switch Button - Transfer Targets'
    );
  }),
  services.URL.registerDeepLinkID(enums.DeepLinkSections.WATCH_LIST, function(
    e
  ) {
    var t = getAppMain().getRootViewController();
    if (
      (t.setGameViewTab(UTGameTabBarController.TabTag.TRANSFERS),
      !gConfigurationModel.getConfigBoolean(
        models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET
      ))
    ) {
      var i = t.getPresentedViewController().getCurrentViewController();
      if (i) {
        var s = isPhone()
          ? new UTWatchListViewController()
          : new UTWatchListSplitViewController();
        s.init(), i.pushViewController(s);
      }
    }
  }),
  utils.JS.inherits(UTWatchListSplitViewController, UTSplitViewController),
  (UTWatchListSplitViewController.prototype.init = function init() {
    if (!this.initialized) {
      this.superclass(),
        this._listController.init(),
        this._listController.onDataChange.observe(this, this._eListDataChanged),
        this._listController.onItemSelected.observe(this, this._eItemSelected),
        this._itemDetailController.initWithIterator(
          this._listController.getIterator()
        ),
        this._itemDetailController.enableSwiping(!1),
        this.addChildViewController(this._listController),
        this.addChildViewController(this._itemDetailController);
      var e = getDefaultDispatcher();
      e.addObserver(
        enums.Notification.ITEM_ACTIVATE,
        this,
        this._nItemActivated
      ),
        e.addObserver(
          enums.Notification.ITEM_DISCARD,
          this,
          this._nItemDiscarded
        ),
        e.addObserver(enums.Notification.ITEM_LIST, this, this._nItemListed),
        e.addObserver(enums.Notification.ITEM_MOVE, this, this._nItemMoved);
    }
  }),
  (UTWatchListSplitViewController.prototype.dealloc = function dealloc() {
    this._itemDetailController.dealloc(),
      (this._itemDetailController = null),
      this._listController.dealloc(),
      (this._listController = null);
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.ITEM_ACTIVATE, this),
      e.removeObserver(enums.Notification.ITEM_DISCARD, this),
      e.removeObserver(enums.Notification.ITEM_LIST, this),
      e.removeObserver(enums.Notification.ITEM_MOVE, this),
      this.superclass();
  }),
  (UTWatchListSplitViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._listController.getNavigationTitle();
  }),
  (UTWatchListSplitViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(),
      this._setLeftController(this._listController),
      this._itemDetailController.setNavigationStyle(
        enums.UINavigationBarStyle.SECONDARY
      );
  }),
  (UTWatchListSplitViewController.prototype._eItemSelected = function _eItemSelected(
    e,
    t
  ) {
    this._itemDetailController.setIndex(t);
  }),
  (UTWatchListSplitViewController.prototype._eListDataChanged = function _eListDataChanged(
    e,
    t
  ) {
    t.items &&
      (0 < t.items.length
        ? (this._setRightController(this._itemDetailController),
          this._itemDetailController.setIndex(
            this._listController.getIterator().getIndex()
          ))
        : this.hideRightController());
  }),
  (UTWatchListSplitViewController.prototype._nItemActivated = function _nItemActivated(
    e,
    t,
    i
  ) {
    this._listController.removeItemsById(i.itemIds || []);
  }),
  (UTWatchListSplitViewController.prototype._nItemListed = function _nItemListed(
    e,
    t,
    i
  ) {
    this._listController.removeItemsById(i.itemIds || []);
  }),
  (UTWatchListSplitViewController.prototype._nItemDiscarded = function _nItemDiscarded(
    e,
    t,
    i
  ) {
    this._listController.removeItemsById(i.itemIds || []);
  }),
  (UTWatchListSplitViewController.prototype._nItemMoved = function _nItemMoved(
    e,
    t,
    i
  ) {
    this._listController.removeItemsById(i.itemIds || []);
  }),
  utils.JS.inherits(UTExternalLinkTileView, UTTileView),
  (UTExternalLinkTileView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('tile');
      var t = document.createElement('div');
      t.classList.add('loadingSpinner'), e.appendChild(t);
      var i = document.createElement('header');
      (this.__tileTitle = document.createElement('h1')),
        this.__tileTitle.classList.add('ut-tile-header'),
        i.appendChild(this.__tileTitle),
        e.appendChild(i),
        (this.__tileContent = document.createElement('div')),
        this.__tileContent.classList.add('ut-tile-content'),
        e.appendChild(this.__tileContent);
      var s = document.createElement('div');
      s.classList.add('ut-tile-image'),
        e.appendChild(s),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTExternalLinkTileView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__tileTitle = null),
      (this.__tileContent = null);
  }),
  (UTExternalLinkTileView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTExternalLinkTileView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  utils.JS.inherits(UTTransfersHubView, UTView),
  (UTTransfersHubView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('TransfersHub');
      var t = document.createElement('div');
      t.classList.add('grid'),
        t.classList.add('layout-hub'),
        (this._extLinkTile = new UTExternalLinkTileView()),
        this._extLinkTile.getRootElement().classList.add('col-1-1'),
        this._extLinkTile
          .getRootElement()
          .classList.add('ut-tile-external-link'),
        t.appendChild(this._extLinkTile.getRootElement()),
        (this._transferMarketTile = new UTTileView()),
        this._transferMarketTile.getRootElement().classList.add('col-1-1'),
        this._transferMarketTile
          .getRootElement()
          .classList.add('ut-tile-transfer-market'),
        t.appendChild(this._transferMarketTile.getRootElement()),
        (this._transferListTile = new UTTransfersTileView()),
        this._transferListTile.getRootElement().classList.add('has-separator'),
        this._transferListTile.getRootElement().classList.add('col-1-2'),
        this._transferListTile
          .getRootElement()
          .classList.add('ut-tile-transfer-list'),
        t.appendChild(this._transferListTile.getRootElement()),
        (this._transferTargetsTile = new UTTransfersTileView()),
        this._transferTargetsTile
          .getRootElement()
          .classList.add('has-separator'),
        this._transferTargetsTile.getRootElement().classList.add('col-1-2'),
        this._transferTargetsTile
          .getRootElement()
          .classList.add('ut-tile-transfer-targets'),
        t.appendChild(this._transferTargetsTile.getRootElement()),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTTransfersHubView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      this._extLinkTile.destroy(),
      this._transferMarketTile.destroy(),
      this._transferListTile.destroy(),
      this._transferTargetsTile.destroy();
  }),
  (UTTransfersHubView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTTransfersHubView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTTransfersHubView.prototype.init = function init() {
    this.superclass(),
      this._extLinkTile.init(),
      this._extLinkTile.hide(),
      this._transferMarketTile.init(),
      this._transferMarketTile.setTitle(
        services.Localization.localize('navbar.label.search')
      ),
      this._transferListTile.init(),
      this._transferListTile.setTitle(
        services.Localization.localize('panel.label.transferlist')
      ),
      this._transferListTile.setTotalTransferLabel(
        services.Localization.localize('dock.label.items')
      ),
      this._transferListTile.setTotalTransferCount(0),
      this._transferListTile.setActiveTransferLabel(
        services.Localization.localize('dock.label.selling')
      ),
      this._transferListTile.setActiveTransferCount(0),
      this._transferListTile.setFinishedTransferLabel(
        services.Localization.localize('tradepile.dock.categories.sold')
      ),
      this._transferListTile.setFinishedTransferCount(0),
      this._transferTargetsTile.init(),
      this._transferTargetsTile.setTitle(
        services.Localization.localize('panel.label.transfertargets')
      ),
      this._transferTargetsTile.setTotalTransferLabel(
        services.Localization.localize('dock.label.items')
      ),
      this._transferTargetsTile.setTotalTransferCount(0),
      this._transferTargetsTile.setActiveTransferLabel(
        services.Localization.localize('dock.label.winning')
      ),
      this._transferTargetsTile.setActiveTransferCount(0),
      this._transferTargetsTile.setFinishedTransferLabel(
        services.Localization.localize('dock.label.outbid')
      ),
      this._transferTargetsTile.setFinishedTransferCount(0);
  }),
  (UTTransfersHubView.prototype.getExtLinkTileContent = function getExtLinkTileContent() {
    return this._extLinkTile.getTileContent();
  }),
  (UTTransfersHubView.prototype.getTransferMarketTile = function getTransferMarketTile() {
    return this._transferMarketTile;
  }),
  (UTTransfersHubView.prototype.getTransferListTile = function getTransferListTile() {
    return this._transferListTile;
  }),
  (UTTransfersHubView.prototype.getTransferTargetsTile = function getTransferTargetsTile() {
    return this._transferTargetsTile;
  }),
  (UTTransfersHubView.prototype.setTradeAccessState = function setTradeAccessState(
    e,
    t
  ) {
    if (
      (this._disableTiles(),
      (this._hasMarketAccess = !1),
      e === enums.TradeAccessLevel.MAINTENANCE)
    )
      this._transferTargetsTile.setInteractionState(!1),
        this._transferTargetsTile.setDimOverlayType(
          UTTileDimOverlayView.OverlayType.MAINTENANCE
        ),
        this._transferMarketTile.setInteractionState(!1),
        this._transferMarketTile.setDimOverlayText(
          services.Localization.localize('tile.disabled.transfersMaintenance')
        ),
        this._transferMarketTile.setDimOverlayType(
          UTTileDimOverlayView.OverlayType.MAINTENANCE
        );
    else if (e === enums.TradeAccessLevel.BLACKLIST)
      this._transferMarketTile.setInteractionState(!1),
        this._transferMarketTile.setDimOverlayText(
          services.Localization.localize('tile.disabled.transfersBlacklisted')
        );
    else {
      var i = '';
      switch (t) {
        case enums.SKU.XBO:
          i = services.Localization.localize('platform.console.xboxOne');
          break;
        case enums.SKU.PS4:
          i = services.Localization.localize('platform.console.ps4');
          break;
        case enums.SKU.PC:
          i = services.Localization.localize('platform.pc');
      }
      if (e === enums.TradeAccessLevel.GREYLIST)
        this._transferMarketTile.setInteractionState(!1),
          this._transferMarketTile.setDimOverlayText(
            services.Localization.localize(
              'tile.disabled.transfersGreylisted',
              [i]
            )
          );
      else {
        var s = services.Localization.localize('tile.disabled.learnmore', [i]),
          n = new DOMParser(),
          o = document.createElement('p');
        (o.innerHTML = n.parseFromString(s, 'text/html').body.innerHTML),
          this._extLinkTile.setContent(o),
          this._extLinkTile.show(),
          this._transferTargetsTile.setDimOverlayType(
            UTTileDimOverlayView.OverlayType.LOCKED
          ),
          this._transferMarketTile.setDimOverlayType(
            UTTileDimOverlayView.OverlayType.LOCKED
          ),
          this._transferMarketTile.setDimOverlayText(
            services.Localization.localize(
              'tile.disabled.transfersUnlockAccess',
              [i]
            )
          );
      }
    }
  }),
  (UTTransfersHubView.prototype.disableMarket = function disableMarket() {
    this._disableTiles(),
      this._transferMarketTile.setDimOverlayText(
        services.Localization.localize(
          'tile.disabled.transfersunavailable'
        ).toUpperCase()
      );
  }),
  (UTTransfersHubView.prototype._disableTiles = function _disableTiles() {
    this._transferMarketTile.setInteractionState(!1),
      this._transferMarketTile.setDimmed(!0),
      this._transferTargetsTile.setInteractionState(!1),
      this._transferTargetsTile.setDimmed(!0);
  }),
  utils.JS.inherits(UTTransfersHubViewController, UTViewController),
  (UTTransfersHubViewController.prototype.init = function init() {
    this.superclass();
    var e = this.getView();
    e
      .getTransferMarketTile()
      .addTarget(this, this._eTransferMarketTileSelected, enums.Event.TAP),
      e
        .getTransferListTile()
        .addTarget(this, this._eTransferListTileSelected, enums.Event.TAP),
      e
        .getTransferTargetsTile()
        .addTarget(this, this._eTransferTargetsTileSelected, enums.Event.TAP);
  }),
  (UTTransfersHubViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTTransfersHubView();
  }),
  (UTTransfersHubViewController.prototype._getTelemetryId = function _getTelemetryId() {
    return 'Hub - Transfers';
  }),
  (UTTransfersHubViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('nav.label.trading');
  }),
  (UTTransfersHubViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = services.User.getUser(),
      t = this.getView();
    if (
      (this.getNavigationController().setNavigationVisibility(!0, !0),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.AUCTIONS,
        'Transfers Hub'
      ),
      e.hasTradeAccess())
    )
      this._requestTransferListData(),
        services.Configuration.checkFeatureEnabled(
          enums.ServerFeature.TRADING_ENABLED
        )
          ? this._requestTransferTargetData()
          : (TelemetryManager.trackEvent(
              TelemetryManager.Sections.AUCTIONS,
              TelemetryManager.Categories.MARKET_STATUS,
              'Disabled'
            ),
            t.disableMarket());
    else {
      var i = e.getTradeAccess(),
        s = 'No Access';
      t.setTradeAccessState(i, e.getSelectedPersona().sku),
        this.decorateLinks(t.getExtLinkTileContent()),
        i === enums.TradeAccessLevel.BLACKLIST
          ? (s = 'Blacklisted')
          : i === enums.TradeAccessLevel.GREYLIST
          ? (s = 'Greylisted')
          : i === enums.TradeAccessLevel.MAINTENANCE && (s = 'Maintenance'),
        TelemetryManager.trackEvent(
          TelemetryManager.Sections.AUCTIONS,
          TelemetryManager.Categories.MARKET_STATUS,
          s
        );
    }
  }),
  (UTTransfersHubViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(),
      services.User.getUser().hasTradeAccess() ||
        this.stripLinks(this.getView().getExtLinkTileContent());
  }),
  (UTTransfersHubViewController.prototype._requestTransferListData = function _requestTransferListData() {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Item.requestTransferItems().observe(
        this,
        function _onRequestTransferItemsComplete(e, t) {
          e.unobserve(this);
          var i = this.getView().getTransferListTile();
          if (i && t.success) {
            var s = new viewmodels.TransferSectionList(t.data.items),
              n = t.data.items.length,
              o =
                1 === n
                  ? services.Localization.localize('dock.label.item')
                  : services.Localization.localize('dock.label.items');
            i.setTotalTransferLabel(o),
              i.setTotalTransferCount(n),
              i.setActiveTransferCount(s.getActiveItems().length),
              i.setFinishedTransferCount(s.getSoldItems().length),
              i.setInteractionState(!0),
              i.setDimmed(!1);
          } else
            NetworkErrorManager.checkCriticalStatus(t.status)
              ? NetworkErrorManager.handleStatus(t.status)
              : t.success ||
                (services.Notification.queue([
                  services.Localization.localize('tradepile.unavailable'),
                  enums.UINotificationType.NEGATIVE
                ]),
                i.setInteractionState(!1),
                i.setDimmed(!0));
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      );
  }),
  (UTTransfersHubViewController.prototype._requestTransferTargetData = function _requestTransferTargetData() {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      services.Item.requestWatchedItems().observe(
        this,
        function _onRequestWatchedItemsComplete(e, t) {
          e.unobserve(this);
          var i = this.getView().getTransferTargetsTile();
          if (i && t.success) {
            var s = t.data.items.length,
              n =
                1 === s
                  ? services.Localization.localize('dock.label.item')
                  : services.Localization.localize('dock.label.items');
            i.setTotalTransferLabel(n), i.setTotalTransferCount(s);
            var o = t.data.items.reduce(function(e, t) {
              var i = t.getAuctionData();
              return i.isHighestBid() && i.isActiveTrade() && e++, e;
            }, 0);
            i.setActiveTransferCount(o);
            var a = t.data.items.reduce(function(e, t) {
              return t.getAuctionData().isOutbid() && e++, e;
            }, 0);
            i.setFinishedTransferCount(a);
          } else
            NetworkErrorManager.checkCriticalStatus(t.status) &&
              NetworkErrorManager.handleStatus(t.status);
          gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        }
      );
  }),
  (UTTransfersHubViewController.prototype._eTransferMarketTileSelected = function _eTransferMarketTileSelected(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController();
    if (s) {
      var n = services.User.getUser().marketSearchCriteria,
        o = new UTMarketSearchFiltersViewController();
      o.initWithSearchCriteria(n), s.pushViewController(o);
    }
  }),
  (UTTransfersHubViewController.prototype._eTransferListTileSelected = function _eTransferListTileSelected(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController();
    if (s) {
      var n = isPhone()
        ? new UTTransferListViewController()
        : new UTTransferListSplitViewController();
      n.init(), s.pushViewController(n);
    }
  }),
  (UTTransfersHubViewController.prototype._eTransferTargetsTileSelected = function _eTransferTargetsTileSelected(
    e,
    t,
    i
  ) {
    var s = this.getNavigationController();
    if (s) {
      var n = isPhone()
        ? new UTWatchListViewController()
        : new UTWatchListSplitViewController();
      n.init(), s.pushViewController(n);
    }
  }),
  utils.JS.inherits(UTWebClientUpdateView, UTTargetActionView),
  (UTWebClientUpdateView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.setAttribute('id', 'WebClientUpdate'),
        e.classList.add('sm-ut-content-container'),
        e.classList.add('ut-content-container');
      var t = document.createElement('div');
      t.classList.add('ut-content');
      var i = document.createElement('div');
      i.classList.add('ut-download-patch-view'),
        i.classList.add('ut-login-generic');
      var s = document.createElement('div');
      s.classList.add('ut-login-generic-content');
      var n = document.createElement('div');
      (this.__title = document.createElement('h2')),
        n.appendChild(this.__title),
        (this.__message = document.createElement('p')),
        this.__message.classList.add('patchMessage'),
        n.appendChild(this.__message),
        (this._actionButton = new UTStandardButtonControl()),
        this._actionButton.getRootElement().classList.add('call-to-action'),
        n.appendChild(this._actionButton.getRootElement()),
        s.appendChild(n),
        i.appendChild(s),
        t.appendChild(i),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTWebClientUpdateView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__title = null),
      (this.__message = null),
      this._actionButton.destroy();
  }),
  (UTWebClientUpdateView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTWebClientUpdateView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTWebClientUpdateView.Event = {
    RESTART_APP: 'UTWebClientUpdateView.Event.RESTART_APP'
  }),
  (UTWebClientUpdateView.prototype.init = function init() {
    this.superclass(),
      this._actionButton.init(),
      this._actionButton.addTarget(
        this,
        this._eRestartSelected,
        enums.Event.TAP
      ),
      this._actionButton.setText(
        services.Localization.localize('clientupdate.button.ready')
      ),
      (this.__title.textContent = services.Localization.localize(
        'clientupdate.message.title'
      )),
      (this.__message.textContent = services.Localization.localize(
        'clientupdate.message.ready'
      ));
  }),
  (UTWebClientUpdateView.prototype._eRestartSelected = function _eRestartSelected(
    e,
    t,
    i
  ) {
    this._actionButton.setInteractionState(!1),
      this._actionButton.removeTarget(
        this,
        this._eRestartSelected,
        enums.Event.TAP
      ),
      this._triggerActions(UTWebClientUpdateView.Event.RESTART_APP);
  }),
  utils.JS.inherits(UTWebClientUpdateViewController, UTViewController),
  (UTWebClientUpdateViewController.prototype.init = function init() {
    this.initialized ||
      (this.superclass(),
      gClientUpdate.disablePolling(),
      this.getView().addTarget(
        this,
        this._eRestartButtonSelected,
        UTWebClientUpdateView.Event.RESTART_APP
      ),
      TelemetryManager.trackPage(
        TelemetryManager.Sections.MISC,
        'Web App - Update Screen'
      ));
  }),
  (UTWebClientUpdateViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTWebClientUpdateView();
  }),
  (UTWebClientUpdateViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return services.Localization.localize('clientupdate.title');
  }),
  (UTWebClientUpdateViewController.prototype._eRestartButtonSelected = function _eRestartButtonSelected(
    e,
    t,
    i
  ) {
    services.PIN.sendData(
      enums.PIN.EVENT.BOOT_START,
      {
        status: enums.PIN.BOOT_START_EVT_STATUS.SOURCE_UPDATE,
        source: enums.PIN.BOOT_START_EVT_SOURCE.UPGRADE
      },
      !0
    ),
      TelemetryManager.trackEvent(
        TelemetryManager.Sections.MISC,
        TelemetryManager.Categories.BUTTON_PRESS,
        'Web App Update Button'
      ),
      gClickShield.showShield(components.ClickShield.SHIELD.LOADING),
      setTimeout(function() {
        services.URL.hasDeepLinkURL() &&
          getStorage().setItem(
            STORAGE_DEEP_LINK_KEY,
            services.URL.getDeepLinkURL()
          ),
          services.Squad.hasExternalShowOffSquad() &&
            getStorage().setItem(
              STORAGE_SHOW_OFF_KEY,
              services.Squad.unauthenticatedShowOffId
            ),
          gClientUpdate.updateClient();
      }, 1e3);
  }),
  utils.JS.inherits(UTRootView, UTView),
  (UTRootView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('main');
      e.classList.add('ut-root-view'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTRootView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTRootView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTRootView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  utils.JS.inherits(UTRootViewController, UTViewController),
  (UTRootViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new UTRootView();
  }),
  (UTRootViewController.prototype._getPresentationControllerInstance = function _getPresentationControllerInstance() {
    return new UTRootPresentationController();
  }),
  (UTRootViewController.prototype.showClientUpdateView = function showClientUpdateView() {
    var e;
    return (
      !(
        this.getPresentedViewController() instanceof
        UTWebClientUpdateViewController
      ) &&
      ((e = new UTWebClientUpdateViewController()).init(),
      this.presentViewController(e, !0),
      !0)
    );
  }),
  (UTRootViewController.prototype.showLanguageSelectView = function showLanguageSelectView() {
    if (
      this.getPresentedViewController() instanceof
      UTLanguageSelectViewController
    )
      return !1;
    var e = new UTLanguageSelectViewController();
    return (
      e.init(),
      e.setLanguageSelectCallback(function() {
        getAppMain().onLanguageLoaded();
      }),
      this.presentViewController(e, !0),
      !0
    );
  }),
  (UTRootViewController.prototype.showLicenseView = function showLicenseView() {
    if (this.getPresentedViewController() instanceof UTLicenseViewController)
      return !1;
    var e = new UTLicenseViewController();
    return e.init(), this.presentViewController(e, !0), !0;
  }),
  (UTRootViewController.prototype.showLoginView = function showLoginView() {
    if (this.getPresentedViewController() instanceof UTLoginViewController)
      return !1;
    var e = new UTLoginViewController();
    return e.init(), this.presentViewController(e, !0), !0;
  }),
  (UTRootViewController.prototype.showOnboardingView = function showOnboardingView(
    e,
    t
  ) {
    var i = new controllers.navigation.Onboarding();
    return (
      t && i.setSquad(t),
      e ? i.initWithViewmodel(e) : i.init(),
      this.presentViewController(i, !0),
      !0
    );
  }),
  (UTRootViewController.prototype.showCaptchaView = function showCaptchaView() {
    var e = new UTBootFlowNavigationController(),
      t = new UTCaptchaViewController();
    return (
      t.init(),
      e.initWithRootController(t),
      this.presentViewController(e, !0),
      !0
    );
  }),
  (UTRootViewController.prototype.showFunCaptchaView = function showFunCaptchaView() {
    var e = new UTBootFlowNavigationController(),
      t = new UTFunCaptchaViewController();
    return (
      t.init(),
      e.initWithRootController(t),
      this.presentViewController(e, !0),
      !0
    );
  }),
  (UTRootViewController.prototype.showLoggedOnConsoleView = function showLoggedOnConsoleView() {
    var e = new UTBootFlowNavigationController(),
      t = new UTLoggedOnConsoleViewController();
    return (
      t.init(),
      e.initWithRootController(t),
      this.presentViewController(e, !0),
      !0
    );
  }),
  (UTRootViewController.prototype.showGettingStartedView = function showGettingStartedView(
    e
  ) {
    var t = new UTBootFlowNavigationController(),
      i = new UTGettingStartedViewController();
    return (
      i.init(),
      i.setType(e),
      t.initWithRootController(i),
      this.presentViewController(t, !0),
      !0
    );
  }),
  (UTRootViewController.prototype.showSharedSquadView = function showSharedSquadView(
    e
  ) {
    var t = new UTGameFlowNavigationController(),
      i = isPhone()
        ? new UTShowOffSquadOverviewViewController()
        : new UTShowOffSquadSplitViewController();
    return (
      i.initWithSquad(e.squad),
      t.initWithRootController(i),
      t.setClubInfo(e.clubName, e.estDate),
      this.presentViewController(t),
      !0
    );
  }),
  (UTRootViewController.prototype.showGameView = function showGameView() {
    if (this._presentedViewController instanceof UTGameTabBarController)
      return !1;
    var e,
      t = new UTGameTabBarController(),
      i = new UTGameFlowNavigationController(),
      s = new UTGameFlowNavigationController(),
      n = new UTGameFlowNavigationController(),
      o = new UTGameFlowNavigationController(),
      a = new UTGameFlowNavigationController(),
      r = new UTTabBarItemView(),
      l = new UTTabBarItemView(),
      c = new UTTabBarItemView(),
      u = new UTTabBarItemView(),
      d = new UTTabBarItemView();
    if (
      (i.initWithRootController(new UTHomeHubViewController()),
      s.initWithRootController(new UTSquadsHubViewController()),
      n.initWithRootController(new UTTransfersHubViewController()),
      o.initWithRootController(new UTStoreViewController()),
      a.initWithRootController(new UTClubHubViewController()),
      r.init(),
      r.setTag(UTGameTabBarController.TabTag.HOME),
      r.setText(services.Localization.localize('navbar.label.home')),
      r.addClass('icon-home'),
      l.init(),
      l.setTag(UTGameTabBarController.TabTag.SQUADS),
      l.setText(services.Localization.localize('nav.label.squads')),
      l.addClass('icon-squad'),
      c.init(),
      c.setTag(UTGameTabBarController.TabTag.TRANSFERS),
      c.setText(services.Localization.localize('nav.label.trading')),
      c.addClass('icon-transfer'),
      u.init(),
      u.setTag(UTGameTabBarController.TabTag.STORE),
      u.setText(services.Localization.localize('navbar.label.store')),
      u.addClass('icon-store'),
      d.init(),
      d.setTag(UTGameTabBarController.TabTag.CLUB),
      d.setText(services.Localization.localize('nav.label.club')),
      d.addClass('icon-club'),
      (i.tabBarItem = r),
      (s.tabBarItem = l),
      (n.tabBarItem = c),
      (o.tabBarItem = u),
      (a.tabBarItem = d),
      (e = [i, s, n, o, a]),
      !isPhone())
    ) {
      var h = new UTGameFlowNavigationController(),
        p = new UTGameFlowNavigationController(),
        _ = new UTGameFlowNavigationController();
      h.initWithRootController(new UTSBCHubViewController()),
        p.initWithRootController(new UTLeaderboardsHubViewController()),
        _.initWithRootController(new UTAppSettingsViewController());
      var m = new UTTabBarItemView();
      m.init(),
        m.setTag(UTGameTabBarController.TabTag.SBC),
        m.setText(services.Localization.localize('nav.label.sbc')),
        m.addClass('icon-sbc');
      var g = new UTTabBarItemView();
      g.init(),
        g.setTag(UTGameTabBarController.TabTag.LEADERBOARDS),
        g.setText(services.Localization.localize('nav.label.leaderboards')),
        g.addClass('icon-leaderboards');
      var T = new UTTabBarItemView();
      T.init(),
        T.setTag(UTGameTabBarController.TabTag.SETTINGS),
        T.setText(services.Localization.localize('button.settings')),
        T.addClass('icon-settings'),
        (h.tabBarItem = m),
        (p.tabBarItem = g),
        (_.tabBarItem = T),
        (e = e.concat([h, p, _]));
    }
    return (
      t.initWithViewControllers(e),
      t.getView().addClass('game-navigation'),
      this.presentViewController(t, !0, function() {
        services.URL.hasDeepLinkURL() && services.URL.processDeepLinkURL();
      }),
      !0
    );
  }),
  (UTRootViewController.prototype.setGameViewTab = function setGameViewTab(e) {
    var t = this.getPresentedViewController();
    if (t instanceof UTGameTabBarController) {
      var i = t.getCurrentViewController();
      t.setSelectedIndexByTag(e),
        i instanceof UTGameFlowNavigationController &&
          i.popToRootViewController();
    } else
      utils.Debug.Assert(
        !1,
        'Attempted to set game view tab when the game view is not being presented.'
      );
  }),
  (UTRootViewController.prototype.didDismiss = function didDismiss(e) {
    this.superclass(), e.dealloc();
  }),
  utils.JS.inherits(UTServerSettingsUpdateController, UTObject),
  (UTServerSettingsUpdateController.prototype.startPolling = function startPolling() {
    this._observable ||
      (0 < this._timeout && (clearTimeout(this._timeout), (this._timeout = 0)),
      (this._observable = services.Configuration.requestSettingsData()),
      this._observable.observe(this, function _onRequestSettingsComplete(e, t) {
        e.unobserve(this),
          (this._observable = null),
          (this._timeout = setTimeout(
            this.startPolling.bind(this),
            gConfigurationModel.getConfigNumber(
              models.ConfigurationModel.KEY_SETTINGS_REFRESH_INTERVAL
            )
          ));
      }));
  }),
  (UTServerSettingsUpdateController.prototype.stopPolling = function stopPolling() {
    clearTimeout(this._timeout),
      (this._timeout = 0),
      this._observable &&
        (this._observable.unobserve(this), (this._observable = null));
  }),
  NamespaceManager.Register('views'),
  (views.Notification = function FUINotification(e) {
    UTView.call(this),
      (this.message = e.message),
      Object.defineProperty(this, 'message', {
        writable: !1,
        enumerable: !0
      }),
      (this.type = e.type),
      Object.defineProperty(this, 'type', {
        writable: !1,
        enumerable: !0
      }),
      (this._displayTimeout = void 0),
      Object.defineProperty(this, '_displayTimeout', {
        writable: !0,
        enumerable: !1
      }),
      (this._UIStates = {
        HIDDEN: 0,
        SHOWING: 1,
        SHOWN: 2,
        DISMISSING: 3
      }),
      Object.defineProperty(this, '_UIStates', {
        writable: !1,
        enumerable: !1
      }),
      (this._state = this._UIStates.HIDDEN),
      Object.defineProperty(this, '_state', {
        writable: !0,
        enumerable: !1
      }),
      this._generate();
  }),
  utils.JS.inherits(views.Notification, UTView),
  (views.Notification.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('Notification'),
        (this.__content = document.createElement('p')),
        e.appendChild(this.__content);
      var t = document.createElement('span');
      t.classList.add('icon_close'),
        t.classList.add('fut_icon'),
        e.appendChild(t),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.Notification.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__content = null);
  }),
  (views.Notification.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.Notification.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.Notification.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0);
    var e = '';
    switch (this.type) {
      case enums.UINotificationType.POSITIVE:
        e = 'positive';
        break;
      case enums.UINotificationType.NEUTRAL:
        e = 'neutral';
        break;
      case enums.UINotificationType.NEGATIVE:
        e = 'negative';
    }
    this.addClass(e), (this.__content.textContent = this.message);
  }),
  (views.Notification.prototype.didAddToSuperview = function didAddToSuperview() {
    this.display();
  }),
  (views.Notification.prototype.display = function display() {
    this._state === this._UIStates.HIDDEN &&
      ((this._state = this._UIStates.SHOWING),
      this.perform(
        enums.UIAnimation.FADE_IN,
        function() {
          this._state = this._UIStates.SHOWN;
        }.bind(this)
      ),
      (this._displayTimeout = setTimeout(
        this.remove.bind(this),
        Math.max(60 * this.message.length, 1500)
      )));
  }),
  (views.Notification.prototype.remove = function remove() {
    this._state !== this._UIStates.DISMISSING &&
      ((this._state = this._UIStates.DISMISSING),
      (this._displayTimeout = clearTimeout(this._displayTimeout)),
      this.perform(
        enums.UIAnimation.FADE_OUT,
        function() {
          this.removeFromSuperview(), this.dealloc();
        }.bind(this)
      ));
  }),
  (views.Notification.prototype._tapDetected = function _tapDetected(e) {
    this._state === this._UIStates.SHOWN && this.remove();
  }),
  NamespaceManager.Register('views'),
  (views.NotificationLayer = function FUINotificationLayer() {
    UTView.call(this), this._generate();
  }),
  utils.JS.inherits(views.NotificationLayer, UTView),
  (views.NotificationLayer.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.setAttribute('id', 'NotificationLayer'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.NotificationLayer.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (views.NotificationLayer.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.NotificationLayer.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.NotificationLayer.prototype.displayNotification = function displayNotification(
    e
  ) {
    var t = new views.Notification(e);
    t.init(), this.addSubview(t, this.getRootElement()), this.layoutSubviews();
  }),
  NamespaceManager.Register('controllers.views'),
  (controllers.views.NotificationLayer = function UTNotificationLayerController() {
    UTViewController.call(this);
  }),
  utils.JS.inherits(controllers.views.NotificationLayer, UTViewController),
  (controllers.views.NotificationLayer.prototype.init = function init() {
    this.superclass(),
      services.Notification.display.observe(this, function _displayNotification(
        e,
        t
      ) {
        this.getView().displayNotification(t);
      });
    var e = getDefaultDispatcher();
    e.addObserver(
      enums.Notification.OBJECTIVE_COMPLETE,
      this,
      this._nObjectiveCompleted
    ),
      e.addObserver(
        enums.Notification.OBJECTIVE_GROUP_COMPLETE,
        this,
        this._nObjectiveGroupCompleted
      ),
      e.addObserver(
        enums.Notification.ITEM_REDEEM,
        this,
        this._nUnlockableRedeemed
      );
  }),
  (controllers.views.NotificationLayer.prototype.dealloc = function dealloc() {
    services.Notification.display.unobserve(this);
    var e = getDefaultDispatcher();
    e.removeObserver(enums.Notification.OBJECTIVE_COMPLETE, this),
      e.removeObserver(
        enums.Notification.OBJECTIVE_GROUP_COMPLETE,
        this,
        this._nObjectiveGroupCompleted
      ),
      e.removeObserver(enums.Notification.ITEM_REDEEM, this),
      this.superclass();
  }),
  (controllers.views.NotificationLayer.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.NotificationLayer();
  }),
  (controllers.views.NotificationLayer.prototype._nObjectiveCompleted = function _nObjectiveCompleted(
    e,
    t,
    i
  ) {
    var s = services.Localization.localize(
      'notification.objectives.completedObjective',
      [i.name]
    );
    this.getView().displayNotification(
      new transferobjects.Notification(s, enums.UINotificationType.POSITIVE)
    );
  }),
  (controllers.views.NotificationLayer.prototype._nObjectiveGroupCompleted = function _nObjectiveGroupCompleted(
    e,
    t,
    i
  ) {
    var s = services.Localization.localize(
      'notification.objectives.completedObjectiveGroup',
      [i.name]
    );
    this.getView().displayNotification(
      new transferobjects.Notification(s, enums.UINotificationType.POSITIVE)
    );
  }),
  (controllers.views.NotificationLayer.prototype._nUnlockableRedeemed = function _nUnlockableRedeemed(
    e,
    t,
    i
  ) {
    var s;
    i.isCoins
      ? (s = services.Localization.localize('notification.coins.added'))
      : i.isPack
      ? (s = services.Localization.localize('notification.pack.added'))
      : i.isDraftToken
      ? (s = services.Localization.localize('notification.drafttoken.added'))
      : i.isPlayerPickItem &&
        (s = services.Localization.localize('notification.draftitem.added')),
      this.getView().displayNotification(
        new transferobjects.Notification(
          s || '',
          enums.UINotificationType.POSITIVE
        )
      );
  }),
  NamespaceManager.Register('components'),
  (components.ClickShield = function ClickShieldView() {
    UTView.call(this),
      (this._shieldCounter = {
        FULL: 0,
        LOADING: 0,
        INTERACTION: 0
      }),
      (this.dismissed = new UTObservable()),
      Object.defineProperty(this, 'dismissed', {
        writable: !1
      }),
      this._generate(),
      this._update(),
      this._startHandlingEvents(this.getRootElement());
  }),
  utils.JS.inherits(components.ClickShield, UTView),
  (components.ClickShield.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-click-shield'),
        (this.__loaderIcon = document.createElement('img')),
        this.__loaderIcon.setAttribute('src', 'images/loader.gif'),
        this.__loaderIcon.classList.add('loaderIcon'),
        e.appendChild(this.__loaderIcon),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (components.ClickShield.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__loaderIcon = null);
  }),
  (components.ClickShield.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (components.ClickShield.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (components.ClickShield.SHIELD = {
    NONE: 0,
    FULL: 1,
    LOADING: 2,
    INTERACTION: 4
  }),
  (components.ClickShield.prototype.dealloc = function dealloc() {
    this._stopHandlingEvents(), this.reset(), this.superclass();
  }),
  (components.ClickShield.prototype.reset = function reset() {
    (this._shieldCounter.FULL = 0),
      (this._shieldCounter.LOADING = 0),
      (this._shieldCounter.INTERACTION = 0),
      this._update();
  }),
  (components.ClickShield.prototype.showShield = function(e) {
    if (e !== components.ClickShield.SHIELD.NONE) {
      switch (e) {
        case components.ClickShield.SHIELD.FULL:
          ++this._shieldCounter.FULL;
          break;
        case components.ClickShield.SHIELD.LOADING:
          ++this._shieldCounter.LOADING;
          break;
        case components.ClickShield.SHIELD.INTERACTION:
          ++this._shieldCounter.INTERACTION;
      }
      this._update();
    }
  }),
  (components.ClickShield.prototype.hideShield = function(e) {
    if (e !== components.ClickShield.SHIELD.NONE) {
      switch (e) {
        case components.ClickShield.SHIELD.FULL:
          utils.Debug.Assert(
            0 <= this._shieldCounter.FULL - 1,
            'Hiding full shield when counter is 0.'
          ),
            1 <= this._shieldCounter.FULL && --this._shieldCounter.FULL;
          break;
        case components.ClickShield.SHIELD.LOADING:
          utils.Debug.Assert(
            0 <= this._shieldCounter.LOADING - 1,
            'Hiding loading shield when counter is 0.'
          ),
            1 <= this._shieldCounter.LOADING && --this._shieldCounter.LOADING;
          break;
        case components.ClickShield.SHIELD.INTERACTION:
          utils.Debug.Assert(
            0 <= this._shieldCounter.INTERACTION - 1,
            'Hiding interaction shield when counter is 0.'
          ),
            1 <= this._shieldCounter.INTERACTION &&
              --this._shieldCounter.INTERACTION;
      }
      this._update(), this.isShowing() || this.dismissed.notify();
    }
  }),
  (components.ClickShield.prototype.isShowing = function isShowing() {
    return (
      0 < this._shieldCounter.FULL ||
      0 < this._shieldCounter.LOADING ||
      0 < this._shieldCounter.INTERACTION
    );
  }),
  (components.ClickShield.prototype.isInteractionShieldShowing = function isInteractionShieldShowing() {
    return 0 < this._shieldCounter.INTERACTION;
  }),
  (components.ClickShield.prototype._update = function _update() {
    DOMKit.toggleDisplayStyle(
      this.__loaderIcon,
      0 < this._shieldCounter.LOADING
    );
    var e =
      0 < this._shieldCounter.INTERACTION &&
      !(0 < this._shieldCounter.LOADING || 0 < this._shieldCounter.FULL);
    this.toggleClass('showing', this.isShowing()),
      this.toggleClass('interaction', e);
  }),
  (components.ClickShield.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(), e.preventDefault();
  }),
  (components.ClickShield.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(), hideKeyboard();
  }),
  (components.ClickShield.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(), hideKeyboard();
  });
var gClickShield = new components.ClickShield();

function UTPopupQueueView() {
  UTView.call(this),
    (this._queue = []),
    Object.defineProperty(this, '_queue', {
      enumerable: !1,
      writable: !1
    });
}
NamespaceManager.Register('controllers.views.popups'),
  (controllers.views.popups.LiveMessage = function LiveMessage(e) {
    controllers.views.popups.BasePopup.call(this),
      (this._viewmodel = new UTIterator(e)),
      (this._countdownTimer = null);
  }),
  utils.JS.inherits(
    controllers.views.popups.LiveMessage,
    controllers.views.popups.BasePopup
  ),
  (controllers.views.popups.LiveMessage.prototype.init = function init() {
    this.superclass(),
      this.getView()
        .getContinueButton()
        .addTarget(this, this._onContinue, enums.Event.TAP);
  }),
  (controllers.views.popups.LiveMessage.prototype.dealloc = function dealloc() {
    (this._viewmodel = null), this._stopCountdownTimer(), this.superclass();
  }),
  (controllers.views.popups.LiveMessage.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.LiveMessage();
  }),
  (controllers.views.popups.LiveMessage.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var e = this.getView(),
      t = this._viewmodel.current();
    e.render(t, this._viewmodel.getIndex() + 1 + '/' + this._viewmodel.length),
      t.hasCountdowns() && this._startCountdownTimer(t),
      this._startButtonCountdown(1e3 * t.durationInSec);
  }),
  (controllers.views.popups.LiveMessage.prototype.onBackButton = function onBackButton() {
    return !1;
  }),
  (controllers.views.popups.LiveMessage.prototype._startCountdownTimer = function _startCountdownTimer(
    e
  ) {
    this._countdownTimer ||
      (this._updateCountdownTimer(e),
      (this._countdownTimer = new utils.UTTimer(
        1e3,
        this._updateCountdownTimer.bind(this, e)
      )),
      this._countdownTimer.start());
  }),
  (controllers.views.popups.LiveMessage.prototype._stopCountdownTimer = function _stopCountdownTimer() {
    this._countdownTimer &&
      (this._countdownTimer.reset(), (this._countdownTimer = null));
  }),
  (controllers.views.popups.LiveMessage.prototype._updateCountdownTimer = function _updateCountdownTimer(
    s
  ) {
    var n = this.getView();
    s.countdowns.keys().forEach(
      function(e) {
        var t = Math.max(0, Math.round(s.countdowns.get(e) - Date.now() / 1e3)),
          i = s.textFields
            .get(e)
            .text.replace(
              enums.ArubaStringKeys.COUNTDOWN,
              services.Localization.localizeTimeRemaining(t)
            );
        e === enums.ArubaTextFieldType.BODY
          ? n.renderContentText(i)
          : e === enums.ArubaTextFieldType.TITLE
          ? n.renderTitleText(i)
          : e === enums.ArubaTextFieldType.SUBTITLE
          ? n.renderSubtitleText(i)
          : e === enums.ArubaTextFieldType.INFO && n.renderInfoText(i);
      }.bind(this)
    );
  }),
  (controllers.views.popups.LiveMessage.prototype._startButtonCountdown = function _startButtonCountdown(
    e
  ) {
    var t = this.getView();
    t.setInteractionState(!1),
      setTimeout(
        function() {
          t.setInteractionState(!0);
        }.bind(this),
        e
      );
  }),
  (controllers.views.popups.LiveMessage.prototype._continue = function _continue() {
    var e = this._viewmodel.current();
    if (
      (e.hasCountdowns() && this._stopCountdownTimer(),
      services.Messages.readLiveMessage(e.id),
      this._viewmodel.endOfList)
    )
      this.closePopup();
    else {
      var t = this._viewmodel.next();
      t.hasCountdowns() && this._startCountdownTimer(t),
        this.getView().render(
          t,
          this._viewmodel.getIndex() + 1 + '/' + this._viewmodel.length
        ),
        this._startButtonCountdown(1e3 * t.durationInSec);
    }
  }),
  (controllers.views.popups.LiveMessage.prototype.handleKeyUpEvent = function handleKeyUpEvent(
    e
  ) {
    !this.getView().isInteractionEnabled() ||
      (e.key !== enums.KeyboardKey.ESCAPE &&
        e.key !== enums.KeyboardKey.MS_ESCAPE &&
        e.key !== enums.KeyboardKey.ENTER) ||
      this._continue();
  }),
  (controllers.views.popups.LiveMessage.prototype._onContinue = function _onContinue(
    e,
    t,
    i
  ) {
    this._continue();
  }),
  utils.JS.inherits(UTPopupQueueView, UTView),
  (UTPopupQueueView.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-click-shield'),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (UTPopupQueueView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null);
  }),
  (UTPopupQueueView.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (UTPopupQueueView.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (UTPopupQueueView.prototype.init = function init() {
    this.superclass(),
      this.getRoot().on('scrollstart scrollstop swipeleft swiperight', function(
        e
      ) {
        e.stopImmediatePropagation(), e.preventDefault();
      });
  }),
  (UTPopupQueueView.prototype.dealloc = function dealloc() {
    this.reset(), this.superclass();
  }),
  (UTPopupQueueView.prototype.reset = function reset() {
    this._queue.forEach(function(e) {
      e.dealloc();
    }),
      (this._queue = []),
      this._hideShield();
  }),
  (UTPopupQueueView.prototype.onRequestBack = function onRequestBack() {
    var e = this._queue[0];
    return !utils.JS.isValid(e) || e.onBackButton();
  }),
  (UTPopupQueueView.prototype.setActivePopup = function setActivePopup(e) {
    this._queue.push(e),
      e.onExit.observe(this, this._onActivePopupExit),
      1 === this._queue.length && this._displayPopup(e);
  }),
  (UTPopupQueueView.prototype._displayPopup = function _displayPopup(e) {
    var t = e.getView();
    e.initialized || e.init(),
      e.viewWillAppear(),
      this._showShield(),
      this.getRootElement().appendChild(t.getRootElement()),
      e.viewDidAppear();
  }),
  (UTPopupQueueView.prototype._onActivePopupExit = function _onActivePopupExit(
    e
  ) {
    this.closeActivePopup();
  }),
  (UTPopupQueueView.prototype.closeActivePopup = function closeActivePopup() {
    var e = this._queue.shift(),
      t = this._queue[0];
    e.dealloc(),
      utils.JS.isValid(t)
        ? requestAnimationFrame(
            function() {
              this._displayPopup(t);
            }.bind(this)
          )
        : this._hideShield();
  }),
  (UTPopupQueueView.prototype._showShield = function _showShield() {
    this.addClass('showing');
  }),
  (UTPopupQueueView.prototype._hideShield = function _hideShield() {
    this.removeClass('showing');
  });
var gPopupClickShield = new UTPopupQueueView();
(views.FIFAHeader = function() {
  UTView.call(this), this._generate();
}),
  utils.JS.inherits(views.FIFAHeader, UTView),
  (views.FIFAHeader.prototype._generate = function _generate() {
    if (!this._generated) {
      var e = document.createElement('div');
      e.classList.add('ut-fifa-header-view'),
        (this.__fifaLink = document.createElement('a')),
        this.__fifaLink.classList.add('fifa'),
        e.appendChild(this.__fifaLink),
        (this.__easportsLink = document.createElement('a')),
        this.__easportsLink.setAttribute('target', 'blank'),
        this.__easportsLink.classList.add('eaSports'),
        e.appendChild(this.__easportsLink),
        (this.__root = e),
        (this._generated = !0);
    }
  }),
  (views.FIFAHeader.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    $(this.__root)
      .off()
      .remove(),
      (this.__root = null),
      (this.__fifaLink = null),
      (this.__easportsLink = null);
  }),
  (views.FIFAHeader.prototype.getRoot = function getRoot() {
    return $(this.__root);
  }),
  (views.FIFAHeader.prototype.getRootElement = function getRootElement() {
    return this.__root;
  }),
  (views.FIFAHeader.prototype.render = function renderText(e, t, i) {
    (this.__fifaLink.textContent = e),
      (this.__fifaLink.href = t),
      (this.__easportsLink.href = i);
  }),
  (controllers.FIFAHeader = function() {
    UTViewController.call(this);
  }),
  utils.JS.inherits(controllers.FIFAHeader, UTViewController),
  (controllers.FIFAHeader.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.FIFAHeader();
  }),
  (controllers.FIFAHeader.prototype.setup = function setup(e) {
    var t = e
        ? services.Localization.localize('preload.fifaheader.back')
        : 'Back to FIFA',
      i = e
        ? services.Localization.localize('preload.fifaheader.url')
        : '/fifa/ultimate-team/features',
      s = gConfigurationModel.getConfigString(
        models.ConfigurationModel.KEY_RESOURCE_ROOT
      ),
      n = s + i;
    this.getView().render(t, n, s);
  });
var _appMain = null;

function getUrlVars() {
  var i = {
      locale: null,
      language: null,
      variant: null
    },
    e = window.location.href.indexOf('?');
  if (
    ((0 <= e ? window.location.href.slice(e + 1).split('&') : []).forEach(
      function(e) {
        var t = e.split('=');
        i[t[0]] = t[1];
      }
    ),
    i.locale)
  ) {
    var t = i.locale.split('_');
    (i.language = t[0]),
      3 === t.length
        ? ((i.variant = t[1]), (i.region = t[2]))
        : (i.region = t[1]);
  } else {
    var s = /\/(uk|au|fr|it|de|es|mx|nl|pl|ru|jp|br|cz|se|dk|no|kr|cn|tw)?\/fifa\/ultimate-team\//.exec(
      window.location.href
    );
    s && (i.region = s[1]);
  }
  return i;
}

function isChrome() {
  return !0;
}

function isWeb() {
  return !0;
}

function isAndroid() {
  return !1;
}

function isIOS() {
  return !1;
}

function isIE() {
  var e = !1,
    t = window.navigator.userAgent,
    i = t.indexOf('MSIE '),
    s = t.indexOf('Trident/');
  return (-1 < i || -1 < s) && (e = !0), e;
}

function isPhone() {
  return isWeb()
    ? window.matchMedia('(max-device-width: 599px) and (orientation: portrait)')
        .matches ||
        window.matchMedia(
          '(min-aspect-ratio: 32/19) and (max-device-width: 1023px) and (orientation: landscape)'
        ).matches
    : isAndroid()
    ? window.matchMedia('(max-device-width: 599px)').matches
    : window.matchMedia('(orientation: portrait)').matches;
}

function getUUID() {
  return '0';
}

function getAppMain() {
  return _appMain;
}

function getStorage() {
  return _appMain ? _appMain.getStorage() : localStorage;
}

function toJS(e) {
  utils.Debug.Assert(
    !1,
    'Native code is trying to tell the web code something: ' + e
  );
}

function onMTXCatalog(e) {
  _appMain && _appMain.onMTXCatalog && _appMain.onMTXCatalog(JSON.parse(e));
}

function onMTXTransaction(e) {
  _appMain &&
    _appMain.onMTXTransaction &&
    _appMain.onMTXTransaction(JSON.parse(e));
}

function onMTXItemGranted() {
  _appMain && _appMain.onMTXItemGranted && _appMain.onMTXItemGranted();
}

function onMTXError(e) {
  _appMain && _appMain.onMTXError && _appMain.onMTXError(JSON.parse(e));
}

function onPN(e, t) {
  _appMain && _appMain.onPN && _appMain.onPN(e, t);
}

function handleOpenURL(e) {
  _appMain && _appMain.onHandleDeepLink(e);
}

function hasConnection() {
  return navigator.onLine;
}

function onAppPaused() {
  _appMain && _appMain.onPause();
}

function onAppResumed() {
  _appMain && _appMain.onResume();
}

function onVisibilityChanged(e) {
  document.hidden ? onAppPaused() : onAppResumed();
}

function onAppOnline() {
  _appMain && _appMain.onOnline();
}

function onAppOffline() {
  _appMain && _appMain.onOffline();
}

function isVerboseLoggingEnabled() {
  return !!_appMain && _appMain.isVerboseLoggingEnabled();
}

function getAppVersion() {
  return _appMain ? _appMain.getAppVersion() : '0';
}

function getAppId() {
  return _appMain ? _appMain.getAppIdentifier() : 'com.ea.fifaultimate.inc';
}

function getSellId() {
  return _appMain ? _appMain.getSellId() : 0;
}

function getStoreId() {
  return 0;
}

function getDefaultDispatcher() {
  return _appMain ? _appMain.getDefaultDispatcher() : null;
}

function getKeyboardEventController() {
  return _appMain ? _appMain.getKeyboardEventController() : null;
}

function getBackButtonEventController() {
  return _appMain && _appMain.getBackButtonEventController
    ? _appMain.getBackButtonEventController()
    : null;
}

function onOrientationChanged() {
  _appMain && _appMain.onOrientationChanged();
}

function getWindowOrientation() {
  return window.orientation || 0 === window.orientation
    ? window.orientation
    : isPhone()
    ? enums.DeviceOrientation.PORTRAIT
    : enums.DeviceOrientation.LANDSCAPE_RIGHT;
}

function removeFocus() {
  document.activeElement &&
    'body' !== document.activeElement.nodeName.toLowerCase() &&
    document.activeElement.blur();
}

function showKeyboard() {
  !isChrome() &&
    cordova &&
    cordova.plugins &&
    cordova.plugins.Keyboard &&
    cordova.plugins.Keyboard.show();
}

function hideKeyboard() {
  removeFocus(),
    !isChrome() &&
      cordova &&
      cordova.plugins &&
      cordova.plugins.Keyboard &&
      cordova.plugins.Keyboard.close();
}

function onDeviceReady() {
  console.log('onDeviceReady'),
    document.addEventListener('visibilitychange', onVisibilityChanged, !1),
    window.addEventListener('orientationchange', onOrientationChanged, !1),
    window.addEventListener('online', onAppOnline, !1),
    window.addEventListener('offline', onAppOffline, !1),
    (_appMain = new EASFCApp_FUTWeb()).init();
  var i = '',
    s = '';
  if (
    (window.MobileAccessibility &&
      (window.MobileAccessibility.usePreferredTextZoom(!1),
      window.MobileAccessibility.setTextZoom(100)),
    isChrome())
  ) {
    console.log('Check for URL params.');
    var e = utils.HTTP.getParamsFromUrl(window.location.href);
    if (e.has(enums.URLParams.TOKEN)) {
      var t = getStorage();
      t.setItem(enums.EADPIdentity.ACCESS_TOKEN, e.get(enums.URLParams.TOKEN)),
        e.remove(enums.URLParams.TOKEN),
        e.has(enums.URLParams.EXPIRE) &&
          (t.setItem(enums.EADPIdentity.EXPIRE, e.get(enums.URLParams.EXPIRE)),
          e.remove(enums.URLParams.EXPIRE));
    }
    e.has(enums.URLParams.SHOWOFFID) &&
      (_appMain.setUnauthenticatedShowOffId(e.get(enums.URLParams.SHOWOFFID)),
      e.remove(enums.URLParams.SHOWOFFID)),
      (s = services.URL.findValidDeepLinkID(e.keys())) !==
        enums.DeepLinkSections.NONE && services.URL.setDeepLinkURL(s, e.get(s));
  } else
    window.universalLinks.subscribe('launchFromLink', function(e) {
      if (
        ((i = e.params[enums.URLParams.SHOWOFFID]) &&
          _appMain.setUnauthenticatedShowOffId(i),
        (s = services.URL.findValidDeepLinkID(Object.keys(e.params))) !==
          enums.DeepLinkSections.NONE)
      ) {
        services.URL.setDeepLinkURL(s, e.params[s]);
        var t = services.Authentication.getSession(enums.AuthEnvironment.UTAS)
          .state;
        _appMain.isInitComplete() &&
          t === enums.AuthenticationState.STATE_AUTHENTICATED &&
          services.URL.processDeepLinkURL();
      }
    });
}
